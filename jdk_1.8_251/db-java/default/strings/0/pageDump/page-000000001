boolean isValidboolean inCharsboolean isSourceboolean allThereboolean initialCheckSecTerboolean checkSecTerboolean checkTertiaryboolean getsboolean gettboolean compareSecboolean compareTerboolean useDateFormatSymbolsboolean daylightboolean obeyCountboolean useFollowingMinusSignAsDelimiterboolean useSameNameboolean negateint phaseint digitTotalCountint effectiveDecimalPosint tenIndexint hundredIndexint leadingZerosAfterDecimalint hashcodeint statusIndexint formatNumberint braceStackint lastOffsetint runsToCopyint maximumArgumentNumberint patternOffsetint sourceOffsetint tempLengthint argumentNumberint oldMaxOffsetint newStrengthint contractOrderint realValueint mapValueint sOrderint tOrderint pSOrderint pTOrderint secOrderint terOrderint preSecIgnoreint tagcountint lastTagint prevTagint maxIntCountint beginOffsetint fieldIDint zoneIndexint tzstyleint nextTagint bestMatchLengthint bestMatchint dstAmountint actualStartint ambiguousTwoDigitYearint newStartint minusIndexint amountint nosint mosint nanosToSubtractint secsString[] numberElementsString[] segmentsString[] erasString[] monthsString[] weekdaysString[] ampmString[] zoneNameslong tickNanoslong millislong adjustlong daysAsSecslong hoursAsSecslong minsAsSecslong secondslong epochSeclong nanoAdjustmentlong secsToSubtractlong totalNanoslong hoursObject[] dataObject[] resultArrayObject[] emptyint[] newArgumentNumbersint[] valueListint[] tmpBufint[] stylesStringBuffer affixStringBuffer tempchar digitOnechar digitTenchar digitHundredchar digchar maxchar swapDate parsedDatebyte bitClumpbyte setBitbyte[] destboolean[] ambiguousYearshort secSOrdershort secTOrdershort terSOrdershort terTOrderBigInteger nanoschar[] sourcechar[] newDigitschar[] rStringBuilder onesegStringBuilder compiledCodeStringBuilder tmpBufferMessageFormat tempMessageFormat otherNumber resultFormat fmtFormat subFormatterFormat newFormatMap<String,Integer> mapMap<String,Integer> mSimpleDateFormat otherSimpleDateFormat thatTimeZone currentTimeZoneTimeZone ziDateFormat dfDecimalFormatSymbols dfsymsDecimalFormatSymbols otherFieldPosition otherNumberFormat otherNumberFormat numberFormatRuleBasedCollator resultRuleBasedCollator otherStringCharacterIterator thatStringCharacterIterator otherAttributedCharacterIterator subIteratorBigInteger[] divRemForm formInstant instantCalendarBuilder calbParsePosition tempStatusParsePosition parsePositionParsePosition otherVector<EntryPair> entryTableVector<EntryPair> groupListNumberFormatProvider providerDigitList otherDecimalFormatSymbolsProvider providerBinaryToASCIIConverter fdConverterPatternEntry tmpPatternEntry entryPatternEntry lastPatternEntry ePatternEntry otherArrayList<PatternEntry> extListStringBuilder[] segmentsFormat[] resultArrayFormat[] newFormatsArrayList<AttributedCharacterIterator> iteratorsRBTableBuilder builderComposedCharIter iterRuleBasedCollationKey otherTickClock otherDuration durationDuration otherFixedClock otherOffsetClock otherDateTimeException exDateTimeException ex2TemporalUnit unitString yearMatchString monthMatchString weekMatchboolean leapint nanoOfSecondint nvalint monthEndint marchDoy0int marchMonth0int dow0int newYearint newMonthint monthsint yearValueint monthValueint dayValueint absYearint dayOfMonthint secsOfDayint hamint newHourint mofdint newMofdint newMinuteint sofdint newSofdint newSecondint newNanoint hourValueint minuteValueint secondValueint nanoValueint nanoint leapint yearsint weeksint splitMonthsint totalSecondsint absTotalSecondsint absHoursint absMinutesint absSecondsint offsetSecsint offsetByteint yoeint moyint doyint awint adint dowInteger totalSecslong instantSecslong durlong nodlong secsDifflong nanosDifflong adjustmentlong epochDaylong zeroDaylong yearEstlong doyEstlong adjustCycleslong monthCountlong calcMonthslong mjDaylong packed1long packed2long totalMonthslong yearslong totallong localSecondlong localEpochDaylong totDayslong totNanoslong curNoDlong newNoDlong amountlong timePartlong nofdlong newNofdlong nanosUntillong thisEpochSeclong otherEpochSeclong offsetNanoslong unitAmountlong splitYearslong yearsUntillong monthsUntillong epochSecondlong monthslong weekslong dowlong epDaylong yoelong moylong domlong thisEpDaylong otherEpDaylong monthRangebyte monthbyte dayLong pMonthLong yoeLongLong eraLongLong oldMap<String,String> mapInstant endInstant otherInstant nowLocalDateTime endLocalDateTime otherLocalDateTime dtLocalDateTime adjustedLocalDateTime dateTimeZoneOffset offsetZoneOffset resultZoneOffset earlierOffsetZoneOffset laterOffsetLocalDate dateLocalDate endLocalDate calcDateLocalDate newDateLocalDate endDateLocalDate nowLocalTime timeLocalTime newTimeLocalTime endLocalTime otherLocalTime adjustedZoneId objZoneId otherZoneId zoneDuration unitDurChronoField fChronoUnit fValueRange domRangeValueRange rangeValueRange startRangeChronology temporalChronoChronology prevChronology chronoOffsetDateTime endOffsetDateTime otherOffsetDateTime odtZonedDateTime endZonedDateTime otherChronoLocalDate resolvedChronoLocalDate chronoDateChronoLocalDate dateChronoLocalDate endChronoLocalDate endDateEra eraObjZoneOffsetTransition transZoneRules rulesYear endMonth moyPeriod periodToAddPeriod periodToSubtractPeriod isoAmountPeriod otherOffsetTime endOffsetTime otherAbstractChronology chronoMonthDay otherYearMonth endYearMonth otherZoneRulesException exList<ZoneOffset> validOffsetsServiceLoader<AbstractChronology> loaderServiceLoader<Chronology> loaderHashSet<Chronology> chronosList<Era> erasD otherD cdChronoLocalDateTimeImpl<R> otherChronoLocalDateTime<D> endChronoPeriodImpl amountChronoPeriodImpl periodChronoPeriodImpl otherString calTypeString libDirString abbrString zeroString convertedString decimalString itTextString gmtTextString znameString zidString parsedZoneIdString subKeyString foundboolean standaloneboolean strictboolean isCaseSensitiveint epochMonthint day1int dateint ndxint epochMonthFirstint minYearint maxYearint isoStartint numMonthsint nvalueint monthDaysint gregorianYearint startYearint fieldIndexint prolepticYearint activeValueParserint preLenint endPosint effMinWidthint minEndPosint effMaxWidthint maxEndPosint parseLenint baseValueint outputScaleint effectiveMinint effectiveMaxint inNanoint minDigitsint secint successPosint totalSecsint outputint noOffsetLenint negativeint m1int regionIdsSizeint prefixLenint off0int koffString[] numberslong absValuelong initialValuelong rangelong lastPartlong basePartlong inSeclong yearParsedlong offsetSecsint[] dateInfoint[] ymdint[] monthsint[] epochMonthschar curchar nextNextCharbyte eraValueBigDecimal minBDBigDecimal rangeBDBigDecimal valueBDLong eraLong yearLong valueLongLong valueLong inSecsLong inNanosLong secValLong nanoValLong offsetSecsBigInteger totalBigPrivilegedActionException paxSet<String> regionIdsCalendar jcalMap<Long,String> dowMap<Long,String> moyMap<Long,String> copyLocalDateTime isoLDTZoneOffset zoneOffsetLocalDate localdateLocalDate isoDateParsePosition pposLocaleResources lrZoneId idDateTimeException ex1DateTimeException dteTextStyle styleTemporalAccessor temporalTemporalAccessor resolvedTemporalAccessor dtTemporalField fieldDateTimeParseException exChronology objPeriod periodChronoLocalDateTime<?> dateTimeHijrahChronology chronoSet<TemporalField> fieldsChronoLocalDateTimeImpl<?> cldtChronoZonedDateTimeImpl<R> otherChronoZonedDateTime<D> endMap<Integer,int[]> yearsHijrahDate dateHijrahDate endHijrahDate calcDateHijrahDate otherDateJapaneseEra jeraJapaneseEra eraJapaneseDate resultJapaneseDate otherDateCalendarDate firstDayCalendarDate dateEra sunEraDate jdateJapaneseEra[] erasMinguoDate otherDateThaiBuddhistDate otherDateCompositePrinterParser cppCompositePrinterParser ppCompositePrinterParser parserDateTimeParseContext contextDateTimeParseContext newContextDecimalStyle decimalStyleDateTimePrintContext contextTemporalQuery<?> queryLocaleStore storeDateTimePrinterParser ppNumberPrinterParser ppNumberPrinterParser basePPReducedPrinterParser ppDateTimeTextProvider providerMap<TextStyle,Map<Long,String>> mapEntry<String,Long> entryIterator<Entry<String,Long>> itPrefixTree treePrefixTree copyPrefixTree n1PrefixTree cPrefixTree n2Entry<Integer,SoftReference<PrefixTree>> entryMap<Locale,Entry<Integer,SoftReference<PrefixTree>>> cachedMap<Locale,String[]> perLocaleSoftReference<Map<Locale,String[]>> refEntry<Integer,PrefixTree> cachedString mzoneString groupIdString regionString zoneIdObject storeObject ruleObject infoint matchLenint nameLenint fieldValueint calendarStyleint eraint wdayint changedCountint excessDaysint mohValint nosValint hodValint somValint qoyint wbyint newWbyint weekint doy0int doyThu0int alignedWeekint firstThuDoy0int firstMonDoy0int dowValueint curDowint dowDiffint daysDiffint calDowint minDaysint ldowint yearLenint newYearWeekint sowint isoDowint weekStartint newValint currentValint idowint wowbyint newValueint checkedValueint startDowint monthValidint womIntint yowbyint storeint hiByteint midByteint loByteint versionCountint regionCountint ruleCountint versionRegionCountint timeSecsint stdOffsetint beforeDiffint afterDiffint timeByteint stdOffsetByteint beforeByteint afterByteint dowByteint dataint stdByteint stdSizeint savSizeint ruleSizeint lastHistoricYearString[] regionArrayInteger yearObjlong chlong aplong haplong codlong lodlong sodlong modlong noslong coslong loslong hodlong mohlong somlong mohVallong somVallong nosVallong instantlong val1long qoylong yearlong curValuelong doqlong wowbylong isoDowlong monthlong totlong translong lastHistoricObject[] ruleArrayObject[] rchar positiveSignchar negativeSignT[] rIterator<E> itlong[] stdTranslong[] savTransLong hodLong mohLong somLong nosLong yearLongLong qoyLongLong wbyLongLong dowLongRuntimeException ex2ResourceBundle rbMap<String,Integer> displayNamesMap<Long,String> mapEntry<Long,String> entryLocale[] lDecimalFormatSymbols oldSymbolsServiceConfigurationError exLocalDateTime localDTLocalDateTime transitionLocalDateTime dtBeforeLocalDateTime dtAfterLocalDateTime localTransitionZoneOffset beforeZoneOffset afterZoneOffset stdZoneOffset offsetBeforeZoneOffset offsetAfterZoneOffset standardOffsetZoneOffset actualOffsetZoneOffset lastHistoricOffsetLocalDate resolvedLocalDate inputLocalDate outputSet<Locale> localesZoneId overrideZoneZoneId temporalZoneZoneId effectiveZoneTextStyle textStyleTemporal tempTemporalAccessor resolvedObjectTemporalField targetFieldUnsupportedTemporalTypeException exValueRange otherValueRange dayRangeValueRange fieldRangeWeekFields weekDefWeekFields rulesDayOfWeek dowDateTimeFormatter formatterDateTimeFormatter oldChronology bestMatchChronology overrideChronoChronology effectiveChronoChronoLocalDate effectiveDateZoneOffsetTransition dZoneRules otherMonth monthChronoLocalDateTime<?> cldtChronoZonedDateTime<?> czdtChronoZonedDateTime<?> zdtZoneRulesProvider providerZoneRulesProvider pZoneRulesProvider oldList<ZoneOffset> localTransitionOffsetListSet<Chronology> chronosEntry<TemporalField,Long> entryDecimalStyle infoDecimalStyle otherParsed parsedParsed clonedMap<TextStyle,Map<Long,String>> styleMapConsumer<Chronology> lConsumer<Chronology>[] tmpConsumer<Chronology>[] listenersR resultEntry<TemporalField,Locale> keyList<Entry<String,Long>> listList<Entry<String,Long>> allListEntry<TextStyle,Map<Long,String>> vtmEntryMap<TextStyle,List<Entry<String,Long>>> mapMap<String,Entry<String,Long>> reverseIterator<Entry<TemporalField,Long>> itZoneOffsetTransitionRule otherZoneOffsetTransitionRule ruleTreeMap<String,ZoneRules> mapTimeDefinition defnZoneOffsetTransition[] transArrayZoneOffset[] stdOffsetsZoneOffset[] savOffsetsZoneOffsetTransitionRule[] rulesZoneOffsetTransitionRule[] ruleArrayList<ZoneOffsetTransition> listList<LocalDateTime> localTransitionListList<ZoneRulesProvider> loadedIterator<ZoneRulesProvider> itServiceLoader<ZoneRulesProvider> slObject o2Object tboolean anyToRemoveint newCapint cSizeint headPortionLenint frontint minExpandint numMovedint numNewint expectedModCountint mcint removeCountint orgint fncint reforkint pinint loutint destLowint destHighint midValint midBitsint keyBitsfloat midVallong pinlong loutlong midVallong midBitslong keyBitsCollection<?> cObject[] elementsObject[] elementDataObject[] auxV oldValueEntry<K,V> eEntry<K,V> correctEntryCollection<V> valsSet<K> kschar midValE eE nextE previousE o1ListIterator<E> itListIterator<E> e1byte midValNoSuchElementException excE oldValueE resultE elementshort midValdouble pindouble loutdouble midVallong[] aComparable<> midValE oldValE outCastListIterator<E> edouble[] aClassCastException unusedNullPointerException unusedBitSet removeSetMap<?,?> mIntBinaryOperator fnLongBinaryOperator fnDoubleBinaryOperator fnListIterator<?> e2E xArrayList<?> vAbstractMap<?,?> resultArrayDeque resultIterator<Entry<K,V>> iEntry<? extends K,? extends V> eIterator<? extends E> e2E objIterator<E> iArrayList<E> lstE[] elementDataCumulateTask tCumulateTask ltCumulateTask rtCumulateTask fCumulateTask parT pinT loutT sumBinaryOperator<T> fnT[] aLongCumulateTask tLongCumulateTask ltLongCumulateTask rtLongCumulateTask fLongCumulateTask parDoubleCumulateTask tDoubleCumulateTask ltDoubleCumulateTask rtDoubleCumulateTask fDoubleCumulateTask parIntCumulateTask tIntCumulateTask ltIntCumulateTask rtIntCumulateTask fIntCumulateTask parT midValT[] auxObject o1Object elementObject e1Object e2boolean elementboolean eqint elementHashint iMaxint wbint lnint rnint lfint rfint lhint rmint lmint alint arint spint sl0int sp0int dp0int pos0int paddingsint shifttoint nBits24int oldOffint requestint wordsRequiredint wordIndexint startWordIndexfloat elementfloat splitfloat alfloat arlong elementlong splitlong allong arClass<?> eClassint[] wint[] base64char splitchar alchar arbyte elementbyte splitbyte albyte arbyte[] copybyte[] wbyte[] dstbyte[] srcboolean[] copyshort elementshort splitshort tshort alshort ardouble elementdouble splitdouble aldouble arlong[] wlong[] wordsshort[] copyshort[] ashort[] wchar[] copychar[] wchar[] base64float[] copyfloat[] afloat[] wdouble[] copydouble[] wCountedCompleter<?> sT[] wComparator<? super T> cT[] copyE[] aRelay fcRelay rcRelay bcMerger mT splitT alT arString caltypeString calendarTypeString homeDirString propsFileString dataFileObject tmpObject kboolean wordAlignedint endWordIndexint targetWordsint sourceIndexint wordsInCommonint endOfRunint baseStyleint fieldMaskint dowStampint monthStampint domStampint womStampint dowimStampint doyStampint woyStampint bestStampint hourOfDayStampint hourStampint otheritemsint endValueint newStampint weekOfMonthint srcSizeint cycleStartint nMovedint sourceSizeint targetSizeint maxCandidateint c1sizeint c2sizeint tlenint stackLenint nRemainingint minRunint initRunLenint runLenint forceint runHiint base1int base2int lastOfsint maxOfsint cursor1int cursor2int destint minGallopint tmpBaseint scCountint ocCountint tableEntryint defaultFractionDigitsint numericCodeint numericint monint mdayint millisint wstint tzoffsetint zoneOffsetint hhint mmint msString[] stringsString[] retObjectInputStream inputlong firstWordMasklong lastWordMasklong wordlong htCollection<?> containsCollection<?> iterateObject[] destObject[] tmpIterator<E> eachint[] runchar char1char char2char finalCharListIterator<> fwdListIterator<> revbyte odddouble velvellong[] retComparable<> pivotBitSet resultBitSet setMap<String,Integer> namesIterator<?> itrSet<?> sSet<?> thatEntry<?,?> tPattern propertiesPatternListIterator<?> siListIterator<?> tiParseException exSimpleDateFormat formatCalendar thatCalendar workCalendar otherTimeZone savedZoneDateFormat formatterRuntimePermission permGregorianCalendar gcalGregorianCalendar gcRandom rndFileReader frArrayStoreException ignoreDateFormatSymbols symbolsCurrency instanceCurrency currencyValSimpleTimeZone stzBaseCalendar calBaseCalendar ncalCalendarSystem calComparableTimSort tsZoneInfo ziCalendarProvider providerT displacedComparable<? super T> midValListIterator<? extends Comparable<? super T>> iListIterator<? extends T> iListIterator<? super T> itrListIterator<? extends T> siListIterator<? super T> diT candidateT nextIterator<? extends T> iListIterator<T> itrSpliterator<Entry<K,V>> splitEntry<K,V> lowerEntry<K,V> floorEntry<K,V> ceilingEntry<K,V> higherEntry<K,V> firstEntry<K,V> lastE[] zListIterator<E> iV newValueList<Entry<K,V>> checkedClass<V> valueTypeT[] arrIterator<Entry<K,V>> itEntry<K,V> entryCopiesList<?> otherArrayList<T> lT elementSet<Currency> resultDate udateDate ldateString tTObject emValueObject hisValueObject ourValueboolean padint aoint boint miint seventhint e3int e2int e1int e4int e5int lessint greatint aiint pivot1int pivot2int akint entriesToBeWrittenint lastoint newWint expRoundedfloat akfloat middleValuefloat aifloat lastfloat a1float a2float pivot1float pivot2float pivotlong ailong a1long a2long pivot1long pivot2long aklong pivotint[] countchar aichar a1char a2char pivot1char pivot2char akchar pivotbyte aishort aishort lastshort a1short a2short pivot1short pivot2short akshort pivotdouble akdouble middleValuedouble aidouble lastdouble a1double a2double pivot1double pivot2double pivotlong[] blong[] tshort[] bshort[] tchar[] vachar[] mantchar[] expfloat[] bfloat[] tdouble[] bdouble[] tEnumMap resultV ourValueSet<Entry<K,V>> esCollection<V> vsEnumMap<K,? extends V> emDecimalFormatSymbols dfsFormatter fmtEnumMap<?,?> emEnum<?>[] universeEnumSet<E> resultE firstFormattedFloatingDecimal fdFormatString fsFormatString[] fsaArrayList<FormatString> alFlags dupfFlags flagsString fsboolean upperboolean needDotboolean leastZeroboolean roundboolean stickyboolean gregorianboolean isCutoverYearint outPrecint shiftDistanceint iexpint origPrecint nzerosint compPrecint grpSizeint y_amountint unitint hourOfDayint savingint monthLenint yearLengthint woyint weekYearint monthLengthint lastDaysint v2int fieldsForFixedMaxint normalizedYearint maxDayOfYearint nDaysFirstWeekint ndaysint dow1int dayOfYearint minimalDaysint minDayOfYearint delint timeOfDayint cutoverGapint cutoverYearint relativeDayOfMonthint realDayOfYearint prevYearint nextYearint normalizedDayOfPeriodint tzMaskint gmtOffsetint dowimint lastDateint binCountint oldCapint oldThrint newThrfloat ftlong newSigniflong roundingBitslong signBitlong abslong ilong cutoverTimelong timeOfDaylong fdlong fd2long day1long month1long monthDay1stlong nfdlong jan1long dowFirstlong mon1long nextJan1long monthEndlong currentlong maxEndlong fixedDatelong fixedDateJan1long fixedDateMonth1long fixedDec31long prevJan1long nextJan1stlong fixedDay1stlong gfdlong jfdlong firstDayOfWeeklong next1K kNode<K,V> eNode<K,V> firstNode<K,V> pNode<K,V> loHeadNode<K,V> loTailNode<K,V> hiHeadNode<K,V> hiTailNode<K,V> nextNode<K,V> nodeNode<K,V> candidateTreeNode<K,V> hdTreeNode<K,V> tlTreeNode<K,V> pNode<K,V>[] tabNode<K,V>[] oldTabNode<K,V>[] newTabint[] remchar grpSepchar decSepType[] tsType[] asBigDecimal vBigDecimal tenToTheNegFourBigDecimal tenToThePrecStringBuilder tsbLocale ltParameterizedType pTimeZone zoneGregorianCalendar otherGregorianCalendar calZoneId zidDateTimeException xBaseCalendar julianCalBaseCalendar cocalBaseCalendar calForJan1BaseCalendar juliancalCalendarSystem mincalCalendarDate dEra eDate gCutoverDate jLastDateFlags fFlags vBigDecimalLayout bdlboolean searchedboolean cint bucketsint mappingsint phint hcint origlengthint elementsint deletedSlotint siV oldV resultfloat lffloat fcfloat loadFactorHashMap resultObject[] tabObject[] oldTableObject[] newTableObject[] tNode<K,V> oldTreeNode rTreeNode pTreeNode plTreeNode prTreeNode qTreeNode rootTreeNode xTreeNode nextTreeNode xpTreeNode chTreeNode firstTreeNode rlTreeNode succTreeNode predTreeNode replacementTreeNode sTreeNode slTreeNode srTreeNode ppTreeNode spTreeNode bTreeNode loHeadTreeNode loTailTreeNode hiHeadTreeNode hiTailTreeNode eTreeNode<K,V> tNode<K,V>[] tClass<?> kcHashSet newSetHashtable<?,?> tMap<?,?> tTreeNode<K,V> tpTreeNode<K,V> trTreeNode<K,V> tbTreeNode<K,V> tnTreeNode<K,V> xpTreeNode<K,V> xplTreeNode<K,V> xprTreeNode<K,V> slTreeNode<K,V> srTreeNode<K,V> xppTreeNode<K,V> xpplTreeNode<K,V> xpprTreeNode<K,V> lTreeNode<K,V> ppTreeNode<K,V> lrTreeNode<K,V> rTreeNode<K,V> rlK pkNode<K,V> hdNode<K,V> tlNode<K,V> qNode<K,V> xpnNode<K,V> rnTreeNode<K,V> firstTreeNode<K,V> rpEntry<?,?> etEntry<?,?>[] tabEntry<?,?>[] oldMapEntry<?,?>[] newMapEntry<?,?>[] tEntry<K,V> oldEntry<K,V> prevEntry<K,V>[] tabEntry<Object,Object> entryStackIdentityHashMap<?,?> mIterator<K> iIterator<V> iIdentityHashMap<K,V> mString scriptString subtagString langTagString language3String country3String languageNameString scriptNameString countryNameString displayNamePatternString listPatternString listCompositionPatternString mainNameboolean isTransitionYearboolean transitionYearboolean lboolean sboolean eint eraIndexint nextEraIndexint wrongValueint firstDayOfMonthint transitionYearint toIndexint eOrdinalint eWordNumint codeLengthint tableLengthint numNamesString[] isoTableString[] variantNamesString[] qualifierNameslong fddlong jan0long sincelong transitionlong fd1long transitionFixedDatelong todlong oldElementslong eltObject[] displayNamesListIterator<E> liLinkedList cloneNode<E> fNode<E> newNodeNode<E> lNode<E> predNode<E> nextNode<E> prevNode<E> xNode<E> succNode<E> lastNextSet<Integer> valuesHashMap<String,Object> tempList<String> subtagsResourceBundle parentEntry<K,V> bEntry<K,V> aEntry<K,V> pEntry<K,V> qEntry<K,V> tLocale thatArrayList<String> namesCalendarDate transitionDateCalendarDate jdCalendarDate transitionCalendarDate d1CalendarDate dxCalendarDate pdCalendarDate cdEra eraDate lgdDate jdDate realDateEra[] esJapaneseImperialCalendar jcJapaneseImperialCalendar otherJumboEnumSet resultJumboEnumSet<?> esLinkedList<E> lstNode<E> pBaseLocale baseBaseLocale baselocBaseLocale otherBaseInternalLocaleBuilder bldrLanguageTag tagLocaleExtensions extsLocaleKey keyLocaleKey otherString newItemString extStrString svalString bundleNameString radixDigitsString digitString groupedNumeralString numeralString javaStyleIntegerString negativeIntegerString positiveIntegerString decimalNumeralString nonNumberString positiveFloatString negativeFloatString hexFloatString positiveNonNumberString negativeNonNumberString signedNonNumberString lineSepObject curValueObject ovalboolean isIllFormedboolean hasSepboolean precedingBackslashboolean skipWhiteSpaceboolean isCommentLineboolean isNewLineboolean appendedLineBeginboolean skipLFboolean isKnownControlboolean isBaseBundleboolean expiredBundleboolean isNorwegianBokmalboolean isNorwegianNynorskboolean reloadFlagboolean foundNextDelimint keyLenint valueStartint outLenint oldMaskint newMaskint rndint tokenEndint bufferLimitint horizonLimitint searchLimitint endPositionint horizonForLineint sufLenString[] listItemsString[] newListString[] subtagsV curValuefloat vallong bitsWeightlong nextlong oldseedlong nextseedlong flong blong seedVallong expirationTimelong ttllong lastModifiedObject[] arrLocalStringBuffer outBufferClassLoader ldClassLoader classLoaderdouble v1double v2double sdouble multiplierdouble oBigInteger valchar[] charArraychar[] convtBufchar[] outchar[] uuCharBuffer newBufStringBuilder inASCIIList<String> formatsList<String> variantsResourceBundle bundleResourceBundle baseBundleResourceBundle pMessageFormat formatAtomicLong seedLocale targetLocaleLocale defaultLocaleEnumeration<String> enumKeysHashtable<String,String> hPattern bpPattern spPattern lpHashtable<String,Object> hLinkageError errorJarEntry entControl controlPropertyPermission thatPropertyPermission ppPropertyPermission existingPropertyPermission xLocaleExtensions extensionsLocaleSyntaxException eParseStatus stsLanguageRange otherList<Locale> candidateLocalesList<Locale> tmpListList<Locale> bokmalListList<Locale> nynorskListList<Locale> listOptional<?> otherOptional<T> tOptionalDouble otherOptionalInt otherOptionalLong otherE movedPriorityQueue<? extends E> pqSortedSet<? extends E> ssComparable<? super E> keyPriorityQueue<E> qXmlPropertiesProvider providerIterator<XmlPropertiesProvider> iteratorHashtable<String,PropertyPermission> permissionsRegularEnumSet<?> esResourceBundleControlProvider providerCacheKey otherEntryCacheKey cloneCacheKey cacheKeyCacheKey constKeyCacheKey keyList<ResourceBundleControlProvider> listBundleReference bundleRefBundleReference resultSet<CacheKey> setServiceLoader<ResourceBundleControlProvider> serviceLoadersClass<? extends ResourceBundle> bundleClassMatchResult mrString lnString tzidString zoneIDString gmtOffsetIDboolean taskFiredint timeint initialLengthint currposint rawoffsetint dstoffsetint countDelimint keyHashint valueHashString[] componentslong executionTimelong msblong lsblong mostSigBitslong leastSigBitslong hiloint[] timesbyte[] rulesbyte[] seedBytesbyte[] randomBytesbyte[] md5BytesClassLoader prevBigDecimal valPrivilegedAction<Boolean> actionTreeSet cloneComparator<?> cComparator<?> ccComparator<? super E> mcComparator<? super E> cEntry<K,V> chEntry<K,V> parentEntry<K,V> rEntry<K,V> lEntry<K,V> yEntry<K,V> replacementEntry<K,V> sEntry<K,V> sibEntry<K,V> leftEntry<K,V> middleEntry<K,V> rightEntry<K,V> resultNavigableMap<K,V> kmComparator<? super K> cprTimeZone defaultZoneTimeZone otherSecureRandom ngTimerTask taskTimerTask tmpTreeMap<?,?> cloneEntry<?,?> nodeOfInt iS pSimpleTimeZone thatDate cdateOfLong iOfDouble iPrivilegedAction<S> actionT eHoldingConsumer<T> holderHoldingIntConsumer holderHoldingLongConsumer holderHoldingDoubleConsumer holderSplittableRandom rT[] newArrayT[] tmpT pivotTimSort<T> tsKeySet<K> nksEntrySet esComparable<? super K> kNavigableMap<K,V> mvKeySet<K> nksvEntry<K,V> nEntry<K,V> nodeEntry<K,V> fEntry<K,V> plTreeMap<K,V> tEntry<E,?> eEntrySetView<> esNavigableSubMap<K,?> smTreeMap<K,Object> tDescendingSubMap<K,?> dmTreeMap<K,?> tmEntry<K,V> prComparable<? super K> k1TreeMap<E,Object> mapTreeMap<E,Object> tmSortedSet<? extends E> setUUID idObject k2Object v2boolean passedGoint newElementCountint elementCountint numKeysToBeAddedint targetCapacityint ntasksint activeint putIndexint takeint probesint takeIndexint cyclesint prevCyclesint prevTakeIndexint lastRetint cycleDiffint removedDistancelong dequeuesClass<?> kVector vRuntimeException rexEntry<K,V> nextEntry<K,V> candidateEntry<K,V>[] oldTableEntry<K,V>[] newTableEntry<K,V>[] tExecutor eReentrantLock lockUnsafe uExecutionException eexExecutionException ignoreTimeoutException cannotHappenTimeoutException toeVector<E> lstV v1K k1WeakHashMap<K,V> mList<Entry<K,V>> listRunnableFuture<Void> ftaskRunnableFuture<T> ftaskIterator<? extends Callable<T>> itFuture<T> fArrayList<Future<T>> futuresExecutorCompletionService<T> ecsCallable<T> tRunnableFuture<T> fCancellationException ignoreE lastItemItr itNode oNode sweeperCompletableFuture dCompletableFuture gCompletableFuture<Void> dCompletableFuture<?> fCompletableFuture<?> dCompletableFuture<?> bCompletableFuture<?> aCompletion hCompletion tCompletion pCompletion qCompletion sT trR rrCompletableFuture<V> dBiCompletion<?,?,?> cS ssCompletableFuture<V> gS sUniExceptionally<T> cUniWhenComplete<T> cCompletableFuture<T> aUniApply<T,V> cUniAccept<T> cUniRun<T> cCompletableFuture<T> dUniHandle<T,V> cUniRelay<T> copyUniCompose<T,V> cUniRelay<V> copyCompletableFuture<U> bBiApply<T,U,V> cBiAccept<T,U> cBiRun<T,?> cBiRelay<?,?> cOrApply<T,U,V> cOrAccept<T,U> cOrRun<T,?> cObject uObject mkObject mvboolean queuedboolean triggeredboolean cancelledboolean validatedboolean insertAtFrontboolean uncontendedboolean advanceboolean finishingboolean collideboolean initboolean waitingint spinsint ehint fhint sshiftint ssizeint segmentShiftint segmentMaskint scint rsint nextnint nextBoundint runBitThread wlong addedlong szClass<?> ckClass<?> akRunnable fK ekK qkV oldValV evV pvV valNode eNode<K,V> fNode<K,V> predNode<K,V> rNode<K,V> enNode<K,V> lnNode<K,V> hnNode<K,V> lastRunNode<K,V> bNode<K,V>[] ntNode<K,V>[] nextTabKeySetView<K,V> ksSet<?> cCompletableFuture<U> dCompletableFuture<Object> dOrRelay<?,?> cSupplier<T> fSignaller qEntrySetView<K,V> esValuesView<K,V> vsCounterCell aCounterCell rCounterCell[] asCounterCell[] rsTraverser<K,V> itTableStack<K,V> sTableStack<K,V> nextTreeNode<K,V> loTreeNode<K,V> loTailTreeNode<K,V> hiTreeNode<K,V> hiTailTreeBin<K,V> tTreeNode<K,V> xTreeNode<K,V> nextTreeNode<K,V> qTreeNode<K,V> chTreeNode<K,V> fTreeNode<K,V> predTreeNode<K,V> replacementTreeNode<K,V> plTreeNode<K,V> prTreeNode<K,V> sTreeNode<K,V> spK eConcurrentHashMap<K,V> mIterator<V> itSegment<K,V>[] segmentsForwardingNode<K,V> fwdboolean isLastboolean hasItemint hopsIntBinaryOperator reducerLongBinaryOperator reducerDoubleBinaryOperator reducerCountedCompleter<?> cBiConsumer<? super K,? super V> actionU uBiFunction<? super K,? super V,? extends U> transformerConsumer<? super U> actionBiFunction<? super K,? super V,? extends U> searchFunctionAtomicReference<U> resultMapReduceMappingsTask tMapReduceMappingsTask sU rU trU srBiFunction<? super U,? super U,? extends U> reducerMapReduceMappingsToDoubleTask tMapReduceMappingsToDoubleTask sToDoubleBiFunction<? super K,? super V> transformerMapReduceMappingsToLongTask tMapReduceMappingsToLongTask sToLongBiFunction<? super K,? super V> transformerMapReduceMappingsToIntTask tMapReduceMappingsToIntTask sToIntBiFunction<? super K,? super V> transformerConsumer<? super K> actionFunction<? super K,? extends U> transformerFunction<? super K,? extends U> searchFunctionReduceKeysTask tReduceKeysTask sK rK uK trK srBiFunction<? super K,? super K,? extends K> reducerMapReduceKeysTask tMapReduceKeysTask sMapReduceKeysToDoubleTask tMapReduceKeysToDoubleTask sToDoubleFunction<? super K> transformerMapReduceKeysToLongTask tMapReduceKeysToLongTask sToLongFunction<? super K> transformerMapReduceKeysToIntTask tMapReduceKeysToIntTask sToIntFunction<? super K> transformerConsumer<? super V> actionFunction<? super V,? extends U> transformerFunction<? super V,? extends U> searchFunctionReduceValuesTask tReduceValuesTask sV rV trV srBiFunction<? super V,? super V,? extends V> reducerMapReduceValuesTask tMapReduceValuesTask sMapReduceValuesToDoubleTask tMapReduceValuesToDoubleTask sToDoubleFunction<? super V> transformerMapReduceValuesToLongTask tMapReduceValuesToLongTask sToLongFunction<? super V> transformerMapReduceValuesToIntTask tMapReduceValuesToIntTask sToIntFunction<? super V> transformerConsumer<? super Entry<K,V>> actionFunction<Entry<K,V>,? extends U> transformerFunction<Entry<K,V>,? extends U> searchFunctionReduceEntriesTask tReduceEntriesTask sEntry<K,V> trEntry<K,V> srBiFunction<Entry<K,V>,Entry<K,V>,? extends Entry<K,V>> reducerMapReduceEntriesTask tMapReduceEntriesTask sMapReduceEntriesToDoubleTask tMapReduceEntriesToDoubleTask sToDoubleFunction<Entry<K,V>> transformerMapReduceEntriesToLongTask tMapReduceEntriesToLongTask sToLongFunction<Entry<K,V>> transformerMapReduceEntriesToIntTask tMapReduceEntriesToIntTask sToIntFunction<Entry<K,V>> transformerE itemNode<E> hNode<E> qNode<E> tNode<E> activePredNode<E> activeSuccNode<E> oNode<E> beginningOfTheEndNode<E> lastArrayList<E> listConcurrentLinkedDeque<E> qArrayList<E> alConcurrentLinkedQueue<E> qboolean tiint oldLevelint insertionLevelint prefixint commonint addedObject[] newElementsObject[] snapshotObject[] currentObject[] tempObject[] csClass<?> tkCopyOnWriteArrayList cloneE[] esConcurrentSkipListMap cloneV vvV pSimpleImmutableEntry<K,V> eComparator<? super K> cmpNode<K,V> nNode<K,V> zNode<K,V> oldbaseNode<K,V> basepredNode<K,V> lHeadIndex<K,V> hHeadIndex<K,V> newhHeadIndex<K,V> dHeadIndex<K,V> eIndex<K,V> qIndex<K,V> rIndex<K,V> dIndex<K,V> idxIndex<K,V> tConcurrentNavigableMap<K,V> dmValues<V> vsEntrySet<K,V> esKeySet<K> ksIndex<K,V>[] idxsArrayList<Index<K,V>> predsIterator<? extends Entry<? extends K,? extends V>> itV1 vK lastK tkK fK skIndex<K,V> sConcurrentSkipListSet cloneEntry<E,Object> eboolean ranActionboolean wasInterruptedboolean addboolean canBlockboolean moveboolean submittedint nextcint parint oldjint vsint seedint originint oldSumint checkSumint predint nbusyint amThread thisThreadThread wtThread pThrowable rexlong timeLeftlong jlong nslong nclong prevctllong parkTimelong mslong oldSumlong checkSumClass<?> ekClass<?> nkClass<?> wkboolean[] matchedRunnable commandAtomicLong scState sUncaughtExceptionHandler handlerForkJoinPool pForkJoinPool poolCountedCompleter<?> aCountedCompleter<?> pCountedCompleter<?> tCountedCompleter<?> rCountedCompleter<?> ccForkJoinTask<?> xForkJoinTask<?> tForkJoinTask<?> subtaskForkJoinTask<?> nextForkJoinTask<?> psForkJoinTask<?> prevJoinForkJoinTask<?>[] aForkJoinTask<?>[] oldACopyOnWriteArraySet ccForkJoinWorkerThread wtForkJoinWorkerThread threadWorkQueue wWorkQueue vWorkQueue qWorkQueue jGeneration gNode qNode[] aRunnableFuture<V> fForkJoinWorkerThreadFactory facWorkQueue[] wsString fpString hpObject exboolean completedboolean ranboolean signalNotFullboolean dboolean isDataint parallelismint countsint unarrivedint nextUnarrivedint nextPhaseThrowable wxlong nplong qtlong qslong stlong tglong gpClass<?> gkClass<?>[] psConstructor<?> noArgCtorConstructor<?>[] csPermissions innocuousPermsAtomicInteger countThreadGroup parentClass<? extends Throwable> ecReentrantLock takeLockReentrantLock putLockNode<E> nNode<E> nodeNode<E> sThreadLocalRandom randomYieldsForkJoinTask<?> jobCallable<V> cNode<E> firstNode<E> trailForkJoinWorkerThreadFactory factoryForkJoinTask<T> jobForkJoinTask<T> fExceptionNode eExceptionNode predExceptionNode nextExceptionNode[] tList<? extends ForkJoinTask<?>> tsWaitNode qWaitNode nextWaitNode predWaitNode sLinkedBlockingDeque<E> qLinkedBlockingQueue<E> qNode sNode hNode predNode tNode uNode bNode lastRetNode hnLinkedTransferQueue<E> qPhaser rootString secString rsboolean heapifyboolean screenboolean periodicboolean keepDelayedboolean keepPeriodicboolean fairboolean workerStartedboolean workerAddedboolean timedOutboolean timedboolean completedAbruptlyint partiesint lastUnarrivedint minCapint wcint recheckint nworkersint nactiveThrowable thrownlong headDelaylong seedlong keepAliveTimelong ncompletedlong prevInterruptedException retryConcurrentModificationException fallThroughRunnable taskError xPrivilegedAction<Void> paArrayList<Runnable> taskListList<Runnable> tasksIterator<Runnable> itNoSuchFieldError errorReentrantLock mainLockThreadLocalRandom rngDelayed headBlockingQueue<Runnable> qPhaser parentQNode nodeQNode qAtomicReference<QNode> headComparator<? super E> cmpPriorityBlockingQueue<? extends E> pqComparable<? super T> keyRunnableScheduledFuture<?> tRunnableScheduledFuture<?> eRunnableScheduledFuture<?> cRunnableScheduledFuture<?> replacementRunnableScheduledFuture<?> xRunnableScheduledFuture<?> firstScheduledFutureTask<?> xRunnableScheduledFuture<Void> tScheduledFutureTask<Void> sftRunnableScheduledFuture<V> tSNode sSNode hSNode mSNode mnSNode pastSNode pSNode nQNode hQNode sQNode tQNode tnQNode mQNode hnQNode dpQNode snQNode dQNode dnWorker wString qboolean timedoutboolean freeint wsint interruptModeint savedStateThread stThread firstThreadThread ttThread olong savedStatelong abstimelong nanosTimeoutClass<?> fieldClassClass<?> skV prevV nextLongAdder aPair<V> pairPair<V> currentE prevDoubleAccumulator aCell aCell rCell[] asCell[] rsDoubleAdder aLongAccumulator aNode predNextNode trailNode wArrayList<Thread> listHoldCounter rhString vernameString unameString localJavaHomeString implNameString tmpDirString localizedNameString cachedLocalizedNameString lnameString headString levsString handsObject ecxObject evObject listenerboolean lineContinuedboolean includeUnsignedboolean matchUnsignedboolean hasUnsignedboolean skipEmptyLinesboolean fileCreatedboolean availableboolean sawgboolean sawuboolean isRecursiveInitializationboolean requiresDefaultLoggersboolean useParentint ecountint acountint tposint maxposint retriesint levelValueint ix2IOException ixFile f1File f2Exception ex2Entry<Object,Object> elong readersClass<?> implClass<?> clzFileOutputStream foutInputStream sbyte[] vbbyte[] lastlinebyte[] edatabyte[] lbufbyte[] tbufLevel oldLevelLevel levelObjectLevel levelLevel lxLevel otherLevel lLogger globalLogger resultLogger newLoggerLogger sysLoggerLogger loggerLogger lLogger parentResourceBundle catalogMissingResourceException exLocale rbLocaleLocale newLocaleBufferedInputStream binEnumeration<String> unsignedEnumeration<String> enum2Entry<?,?> meZipEntry zeZipEntry eBufferedOutputStream boutJarEntry manEntryJarEntry jeManifest mAttributes resultPath lockFilePathEnumeration<? extends ZipEntry> enum_SignatureException seFileChannel channelComparator<String> cCodeSigner[] codeSignersCodeSigner[] matchCodeSigner[] forManCodeSigner[] forNameOverlappingFileLockException xFileAlreadyExistsException ixWNode hWNode qWNode tWNode nodeWNode pWNode hdWNode npWNode ppWNode cWNode nhWNode rWNode predWNode succReadWriteLockView vWriteLockView vReadLockView vFastInputStream fisIterator<Entry<Object,Object>> itManifestEntryVerifier mevSignatureFileVerifier sfvCodeSource[] sourcesEnumeration<JarEntry> entriesList<CodeSigner[]> reqList<CodeSigner[]> signersReqMap<String,CodeSigner[]> mapMap<CodeSigner[],CodeSource> mapEntry<String,CodeSigner[]> eIterator<SignatureFileVerifier> itVerifierCodeSource vcsVerifierCodeSource thatList<CodeSource> sourcesList<CodeSource> sourceListIterator<Entry<String,CodeSigner[]>> itorHashSet<CodeSigner[]> setEntry<String,Attributes> eIterator<Entry<String,Attributes>> itLogManager managerLogManager mgrLogManager ownerHandler hdlFilter filterInitializationErrorManager emKnownLevel levelKnownLevel oKnownLevel lList<KnownLevel> listList<KnownLevel> levelsClass<? extends Level> typeJavaAWTAccess javaAwtAccessLoggerContext contextLoggerContext cxList<LoggerContext> cxsMap<Object,Integer> listenersEntry<Object,Integer> entryHandler[] targetsLogNode nodeLogNode nodepLogNode childLogNode nLoggerWeakRef refLoggerWeakRef nodeRefString ebnameString rbNameString handlerNameString targetNameString throwableString kidString USER_NAMEString systemPrefsDirNameString factoryNameString platformFactoryString mapVersionString gnameString eaString combiningMarksString otherCharsString firstTwoCharactersboolean lookingForLoggerboolean isLoggerImplboolean useParentHdlsboolean canReplaceResourceBundleboolean userNodeboolean sharedboolean usernodeboolean matchLimitedboolean inCharClassboolean beginQuoteint newLevelValueint aLenint numFullGroupsint numBytesInPartialGroupint inCursorint byte0int sLenint missingBytesInLastGroupint outCursorint ch0int numRunsint highByteint lowByteint permint lockHandleint pkgEndIndexint numXmlKidsint parentGroupCountint nextSearchIndexint refNumint nextDigitint newRefNumint slashEIndexint lastCodePointint nCodePointsint pLenString[] kidNamesString[] permsString[] subResultfloat resultFile lockFilelong tidlong newLastSyncTimelong nmtlong lastModifiedTimeint[] combClassint[] newtempNoSuchMethodException xbyte[] alphaToIntClassLoader callersClassLoaderLogger rootLogger kidLogger targetLogger pLong newModTimechar[] intToAlphaInvocationTargetException xStringBuilder gsbStringBuilder newPatternStringBuilder sequenceBufferStringBuilder charClassStringBuilder eqSet<String> sStringWriter swEnumeration<?> enum_ResourceBundle bMap<String,String> mLogRecord lrLogRecord recordLocale currentLocaleNodeList xmlKidsNodeList entriesArrayList<String> arrayArrayList<String> matchListEventObject eventEnumeration<String> loggersFile[] dirContentsFile[] junkEntry<String,String> eList<Object> paramsMatcher resultElement preferencesElement xmlRootElement mapElement entryElement xmlKidElement firstXmlKidElement xmlMapElement xeTransformer tTransformerFactory tfDocumentType dtDOMImplementation diIterator<Entry<String,String>> iStackOverflowError soeJavaLangAccess accessFilter theFilterHandler[] loggerHandlersIterator<LogNode> valuesLoggerBundle lbLoggerBundle trbIterator<LoggerWeakRef> iterAbstractPreferences childAbstractPreferences srcPreferences rootPreferences userRtPreferences systemRtPreferences kidPreferences dadPreferences prefsRootNodeChangeListener[] oldNodeChangeListener[] newNlNodeChangeListener[] listenersPreferenceChangeListener[] oldPreferenceChangeListener[] newPlPreferenceChangeListener[] listenersBackingStoreException xBackingStoreException eAbstractPreferences[] cachedKidsIterator<AbstractPreferences> iNodeChangeEvent ncePreferenceChangeEvent pceIterator<PreferencesFactory> itrPreferences[] kidsCopyPreferences[] prefsKidsList<Preferences> ancestorsboolean oneLetterboolean compboolean hasSupplementaryboolean firstInClassboolean israngeboolean capturingGroupboolean maxVboolean detmboolean maxV2boolean conditionMatchedboolean rightboolean forkRightboolean cancelboolean isShortCircuitint testCharint endRangeint saveint groupIndexint guardint minLint backLimitint maxLint save0int save1int save2int minL2int maxL2int groupStartint groupEndint groupSizeint cc1int cc2int savedToint savedFromint savedLBTint rmaxCharsint rminCharsint patternLengthint thisOpFlagslong sizeEstimatelong sizeThresholdlong estint[] groupsint[] localsint[] srcint[] lastOccint[] optoSftdouble simpleSumlong[] avgRunnable closeActionRunnable existingHandlerchar[] charraydouble[] summationdouble[] avgLocale availableSpliterator<?> spliteratorControl cAtomicBoolean seenNullIntConsumer adaptedSinkIntStream resultIntStream streamOfInt iteratorOfInt splOfInt splitOfInt spliteratorUnicodeScript scriptDoubleStream resultDoubleStream streamLongStream resultLongStream streamOfLong splOfLong splitOfLong spliteratorOfDouble splOfDouble splitOfDouble spliteratorDoubleConsumer adaptedSinkLongConsumer adaptedSinkOfLong iteratorOfDouble iteratorNode firstTailNode branchConnNode nodeTailNode headNode tailNode atomCharProperty prevCharProperty nodeCharProperty rightNodeCharProperty pBitClass bitsGroupHead headProlog prologLoop loopCurly curlyGroupTail tempTreeInfo infoBranch branchUnicodeProp upropQues quesNode[] tmpCharPropertyFactory mSpliterator<E_OUT> sBuilder<E_OUT> nbAbstractPipeline<> uAbstractPipeline<> pAbstractPipeline<> eSupplier<Spliterator<E_OUT>> sSpliterator<T> spliteratorR answerK taskK leftChildK rightChildK taskToForkK parentK nodeK rightSiblingAtomicReference<R> srSpliterator<P_IN> rsSpliterator<P_IN> lsSet<Characteristics> csSet<Characteristics> characteristicsBiConsumer<A,? super U> downstreamAccumulatorM castResultA containerSupplier<A> downstreamSupplierBiConsumer<A,? super T> downstreamAccumulatorBiConsumer<Map<K,A>,T> accumulatorBinaryOperator<Map<K,A>> mergerSupplier<Map<K,A>> mangledFactoryFunction<Map<K,A>,M> finisherFunction<A,A> downstreamFinisherA resultContainerBinaryOperator<ConcurrentMap<K,A>> mergerSupplier<ConcurrentMap<K,A>> mangledFactoryBiConsumer<ConcurrentMap<K,A>,T> accumulatorFunction<ConcurrentMap<K,A>,M> finisherBinaryOperator<A> opBiConsumer<Partition<A>,T> accumulatorBinaryOperator<Partition<A>> mergerEntry<Boolean,T> falseEntryEntry<Boolean,T> trueEntrySupplier<Partition<A>> supplierFunction<Partition<A>,Map<Boolean,D>> finisherBiConsumer<M,T> accumulatorSet<T> keysTerminalOp<T,LinkedHashSet<T>> reduceOpConcurrentHashMap<T,Boolean> mapTerminalOp<T,Void> forEachOpOfDouble nodeOfDouble nodeBuilderBinaryOperator<R> operatorT[] boxedO resultFindTask childFindTask pForEachOrderedTask leftDescendantForEachTask taskForEachTask leftTaskForEachTask taskToForkSpliterator<S> rightSplitSpliterator<S> leftSplitSink<S> taskSinkForEachOrderedTask<S,T> leftChildForEachOrderedTask<S,T> rightChildForEachOrderedTask<S,T> taskToForkIntFunction<T[]> generatorBuilder<T> nbOfInt nodeOfInt nodeBuilderOfLong nodeOfLong nodeBuilderBuilder<T> nodeBuilderNode<P_OUT> nodeP_OUT[] arrayT[] arrayString oldDescriptionString cachepathString filepathboolean hasNextboolean hasZip64boolean usecacheboolean canDecodeClass<> writerSpiClassClass<> readerSpiClassint anIntint nextChunkSizeint newSpineSizeint hElementIndexint characteristicsint hUpToint hLastint thisLenint flgint flagint sz0int elenEXTTint flagEXTTint elenZIP64int mergedLengthString[] writerNamesString[] readerNamesHashtable<> resourceTableEnumeration<> iterIOException zeFile cachedirThrowable e1Throwable e2Iterator<> readerSpiIterIterator<> writerSpiIterlong leftCountlong leftSplitSizelong sliceFencelong sizeIfKnownlong tolong leftSizelong aLonglong capacitylong finalOffsetlong leftSplitFenceUnboundedlong leftSplitFencelong remainingPermitslong grabbinglong permitsRequestedlong hUpTolong addrlong jzentrylong zflong siglong offlong csizelong xlenlong xofflong off64long dostimeObject[] retvalObject[] existingTargetObject[] newTargetObject[] mergedTargetint[] contentint[] intsint[] array2byte[] trailerbyte[] bcommbyte[] bnamebyte[] extrabyte[] nameBytesbyte[] commentBytesBoolean hasPermissiondouble aDoublelong[] contentlong[] longslong[] array2double[] contentdouble[] doublesdouble[] array2HashSet<String> sImageReaderSpi spiImageReaderSpi readerSpiImageReaderSpi tempImageWriterSpi writerSpiImageWriterSpi tempImageInputStreamSpi spiImageOutputStreamSpi spiPropertyChangeEvent pceGetPropertyAction aOfInt sStream<T> streamIntFunction<> rawGeneratorOfLong sOfDouble sStreamOpFlag flagStream<? extends R> resultSpliterator<T> splitOfDouble nOfDouble bSpliterator<P_IN> splitOfInt nOfInt bOfLong nOfLong bE tSpliterator<E> retE[] resultE[] chunkSizedCollectorTask taskSpliterator<P_IN> rightSplitSpliterator<P_IN> leftSplitT_BUILDER builderToArrayTask taskK leftTaskNode<T> leafN nN leafDeque<N> stackT_ARR arrayDeque<Node<T>> stackT_ARR resultT_ARR chunkT_SINK sinkSupplier<I> supplierBinaryOperator<I> combinerBiConsumer<I,? super T> accumulatorS leftResultBiConsumer<A,? super P_OUT> accumulatorT_SPLITR leftSplitSpliterator<T> sSpliterator<P_IN> sT_SPLITR splitPermitStatus permitStatusSliceTask parentSliceTask nodeSliceTask leftSliceTask rightNode<P_OUT> resultBuilder<P_OUT> nbSink<P_OUT> opSinkT[] flattenedDataComparator<? super T> compList<E> listT_SPLITR retIterator<T> iteratorSpinedBuffer<P_OUT> bOfRef<T> sbT_CONS consumerT_CONS sbcT_BUFF sbCheckedInputStream inDataFormatException eDataFormatException exMap<InputStream,Inflater> copyEntry<InputStream,Inflater> eZipFileInputStream inXEntry xentryAccessibleRelation existingRelationAccessibleRelation relationAccessibleRelation[] relationArrayAccessibleState[] stateArraySourceVersion svSupportedOptions soSupportedAnnotationTypes satSupportedSourceVersion ssvImageReaderWriterSpi spiCacheInfo infoIterator<S> iterString readerNameString writerNameString nativeNameString warningString formatClassNameString dvalObject oproviderObject providerboolean tilesOffsetClass<> categoryint numThumbnailsint imageIndexint numListenersint subsampleXOffsetint subsampleYOffsetint subsampledWidthint subsampledHeightint paramSrcBandLengthint paramDstBandLengthint minBandOffsetint bufferedImageTypeint numFormatsint numAttributesint sumOfLengthsint svint inDegreeString[] extraNamesString[] legalTypesIterator<> categoriesIterator<> outNodesIterator<> regslong oFlushedPoslong flushBytesObject[] inNodesArrayObject[] outNodesArrayint[] dstBandsint[] numBitsint[] scaledTableList<> outputList<> namesList<> vlistbyte[] redLUTbyte[] greenLUTbyte[] blueLUTbyte[] alphaLUTArrayList<> thumbnailsPrivilegedAction<> doRegistrationMissingResourceException mre1BufferedImage destRectangle regionRectangle paramSrcRegionRectangle destImageRectRectangle srcRegionImageTypeSpecifier thatIIOMetadata metadataIIOReadProgressListener listenerIIOReadUpdateListener listenerIIOReadWarningListener listenerIIORegistry registryIIOImage imImageWriterSpi providerImageOutputStream streamIIOWriteProgressListener listenerIIOWriteWarningListener listenerIterator<ImageWriter> iterIIOMetadataNode newChildNodeIIOMetadataNode refChildNodeIIOMetadataNode previousIIOMetadataNode nextIIOMetadataNode oldChildNodeIIOMetadataNode newNodeDimension minDimension maxDimension[] tempElement ownerAttr oldAttrServiceConfigurationError errImageTranscoderSpi spiInterleaved thatBanded thatObjectValue objObjectValue objvIIOAttr attrDigraphNode nodeDigraphNode firstPONodeDigraphNode secondPONodeDigraphNode preferredPONodeDigraphNode otherPONodeDigraphNode firstIIOServiceProvider rIIOServiceProvider pClass<IIOServiceProvider> cIterator<IIOServiceProvider> riterRegisterableService rsSubRegistry regT eltT providerString kwString keywordOrLiteralString sval1String sval2String sval3String formString lastNameString fieldString impactStringString pnString localHostString builderClassNameObject valObjObject val2Object abuilderboolean numericboolean omitboolean bval1boolean bval2boolean compatint neltsint boffint b5int b6int b7int i0int newBitOffsetint bitsToReadint partialByteint subopint eqint openingBracketint poundSignString[] kwsString[] fieldNamesString[] fieldValuesString[] onamesString[] tlong accumlong blockOffsetlong bufIndexlong currIndexlong lastIndexlong numNewBufferslong lastPoslong numBlockslong bytesLeftInCachelong lval1long lval2long lval3long uidObject[] ovaluesClass<?> newBuilderClassClass<?> builderClassClass<?> methodClassMethod submethodBoolean safedouble dval1double dval2double dval3char[] charrClassCastException xInvocationHandler ihandlerByteOrder oldByteOrderAttribute valInstanceNotFoundException infeMBeanInfo pMBeanInfo infoMBeanPermission thatMBeanServer serverMBeanServer mBeanServerMBeanServer mbeanServerMBeanServerDelegate delegateRuntimeErrorException rreRuntimeMBeanException reDescriptor dSortedMap<String,Object> mapImmutableDescriptor biggestImmutableImmutableDescriptor idMBeanNotificationInfo pMBeanNotificationInfo[] nsMBeanNotificationInfo[] infosMBeanOperationInfo pMBeanAttributeInfo pMBeanServerBuilder mbsBuilderMBeanConstructorInfo pMBeanConstructorInfo[] csMBeanAttributeInfo[] asMBeanOperationInfo[] osMBeanParameterInfo pMBeanServerInvocationHandler handlerMXBeanProxy pEntry<String,?> entryOutOfMemoryError eTypeKind kComparator<String> compareElementKind kList<TypeMirror> tmpSet<E> setBadStringOperationException yBadBinaryOpValueExpException exValueExp val1ValueExp val2ValueExp val3ValueExp vValueExp elementStringValueExp valJMException eMXBean aMBeanFeatureInfo pArrayGettersSafeAction actionArrayList<MBeanServer> resultWeakReference<MXBeanProxy> proxyRefString actionString key_nameString icharString propListStringString on_stringString thisTypeKeyString anotherTypeKeyString interfaceClassNameSString immutableInfoSString mthString jarFilesString abs_pathString nativelibnameString attString requiresTypeWarningString requiresValueWarningString paramOutsideWarningString requiresCodeWarningString requiresJarsWarningString protString lowerInStrString fieldValueString kwPartString valPartString thisDescTypeString SfldValueString svalueString quotedValueStringString respStrString retStrObject serObjectObject fieldValueObjectObject currValueboolean wantitboolean seenitboolean enabledboolean isLongboolean quoted_valueboolean value_patternboolean propPatternboolean immutableInfoboolean deletedboolean inFldboolean inDescboolean isAStringboolean nameOrDescriptorTypeboolean defaultedint newmaskint plenint classHashint in_beginint out_endint cname_indexint property_indexint in_indexint key_indexint key_lengthint value_indexint value_lengthint nb_propsint last_indexint prop_lenint endKeyint total_sizeint domainValueint typeKeyValueint ctorlenint oplenint attlenint eq_separatorint semiint slashString[] tmp_string_arrayString[] tmp_keysString[] responseFieldsString[] fieldsFile tmpFileFile tmpDirFileSet<Object> mbeanslong longValObject[] parmsObject[] ooObject[] responseFieldsClass<?> class1Class<?> valueClassFileOutputStream fileOutputint[] aichar kchar qchar maxCharURL urURL codebaseURL documentBaseClassLoader contextClassLoaderReader indouble doubleValCharacter quotedRuntimeException iaechar[] name_charschar[] canonical_charschar[] initial_charschar[] kchar[] dest_charsError exMap<String,Object> fieldsMap<String,Object> descriptorHashMap<String,Object> descriptorEntry<String,Object> currElementSet<Entry<String,Object>> returnedSetList<String> signatList<String> stringParsList<String> typesList<String> valuesMap<String,String> tableMap<String,String> namePropsMap<String,String> attsMap<String,String> tInstanceAlreadyExistsException exInstanceNotFoundException exMBeanException exMBeanInfo biMBeanInfo nmbiMBeanInfo cachedMBeanRegistrationException exNotCompliantMBeanException exObjectInstance valObjectInstance objInstReflectionException exClassLoaderRepository beforeList<Object> objectParsDescriptor descDescriptor newDescDescriptor cloneSortedMap<String,Object> startMapImmutableDescriptor descMBeanNotificationInfo[] ntfsMBeanOperationInfo oMBeanAttributeInfo aMBeanServerPermission thatMBeanServerPermission mbspPrivilegedAction<ClassLoaderRepository> actMBeanConstructorInfo cMBeanConstructorInfo[] ctorsMBeanConstructorInfo[] nctorsMBeanAttributeInfo[] attrsMBeanAttributeInfo[] attsMBeanAttributeInfo[] nattsMBeanOperationInfo[] opsMBeanOperationInfo[] nopsOpenMBeanParameterInfo opiMBeanParameterInfo[] npsList<MBeanServer> mbsListURLConnection connSet<Permission> setValueExp valListenerInfo wildcardListenerInfo liProperty propProperty pMap<String,Property> keys_mapProperty[] tmp_prop_arrayProperty[] tmp_propsProperty[] propsOpenMBeanAttributeInfo oaiOpenMBeanOperationInfo ooiMBeanSupport<?> msupportMBeanInfoSafeAction actionMLetContent elmtList<MLetContent> mletsMLetParser parserIterator<Entry<String,Object>> iterString excMsgString inDescriptorNameString roleString exceptionTextString expTimeString tStampString opClassNameString opMethodNameString targetTypeFieldString ctlString respTypeString attrGetMethodString stampString attStrString qualifierString responseClassString attrSetMethodString currtimeString loggingString logfileString maximumPoolSizeSysPropString maximumPoolSizeStrString faString attributeString notifTypeString elementClassNameString primitiveTypeString objClassNameString componentTypeNameString tnString decapObject targetValueObject responseObject objExpTimeObject objtStampObject targetObjectFieldObject targetObjectObject rsltObject objctlObject getResponseObject oldvObject newvObject newValObject oldValObject derGaugeObject triggerObject attributeValueboolean tracingboolean resetValueboolean returnCachedValueboolean wrongTypeboolean primitiveTypeboolean correspondingTypesboolean subtypeboolean updateDescriptorboolean updateCacheboolean hasGenericboolean hasAttributeChangeboolean is_derived_gauge_validboolean lookupMBeanInfoboolean isPrimitiveArrayboolean isTabularClass<> respClassint numOpersint numConsint numNotifsint noOfNotificationsint opSplitterint insertedint maximumPoolSizeTmpString[] nTypesIOException io_exPrintStream logOutException snfeThrowable mmbTargExlong currencyPeriodlong lastTimelong threshold_valuelong derivedlong seqnoObject[] typeDescrClass<?> elementClassClass<?> proxyClassClass<?> otherClassint[] anint[] dimsClassLoader targetClassLoaderRuntimeException rt_exException[] caughExceptionNullPointerException np_exStringBuilder retStrAccessControlContext acSet<String> namesFromTypeInvocationHandler otherihThrowable[] caughtExceptionNumber prevNumber derVector<String> enabledAttrsAttribute oldAttrAttributeList responseListAttributeNotFoundException tAttributeNotFoundException anf_exInstanceNotFoundException inf_exMBeanException mbeMBeanException xMBeanException mb_exNotification myNtfyObjObjectName objectReflectionException ref_exRuntimeErrorException reeRuntimeOperationsException rDescriptor mbeandescriptorDescriptor mmbDescrDescriptor opDescrDescriptor mmbDescDescriptor attrDescrDescriptor ntfyDescDescriptor genericDescriptorDescriptor attributeDescriptorCompositeDataInvocationHandler othercdihObjectName[] namesArrayType<?> atArrayType<?> otherArrayType<> atComparable<?> valueDescriptor[] retListMBeanNotificationInfo[] notifListMBeanNotificationInfo[] notifInfoMBeanConstructorInfo[] consListMBeanConstructorInfo[] constrInfoMBeanAttributeInfo[] attrListMBeanAttributeInfo[] attrInfoMBeanAttributeInfo[] mbaiArrayMBeanOperationInfo[] operListMBeanOperationInfo[] opsInfoMBeanParameterInfo[] pTypesServiceNotFoundException xAttributeChangeNotification myNtfyObjThreadPoolExecutor eScheduledFuture<?> sfAttributeChangeNotificationFilter currFilterModelMBeanAttributeInfo attrModelMBeanAttributeInfo mmbaiModelMBeanAttributeInfo retInfoModelMBeanAttributeInfo attInfoModelMBeanAttributeInfo attrInfoModelMBeanConstructorInfo operModelMBeanConstructorInfo mmbciModelMBeanConstructorInfo retInfoModelMBeanConstructorInfo ctorInfoModelMBeanOperationInfo operModelMBeanOperationInfo mmboiModelMBeanOperationInfo retInfoModelMBeanOperationInfo operInfoModelMBeanOperationInfo opInfoModelMBeanNotificationInfo notifModelMBeanNotificationInfo mmbniModelMBeanNotificationInfo retInfoModelMBeanNotificationInfo nInfoModelMBeanNotificationInfo[] currInfoModelMBeanNotificationInfo[] respInfoClass<RequiredModelMBean> rmmbClassClassNotFoundException[] caughtExceptionReflectionException[] caughtExceptionMonitorNotification nMonitorNotification alarmMonitorNotification mnObservedObject oCounterMonitorObservedObject cmoCounterMonitorObservedObject oClass<? extends Number> cGaugeMonitorObservedObject gmoGaugeMonitorObservedObject oDaemonThreadFactory tfStringMonitorObservedObject smoStringMonitorObservedObject oSimpleType<?> simpleTypeString squareBracketsString baseClassNameString eltClassNameString classNameFieldString descriptionFieldString typeNameFieldString useHashMapPropString indexString ntfTypeString tmpRelationIdString tmpRelationTypeNameString tmpRoleNameString currRelIdString relIdString relTypeNameString roleNameString newRoleValStringString oldRoleValStringString currRelTypeNameString ntfClassString ntfDescString currRoleNameString expNameString expClassNameString excMsgPartObject defaultValueObject stringishObject convertedObject relObjObject relboolean asisboolean useHashMapboolean isSelectedFlgboolean badRelServFlagboolean writeChkFlagboolean isNewFlagboolean noLongerRefFlagboolean isRefedMBeanFlagboolean newListenerFlagboolean firstRelFlagboolean chkMinFlagboolean chkMaxFlagboolean classStsint currObjNamePosint obsRefIdxint pbTypeint roleInfoIdxint refNbrint excTypeString[] validTypesString[] ntfTypesInteger statusException wrappedExcSet<Object> xlegalValuesCollection<?> collObject[] resultsObject[] targetArrayObject[] kClass<?> stringArrayClassClass<?> targetArrayClassMethod valueOfStringBuilder ntfMsgStringBuilder excMsgStrBSet<String> namesFromItemsSet<String> extraFromTypeSet<String> extraFromItemsSet<String> ctSetSet<String> allRelIdSetIterator<String> kList<String> tmpNamesList<String> tmpListList<String> relIdListList<String> relIdList1List<String> localRoleNameListList<String> currRoleNameListList<String> dummyListList<String> currRelIdListList<String> result1List<String> roleNamesArrayList<String> resultVector<String> enabledTypesComparable<Object> xminValueComparable<Object> xmaxValueAttributeNotFoundException exc3AttributeNotFoundException exc4InstanceNotFoundException exc1InstanceNotFoundException excInvalidAttributeValueException exc5MBeanException exc1MBeanException exc3MBeanException exc2MBeanServerNotification mbsNtfMBeanServerNotification currNtfObjectName itemObjectName destObjectName tmpRelationObjNameObjectName relServObjNameObjectName currObjNameObjectName currRefObjNameObjectName unregMBeanNameObjectName mbeanNameObjectName newObjNameObjectName obsObjNameReflectionException exc2ReflectionException exc3Descriptor d1Descriptor d2OpenType<?> itemTypeOpenType<?> otItemTypeOpenType<?> thisItemTypeOpenType<?> baseTypeOpenType<?> componentOpenTypeOpenType<?> keyElementTypeCompositeData otherCompositeData valueCompositeType valueTypeCompositeType otherTabularData otherTabularData valueTabularDataSupport cTabularType valueTypeTabularType ttTabularType otherArrayType<?> arrayTypeGetPropertyAction getExtendOpenTypesMBeanNotificationInfo ntfInfoMBeanConstructorInfo[] dstMBeanAttributeInfo[] dstMBeanOperationInfo[] dstOpenMBeanParameterInfo otherMBeanParameterInfo[] dstOpenMBeanParameterInfo[] dstList<?> indexList<ObjectName> resultList<ObjectName> tmpNewRoleValueList<ObjectName> tmpOldRoleValueList<ObjectName> tmpUnregMBeanListList<ObjectName> newRefListList<ObjectName> roleValueList<ObjectName> newRoleValList<ObjectName> newRoleValueList<ObjectName> oldRoleValueList<ObjectName> obsRefListList<ObjectName> refMBeanListList<ObjectName> nonRefObjNameListList<ObjectName> invokeResultList<ObjectName> currRoleValueList<ObjectName> dummyListList<ObjectName> emptyValueArrayStoreException eMap<String,List<String>> relIdMapMap<String,List<String>> localRelIdMapMap<String,List<String>> resultMap<String,List<String>> relId2RoleNamesMapMap<String,List<String>> mbeanRefMapEntry<String,List<String>> currRelOpenMBeanInfo otherOpenMBeanAttributeInfo otherOpenMBeanConstructorInfo otherOpenMBeanOperationInfo otherSimpleType<?> typeSimpleType<?> otherSimpleType<?> canonicalCompositeData[] valuesOpenType<Object> xopenTypeSet<T> resultT vSet<T> setT[] legalsClass<T> cList<List<?>> indexesRoleNotFoundException exc2RoleNotFoundException exc1RoleResult resultRoleList roleListRole currRoleRole roleRelationTypeNotFoundException excRelationTypeNotFoundException exc3RelationNotFoundException exc1RelationNotFoundException excRelationNotFoundException exc2Map<ObjectName,List<String>> resultMap<ObjectName,List<String>> objName2RoleNamesMapArrayList<ObjectName> destRelationSupport relObjRoleInfo currRoleInfoRoleInfo roleInfoList<RoleInfo> roleInfoListRelationType relTypeList<MBeanServerNotification> localUnregNtfListMap<ObjectName,Map<String,List<String>>> localMBean2RelIdMapRoleInfo[] roleInfoArrayRoleInfoNotFoundException excString pkgsString principalNameString requiredPrefixString portStringString hString protoString getHostString idstrObject currResultObject pkgsObjectObject handbackValueboolean deleteRelFlagboolean newRefFlgboolean invalidRoleInfoFlgboolean needsWrapboolean sawDotboolean isAlphaNumericboolean serverTerminatedint currRoleRefNbrint currRoleNewRefNbrint serviceURLLengthint requiredPrefixLengthint protoStartint protoEndint hostStartint hostEndint portEndint urlPathStartint portStartint hostLenint getPortint mnString[] roleNameslong timeStamplong csnObject[] params2char lastcchar componentStartDate currDateClassLoader dclClassLoader targetClClassLoader oldClassLoader orderCLBoolean initFlgLong seqNoMalformedURLException badPrivilegedActionException peIllegalArgumentException excAccessControlContext reqACCPermissions colMap<String,Object> envcopyMap<String,Object> fixedenvSet<String> roleNamesList<String> mbeanRoleNameListList<String> roleNameListInetAddress localInteger[] idsPermission thePermAttributeList attrlistInstanceNotFoundException exc3InstanceNotFoundException exc5InstanceNotFoundException exc2NotificationFilter filterValueObjectName relObjNameObjectName currRoleObjNameQueryExp queryValueReflectionException exc1ClassLoaderRepository repositoryIterator<ObjectName> objNameIterIterator<?> roleIterIterator<?> roleUnresIterJMXConnectorProvider providerJMXConnector connJMXConnector connectionJMXServiceURL providerURLJMXServiceURL addrJMXServiceURL uJMXConnectorServer connectionJMXConnectorServerProvider providerJMXPrincipal thatList<ObjectName> currRefMBeanListInvalidRoleInfoException excInvalidRoleInfoException exc3InvalidRoleValueException exc4InvalidRoleValueException excInvalidRoleValueException exc2RoleNotFoundException excRoleList resultRole newRoleRole rRelationTypeNotFoundException exc1RelationTypeNotFoundException exc4Map<ObjectName,List<String>> refMBeanMapRelationNotification ntfRoleInfo resultRoleInfoNotFoundException exc2RoleUnresolved currRoleUnresRoleUnresolved rRoleUnresolvedList roleUnresListT instanceJMXProviderException eClass<JMXConnectorProvider> targetInterfaceServiceLoader<T> serviceLoaderIterator<JMXConnectorProvider> providersClass<? extends T> providerClassTIterator<JMXConnectorServerProvider> providersClass<JMXConnectorServerProvider> targetInterfaceSubject[] sbjsNotificationFilter[] filterValuesPrivilegedAction<NotificationResult> actionPrivilegedOperation opString pRefByteCodeStringString proxyStubByteCodeStringString pInputStreamByteCodeStringString proString savedConnectionIdString prtString urlPathString accessFileString jndiUrlString connectionIdString clientHostObject $resultObject credentialsObject orbObject newOrbObject proxyStubboolean checkStubboolean retriedboolean toCloseboolean isIiopboolean rebindboolean iiopboolean daemonboolean fixedRateClass<> thisClassString[] otherClassNamesString[] credentialsTypesString[] notifTypesArrayInteger retInteger notifIDObjectOutputStream ooutIOException ioExceptionObjectInputStream oinThrowable ttlong checkPeriodObject[] handbacksObject[] entryObject[] objClass<?> serverStubClassClass<?> stubClassDate currentDatebyte[] pRefByteCodebyte[] proxyStubByteCodebyte[] pInputStreamByteCodebyte[] serializedProtectionDomain thisProtectionDomainConstructor<?> rmiConnectionImplStubConstructorClassLoader thisLoaderMarshalException meUnsupportedOperationException xMalformedURLException mfeMap<String,?> mapMap<String,Object> usemapSet<String> notifTypesbyte[][] byteCodesNoSuchObjectException nseNoSuchObjectException noeInteger[] listenerIDsInteger[] retHashtable<?,?> usemapInstanceNotFoundException infcListenerNotFoundException eNotification connectedNotifNotification closedNotifNotification failedNotifNotification reconnectedNotifNotificationListener[] listenersMBeanServerConnection connNotificationFilterSupport clientFilterClientListenerInfo[] clisClientListenerInfo[] oldRemoteRef proxyRefRMIClientSocketFactory csfRMIServerSocketFactory ssfRMIExporter exporterIterator<Principal> itJMXAuthenticator authenticatorMBeanServerForwarder mbsfInitialContext ctxPrivilegedExceptionAction<Class<?>> actionServerNotActiveException eJMXConnectionNotification nRMIConnection proxyStubRMIConnection cRMIConnection clientSubject[] delegationSubjectsSubject[] subjectsRMIServerImpl rmiServerNotificationFilter[] filtersWeakReference<MBeanServerConnection> wrRMIServer stubRMIServer objrefMarshalledObject<NotificationFilter> sFilterMarshalledObject<NotificationFilter>[] filtersMarshalledObject<NotificationFilter>[] mFiltersPrivilegedExceptionAction<Constructor<?>> actionMarshalledObject<Object[]> sParamsMarshalledObject<QueryExp> sQueryMarshalledObject<Attribute> sAttributeMarshalledObject<AttributeList> sAttributesMarshalledObject<Object> sHandbackWeakReference<RMIConnection> wrIterator<WeakReference<RMIConnection>> itTimerNotification notifTimerAlarmClock alarmClockString beginQuoteString endQuoteString syntaxDirectionStrString myString hisString comp1String comp2String answerString origString rdnStringString unparsedString matchingRuleString remainsString fString pvObject thisobjObject thatobjObject i1Object i2Object ultimateObject objanswerboolean oneboolean rToLboolean compsAllEmptyboolean escapeSeparatorboolean escapeSeparator2boolean mediaTypeIsTextboolean parameterNameIsCharsetint colon_posnint slash_posnint ctint nEntriesint leadint commentLevelint theLexemeTypeString[] urlsHashtable<Object,Object> envIterator<> psIteratorlong curSeqNumberClass<?> clasStringBuffer answerStringBuffer strbufVector<> thePiecesDate timerDatebyte[] utf8byte[] resBoolean fixedRateBoolean answerArrayList<> listOfLookupServicesArrayList<> registeredServicesLong periodLong nbOccurencesEnumeration<?> theirsStateFactory factoryContext answerName tmpEnumeration<String> compsEnumeration<String> mycompsVector<Integer> vFactoryEnumeration factoriesVersionHelper helperConfigurationException ceInvalidNameException e2LdapName lnLdapName sLdapName thatDirContext dctxAttributes targetAttribute targetAttribute theirAttribute mineBasicAttributes attrsetControl answerControl[] copyTimerNotification timerNotificationTimerNotification cloneTimerAlarmClockNotification notifEntry<Integer,Object[]> entryArrayList<Object[]> valuesBinaryRefAddr targetRefAddr addrRefAddr targetCompositeName rnameNameImpl targetNoInitialContextException neReference targetReference rEnumeration<RefAddr> mycompsEnumeration<RefAddr> compsEnumeration<RefAddr> eEnumeration<RefAddr> aNamingEnumeration<?> theirsNamingEnumeration<?> allNamingEnumeration<? extends Attribute> attrsBasicAttribute attrEnumeration<Attribute> attrEnumControlFactory factoryRdn rdnRdn rdn1Rdn rdn2Rdn thatList<Rdn> sListArrayList<Rdn> rdnsIterator<Rdn> iterBerEncoder berBerDecoder berRdnEntry entryRdnEntry newEntryRdnEntry thatSortKey[] sortKeysStartTlsResponse respIterator<StartTlsResponse> iterServiceLoader<StartTlsResponse> slContinuationContext cctxResolveResult rrDirContextNamePair resDirContextStringPair resObjectFactory factoryResult answerObjectFactoryBuilder builderInitialContextFactory factoryInitialContextFactoryBuilder builderParameterMapEntry resultLexicalAnalyzer theLexerServices servicesString iorString enabledCipherSuitesString enabledProtocolsString extString finalClassString policyClassString principalClassString myFullNameString otherFullNameObject lusObject oldAttributeObject stubDelegateInstanceObject nextboolean supportedboolean foundMatchboolean retainboolean allNewClass<> dstCategoryClass<> amCategoryClass<> fdCategoryClass<> repClassClass<> resultint theOffsetint hcodeint roundint ubint lbaint ubaint lbbint ubbint cLenString[] theTableString[] enabledCipherSuitesListString[] enabledProtocolsListfloat diffxfloat diffyInteger tmpException expThrowable trString[][] pArraySet<Object> thatPubCredentialsSet<Object> thatPrivCredentialsint[] rangeaint[] rangebStringBuffer caddrBufVector<> theRangesVector<> rangesbyte[] asn1EncPrincipalbyte[] encRealmProtectionDomain subjectPdClassLoader ctxtLoaderArrayList<> losArrayList<> listOfServicesArrayList<> listOfFactoriesArrayList<> lofdouble lsdouble tmp_lsfloat[] valsfloat[] dimAccessControlContext currentAccAccessControlContext callerAccPermissionCollection collPermissionCollection newPermsProtectionDomain[] newDomainsProtectionDomain[] optimizedProtectionDomain[] downSizeCodeSource finalCsList<String> thatEnabledCipherSuitesListList<String> thatEnabledProtocolsListList<String> namesList<String> extsIterator<Object> pIIterator<Object> pubCIteratorPermission newPermRectangle dlgBoundsint[][] resultint[][] myMembersint[][] otherMembersIterator<?> ceIterator<?> iteratorSubject thatSubject finalSAccessControlException ace2Set<Principal> thatPrincipalsSet<Principal> inputPrincsSet<Principal> newSetIterator<Principal> iIterator<Principal> pIIterator<Principal> pIteratorSubjectDomainCombiner sdcPolicy untrustedImplDestroyFailedException dfExceptionCredentials krb5CredsKerberosKey otherKeyKerberosKey[] kksKerberosTicket otherTicketPrincipalName krb5PrincipalPrincipalName princPrincipalName pnKeyTab otherKtabEncryptionKey keyEncryptionKey encKeyEncryptionKey[] keysKrbException krbExceptionRefreshFailedException rfExceptionGraphicsDevice[] gsPrintServiceLookup lusStreamPrintServiceFactory factoryPrintRequestAttributeSet newasMediaPrintableArea mmMediaSize ISOA4MediaSize JISB5MediaSize NALETTERMediaSize EngineeringCMediaSize OtherEXECUTIVEMediaSize matchMediaSize mediaSizePrintService[] servicesAttributeSet asUnsupportedAttributeSet asetAttribute newValueSSLSocketFactory sslSocketFactoryAttribute[] usAttrsAttribute[] attribArrayMultiDocPrintService[] servicesIterator<PrintServiceLookup> iteratorFidelity fdServiceDialog dialogIterator<StreamPrintServiceFactory> iteratorEnumSyntax resultEnumSyntax[] theTableEntry<PrinterStateReason,Severity> eSocketFactory sslSocketFactorySSLSocket sslSocketSslRMIServerSocketFactory thatScriptEngine engineScriptContext ctxtSimpleScriptContext ctxtSimpleScriptContext tempctxtBindings nnBindings gsScriptEngineFactory factScriptEngineFactory spiServiceLoader<ScriptEngineFactory> slIterator<ScriptEngineFactory> itrList<ScriptEngineFactory> resEntry<? extends String,? extends Object> entryClass<? extends Policy> implClassPrivateCredentialPermission thatCredOwner thatArrayList<CredOwner> pListIterator<E> eLinkedList<E> listLinkedList<E> tmpWeakReference<V> wrDelegationPermission thatKeyImpl otherKeyRealm realmObjectServicePermission thatAsn1Exception aeRealmException reString config_classString defaultHandlerString mechNameString mechFilterString sEncodingString sSampleRateString sSampleSizeInBitsString sChannelsString sFrameSizeString sFrameRateString sEndianObject facClass<> lineClassint mIndexint bytesWrittenint eventsCountint thisOffint thisBytesReadint maxLinesSet<> allTypesSet<> returnTypesSetInteger integerSet<Object> facslong templong retObject[] initArgsClass<?> certClassClass<?> implClassint[] resultTypesVector<> encodingsVector<> formatsList<> allInfosList<> providersList<> infosList<> codecsbyte[] certDatabyte[] returnedArrayClassLoader finalLoaderIndexOutOfBoundsException ioobeMap<String,Object> retHashSet<String> classesIterator<Object> iterLoginException le2LoginException errorConfiguration untrustedImplAppConfigurationEntry[] entriesX500Principal otherHashSet<Object> resultDerValue derProvider[] provsServicePermission npServicePermission spServicePermission xClass<? extends Configuration> implClassClass<? extends CallbackHandler> cSaslClient mechSaslClientFactory facSaslServer mechSaslServerFactory facShortMessage msgSoundbank sInvalidMidiDataException eMetaMessage eventMetaMessage eotMidiDevice deviceMidiUnavailableException mueMidiUnavailableException eMidiUnavailableException maeReceiver receiverReceiver recTransmitter transmitterMidiEvent lastEventMidiFileFormat formatMidiFileWriter writerMidiFileReader readerSoundbankReader spMidiDeviceProvider providerMidiDeviceProvider defaultProviderInfo[] infosArrayInfo[] tmpinfoInfo[] infosSynthesizer synthSequencer seqSequence sequenceTrack trackSysexMessage eventAudioFileFormat formatAudioFormat formatAudioInputStream audioStreamTargetDataLineInputStream tstreamAudioFileWriter writerAudioFileReader readerFormatConversionProvider codecMixerProvider providerMixerProvider defaultProviderMixer mixerInfo fullInfoInfo[] allInfosInfo[] infoArrayInfo[] someInfosInfo[] currentInfoArrayInfo[] returnedArrayLineUnavailableException lueLineUnavailableException eInfo infoEncoding[] encsEncoding[] encs2AudioFormat[] fmtsAudioFormat[] fmts2UnsupportedAudioFileException eType[] returnTypesType[] fileTypesString fullPackagePathString initialStringString finalStringString sTypeString sLineString factoryClassNameString strLineString providerImplsString strRowsetPropertiesString dotString acString actionCommandString defaultIconStringString pressedIconStringString disabledIconStringString selectedIconStringString disabledSelectedIconStringString rolloverIconStringString rolloverSelectedIconStringString paintBorderStringString paintFocusStringString rolloverEnabledStringString clippedTextObject attribObject dstObject elementObjboolean syncProviderObjboolean isListenerboolean hideTextboolean selectedboolean isActionSelectedboolean needsNotifyint sqlTypeint dsLockint gradeint viewint vkint newMnemonicint mnemonicint validCountInteger attribInteger iValuelong patlenObject[] localArrayObject[] nullValObject[] asciiStreamObject[] binaryStreamObject[] unicodeStreamObject[] charStreamObject[] dateObject[] timeObject[] timestampObject[] paramsArrayObject[] attribsObject[] dstObject[] valObject[] keysObject[] listenersObject[] selectedObjectsObject[] targetObject[] pKeysInputStream asciiStreamURL aURLField[] publicFieldsBoolean attribBufferedReader bufReaderFloat attribDouble attribByte attribLong attribShort attribchar[] patternchar[] cPatternGetField fields1Enumeration<?> keysHashtable<?,?> tmpRectangle paintIconRRectangle paintTextRRectangle paintViewRComponent aComponent ancestorContainer oldParentJComponent jAncestorIcon oldValueIcon iconDisplayedIcon defaultIconInsets oldInsets paintViewInsetsActionMap parentAction oldValueAction valueAction oldActionAbstractAction newActionActionEvent eListDataEvent eItemEvent eShape charShapeButtonModel oldModelView viewButtonGroup groupAccessControlException eVector<Object> tmpHashMap<Object,Object> keyMapFloat shapeServiceConfigurationError eSQLException warningSQLException eSQLException sqleStruct sSQLData objAccessibleRelationSet relationSetBinding bdNotContextException eNamingEnumeration<?> bindingsInfo dataLineInfoEncoding[] sourceEncodingsEncoding[] targetEncodingsAudioFormat[] localFormatsAudioFormat[] targetFormatsControl[] localArrayRowSetListener rslRowSetEvent eventRowSetReader rsReaderRowSetWriter rsWriterSerialRef refSerialBlob sbSerialClob scSerialArray saSyncProvider syncRowSetFactory factoryRowSetFactory instanceRowSetFactory theFactorySyncFactoryException sfeSyncFactoryException sfExSQLInputImpl sqlInputSerialStruct sSerialStruct ssSerialDatalink sdlSerialException seSerialJavaObject sjoVector<RowSetWarning> tmpProviderImpl implArrayTable newArrayTableT targetEnumeration<AbstractButton> elemBias[] biasDocument dStyledDocument docReferenceQueue<JComponent> queueOwnedWeakReference<?> rActionPropertyChangeListener<?> oldPCLAncestorEvent ancestorEventString modelStringString stringValueObject v1boolean paintAllOnExposeboolean contentsLostboolean encounteredHWboolean wasDoubleBufferedboolean isChangeboolean findNextboolean floaterCollisionboolean intersectsFromboolean intersectsToboolean colorMatchboolean rvboolean shouldClearboolean shouldSetboolean setInsertedValuesboolean shouldSelectint joinint absoluteAxisint relXint relYint debugOptionsint newExtentint newMaxint newMinint layerint oldFirstChangedIndexint oldLastChangedIndexint oldFirstAdjustedIndexint oldLastAdjustedIndexint clearMinint clearMaxint setMinint setMaxint insMinIndexint insMaxIndexint leadIndexint anchorIndexint rmMinIndexint rmMaxIndexint gapLengthint oldMinint oldMaxint sortIndexint keySizeint includedint rowCountint excludedCountint recreateFromint newModelRowCountint viewIndexint removedFromViewHashtable<Object,Object> tmpObject[] rvint[] xOffsetsint[] xSpansint[] yOffsetsint[] ySpansint[] lastViewToModelint[] viewToModelIint[] oldViewToModelComparator<> comparatorPoint screenLocationRectangle visibleRectRectangle cBoundsRectangle desktopBoundsRectangle parentBoundsRectangle availableRectangleRectangle previousBoundsRectangle visBoundsColor backDimension allocDimension typGraphics debugGraphicsImage newImageImage imageToDrawComponent desktopComponent pContainer biRootContainer desktopWindow topLevelJComponent parentRepaintManager currentManagerMouseEvent eDropLocation dropLocationDefaultListSelectionModel cloneListSelectionEvent eTableCellRenderer rendererJInternalFrame nextFrameJInternalFrame currentlyActiveFrameJDesktopIcon desktopIconImageProducer oldProducerImageProducer newProducerButtonModel oldSelectionJDesktopPane dJDesktopPane pJDesktopPane desktopPaneJDesktopPane paneRectangle[] dirtyRectsRectangle[] floatersJFrame debugFrameBufferCapabilities capsBufferStrategy bufferStrategyBufferStrategy bsBufferStrategy ourBSBufferStrategy componentBSSubRegionShowable bsSubRegionE rvBufferInfo bufferInfoBufferInfo infoBufferInfo toDisposeList<BufferInfo> bufferInfosDebugGraphics debugGraphicsDebugGraphicsInfo infoDebugGraphicsInfo debugGraphicsInfoDebugGraphicsObserver imageObserverSurfaceData sDataList<Row> addedRow[] oldViewToModelRow[] lastViewToModelRow[] newViewToModelSortKey keySortKey sortKeyList<? extends SortKey> keysModelWrapper<M,I> lastList<SortKey> oldList<SortKey> keysRowFilter<? super M,? super I> filterString originString paddingString rootPaneStringString rootPaneCheckingEnabledStringString defaultCapableStringString previewPanelStringString okStringString cancelStringString resetStringString oldCommandString selectedItemReminderStringString isEditableStringString lightWeightPopupEnabledStringString oldTextObject trackerObjObject oldSelectionObject objectToSelectObject sObjectObject selectedObjectObject newSelectionObject selectedItemObject elemObject currentSourceObject actionIDObject actionBindingboolean visChangedboolean useMinboolean leadingResizableboolean trailingResizableboolean honorsVisibilityboolean newVisibleboolean checkingEnabledboolean oldDefaultCapableboolean supportsWindowDecorationsboolean oldFlagboolean checkSiblingsboolean printingboolean isWindowOpaqueboolean isJComponentboolean hitClipboolean shouldSetFlagBackboolean shouldClearPaintFlagsboolean displayableboolean oldVerifyInputWhenFocusTargetboolean oldEnabledboolean shouldProcessKeyboolean dispatchint modelIndexint newlyVisibleint newlyHiddenint effectedint glAxisint prefint springPrefint springCountint resizableCountint sDeltaint slopint sSizeint springSizeint baselineSpringCountint nonBaselineMaxint springMaxint minAscentint minDescentint nonBaselineMinint springMinint maxPaddingint oAxisint containedAtint currentSelectionint clipXint clipYint clipWint clipHint bwint bhlong mostRecentEventTimeObject[] clientPropertyKeysStringBuffer chooserPanelsStringField appContextFieldRectangle tmpRectRectangle crRectangle clipColor oldFgGraphics componentGraphicsGraphics scratchGraphicsGraphics sgGraphics coImage grayImageComponent editorComponentComponent nextFocusableComponentContainer contentPaneContainer componentContainer nearestRootJComponent oldPreviewJComponent targetJComponent jFocusOwnerJComponent jparentRepaintManager repaintManagerRepaintManager rmJColorChooser paneColorSelectionModel oldModelJPanel buttonPaneActionMap amInputMap parentInputMap inputMapInputMap kmInputMap mapKeyStroke cancelKeyStrokeKeyStroke ksKeyStroke ksEAction cancelKeyActionJPopupMenu oldPopupAccessible selectedAccessibleJRootPane rpJButton okButtonJButton resetButtonTransferHandler oldHandlerComponentUI oldUIKeyboardFocusManager toSetBorder oldBorderComboBoxModel<E> oldModelComboBoxEditor oldEditorComboBoxEditor editorListCellRenderer<? super E> rendererListCellRenderer<? super E> oldRendererAbstractColorChooserPanel[] oldPanelsAbstractColorChooserPanel[] newPanelsAbstractColorChooserPanel[] newArrayAbstractColorChooserPanel[] oldValueLayoutStyle layoutStyleLayoutStyle pComponentInputMap kmPopupMenuEvent eAccessibleStateSet assBaselineResizeBehavior brbBaselineResizeBehavior resizeBehaviorMediaTracker mTrackerPixelGrabber pgToolTipManager toolTipManagerDebugGraphics graphicsList<Row> updatedRow[] updatedRow[] intermediaryGrayFilter filterSpring springSpring sourceSpringSpring targetSpringSpring horizontalSpringComponentInfo infoComponentInfo ciComponentInfo sourceInfoComponentInfo targetInfoComponentInfo childInfoSet<Spring> sourcePathAlignment alignmentList<Spring> springsSequentialGroup groupLinkInfo masterLinkInfo childMasterComponentSpring cSpringComponentSpring springComponentSpring sourceComponentSpring targetSpringComponentSpring sourceSpringAutoPreferredGapSpring paddingSpringAutoPreferredGapSpring paddingAutoPreferredGapSpring gapSpringList<AutoPreferredGapSpring> newLeadingPaddingList<AutoPreferredGapSpring> newTrailingPaddingList<ComponentSpring> newLeadingList<ComponentSpring> newTrailingSpringDelta springDeltaList<SpringDelta> resizableList<SpringDelta> sortedAutoPreferredGapMatch matchKeyStroke[] keysKeyStroke[] pKeysKeyStroke[] allKeysKeyStroke[] strokesKeyStroke[] retValueHashMap<KeyStroke,KeyStroke> keyMapInputVerifier ivInputVerifier oldInputVerifierTimerQueue qColorTracker okJDialog dialogColorChooserDialog dialogMutableComboBoxModel<E> modelActionStandin actionHashtable<KeyStroke,KeyStroke> registeredEnumeration<KeyStroke> keysKeyStroke[][] strokesJToolTip tipIntVector ivIntVector kcaString preferredSizeStringString minimumSizeStringString maximumSizeStringString borderStringString desktopManagerStringString defaultCloseOperationStringString referenceString charSetSpecString encString paramListString kitStringString typeHandlersStringString typeDescriptionString approveButtonTextStringString dialogTitleStringString dialogTypeStringString returnValueStringString useFileHidingStringString fileSelectionModeStringString currentDirectoryStringString selectedFileStringString closableStringString isClosedStringString maximizableStringString isMaximumStringString iconableStringString isIconStringString resizableStringString isSelectedStringString frameIconStringString titleStringString desktopIconStringString openedStringObject postDataObject i18nFlagObject showHiddenPropertyboolean hasBufferboolean ontopboolean resetPCboolean showingboolean reloadedboolean pageLoadedboolean redirectboolean composedTextSavedboolean inKeyboolean shownboolean hadUIint tmpXint tmpYint tmpWidthint tmpHeightint offsetXint offsetYint pIndexint bxint byint cpCountint oldDragModeint READ_LIMITint responseint parmint p0int p1int prefHeightint commitCountint fbHashtable<> htFile oldValueFile prevURL loadedURL pageBoolean defaultLookAndFeelDecoratedBoolean traversableBoolean oldValueBoolean newValueReader rRunnable callScrollToReferenceMalformedURLException mDataOutputStream osStringWriter bufRectangle rectangleRectangle paintImmediatelyClipRectangle siblingRectRectangle visDimension rComponent siblingComponent oldValueContainer oldValueJComponent paintingOiginJComponent bufferedComponentJComponent paintingComponentJComponent jcJComponent rootJComponent oldValueIcon oldIconJTextComponent targetPropertyChangeListener focusListenerJFileChooser jfcAccessibleContext aFileView oldValueFileView uiFileViewJRootPane oldValueFile[] oldValueFileSystemView oldValueVector<File> fListFileFilter aaffFileFilter oldValueFileFilter[] filterArrayFileFilter[] oldValueJInternalFrame tmpJInternalFrame selectedFrameJInternalFrame frameToSelectJDesktopIcon oldValueJMenuBar oldValueJLayeredPane oldValueDesktopManager oldValueJInternalFrame[] jifArrayCaret caretJViewport portInternalFrameEvent eBadLocationException exceptionWindowListener ownerShutdownListenerHttpURLConnection hconnAccessibleValue vInputContext icAccessibleComponent compAccessibleComponent acompList<Component> pathAttributedCharacterIterator textAttributeSet aAttributeSet asAttributeSet anchorArrayTable clientPropertiesAncestorNotifier ancestorNotifierSizeRequirements reqReadObjectCallback cbList<JInternalFrame> framesCollection<JInternalFrame> resultsCollection<JInternalFrame> allFramesIterator<JInternalFrame> iteratorComponentPosition positionSet<ComponentPosition> setEditorKit kEditorKit oldEditorKit kitHashtable<String,EditorKit> kitRegistryHyperlinkEvent linkEventHTMLDocument hdocHTMLDocument docHTMLEditorKit kitChangedCharSetException changedCharSetExceptionIterator iterHeaderParser hdrParserHTMLLink lElementIterator eiJTextArea areaFileChooserUI uiAbstractFormatterFactory oldFactoryAbstractFormatterFactory factoryAbstractFormatter oldFormatAbstractFormatter formatAbstractFormatter atfAbstractFormatter displayFormatterAbstractFormatter editFormatterAbstractFormatter formatterString oldAccessibleNameString labelForStringString verticalAlignmentStringString horizontalAlignmentStringString verticalTextPositionStringString horizontalTextPositionStringString optimizedDrawingPossibleStringString tipString selectionForegroundStringString selectionBackgroundStringString marginStringObject retValboolean isGlassPaneVisibleboolean layeredComponentFoundboolean isHorizontalWrapboolean betweenboolean isFocussedboolean isVisibleboolean modelSelectedboolean retValueint oldKeyint startLayerint curLayerint startLocationint layerCountint layerStartint layerEndint lIndexint iMinint visibleRowCountint fixedCellWidthint fixedCellHeightint leadingVisibleEdgeint leadingCellEdgeint incint newFirstint firstRightint visibleRightint oldLeadSelectionIndexint fiint liInteger layerInteger layerObjlong oldEventMasklong combinedMaskObject[] rvTmpObject[] kvDataint[] indsint[] rvTmpint[] rvLong maskPoint lastPointPoint visibleLocationPoint leadingPointPoint listLocationPoint componentLocationPoint positionRectangle cellBoundsRectangle prevRRectangle lastRectRectangle newFirstRectRectangle firstRectColor oldValueDimension pmSizeComponent oldCComponent oldViewComponent oldGlassPaneComponent rComponentComponent cpComponent currentKeyStroke oldAcceleratorJPopupMenu compJPopupMenu popAccessible oldLSAccessible newLSAccessible accessibleChildGraphicsConfiguration dgcPropertyChangeListener pclE valueList<E> selectedItemsListSelectionModel lsmListSelectionModel oldValueListModel<E> modelListModel<E> oldValueListModel<E> dmDropLocation locationDropLocation listLocationDropLocation oldListCellRenderer<? super E> crListCellRenderer<? super E> oldValueListCellRenderer<? super E> rListUI uiJMenu thisMenuJMenu subMenuJMenuBar barMenuElement subElementMenuElement[] resultMenuElement[] oldMenuElement[] subElementsComponent[] resultsComponent[] componentAccessibleStateSet sAccessibleAction aaArrayList<Component> compListGraphicsDevice[] gdSingleSelectionModel oldValueSingleSelectionModel modelLayerUI<> uiJLayer<> lHashtable<Component,Integer> cToLSection sectionVector<MenuElement> elementsVector<MenuElement> tmpMenuKeyEvent mkeString iconStringString initialValueStringString messageStringString messageTypeStringString optionTypeStringString wantsInputStringString labelStringString orientationStringString progressStringStringString paintStringStringString indeterminateStringString viewportBorderStringString viewportStringString verticalScrollBarPolicyStringString horizontalScrollBarPolicyStringString horizontalScrollBarStringString verticalScrollBarStringString columnHeaderStringString rowHeaderStringString lowerLeftStringString lowerRightStringString upperLeftStringString upperRightStringString paintTicksStringString paintTrackStringString paintLabelsStringString isInvertedStringString snapToTicksStringString snapToValueStringString toolTipTextString maxStringString minStringString continuousLayoutStringString oneTouchExpandableStringObject menuItemObject selectedValueObject oldMessageObject oldIconObject oldIVObject lastValueObject newModelValueboolean serializeboolean visibleboolean isAdjustingboolean oldCDboolean shouldChangeFocusint maxCounterint ovrxint ovryint optionCountint oldTypeint indexCounterint scrWidthint scrHeightint scrRightXint scrBottomYint oldOrientationint oldWindowDecorationStyleint contentYint colHeadHeightint rowHeadWidthint vsbWidthint oldLocationint selIndexDictionary<> oldTableDictionary<> labelTableEnumeration<> labelsInteger oldValueHashtable<Object,Object> hashtablelong popupRightXlong popupBottomYlong lxlong lylong spanObject[] oldOptionsObject[] retOptionsObject[] oldValuesObject[] arrayOptionsBoolean doCanceleddouble currentValuedouble pcdouble oldWeightchar[] retValueIllegalArgumentException iae2Point iFrameCoordPoint popupLocationPoint invokerOriginPoint editorPointRectangle scrBoundsRectangle borderRRectangle vrRectangle editorRectDimension iFrameSizeDimension rootSizeDimension parentSizeDimension popupSizeDimension oldSizeDimension rdDimension mbdDimension preferredSizeDimension minimumSizeGraphics tempGComponent foComponent tempItemComponent oldInvokerComponent wComponent toRemoveComponent newCompJComponent oldEditorJSpinner spinnerJTextField textFieldSpinnerNumberModel modelSpinnerNumberModel numberModelSpinnerModel oldModelInsets scrInsetsActionMap ftfMapJScrollBar oldJScrollBar scrollBarJPopupMenu mpJPopupMenu subPopupScrollable viewAccessibleContext selectedItemAccessibleContext invokerContextJButton oldDefaultBorder oldValueJList<?> popupListJOptionPane paneJInternalFrame dialogJInternalFrame iFrameJViewport colHeadJViewport rowHeadJViewport vpJViewport oldFrame sharedFrameFrame newFrameWindowAdapter adapterPopup oldPopupPopup newPopupBoundedRangeModel oldModelBoundedRangeModel brmBoundedRangeModel mBoundedRangeModel modelVector<?> valuesVector<Object> valuesVector<Object> serOptionsAccessibleSelection selectionAccessibleText atAccessibleEditableText atAccessibleTextSequence seqAccessibleRelation controlledByAccessibleRelation controllerForDefaultFormatterFactory factoryDateFormatter formatterNumberFormatter formatterOptionPaneUI uiSegment txtVector<Component> tempItemsSmartHashtable tableSpinnerDateModel modelSplitPaneUI uiString oldToolTipTextString tabPlacementStringString haveRegisteredStringString columnNameString gridColorStringString showHorizontalLinesStringString showVerticalLinesStringString autoResizeModeStringString autoCreateColumnsFromModelStringString preferredViewportSizeStringString rowSelectionAllowedStringString cellSelectionEnabledStringObject rendererboolean selectedPageboolean outsideboolean anchorSelectedboolean cellFillsVisboolean rowIsLeadboolean colIsLeadboolean isFocusOwnerInTheTableboolean showDialogsboolean isHeadlessint removeIndexint selectedint tabint tabComponentIndexint oldLeadint oldAnchorint anchorRowint anchorColint columnIndexint modelColumnint oldAutoResizeModeint totalWidthint totalPreferredint columnCountint inputint lowerBoundint upperBoundint hitColumnIndexint hitRowIndexint viewLeadIndexint editingModelIndexint eventColumnint columnViewIndexint deletedCountint previousRowCountint minRowint maxRowint leadRowint leadingRowint leadingColint leadingCellSizeint retValint hiddenAmtint visibleAmtint newEdgeint visibleLeadingEdgeint newLeadingEdgeint newCellLeadingEdgeint newCellTrailingEdgeint trailingRowint trailingColint cellLeadingEdgeint cellTrailingEdgeint leadColumnint firstColumnint lastColumnint type2int focusedRowint focusedColint rowsSelint colsSelint ttlColsint ttlRowsint curIndexint IN_ROWint NOT_IN_ROWint prevRowint numRowsint numColumnsEnumeration<> defaultRenderersEnumeration<> defaultEditorsThread thThrowable pelong totalPreferredlong totalLowerBoundlong totalUpperBoundClass<?> columnClassint[] rowsint[] colsint[] anchleadsint[] selectionint[] rowIndiciesint[] colIndiciesdouble fRunnable runnablePoint parentLocationPoint newCellLocPoint trailingPointRectangle cellRectRectangle dirtyRectangle dirtyRegionRectangle drawRectRectangle firstColumnRectRectangle lastColumnRectRectangle firstRowRectRectangle lastRowRectRectangle leadingCellRectRectangle newCellRectRectangle rjtRectangle rcellColor oldComponent cornerContainer gpJComponent jCompIcon tabIconAccessible oldAAccessible newAAccessible oldCaptionAccessible oldSummaryListSelectionModel selModelListSelectionModel rsmListSelectionModel csmListSelectionModel oldModelListSelectionModel viewSelectionJTableHeader oldJTableHeader headerKeyboardFocusManager fmBorder scrollPaneBorderJScrollPane scrollPaneJViewport viewportJCheckBox checkBoxTableColumn newColumnTableColumn resizingColumnTableColumn aColumnTableColumn tableColumnTableColumnModel cmTableColumnModel oldTableColumnModel tcmAccessibleStateSet asPrintable printablePrinterJob jobPrintRequestAttributeSet copyAttrAccessibleIcon accessibleIconAccessibleIcon[] returnIconsTableCellEditor editorTableCellEditor oldEditorRowSorter<> sorterSingleSelectionModel oldModelSection xSectionSection ySectionPage oldPagePage newPagePage newSelectedPage pagePrintingStatus printingStatusModelChange changeResizable2 sResizable3 rDropLocation tableLocationTableModel mTableModel oldRowSorter<? extends TableModel> oldRowSorterAccessibleJTableModelChange changeAccessibleJTableModelChange change2String wrapStringString wordStringString commandStringString floatableStringString tipTextStringString sValueString rootVisibleStringString showsRootHandlesStringString editableStringString largeModelStringString invokesStopCellEditingStringString scrollsOnExpandStringObject treeRootObject rootObject lastPathObject expandedDataObject archivePathObject cValueObject aKeyObject childObjObject objParentboolean checkOnboolean shouldRemoveboolean isExpandedint lineCountint selRowint minIndexint visRowsint lsrint childCountObject[] oldChildrenObject[] childrenObject[] childArrayObject[] objPathObject[] rootPathObject[] objChildPathObject[] objParentPathint[] indexsBoolean rolloverBoolean eStateEnumeration<?> descendantsHashtable<?,?> childHTRectangle pathBoundsRectangle rowBoundsLayoutManager oldMgrAccessible oldLSAAccessible newLSAJButton bSeparator sJToggleButton tbTreeCellRenderer oldValueTreeCellRenderer rTreePath rootPathTreePath childTreePath parentTreePath pathTreePath oldValueTreePath selPathTreePath leadPathTreePath parentPathTreePath closestPathTreePath pPathTreePath rPathTreePath childPathVector<?> pathsVector<?> childVectorVector<Object> stateAttributeSet attrDefaultMutableTreeNode rootDefaultMutableTreeNode parentElement lineElemElement runElement paragraphTreeCellEditor oldEditorEditorKit editorKitMutableAttributeSet inputAttributesDefaultToolBarLayout layoutTreePath[] pathsTreePath[] selectionPathsTreePath[] selectionTreePath[] toRemoveTreePath[] selPathsDropLocation treeLocationStack<TreePath> stackVector<TreePath> elementsVector<TreePath> descendantsVector<TreePath> toRemoveTreeModel oldModelTreeModel modelTreeSelectionModel oldValueTreeSelectionModel smEnumeration<TreePath> toggledPathsEnumeration<TreePath> pathsEnumeration<TreePath> nodesSet<TreePath> emptyTreeUI treeTreeUI uiTreeExpansionEvent eExpandVetoException eveTreeSelectionEvent newEAccessibleJTreeNode nodeString isViewSizeSetStringString lastPaintPositionStringString scrollUnderwayStringString bsObject keyStrokeOboolean canBlitboolean sizeChangedboolean extendedboolean focusPopupboolean headlessint bdxint bdyint dxAbsint dyAbsint axint ayint zOrderint currentSelectionCountint firstDifferenceint screenXint screenYint cWidthint cHeightint selectionSizeint selSizeint popupTypeint popupWidthint popupHeightint predictedCompletionTimeHashtable<> keyMapSet<Entry<Object,Object>> setlong Tlong dTlong nrVector<> menuBarsPoint treeLocationPoint nodeLocationPoint parentLocPoint viewPositionPoint blitFromPoint blitToPoint newLocationPoint noteLabelPointRectangle viewBoundsRectangle clipBRectangle blitPaintRectangle oldClipRectangle tmp2Rectangle bndRectangle popupAreaRectangle noteLabelRectDimension viewSizeDimension extentDimension blitSizeDimension extentSizeDimension oldExtentGraphics bsgComponent viewComponent validateRootComponent heavyParentComponent lastParentComponent hardCodedComponent prevHardCodedComponent mcComponent oldMCComponent popCompContainer topContainerContainer topJComponent jviewJComponent viewJComponent jComponentInputMap retMapKeyStroke keystrokeMouseEvent exitEventMouseEvent enterEventJPopupMenu jpmJComboBox<> boxAccessible parentBorder bComposite oldCompositeJMenuBar mbMenuElement meMenuElement elemMenuElement[] resMenuElement[] currentSelectionMenuElement[] sel2MenuElement[] subsMenuElement[] childrenComponent[] compsComponent[] popCompsComponentInputMap retMapKeyBinding[] rvTimer timerPopup popupPopupFactory factoryJWindow componentJWindow wndInterruptedIOException excPanel componentListIterator<Component> aIterListIterator<Component> bIterVector<JComponent> vComponentKeyStrokePair ckpLinkedList<Component> aAncestoryLinkedList<Component> bAncestoryHashSet<Component> sanityHeavyWeightPopup popupHeavyWeightPopup rHeadlessPopup popupLightWeightPopup popupLightWeightPopup rMediumWeightPopup popupMediumWeightPopup rList<HeavyWeightPopup> cacheList<HeavyWeightPopup> popupsMap<Window,List<HeavyWeightPopup>> heavyPopupCacheMap<Window,List<HeavyWeightPopup>> cacheMap<Window,List<HeavyWeightPopup>> heavyPopupCache2List<LightWeightPopup> cacheList<LightWeightPopup> lightPopupCacheList<MediumWeightPopup> cacheList<MediumWeightPopup> mediumPopupCacheString commandString headerTextString footerTextObject cpObject commandOObject doSubmitboolean multiThreadedPaintboolean paintCompletedboolean comparedboolean canScrollboolean viewTracksViewportWidthboolean viewTracksViewportHeightboolean vsbNeededboolean hsbNeededboolean oldHSBNeededboolean oldVSBNeededboolean newVSBNeededboolean newHSBbNeededboolean orientationIsLeftToRightboolean textIsEmptyboolean stayNullboolean disposedClass<> vClassint localBoundsHint localBoundsWint rootDxint rootDyint paintDepthint maxxint compareResultint minWidthint minHeightint hsbHeightint totalOffsetint playint totalAscentint totalDescentint prefBaselineint rectCountint hAlignint hTextPosint rsbint labelR_xint labelR_widthint labelR_yint labelR_heightint availTextWidthint uciint lciint oldProgressint imgWidthint imgHeightint headerTextSpaceint footerTextSpaceint availableSpaceint scaledWidthint scaledHeightint colCountint colWidthint rowHeightfloat alignmentfloat totalPlayfloat playfloat totalAlignmentThread timerThreadlong vDatelong minlong prefObject[] pageNumberchar ucchar lcDate nextDate prevdouble sfRunnable doDoneList<String> historyThreadGroup threadGroupPoint ppRectangle virtualBoundsRectangle availRRectangle colHeadRRectangle rowHeadRRectangle vsbRRectangle hsbRRectangle tRectangle aRectangle cRectangle dDimension maxSizeDimension viewPrefSizeGraphics osgImage resultImage offscreenImage iconImageComponent rootComponent dirtyComponent dirtyComponentComponent rootDirtyComponentComponent tempComponent appletContainer hwContainer shellJComponent jpInsets vpbInsetsNumber newValueGraphicsConfiguration configScrollable svBorder viewportBorderWindow[] windowsRectangle2D hRectRectangle2D fRectAffineTransform oldTransFrame sharedOwnerFrameRectangle[] resultHeadlessException eList<Runnable> runnableListMouseWheelEvent sourceWheelEventVolatileImage imageVolatileImage vImageDropTarget dropHandlerIllegalComponentStateException icseList<Component> icList<Component> rootsIterator<Component> itListIterator<Component> iSet<Component> dirtyCompsSet<Window> windowsExecutorService executorServiceExecutorService esSizeRequirements totalSizeRequirements totalAscentSizeRequirements totalDescentPaintManager paintManagerPaintManager oldPaintManagerTimerQueue sharedInstStateValue oldMenuDragMouseEvent sourceMenuDragEventRepaintListener lMap<Component,Rectangle> dirtyComponentsMap<Component,Rectangle> tmpDoubleBufferInfo doubleBufferMap<Container,Rectangle> hwsIterator<GraphicsConfiguration> gcsSpring sSpring widthSpring heightConstraints pcConstraints resultConstraints ccSpring[] allSpringsCallable<T> callableWeakReference<ExecutorService> executorServiceRefString newToolTipTextString newTextString stringKeyString compositeKeyString systemLAFString desktopString lafString ilafsStringString lafNameString auxLookAndFeelNamesString recentStrObject clObject uiObjectboolean sameComponentboolean sameLocboolean shouldHideboolean canImportboolean showLocationboolean checkTitleClass<> lnfClassint srcActionsint pwint offsint tileWint tileHint edgeint borderXint borderYint borderWint borderHint labelYint labelHint labelXint labelWint justificationint componentLeftint componentTopint integerint squareWidthint textWidthint swatchWidthint swatchXint textXOffsetint squareXOffsetint typedfloat arcfloat sizefloat lightnessfloat summaProperties swingPropsHashMap<> lafDataFileInputStream insMethod writerMethod readerClassLoader uiClassLoaderStringTokenizer pNumberFormatException exceptionMap<String,Object> valuesPoint toFindPoint newPreferredLocationRectangle sBoundsRectangle visibleColor defaultRecentColorDimension vpSizeDimension containerSizeImage imContainer insideComponentWindowJComponent hostGridBagLayout gbGridBagConstraints gbcInsets nextInsetsInsets containerInsetsInsets oldInsetsDefaultEditor editorJPanel superHolderJPanel mainHolderJPanel recentHolderKeyStroke keyStrokeForEventScrollable sScrollable scrollableViewVector<String> lafsTransferHandler importerTransferHandler thEmptyBorder borderOSType osTypeLookAndFeel oldLookAndFeelLookAndFeel multiLAFLookAndFeel multiLookAndFeelLookAndFeel newLAFAbstractBorder abShape outerShape innerGraphicsDevice deviceMenuElement elementMenuElement selectedElementMenuElement[] selectedPathJRadioButton buttonGraphicsDevice[] devicesClipboard clipboardPath2D pathTransferable transDropTargetListener dtListenerPropertyDescriptor propPropertyDescriptor propertyPropertyDescriptor[] propsToolTipManager managerSwingPropertyChangeSupport changeSupportLookAndFeel[] rvDelayedTimer runningTimerDelayedTimer delayedTimerDelayedTimer xDropHandler handlerClass<? extends ComponentUI> uiClassLookAndFeelInfo[] ilafsLookAndFeelInfo[] rvLookAndFeelInfo[] newInfosLookAndFeelInfo[] infosLookAndFeelInfo[] installedLAFsLAFState rvLAFState lafStateArrayList<LookAndFeelInfo> iLAFsVector<LookAndFeel> vVector<LookAndFeel> auxLookAndFeelsVector<LookAndFeelInfo> ilafsColorChooserPanel chooserSlidingSpinner spinnerString propertiesString desiredExtensionString extensionString previewStringObject listenerTypeOrNullObject rolloverObject prototypeValueObject listItemboolean updateboolean isEnterSelectablePopupboolean startingFromSelectionint colorint horizLocint vertLocint maxWidthint maxHeightint cCountint numPathsint numNewPanelsint modelSizeint newBaselineint listHeightint directionToScrollint lastItemint minRowCountFile rootFile childFile psfFile ppsfFile newFolderlong multiClickThreshholdObject[] lListObject[] retChildrenClass<?> tint[] rawValuesint[] rowHeightsint[] columnWidthsStringBuffer retBufferBoolean inTableInternalError ePoint convertedPointRectangle popupBoundsColor shadeColor tDimension resultDimension scrollSizeComponent glassPaneComponent cpnContainer wrapperJComponent previewPanelAbstractColorChooserPanel panelIcon tmpIconIcon selectedIconJColorChooser ccInsets arrowInsetsColorSelectionModel newModelJTextComponent tJPanel centerWrapperInputMap imKeyStroke keyJToolBar tShellFolder sfAccessibleContext contextJButton initialDefaultFile[] rootsFile[] childrenFile[] namesFileSystemView fileSystemViewList<File> filesBorder radioButtonBorderBorder splitPaneBorderComboBoxModel<> modelComboBoxModel<> newModelComboBoxModel<> oldModelComboBoxEditor comboBoxEditorAbstractColorChooserPanel[] panelsAbstractColorChooserPanel[] choosersBasicButtonListener listenerBasicButtonUI uiBasicButtonUI buttonUIMenuElement[] selectionBasicComboBoxUI uiDesktopManager desktopManagerJDesktopPane desktopBasicSplitPaneUI bspuiMouseMotionListener[] listenersTreePath[] retPathsValueFormatter formatterWeakReference<FileSystemView> weakReferenceBasicCheckBoxUI checkboxUIString cssRuleString fontFamilyString tooltipTextString dialogTitleString buttonTextString currentAccessibleNamePropertyString previousParsedTextString parsedTextObject honorDisplayPropertiesObjectObject w3cLengthUnitsObjectObject fileObject opacityboolean moveForwardboolean idcboolean isTraversableboolean honorDisplayPropertiesboolean w3cLengthUnitsboolean useSetDirectoryboolean isDirboolean isTravboolean isDirSelEnabledboolean isFileSelEnabledboolean isCtrlboolean isWin32boolean inBracketsboolean cellHasFocusboolean decrint newHint pWidthint pHeightint dpWidthint dpHeightint remSizeint addSizeint fsmint vxint vyint accCharint textXint textYint dkaint endColumnint rowIncrementint colCounterString[] filesInteger fontSizeFile selectedFileFile linkedToStringBuffer plainBufStringBuffer htmlBufVector<> flsBoolean isBoldBoolean isItalicBoolean htmlDisabledchar[] gPatchar[] rPatPoint epRectangle iconRRectangle textRRectangle viewRRectangle parentNewBoundsRectangle iconBoundsRectangle paintBoundsRectangle prevRectangle meDimension frame_dimDimension rvComponent lfComponent labelForComponent rendererComponentContainer cycleRootWindow windowAncestorJLabel lblInsets minOnScreenInsetsJTextComponent componentAction aAction refreshActionBasicDirectoryModel modelShellFolder shellFolderBasicFileChooserUI uiListModel<> dataModelDropLocation locFile[] listFile[] selectedFilesFileSystemView fileSystemFileSystemView fsList<File> fListJTable tableVector<File> newFileCacheVector<File> newFilesFont fontAttributeLookAndFeel lafShape clipJInternalFrame cPropertyVetoException e1PropertyVetoException e3DesktopManager dmJDesktopPane dpView hviewView childView valueView oldValuePolygon pBasicLabelUI safeBasicLabelUICursor sAction[] actionsArrayList<Object> filesStringReader rAttributeSet attributesPatternSyntaxException pseJEditorPane paneSortingFocusTraversalPolicy sPolicyViewFactory fStyle styleDoChangeContents doChangeContentsDoChangeContents runnableStyleSheet documentStyleSheetStyleSheet sStyleSheet styleSheetStyleSheet stylesStyleSheet ssStyleSheet[] styleSheetsBasicEditorKit kitBasicDocument docString basicPackageNameString actionNameString inputStringObject grabberObject helperObject serifPlain12Object blackLineBorderObject buttonToggleBorderObject newFolderIconObject upFolderIconObject homeFolderIconObject detailsViewIconObject listViewIconObject directoryIconObject fileIconObject computerIconObject hardDriveIconObject floppyDriveIconObject listCellRendererActiveValueObject checkBoxMenuItemIconObject optionPaneMinimumSizeObject minimumThumbSizeObject maximumThumbSizeObject toolBarSeparatorSizeObject splitPaneBorderObject splitPaneDividerBorderObject caretBlinkRateObject audioStringObject opaqueObject messageObject inputValueObject buttonObject ivboolean dragEnabledboolean grabFocusboolean isColumnLayoutboolean sizeButtonsToSameboolean createdAllint lastRowint dataModelSizeint maxRowCountint shortcutKeyint nlint nllint numButtonsint padSizeint minimumWidthInteger fiveHundredInteger tenInteger fourObject[] allAuditoryCuesObject[] noAuditoryCuesObject[] acListObject[] audioStringsObject[] msgsObject[] sValuesObject[] newMessageObject[] suppliedOptionsObject[] defaultOptionsObject[] optionsInputStream resourceint[] shortcutKeyschar keyArrayList<> newListLong oneThousandRectangle minBoundsRectangle maxBoundsRectangle leadRectRectangle rightRectColor sbgColor sfgColor controlColor controlDkShadowColor controlHighlightColor controlLtHighlightColor menuColor menuTextColor textHighlightColor textHighlightTextColor textInactiveTextColor textTextColor windowDimension cellSizeDimension ourMinDimension lmSizeBufferedInputStream inComponent rendererContainer separatorContainer bodyContainer realBodyJComponent srcJComponent toAddIcon mIconLayoutManager lmGridBagConstraints consJPanel topJPanel sepJPanel breakPanelJPanel bottomActionMap audioActionMapInputMap keyMapInputMap rtlKeyMapInputMap windowInputMapAction audioActionUIDefaults lafDefaultsColorUIResource yellowJPopupMenu popupMenuListCellRenderer<> lcrJComboBox<> cBoxActionListener buttonListenerJList<> srcListSelectionModel selectionModelListSelectionModel newModelListModel<> modelListModel<> oldModelListModel<> newModelDropLocation oldValueJButton aButtonJButton defaultBJButton defaultButtonBorder topBorderInsetsUIResource zeroInsetsInsetsUIResource twoInsetsInsetsUIResource threeInsetsJMenuItem lblMenuSelectionManager defaultManagerMenuSelectionManager mMenuElement subMenuElement[] elemsMenuElement[] oldPathMenuItemCheckIconFactory iconFactoryHashSet<Object> audioCuesAudioInputStream soundStreamClip clipClip lastClipBasicListUI uiMenuItemLayoutHelper lhLayoutResult lrMultiplexingTextField tfJButton[] createdButtonsString changeNameString progressStringString progStringString scaleKeyObject eventSrcboolean reverseboolean isComingUpboolean processedboolean consumeEventboolean squareButtonsint totalButtonWidthint extraHeightint extraWidthint matchesint popupIndexint middleFrameint cellLengthint cellSpacingint stringHeightint nextDelayint newRangeint newPercentint oldPercentint itemWint itemXint decrButtonHint decrButtonYint incrButtonHint incrButtonYint sbInsetsHint sbButtonsHint gapsint thumbHint sbAvailButtonHint itrackYint itrackHint itemHint itemYint leftButtonWint rightButtonWint leftButtonXint rightButtonXint leftGapint rightGapint sbInsetsWint sbButtonsWint thumbWint sbAvailButtonWint itrackXint itrackWint blockIncrementint scrollbarCenterint thumbMinint thumbMaxint thumbPosint adjustedValueint extentint currentValueint unitsfloat trackHfloat extentfloat rangefloat thumbRangefloat trackWfloat trackLengthfloat valueMaxfloat valueRangefloat thumbValueObject[] kmchar keyCharBoolean absBCharacter echoCharPoint renderLocationRectangle thumbBoundsRectangle dirtyRectRectangle tbDimension aSizeDimension horizDimDimension vertDimDimension sbSizeDimension columnPrefDimension headerPrefDimension vSizeComponent invokerPresentComponent invokerLastComponent invokerComponent srcComponent focusBaseCompComponent focusBaseComponent headerWindow cfwJComponent invokerJComponent compTransferFocusFromIcon altIconIcon disabledIconIcon buttonIconInsets cInsetsInsets bInsets borderInsets sbInsetsInsets spInsetsJPanel pActionMap lastNonUIActionMap imInputMap rightToLeftInputMapInputMap lastNonUIJScrollBar scrollbarJScrollBar toScrollJPopupMenu subpopupJPopupMenu lastPopupJRootPane rootpaneJButton ownerKeyboardFocusManager fmgrBorder vpBorderAbstractButton curElementJOptionPane opJOptionPane optionPaneFont messageFontFont buttonFontJMenu lastMenuFontMetrics fontSizerAffineTransform rotateButtonModel btnModelJMenuItem itemMenuElement subitemMenuElement newItemMenuElement lastElementMenuElement itemMenuElement currentMenuMenuElement nextMenuMenuElement nextMenuElement nextChildMenuElement previousElementMenuElement resultMenuElement[] pMenuElement[] itemsMenuElement[] newSelectionBasicRadioButtonUI radioButtonUIJViewport columnHeaderJViewport oldViewportJViewport newViewportJViewport newRowHeadJViewport newColHeadJRadioButton newSelectedBtnDefaultButtonModel bmBoundedRangeModel newModelEnumeration<AbstractButton> eMouseGrabber mouseGrabberMenuKeyboardHelper helperList<JPopupMenu> listList<JPopupMenu> popupsArrayList<MenuElement> lstButtonGroupInfo btnGroupInfoObject fastWheelScrollboolean limitScrollboolean invertboolean lValidboolean rValidboolean dValidboolean lMinValidboolean rMinValidint startingXint scrollMinint scrollMaxint blockIncrint unitIncrint tickLengthint contentHeightint centerSpacingint trackYint trackHeightint tickYint tickHeightint trackBufferint yPositionint labelBaselineint majorTickSpacingint minorTickSpacingint sliderValueint snappedValueint tickSpacingint whichTickint valuePositionint widestint tallestint xPosint yPosint minValueint labelCenterint labelLeftint labelTopint trackLengthint trackLeftint trackRightint xPositionint trackBottomint trackTopint distanceFromTrackTopint valueFromTrackTopint distanceFromTrackLeftint valueFromTrackLeftint thumbMiddleint halfThumbHeightint thumbTopint vMaxint halfThumbWidthint thumbLeftint hMaxint calendarFieldint buttonsWidthint editorHeightint editorXint editorWidthint buttonsXint nextYint nextHeightint previousYint previousHeightint ourXint ourYint extraXint extraYint lastLocint currentLocint newLocint maxLocint bottomIint rightIint lastLocationint minLocint splitHeightint splitWidthint spDividerLocationint availableSizeint beginLocationint dOffsetint nextLocationint newLocationint minPrimaryint minSecondaryint secSizeint prePrimaryint preSecondaryint lExtraint rExtraint lMinint rMinint fontBaselineint tabPlacementDictionary<> dictionaryMap<> attrsfloat tempInteger maxInteger minint[] xsint[] ysint[] retSizesint[] retValueint[] testSizesdouble valueRangedouble pixelsPerValuedouble valuePerPixelPoint ourLocPoint hDividerLocRectangle trackBoundsRectangle tickBoundsRectangle labelBoundsRectangle leftBoundsDimension thumbSizeDimension minHorizDimDimension minVertDimDimension nextDDimension previousDDimension editorDDimension buttonMinSizeDimension splitPaneSizeDimension dSizeDimension preSizeComponent highLabelComponent lowLabelComponent labelComponent newHiddenDividerComponent leftCComponent rightCComponent oldDividerComponent focusOnComponent leftComponent rightComponent focusComponent tabComponentJComponent labelJComponent newEditorJTextField tfJTextField textChangeListener clFocusTraversalPolicy ftpSpinnerModel modelInsets newInsetsInsets buttonInsetsInsets tabInsetsInputMap iMapJSplitPane parentSplitPaneJSplitPane spScrollable scrollCompFormat formatBasicSliderUI uiBasicSplitPaneUI uiBasicSpinnerUI uiSpinnerUI spinnerUIDateEditor dateEditorHashSet<Component> focusFromString clippedTitleString propKeyString actionKeyObject headerValueboolean useXboolean isSelecetedboolean verticalTabRunsboolean keepAdjustingboolean isScrollLayoutboolean newValboolean headerLeftToRightboolean accomodatedDefaultboolean rsboolean csboolean stayInSelectionint ostartint rcntint nptsint pcntint tabIndexint croplineint xxint yyint xNudgeint yNudgeint nudgeint wantint rectArrayLenint rectIndexint rectLenint nextRunint tabRunOverlayint currentRunint focusIndexint tabExtentint rowsint maxTabHeightint columnsint totalTabWidthint totalTabHeightint tabContainerWidthint tabContainerHeightint tabContainerXint tabContainerYint outerXint outerYint outerWidthint outerHeightint returnAtint rightMarginint prevLastint prevLastLenint runWidthint deltaWidthint runHeightint deltaHeightint vwint vhint totalHeightint midPointint oldRolloverColumnint mouseXint draggedDistanceint newColumnIndexint numColsint viewportWidthint newHeaderWidthint columnBaselineint cMinint cMaxint columnWidthint draggedColumnIndexint rendererHeightInteger indexObjlong widthint[] xpint[] ypPoint vppPoint viewpPoint deltaPoint leftPoint rightRectangle pastRectRectangle vpRectRectangle croppedRectRectangle repaintRectRectangle draggedCellRectColor selectedFGColor newValColor newColorDimension zeroSizeDimension butSizeDimension bsizeDimension tableSizeDimension deltaComponent visibleComponentComponent selectedComponentComponent scrollbuttonInsets contentInsetsInsets padInsetsJTableHeader thJTabbedPane tabPaneJTabbedPane tpCursor tmpBasicTabbedPaneUI uiRectangle[] tempRectArrayBasicTableHeaderUI uiTableColumn hitColumnTableColumnModel columnModelVector<View> htmlViewsTabbedPaneLayout layoutString mapNameString ttString mimeString constraintString tipTextObject rolloverPropObject borderboolean changeLeadboolean lastWasCRboolean importedboolean useReadint newRowint newColumnint oldAnchorRowint oldAnchorColumnint leadColint lrint rowMarginint rMaxint tableWidthint tableHeightint columnMarginint fieldBaselineint vspanint hspanint alignint maximumint nextPosint markint startPositionint nchint nCompchar acceleratorClassNotFoundException cleBoolean i18nFlagchar[] buffPoint p2Point upperLeftPoint lowerRightPoint globalPoint dragPointPoint dockingPositionPoint comparisonPointRectangle prevRectRectangle minCellRectangle maxCellRectangle damagedAreaRectangle vacatedColumnRectRectangle rcrRectangle compAllocColor gridColorColor shortColorColor disabledBGColor inactiveBGColor sColor dfgComponent editorCompContainer dockingSourceParentWindow frameWindow ancestorLayoutManager oldLayoutActionMap componentMapInputMap sharedKeyStroke keyStrokeMouseEvent e2JToolBar toolBarListSelectionModel oldBias newBiasBorderLayout blmSet<AWTKeyStroke> storedForwardTraversalKeysSet<AWTKeyStroke> storedBackwardTraversalKeysSet<AWTKeyStroke> backwardTraversalKeysSeparator separatorShape toDamageShape caView rootViewView fieldViewView oldViewView parentKeyBinding[] bindingsBasicToggleButtonUI toggleButtonUIWindowListener wlJFrame frameHighlighter highlighterBasicToolBarUI uiEnumeration<Component> componentsDataFlavor plainFlavorDataFlavor refFlavorDataFlavor stringFlavorDataFlavor importFlavorUnsupportedFlavorException ufeCellEditor cellEditorCellEditor editorCellEditor ceTableCellEditor tceJEditorPane epDefaultTableCellRenderer tcrTableHeaderUI thUIDragListener listenerKeymap mapKeymap parentTextTransferable tDragWindow dragWindowObject scrollsOnExpandObject showsRootHandlesObject minChildObject boldPropertyObject boldMetalboolean hasBeenExpandedboolean isLeafboolean rootVisibleboolean scrollVertboolean requestFocusboolean selectAllboolean leafboolean paintPathsboolean expandboolean armedboolean isIconboolean drawCheckboolean renderPressedboolean iconOnlyint nRicherint nHTMLint nPlainint nStringint nFlavorsint nDoneint endYint clipLeftint clipRightint clipTopint clipBottomint lineYint leftXint nodeXint rightXint lineXint middleXOfKnobint middleYOfKnobint boxWidthint boxLeftXint clickCountint aRowint row1int row2int startingRowint nWidthint editRowint minSelIndexint containerWidthint containerHeightint mappedTypeint colHeaderHeightint rowHeaderWidthint bufferWidthint bufferHeightint savexint controlSizeint iconLeftint iconTopint buttonHint viewTypeEnumeration<> paintingEnumeratorEnumeration<> descendantsFile homeDirPoint componentPointRectangle boundsBufferRectangle xRectRectangle lastChildBoundsRectangle editingBoundsRectangle nodeBoundsRectangle pBoundsRectangle newMinBoundsRectangle newRectRectangle focusRectColor borderColorDimension pSizeDimension editorSizeDimension retComponent oldComponentComponent focusedComponentComponent activeComponentComponent aComponentJComponent colHeaderJComponent rowHeaderIcon expandedIconIcon collapsedIconIcon dragJPanel topPanelJPanel bottomPanelJPanel fileNamePanelJPanel filesOfTypePanelMouseEvent retEventJScrollBar barJScrollPane scrollBasicTreeUI uiJTree treeTreeCellRenderer tcrTreeCellRenderer newCellRendererDefaultButtonModel modelTreePath initialPathTreePath lastChildPathTreePath oldPathTreePath anchorTreePath lastAnchorPathTreePath aPathTreePath lastPathTreePath oldLeadTreePath leadTreePath minPathTreePath lPathTreePath newPathTreePath leadPTreePath minSelPathDataFlavor[] richerFlavorsTreeCellEditor newEditorTreePath[] displayPathsTreePath[] changedPathsDragRecognitionSupport supportDefaultTreeCellEditor editorMouseInputHandler handlerArrayList<TreePath> selOrderBumpBuffer bufferList<BumpBuffer> buffersMetalButtonUI metalButtonUIMetalCheckBoxUI checkboxUIMetalComboBoxButton buttonAlignedLabel filesOfTypeLabelString gradientKeyString metalPackageNameString classIDObject textBorderObject palettePropObject toggleButtonBorderObject titledBorderBorderObject desktopIconBorderObject menuItemBorderObject toolTipBorderInactiveObject menuTextValueObject controlTextValueObject userTextValueObject windowTitleValueObject subTextValueObject systemTextValueObject messageFontObject sliderFillPropboolean rolloverboolean drawDotboolean closableboolean lafCondboolean isOpaqueboolean becameFlushboolean becameNormalint yLocationint xLocationint oneHalfint bumpLengthint bumpHeightint titleLengthint bumpXOffsetint bumpYOffsetint iconYint fHeightint buttonAdjustmentint endXint cpWidthint cpHeightint mbWidthint mbHeightint tpWidthint tpHeightint frameStateint correctionint gripSizeint gripYint gripXint arrowHeightint arrowWidthObject[] systemColorsObject[] internalFrameIconArgsObject[] defaultCueListBoolean paintActiveBoolean highContrastPoint dragWindowOffsetPoint convertedDragWindowOffsetRectangle boxRectangle startBoundsColor internalBackgroundColorColor mainItemColorColor darkHighlightColorColor xLightHighlightColorColor boxLightHighlightColorColor ulLightHighlightColorColor lrLightHighlightColorColor windowBodyColorColor titleColorColor edgeColorColor dotColorColor darkCircleColor whiteInnerLeftArcColor whiteOuterRightArcColor interiorColorColor darkShadowColor acceleratorForegroundColor acceleratorSelectedForegroundColor controlDarkShadowColor controlTextColorColor focusColorColor inactiveControlTextColorColor menuBackgroundColor menuSelectedBackgroundColor menuDisabledForegroundColor menuSelectedForegroundColor primaryControlColor primaryControlDarkShadowColor primaryControlShadowColor systemTextColorColor arrowColorDimension cpdDimension tpdGraphics imageGDimension[] sizesContainer contentJComponent contentCompJComponent oldTitlePaneJScrollBar oldSBJScrollBar newSBJToolBar tbJButton parentButtonBorder blackLineBorderBorder whiteLineBorderBorder contentBorderLazyValue dialogBorderLazyValue questionDialogBorderButtonModel buttonModelButtonModel sourceModelButtonModel targetModelJLayeredPane layeredPaneFrame frameFrame fJRadioButton rbMetalTheme themeMetalTheme currentThemeMetalBumps bumpsMetalRadioButtonUI metalRadioButtonUIImageGcPair imgGcPairMetalInternalFrameUI uiMetalLabelUI safeMetalLabelUIAATextListener aatlString theTitleString accelStringString retValueString controlKeyStrString returnValueObject lineStyleFlagboolean drawInvertedboolean lastInRunboolean tallerIconsboolean isVerticalint middleOfThumbint fillTopint fillLeftint fillBottomint fillRightint fillMinXint fillMaxXint fillMinYint fillMaxYint drawXint drawYint oneTouchSizeint oneTouchOffsetint lastTabRightint lastTabLeftint currentTabRightint shadowWidthint tabOverGapint tabLeftint tabRightint slantWidthint decorationStyleint finalHeightint menuXint menuYint accelBLint accelSpacingint boxRightXint beginRowint endRowint tileSizeint mid2int returnValueObject[] rangeList<> gradientList<> buttonGradientList<> sliderGradientBoolean activeBdouble kIdealTrackWidthdouble kIdealThumbHeightdouble kWidthScalarPoint dragOffsetPoint returnValueRectangle paintRectRectangle lastTabBoundsRectangle bumpRectRectangle returnValueColor trackColorColor sliderAltTrackColorColor ccccccColor dadadaColor c8ddf2Dimension returnValueAccessible returnValueFileView returnValueJButton leftButtonJButton rightButtonComponentUI muiFileFilter returnValueJToggleButton bFontMetrics accelMetricsLookAndFeel[] auxiliaryLookAndFeelsComponentUI[] uMetalBumps usedBumpsMetalToggleButtonUI metalToggleButtonUIObject oldScaleingHintsint leftRightint topBottomint renderCounterint bufferStatusfloat availablefloat availableSpaceObject[] extendedCacheKeysDimension canvasInsets dstInsetsNumber scaleGraphics2D bgView returnValueNimbusLookAndFeel lafPopup returnValueTreePath returnValueVolatileImage imgVolatileImage bufferEditorKit returnValueCacheMode cacheModeImageCache imageCacheint tmpOffXint tmpOffYint tmpWint tmpHint shadowOffsetint caint crint cgint cbint subOffsetint imageTypefloat spreadfloat blurFactorfloat sigmafloat twoSigmaSquarefloat sigmaRootfloat distanceint[] lineBufint[] srcPixelsint[] dstPixelsbyte[] tmpBuf1byte[] tmpBuf2byte[] srcPixelsbyte[] dstPixelsdouble trangleAnglefloat[] kernelfloat[] dataRaster srcRasterWritableRaster shadowRasterColor srcDerivedColor thatArrayCache cacheString parentUinString componentKeyString statesStringString stateNameString stateStringObject conObject iboolean stretchboolean inquotesboolean rotateboolean flipboolean isWindowsboolean inheritint newPixelCountint lastIYint lastIXint dx2int dy2int sbint srint dtint xSizeint ySizeint newDX2int newDY2int origianlAlphaValint shadowValint alphaValint bracketCountint translatexint translateyString[] sbyte[] srcAlphaBufMap<String,Object> keysMap<String,Object> defaultsList<String> spartsList<String> partsBufferedImage img1BufferedImage img2LayoutManager mUIDefaults dRegion rBorderLayout bSynthStyle sSynthIcon siMap<String,Integer> stateCodesTreeMap<String,Object> mapState<> customStateState<> stateDerivedColor colorPixelCountSoftReference refEntry<Integer,PixelCountSoftReference> entryIterator<Entry<Integer,PixelCountSoftReference>> mapIterInnerShadowEffect effectMap<Region,SynthStyle> mapLazyStyle sLazyStyle foundStyleList<LazyStyle> stylesPainter<> painterList<State<>> statesList<RuntimeState> runtimeStatesString fullKeyString partialKeyString stateNamesObject pboolean wasInCacheint xstateint bestCountint wildIndexint lastStateIndexint oStateString[] statePartsString[] statesfloat oldint[] lastIndexBoolean opaqueState<> sPainter<> pRuntimeState rsRuntimeState sRuntimeState cloneValues vStandardState sString compNameString sortOrderAffineTransform transformPainter<> backgroundPainterPainter<> foregroundPainterPainter<> borderPainterString lowerCaseNameString formattedTextString accTextString alignStringObject scaleKeyObject clientPropertyboolean forceboolean newoint dupsint newCounterint oldCounterint basicStateint titleAlignmentStringBuffer textJTextField fSynthContext ssJPopupMenu pJButton lastButtonComboBoxEditor newEditorComboBoxUI uiSynthStyle oldStyleSynthPainter painterSynthPainter nullPainterSynthPainter methodPainterJToggleButton buttonDefaultSynthStyle styleMap<String,Region> mapBakedArrayList matchesBakedArrayList cachedStylesStyleAssociation saPaint9Painter painterWeakReference<Paint9Painter> cacheRefPaintType typeParsedSynthStyle pStylePainterInfo piPainterInfo[] mergedPainterInfo[] tmpStateInfo infoStateInfo siMap<Region,String> mapMap<Region,String> lowerCaseNameMapSynthArrowButton buttonSynthComboBoxUI suiSynthComboPopup pSynthComboBoxRenderer rSynthMenuItemLayoutHelper lhSynthIconWrapper wrapperString typeSString aKeyObject infoObjectboolean subregionboolean isCjkLocaleboolean isGnomeboolean setAAboolean paintCenterboolean centerboolean stretchSpecifiedboolean paintCenterSpecifiedClass<> typeClassint buttonCountint selectedUIStateint curGapint candidateTextWidthint classIndexint iTypeint strLengthint baseStateint valueHeightint labelHeightint centerYint valueYint firstLblIdxint lastLblIdxint keyIntint centerXint cHalfWidthint labelWidthClassLoader urlLoaderdouble percentCompletePoint textPosPoint mousePositionRectangle labelRectColor currBGColor lastBGDimension valueIcon checkIconIcon arrowIconInsets sourceInsetsInsets destInsetsInsets pBarInsetsInsets trackInsetsInsets compInsetsSynthContext accContextSynthContext subcontextSynthContext trackContextJProgressBar pBarSynthGraphicsUtils graphicsUtilsSynthGraphicsUtils graphicsSynthGraphicsUtils synthGraphicsSynthStyle newStyleSynthUI synthUIColor[] newColorsAffineTransform rotationURL[] urlsSAXParser saxParserParsedSynthStyle stylePainterInfo painterInfoPainterInfo infoStateInfo stateInfoSynthArrowButton synthArrowButtonObject buttonMapObject rowHeightObject arboolean hasRolloverboolean showGridboolean isDropint availWidthint availHeightint xshiftint yshiftint glueCountint handleWidthint baseYint baseHint extraSpacePerGlueint handleHeightint baseXint baseWint imageOffsetInteger alignmentInteger rateBoolean showsRootHandlesRectangle childBoundsColor disabledColorColor bColor alternateColorColor colDimension compDimGraphics childGIcon currentIJTextComponent txtSynthContext cellContextMouseListener delegateTableCellRenderer currentRendererSynthGraphicsUtils synthGSynthStyle oldDividerStyleFont cFontSynthPainter foregroundMouseMotionListener delegate2DefaultTreeCellRenderer dtcrDefaultTreeCellRenderer rTreeCellRenderer rendererFiller fDefaultCellEditor editorList<? extends SortKey> sortKeysRowSorter<> rsTreeModel treeModelSynthArrowButton bSynthSpinnerUI uiSynthSplitPaneDivider dividerString reorderingAllowedStringString resizingAllowedStringString updateTableInRealTimeStringString contentStrString newlineObject idObject dObject docNewlineboolean isComposedTextElementboolean wasEmptyboolean needsNewlineboolean forceNewLineboolean isBackwardboolean lastValidboolean minorUpdatedboolean majorUpdatedboolean axisChangedboolean majorChangedboolean minorChangedClass<> columnClassint columnSizeint firstPStartint lastPEndint firstSpanStartint removeFromIndexint firstSpanEndint lastSpanEndint removeToIndexint lastSpanStartint removedElemCountint chngStartint chngEndint prevElemIndexint prevLevelint nextElemIndexint nextLevelint levelsEndint pStartint pEndint bidiflagint nmoveint off1int newlineIndexint breakPointint maxBreakint targetIndexint minorAxisint nInsertedint trx0int trx1int try0int try1int crx0int crx1int cry0int cry1float marginfloat spanfloat csSpanfloat targetSpanfloat targetOffsetfloat offsfloat nextOffsfloat startfloat lastOffsetfloat alignfloat marginSpanfloat adjustmentFactorfloat maximumAdjustmentfloat adjFfloat preffloat viewSpanfloat minSpanInteger loadPriorityInteger olong preferredlong desiredAdjustmentlong totalSpanObject[] oint[] diffsVector<> rowVector<> rowVectorBoolean defaultDirectionBoolean directionRectangle csTableCellRenderer oldJTable oldShape vView cvBadLocationException blPosition pVector<Object> vAttributeSet bidiAttrsBidi bidiAnalyzerElement bidiRootElement bidiElemElement newNextElemElement prevElemElement nextElemElement pElement lastHitTableCellEditor oldAbstractDocument adocAbstractDocument docMutableAttributeSet attrElementChange ecElementChange cDocumentFilter filterSegment segmentSegment segTableStringConverter converterDefaultTableCellRenderer labelEventType typeElement[] pElement[] elemsElement[] removedElemsElement[] addedElemsElement[] tmpUndoableEdit uVector<Vector<>> vAttributeContext contextContent cDefaultDocumentEvent eDefaultDocumentEvent chngVector<Element> newElementsElementEdit eeAbstractElement eAbstractElement[] newChildrenVector<AbstractElement> tempVectorUndoRedoDocumentEvent evChildState minChildState prefChildState csChildState sLayoutQueue qView[] addedString selectedTextString endOfLineString dotCharsString newStringObject endOfLinePropertyboolean isNewlineboolean adjustDotBiasboolean adjustMarkBiasboolean isCRLFboolean isCRboolean isPrintableMaskboolean beepboolean addToQueueboolean atEndboolean isComposedTextboolean isI18Nboolean hasRunsint vIndexint viewCountint damageWidthint nclicksint paintWidthint newDotint newMarkint offs0int offs1int nleftint delCharsint endOfLineint startOfLineint scrollAmountint initialYint begOffsint endOffsint oldOffsint newOffsetint oldP0int oldP1int removeFromint removeToint lastEndOffsetint prevStartOffsetint lastEndint index0float maxSpanfloat fitSpanInteger widthInteger newWidthClass<?> vcint[] offsetsint[] spanschar echoCharBoolean enableshort changedRunnable callSetComponentParentRunnable callRepaintNewCaretStringBuilder txtPoint magicPositionRectangle r0Rectangle retRectRectangle tempRectRectangle locRectangle newLocRectangle newVisRectangle dotBoundsJTextComponent tcNumber ratioNumber newRatioComponentOrientation lastComponentOrientation nextBias dotBiasBias markBiasFormat fShape childShapeShape retShapeShape endShapeView pView v0View v1View endViewDefaultCaret bidiCaretBadLocationException badlocBadLocationException e1BadLocationException ignoreBadLocationException exHeadlessException heHighlightPainter pHighlighter hCalendar calendarOutputStreamWriter oswAttributeSet parentAttributeSet sCopyClipboard bufferClipboard clipBias[] biasRetDocument curDocElement bidiElement lineElement curParaElement prevLeafElement newElemElement sectionDefaultFormatter formatterNavigationFilter filterSegment sSegment dataStyle defaultStyleStyle sElement[] removedElement[] addedElement[] prevRemovedElement[] prevAddedUndoableEdit cEditUndoableEdit ueStyleContext stylesBranchElement parentBranchElement prevParentContent contentDefaultDocumentEvent evntDefaultDocumentEvent ddeDefaultDocumentEvent changesView[] newChildrenReplaceHolder rhHighlightInfo infoHighlightInfo iHighlightInfo hiHighlightInfo tagHighlight[] hLayeredHighlightInfo lhiLayeredHighlightInfo infoElementSpec esStyleChangeUndoableEdit editString tlblString plblString removedStringObject narrayboolean insertingAtBoundryboolean insertingAfterNewlineboolean didEndboolean splitEndboolean containsOffs1boolean leaf0boolean leaf1boolean needRecreateboolean childAlteredboolean isEndboolean isEndLeafboolean isOnlyContentboolean nowrapint docLengthint breakOffsetint pParagraphIndexint leftIndexint oldDLCountint rmIndex0int rmIndex1int ljIndexint rjIndexint cLengthint deepestAlteredIndexint lastAlteredIndexint changeLengthint kidsToMoveint moveStartIndexint kidStartIndexint firstEndOffsetint stackSizeint faxisint newSpanint heightAxisint oldFlowHeightint newFlowHeightint rowIndexint flowAxisint breakWeightint breakIndexint bestWeightint bestSpanint spanLeftint g0int oldGapEndint adjustIndexint oldGapStartint newGapEndint addIndexint addOffsetint endSizeint new_gsint upperSizeEnumeration<> styleNamesfloat spanLeftfloat breakXfloat breakSpanfloat chunkSpanfloat maxpreffloat maxminObject[] sortedint[] justificationDataVector<> placeInshort lastStartDirectionchar[] txtchar[] impliedchar[] carrayComponent hostChangeListener lView poolView rowView wView rView lvView tmpViewAttributeSet pattrAttributeSet cattrAttributeSet newAttrsTextHitInfo hit0Element pParagraphElement nextRunElement belemElement leafElement firstElement child0Element child1Element toElement ljElement rjElement newChildElement toMoveElement newParentElement newEMutableAttributeSet mattrMutableAttributeSet asElementIterator itSegment buffSegment textStyle aStyleElement[] buffElement[] cElement[] childrenElement[] kidsElement[] newKidsUndoableEdit editBranchElement sectionBranchElement paragraphVector<Element> leftParentsVector<Element> rightParentsVector<Element> childrenLeafElement brkView[] viewsView[] vaDefaultStyledDocument dElementSpec lastStartSpecElementSpec firstElementSpec specElementSpec lastElementSpec firstSpecVector<ElementSpec> parseBufferElementSpec[] specList<ChangeListener> staleListenersElemChanges ecElemChanges changeElemChanges lastChangeArrayList<Element> childrenListDocReference rReferenceQueue<DefaultStyledDocument> qStackItem itemStackItem cloneeStackItem topTabExpander teTabExpander expanderMarkData mMarkData markMarkData dMarkData lastMarkData entryStickyPosition positionMarkVector cleanedMarkData[] marksMarkData[] arrayUndoPosRef refRow rowString runTextString caretColorStringString selectionColorStringString selectedTextColorStringString disabledTextColorStringString srcDataString latestCommittedTextString committedString selectionObject fieldboolean viewIsLeftToRightboolean paintedTextboolean initializedboolean underlineboolean strikeboolean supboolean subboolean hasTabboolean canboolean overflownboolean setboolean validEditboolean oldValboolean isEventDispatchThreadboolean wasEnabledboolean hasDefaultint viewPosCountint viewSelectionCountint hStartint hEndint viewLenint yTmpint breakSpotint pendint startFromint bspint TRAILINGint CONTENTint SPACESint txtOffsetint txtEndint startContentPositionint endContentPositionint lastTabPositionint trailingSpacesint contentSpacesint leadingSpacesint startJustifiableContentint endJustifiableContentint lCountint tlint literalCountint endLiteralCountint fieldTypeCountint attributeRunStartIndexint attributeRunEndIndexint tempIndexint edgeElementIndexint rCountint keymapCountint composedStartIndexint composedEndIndexint firstPartLengthint caretIndexint composedTextIndexint committedTextStartIndexint committedTextEndIndexMap<> attributesfloat x0Object[] valsObject[] sKeysObject[] keymapKeysObject[] retValueObject[] actionsint[] bschar oldBoolean runDirComparable<> minComparable<> maxRunnable runnablePrintingRunnable doFirefloat[] locsStringBuilder strBufBitSet spaceMapPoint magicPointPoint newLocationOnScreenColor selFGCallable<Object> doPrintJTextComponent textActionMap lastAMActionMap newAMInputMap lastInputMap newKMAction retValueShape savedClipShape boundsRectangle2D allocCaret cCaret oldKeyBinding bindingDefaultCaret dcHighlighter oldBreakIterator breakerIllegalComponentStateException iaeAttribute fieldAttributeSet indexASStringSelection contentsTextHitInfo currentHitPrintable textPrintablePrintRequestAttributeSet attrExecutionException eAccessibleTextSequence charSequenceAccessibleTextSequence rangeSequenceAccessibleTextSequence lineSequenceDocument oldStyledDocument sdocStyledDocument sDocElement paraElement indexElementElement edgeElementKeyStroke[] pStrokesKeyStroke[] sKeysKeyStroke[] keymapKeysKeyStroke[] keymapStrokesEnumeration<KeyStroke> eGlyphView vInternationalFormatter formatterPlainDocument sdocKeymap oldKeymap bindingDropLocation textLocationHighlight highlightTabExpander oldArrayList<Attribute> alHashMap<String,Keymap> keymapTableHashtable<String,Action> hEnumeration<Action> eFutureTask<Object> futurePrintingIndexedSegment segIndexedSegment segmentVector<KeyStroke> keyStrokesString placeholderString maskString filterString FONT_ATTRIBUTE_KEYObject filterNewlinesObject ioFmtboolean inStringboolean startEdgeboolean breakableboolean hasBreaksint blinkRateint errorOffsetint iLengthint textIndexint replaceLengthint lastPosint vcint numViewsint viewEndint tempEndint subCounterint paragraphSpanint rowSpanint viewsCountint currentSpanint extendableSpacesint lastLeadingSpacesint rowStartOffsetint rowEndOffsetint adjustmentint spaceAddonint spaceAddonLeftoverEndint viewStartOffsetint leftoverint rmOffs0int rmOffs1int line0int line1int elemStartint elemEndint heightBelowint heightAboveint linesBelowint linesAboveint linesTotalint endLineint lineIndexint xOffsint ntabsint currWidefloat xxfloat charsSizefloat gluefloat endfloat rvfloat retInteger aInteger alignint[] valueCounterint[] oldJustficationDataint[] spaceMapchar maskCharBoolean boldBoolean italicBoolean underlineBoolean strikeBoolean superscriptBoolean subscriptFloat indentFloat spaceRunnable workchar[] newDatachar[] ndataStringBuilder replaceStringBuilder filteredRectangle endRectangle lineAreaRectangle area0Rectangle area1Rectangle damageJTextComponent hostNumber numberValueKeyStroke kShape posBoundsShape shShape locShape originalAFontMetrics mView fView lastViewView parentViewBadLocationException excPosition newPosLayeredHighlighter dhJPasswordField fTextHitInfo caretPosElement lineMapElement rmCandidateElement lineElementElement linesSizeRequirements retMutableAttributeSet maElement[] linesElement[] aelemsElement[] relemsElement[] aelemElement[] relemElement[] alelemBranchElement mapBranchElement lineMapSimpleAttributeSet attrLayoutQueue defaultQueueJustificationInfo justificationInfoArrayList<MaskCharacter> fixedArrayList<MaskCharacter> tempTabSet tabsTabStop tabBranchElement[] abelemPosRec markSmallAttributeSet keySmallAttributeSet aSmallAttributeSet setWeakReference<SmallAttributeSet> referenceFontKey keyString ioFmtObject staticKeyObject staticValueObject shaperboolean boldboolean italicboolean hasMultiColumnboolean requireNextWordboolean isTabint fhashint numTabsint maxColumnsint cellint colSpanint colLimitint ncellsint cprefint nfillint bidiIndexint nextXint flushLenint flushIndexint charCountint txtCountint nextWidthint breakPosint lastOffsint lineStartint lineEndint wordPositionint nextWordint prevWordObject[] tblObject[] kaPoint mcpJTextComponent tcompBias originalBiasFont nextShape childBoundsShape s0Shape s1Shape childAllocationView rvView fragBreakIterator iterBreakIterator bitTextAttribute attrTextAttribute aTextLayout layoutAttributedCharacterIterator aciAttributeSet attrSetHashtable<Attribute,Object> hDocument aDocSizeRequirements rSizeRequirements[] reqsJEditorPane editorJEditorPane targetAbstractDocument dStyledEditorKit oStyledEditorKit kStyledEditorKit kitStyledEditorKit sekMutableAttributeSet iaStyleContext contextSimpleAttributeSet sasView[] reorderView[] oneTabSet tsTabStop ts1TabStop ts2TabStop tsTabStop oFontKey fontNamedStyle aTableRow rvTableRow rowString vAlignString padString borderValueString colorstrString digitsString hstrString htmlAttrValueString taObject bsObject cvObject lvObject bvObject nlvObject svObject valueMapperObject genericObject iValueObject fsboolean inWsboolean wsboolean emptyRowboolean isW3CLengthUnitsint nremovedint hole0int hole1int brIxint charIxint hitint lastIdxint currentWidthint hOffsetint testPint maxCapacityint replaceIndexint naddint nremoveint maxColsint colsint nColumnsint nRowsint numCellsint marginint relSizeint absSizeint borderWidthint pValueint baseFontSizeint cIndexint lastCharIndexString[] retValuefloat abovefloat lenfloat retValuefloat absoluteInteger rowIntegerint[] breaks0int[] lineEndsint[] oldLineEndsint[] sizeMapArrayList<> childrendouble growFactorMalformedURLException mueePoint editorLocationVector<String> tempShape childAllocView zoneView oldZoneView firstVector<Integer> vecAttributeSet tableAttrAttributeSet resolveParentAccessibleIcon[] iconsAccessibleTable atSizeRequirements parentRTag tagMutableAttributeSet cssAttrSetStyleSheet sheetVector<View> zonesView[] newZonesElementInfo childInfoElementInfo innerMostElementElementInfo captionInfoElementInfo retValueElementInfo elementInfoElementInfo childElementInfo infoElementInfo parentTableCellElementInfo cellTableCellElementInfo cellInfoTableCellElementInfo startCellTableCellElementInfo endCellTableCellElementInfo elementInfoTableCellElementInfo headerElementInfoTableRowElementInfo rowTableAccessibleContext tableElementArrayList<TableCellElementInfo> listArrayList<ElementInfo> childrenLengthValue lvLengthValue vAttribute cssKeyAttribute cssAttrAttribute[] keysAttribute[] cssAttrListValue cssvBorderStyle bsColorValue cvColorValue colorValueStringValue vAlignVStringValue svCssValue convCssValue valueFontSize sizeValueFontSize fsFontFamily familyValueFontFamily ffFontWeight weightValueFontWeight fwString fontSizeString lineHeightString srcAttString listenerClassString listenerClass1String listenerClass2String imageDataString mouseCoordsString xString yString encodedValueString marginStrString frameBorderString scrollingString postTargetString istrString frameNameString urlStrString frameTargetString htmlObject commentObject modelObject mObject descObject mapsboolean canAdjustboolean xAxisboolean isImportboolean lastWasEscapeboolean isPostMethodboolean checkedboolean isAutoFormSubmissionint maxCint lastMarginint totalSpacingint margin0int margin1int adjustmentWeightsCountint allocatedint adjustmentLevelint roundErrorint adjint availableSpanint offsetAdjustint curSpanint boundGapint intXint intYint intWidthint intHeightint sideLengthint nextTokenint nextCharint ublint escapeCountint escapeCharint intStopCharint escapeOffsetint startTokenint nTokensint sIndexint tempSpaceint remainingSpaceint insertPositionString[] itemsfloat vTotalFile selectedlong minimumlong maximumlong currentPreferredObject[] partsint[] lengthPatternint[] newUSint[] spanURL baseURL srcURLURL actionURLURL oldPageshort founddouble inclong[] gainlong[] losslong[] adjustmentsArrayFloat scaleFloat scaleFloatchar[] newBufferfloat[] tempPercentsMalformedURLException e1StringBuilder dataBufferBitSet selectionRangeColor bottomColor topImage tmpImgint[][] intCornersChangeListener listenerInsets retIJTextComponent textCListDataListener listenerJButton browseButtonAbstractListModel<> listModelColor[] colorPatternPolygon shapeDefaultButtonModel buttonModelJPasswordField fieldAttributeSet elemAttrAttributeSet eAttrDocument propDocDocument newDocElement formElement formEElement nextElement targetElementToggleButtonModel modelJEditorPane cJEditorPane hostJEditorPane pJEditorPane outerMostJEditorPaneEditorKit inheritedEditorKitAbstractDocument docModelHTMLEditorKit hostKitTag tTag nameMutableAttributeSet aDocumentListener listenerJTextArea taPlainDocument docLengthValue bwValue styleBorderStyle styleBackgroundImage retValueBackgroundPosition bpLengthUnit luHashtable<String,Float> mappingBorderPainter painterFormSubmitEvent formEventFormSubmitEvent fseMethodType methodTypeHTMLFrameHyperlinkEvent eOptionListModel<> modelFrameEditorPane pFrameView vOption optionOptionListModel<Option> modelTextAreaDocument docOptionComboBoxModel<> modelFrameSetView frameSetViewFrameSetView parentTag[] tagsHTMLReader readerRunElement brkBlockElement htmlBlockElement bodyBlockElement paragraphString lastTextString declString relString colorString faceString baseFileString newFileString wsString objStringString decorString htmlValueString srcObject commentsObject equivObject useMapObject elementNameObject cachedObjectObject nextKeyObject hrefObject nameTagObject endTagObject nameAttributeObject tValueObject attributeObject attrObject endObject alignmentboolean wantsNewlineboolean joinNextboolean isDefaultCSSboolean isCSSboolean insertboolean multipleboolean needPImpliedboolean nextTagIsInsertTagboolean joinPboolean adjustCursorboolean forcedBodyboolean isBlockboolean outputEndTagboolean removeAllboolean outputStyleboolean didOutputStyleboolean oldReplaceint startLengthint targetOffsetint pLengthint removeCounterint cStartint popsint pushesint currentOffsetint prevEndOffsetint elementOffsetint bodyStartEnumeration<> stylesEnumeration<> attributesURL newBaseURL referenceBoolean ignoreCharsetchar[] onechar[] lastTextMalformedURLException mfe2Container parentContainerJTextComponent compJTextComponent textComponentShape lBoundsShape rBoundsShape s2JViewport viewPortJViewport cachedObjectView oldParentCursor newCursorButtonGroup radioButtonGroupAttributeSet checkAttributeSet a0AttributeSet a1AttributeSet areaAttributeSet anchorAttrElement retValueElement charElementElement commonParentElement endEElement newLineEElement lastElemElement lastMatchElement nextElementElement rootElementElement currElementElement currentElement topHyperlinkEvent exitHyperlinkEvent enteredAbstractDocument documentHTMLDocument documentHTMLEditorKit oTag tagToInsertIntoTag kindMutableAttributeSet objAttrMutableAttributeSet fontAttrElementIterator fwdElement[] pPathElement[] retValueStyleSheet defaultStylesDefaultDocumentEvent eventElementEdit firstEditSimpleAttributeSet newAttrsSimpleAttributeSet attrsElementSpec objSpecElementSpec prevAccessibleHTML aOptionListModel<Option> mOptionListModel<Option> listModelMap mMap mapParserCallback receiverTagAction naTagAction baTagAction paTagAction caTagAction saTagAction faTagAction haTagAction convTagAction actionStack<Element> elementsOptionComboBoxModel<Option> mOptionComboBoxModel<Option> comboBoxModelHTMLWriter wMinimalHTMLWriter wAttributeSet[] areasString shapeStringString styleString separatorString mappedNameString baseUnitsDisableString baseUnitsString w3cLengthUnitsEnableString w3cLengthUnitsDisableString selectorString selectorNameString tagStringString imgstrString tmpstrString numStyleString formattedNumObject decorObject vAlignObject whitespaceObject shapeObject resolveAttrObject retObjectObject testAttrObject cssValueObject cssKeyObject cssMarginValueObject startValueObject cNameboolean createTextboolean uboolean inContentboolean callIndentboolean editableboolean lastWasSpaceboolean uppercaseClass<> kint specifiedWidthint specifiedHeightint tbint numAreasint numPercentsint pCounterint newRadint endMaskint startMaskint specificityint numLinkedSSint numStylesint spaceIndexint poundIndexint numTagsint retIndexint iValueint stringwidthint ySpotint sLastint thisLastString[] selectorsString[] tagsString[] classesDictionary<> cacheEnumeration<> attributeNamesfloat fWidthfloat fHeightfloat insetfloat dwfloat dhfloat localLeftMarginfloat localRightMarginfloat orientationMarginint[] coordsStringBuffer cacheLookupURL srcdouble proportionMalformedURLException murleRectangle altRectRectangle childRectVector<String> selectorsVector<String> elementsImageIcon iiView pViewAttributeSet cssAttrSetAttributeSet htmlAttrAttributeSet cssRuleMutableAttributeSet cssStyleSetMutableAttributeSet convertedStyle ruleStyle altRuleStyle retStyleStyleSheet[] retValueVector<Element> searchContextDefaultStyledDocument styledDocGlyphPainter painterAttribute cssValue childtypeValue repeatsBackgroundPosition posOptionListModel<> cloneVector<AttributeSet> muxListAttributeSet[] retValueAttributeSet[] newAttrsAttributeSet[] asAttributeSet[] attrsImageLabelView newViewRegionContainment rcResolvedStyle styleResolvedStyle ruleResolvedStyle retStyleSelectorMapping mappingSelectorMapping childMappingVector<SelectorMapping> tempVectorHashtable<SelectorMapping,SelectorMapping> tempHashtableEnumeration<ResolvedStyle> valuesSearchBuffer sbCssParser parserString valignString stackElementString stackElemNameString attvalueString elemStrString stackElemString fontObject alignObject elObject foregroundColorObject backgroundColorObject aNumboolean insertTagboolean reqAttsboolean semicolonboolean netboolean warnedboolean unknownboolean insideCommentint sCurrentint thisCurrentint thisDotIndexint thisPoundIndexint sDotIndexint sPoundIndexint minimalFontSizeint spanNeededint rowAdjustint firstAdjustint row0int usedint commentEndPosint minLengthint CHRint PGFint SECint DOCint PSTint int_valueint el_countint el_idxString[] selectorString[] exclusionsString[] inclusionsString[] sortedFontTableDictionary<> textKeywordDictionaryEnumeration<> asEnumeration<> colorsInteger numInteger aNumThread curThreadObject[] aaObject[] bbStringBuffer strBuffchar lchbyte flagBoolean TrueBoolean FalseStringTokenizer sshort topshort bottomshort hshort boxBottomshort nameIdshort valueIdshort numValueschar[] newtextchar[] newBufchar[] newstrchar[] newStrchar[] strchar[] charsToAddchar[] partialArrayThreadDeath eStringBuilder strBuffStringBuilder accumulatorBitSet exclBitSet inclRectangle allocationNumber swingValueNumber oldNumber valueVector<String> valsVector<String> valuesEnumeration<String> fontsColor[] sortedColorTableView captionInterruptedIOException exAttributeSet rowAttrSizeRequirements rvAttribute attkeySimpleAttributeSet attsLengthValue cssWidthSelectorMapping retValueRowView rv0RowView rv1RowView rvRowView rowAttributeList attsAttributeList aAttributeList attContentModel mContentModel nextContentModel contentVector<Element> elemVecContentModelState newStateDTD dtdDTD _dtdHashtable<String,DTD> resultTagElement tTagElement tagTagStack sTagStack spRTFAttribute attributeRTFGenerator genDictionary<String,RTFAttribute> dRTFAttribute[] attrsVector<RTFAttribute> aRTFReader rdrCharacterKeywordPair pairVector<CharacterKeywordPair> tempPairsString styleTypeString approximationString itemString stypeObject parmObject oldStyleObject newStyleObject oldTabsObject newTabsObject oldSaveStateObject propNameObject setObject lastObject retvalObject oldRootObject parentValueObject rootUOboolean wroteSomethingboolean ignoreGroupIfUnknownKeywordSaveboolean booleanParameterboolean wasExpandedboolean wasVisibleint styleNumberint wordCountint twipsint sub_countint colorNumint nybbleint parameterint ttypeint semicolonint tabAlignmentint tabLeaderint pgfEndPositionint level1int level2int yLocint textHeightint totalYint anIndexint oldModeint newPathLengthint pathSizeint invisCountint visCounterint cPathCountint selCountint selLengthint retCountint newChildIndexint childRowint nextRowint childRowCountint lastModelIndexDictionary<> oldParserStateDictionary<> previousStateDictionary<> workingTabsEnumeration<> docPropsEnumeration<> pathsEnumeration<> enumerEnumeration<> childrenfloat targfloat tabPositionInteger basedOnInteger nextNumInteger fontNumInteger stopCountInteger fontnumInteger stateItemDictionary<Object,Object> restoredStateDictionary<Object,Object> tabslong parameterObject[] retPathObject[] tValuesObject[] removedArrayObject[] newChildrenObject[] cChildrenInputStream charsetStreamint[] conversionint[] newIndexsint[] childIndexint[] cIndexsint[] tempRowsint[] selectionIndexint[] changedIndexsBoolean hiddenBoolean additiveboolean[] newnesschar[] tablechar[] newstringchar[] setchar[] valuesBitSet bitSetColor bColorColor bsColorDimension rSizeDimension retDimensionNumber skipNumber itemComponentOrientation treeOrientationDefaultListSelectionModel lModelBorder aBorderTreePath firstPathTreePath beginLeadPathTreePath changedPathEnumeration<Integer> numsDictionary<String,Object> saveStateAttributeSet basisAttributeSet characterParentAttributeSet paragraphParentAttributeSet sectionParentAttributeSet pgfAttributesAttributeSet chrAttributesDefaultMutableTreeNode nextSiblingDefaultMutableTreeNode aNodeDefaultMutableTreeNode previousSiblingDefaultMutableTreeNode myParentDefaultMutableTreeNode retvalDefaultMutableTreeNode nodeDefaultMutableTreeNode newNodeTreeNode ancestorTreeNode node1TreeNode node2TreeNode previousTreeNode myParentTreeNode retvalTreeNode currentTreeNode parentStreamTokenizer inMutableAttributeSet goatMutableAttributeSet setMutableAttributeSet attributesMutableAttributeSet bldStyle nextStyleStyle definedStyle basisStyle nextStyle characterStyleStyle paragraphStyleStyle sectionStyleTreeModelEvent eTreePath[] newPathsTreePath[] newSelectionTreePath[] toAddTreePath[] rPathTreePath[] resultTreePath[] newSelTreePath[] tempPathStack<TreePath> pathsList<TreePath> newSelectionAsListHashtable<TreePath,Boolean> tempHTMutableTreeNode oldParentMutableTreeNode childMutableTreeNode parentMutableTreeNode aNodeEnumeration<TreePath> newPathsEnumeration<TreePath> pEnumDefaultTreeSelectionModel cloneTreeSelectionEvent eventNodeDimensions ndVector<Style> chrStylesVector<Style> pgfStylesVector<Style> secStylesVector<Style> toSetTabStop newStopTabStop[] tabsEnumeration<AttributeSet> stylesRTFAttribute attrEnumeration<RTFAttribute> attributesStyle[] styleArrayDestination restoredDestinationStyleDefiningDestination styleStyleDefiningDestination styleDestEnumeration<StyleDefiningDestination> stylesTreeNode[] retNodesTreeNode[] realPathQNode oldHeadPathPlaceHolder placeholderVector<PathPlaceHolder> cPathsVector<PathPlaceHolder> pathsToRemoveFHTreeStateNode lastNodeFHTreeStateNode nodeFHTreeStateNode childNodeFHTreeStateNode parentNodeFHTreeStateNode changedParentFHTreeStateNode childFHTreeStateNode changedParentNodeFHTreeStateNode changedNodeFHTreeStateNode parentFHTreeStateNode nextSiblingFHTreeStateNode aNodeString jaxbContextFQCNString classnameAsResourceString strTrueString strFalseString msString severityString idValueObject changedValueObject changedParentObject rootObjectObject realNodeObject myKeyObject contextboolean makeVisibleboolean makeInvisibleboolean isParentRootboolean isFixedboolean retValboolean inStripModeboolean domClass<> spFactoryClass<> spiClass<> jaxbContextClass<> targetint lastChildEndRowint retChildIndexint pathLengthint oPathLengthint oldChildCountint removedRowint oldRowint newYOriginint aYint nodeWidthint startHeightint originalRowint heightDiffint rowsDeletedint lastYEndint startYEndint myRowint shiftAmountint halfLimitint keepFromint keepToint strIndexEnumeration<> cursorEnumeration<> myKeysException nestedInputStream resourceStreamStringBuffer tempSpotStringBuffer msgbyte[] quadrupletbyte[] nbURL targetTypeURLURL resourceURLStringTokenizer packageschar[] mapStringBuilder propFileNameStringBuilder resourceStringBuilder rStackTraceElement[] stCharSequence charContentTreePath retObjectTreePath oTreePathVector<Object> uselessKeysInputSource isrcXMLReader rSAXParserFactory parserFactoryURLConnection conReference<Class<?>> refClassList<Service> servicesConsoleHandler handlerLocation locationUndoableEditEvent evUndoableEdit eUndoableEdit lastUndoableEdit nextFHTreeStateNode aChildFHTreeStateNode lastChildFHTreeStateNode newParentTreeStateNode nodeTreeStateNode visNodeTreeStateNode lastNodeTreeStateNode changedNodeTreeStateNode changedChildNodeTreeStateNode changedParentNodeTreeStateNode newNodeTreeStateNode removedNodeTreeStateNode parentTreeStateNode newChildNodeTreeStateNode previousNodeTreeStateNode aNodeTreeStateNode newParentTreeStateNode childClass<? extends JavaCompiler> cClass<? extends T> cJAXBException eJAXBContext contextDatatypeConfigurationException eXmlRootElement rCache dWeakReference<Cache> cJAXBElement<T> itemMarshaller mValidationEventLocator locatorTransformService tsString factoryIdString valueUseCompatibleSerialVersionUIDString serviceIdString javahString locInfoString rString opDefClassNameboolean isPositiveboolean yearSetboolean monthSetboolean daySetboolean hourSetboolean minuteSetboolean secondSetboolean useBSClsLoaderClass<> spiClassClass<> serviceClassClass<> pClassint endOfNamespaceURIint __lengthint _memberCountString[] rException unusedException exrThrowable unusedThrowable scauseObject[] argxClass<?> orbClassClass<?> opDefClassFileInputStream inStreamSystemException systemExceptionMethod tLoadMethodMethod tIteratorMethodClass<?>[] argcSecurityException ignoredURL itInstantiationException instantiationExceptionIllegalAccessException illegalAccessExceptionClassNotFoundException ceClass<ORB> orbBaseClassBufferedReader rdBigDecimal realSecondsBigDecimal realMillisecondBigDecimal realMillisecondsBigDecimal secondsBigDecimal fractionalSecondsboolean[] valuelong[] valueBigInteger realYearsBigInteger realMonthsBigInteger realDaysBigInteger realHoursBigInteger realMinutesBigInteger monthsBigInteger realYearBigInteger daysBigInteger hoursBigInteger minutesAny[] valuefloat[] valuedouble[] valueInvocationTargetException exsClassCastException classCastExceptionPolicyError valuePolicy[] valueStringBuilder sbufferPermissionCollection noPermissionCodeSource nullSourceStringWriter wList<String> tempMap<?,?> copyMap<String,String> tempList<?> copyList<?> xPathListCopyTransformerFactoryConfigurationError errorStreamSource ssFactoryConfigurationError errorDuration fullDurationSchemaFactory fSchemaFactory sfSchemaFactory factoryImplSchemaFactory schemaFactorySchemaFactory factoryXPathFactory fXPathFactory xPathFactoryXPathFactory factoryXPathFactoryConfigurationException xpathFactoryConfigurationExceptionGSSException eServiceConfigurationError errorDerOutputStream doutDerValue derValDatatypeConfigurationException errorMarshaller marshallerXMLSignatureFactory factoryKeyInfoFactory factoryList<XPathType> tempIterator<? extends Entry<?,?>> entriesAttachmentPart attachmentMessageFactory factorySOAPFactory factorySAAJMetaFactory instanceMimeHeader hdrServiceLoader<SchemaFactory> loaderW3CEndpointReference eprWebServiceException exIterator<Provider> itServiceLoader<XPathFactory> loaderChannelBinding cbOid retValNameValuePair valueServiceDetail thatnew ORBSingleton(...)new XMLSchemaFactory(...)new XPathFactoryImpl(...)new DatatypeConfigurationException(...)new SOAPException(...)new MimeHeader(...)new MatchingIterator(...)new SOAPElementFactory(...)new SchemaFactoryFinder(...)new SchemaFactoryConfigurationError(...)new WebServiceException(...)new Scope(...)new Responses(...)new HashMap<QName,String>(...)new XPathFactoryFinder(...)new GSSException(...)new GSSManagerImpl(...)new Oid(...)new CompletionStatus(...)new DefinitionKind(...)new ParameterMode(...)new _PolicyStub(...)new ServiceDetail(...)new ServiceInformation(...)new SetOverrideType(...)new StringValueHelper(...)new TCKind(...)new WStringValueHelper(...)new WrongTransaction(...)new _BindingIteratorStub(...)new BindingIteratorHolder(...)new BindingListHolder(...)new BindingType(...)new _NamingContextExtStub(...)new _NamingContextStub(...)new CannotProceed(...)new NotFoundReason(...)new _DynAnyFactoryStub(...)new _DynAnyStub(...)new _DynArrayStub(...)new _DynEnumStub(...)new _DynFixedStub(...)new _DynSequenceStub(...)new _DynStructStub(...)new _DynUnionStub(...)new _DynValueStub(...)new InvalidTypeForEncoding(...)new ServiceContext(...)new TaggedProfile(...)new IdAssignmentPolicyValue(...)new IdUniquenessPolicyValue(...)new ImplicitActivationPolicyValue(...)new LifespanPolicyValue(...)new RequestProcessingPolicyValue(...)new _ServantActivatorStub(...)new _ServantLocatorStub(...)new ServantRetentionPolicyValue(...)new ThreadPolicyValue(...)new DOMImplementationRegistry(...)new ParserAdapter(...)new AttributeListAdapter(...)new AttributesAdapter(...)Object ___resultTypeCode __resultString valueTypeString snString addrAny _bAny __resultAny _how_manyAny _blAny __returnAny _nAny _objAny _exceptAny _ncOutputStream _outInputStream _inboolean ___resultint __indexint vmcidint __resultint how_manyStructMember valueStructMember[] _membersApplicationException _exRemarshalException _rmNamingContext $resultClass<>[] argcNO_IMPLEMENT exNVList _listUnknownUserException valueWrongTransaction valueUnionMember valueValueMember valueshort[] valuePolicy __result_BindingIteratorStub stub_NamingContextExtStub stub_NamingContextStub stubBinding valueBindingHolder bBindingListHolder blBindingIteratorHolder biBinding[] valueNameComponent valueInvalidName $exInvalidName valueInvalidName e2NameComponent[] valueNameComponent[] nNameComponent[] $resultInvalidAddress $exInvalidAddress valueNotFound $exNotFound valueNotFound e0CannotProceed $exCannotProceed valueCannotProceed e1AlreadyBound $exAlreadyBound valueAlreadyBound e3NotEmpty $exNotEmpty valueDefinitionKind __resultServiceInformation thatAny _biNamingContext ___resultTypeMismatch valueInvalidValue valueInconsistentTypeCode valueDynAnyOperations $selfDynAny[] valueNameDynAnyPair valueNameDynAnyPair[] valueNameValuePair[] value_DynAnyFactoryStub stub_DynAnyStub stub_DynArrayStub stub_DynEnumStub stub_DynFixedStub stub_DynSequenceStub stub_DynStructStub stub_DynUnionStub stub_DynValueStub stubInvalidName e3CannotProceed e2AlreadyBound e1NotEmpty e0ServantObject $soDynAnyFactoryOperations $selfDynArrayOperations $selfDynEnumOperations $selfDynFixedOperations $selfDynSequenceOperations $selfDynStructOperations $selfDynUnionOperations $selfString sourceNameString serviceValueString driverString serviceClass<> sourceClassClass<> driverClassint origMaxString[] newDataString[] myPartsString[] attNameString[] partsEnumeration<> allPrefixesVector<> exceptionsInstantiationException e3IllegalAccessException e2boolean[] newFlagsValueMember[] _members0FormatMismatch valueInvalidTypeForEncoding valueServiceContext valueTaggedProfile valueTaggedComponent valueTaggedComponent[] valueNullPointerException e5UnknownEncoding valueForwardRequest valueObjectReferenceTemplate[] valueDuplicateName valueInvalidSlot valueIOR valueList<String> prefixes_ServantActivatorStub stub_ServantLocatorStub stubWrongAdapter valueWrongPolicy valueObjectAlreadyActive valueServantNotActive valueNoContext valueAdapterNonExistent valueAdapterInactive valueAdapterAlreadyExists valueInvalidPolicy valueNoServant valueServantAlreadyActive valueObjectNotActive valueServantLocatorOperations $selfServantActivatorOperations $selfAbstractMethodError aexMap<String,String[]> tableLocator2 l2DOMImplementationList implsDOMImplementationSource sourceAttributes2 a2DynValueOperations $selfServiceContext[] valueContext[] newContexts(...).transportDebugFlag(...).bbwi(...).fragmentOffset(...).fragmentOffset_(...).headerPadding(...).giopDebugFlag(...).originalEx(...).socketInfo(...).theBinding(...).poaFSMDebugFlag(...).poaConcurrencyDebugFlag(...).subcontractDebugFlag(...).giopHeader(...).data(...).top(...).accessor(...).type(...).style(...).string(...).left(...).right(...).value(...).sym(...).parse_state(...).next(...).kind(...).varBindList(...).isBeingDestroyed(...).class_name(...).class_path(...)._variable(...).node(...).name(...).previousSibling(...).namespaceURI(...).allowGrammarAccess(...).ownerDocument(...).ch(...).position(...).entityLocation(...).text(...).notation(...).totalDigits(...).fracDigits(...).length(...).detail(...).listBox(...).rawname(...).fCompositor(...).fParticleCount(...).fParticles(...).fValue(...).fType(...).fDerivedBy(...).fContentType(...).fParticle(...).fBlock(...).fModelGroup(...).entry(...).fErrorHandler(...).m_char(...).m_uri(...).m_axis(...).m_firstWalker(...).m_arg0(...).m_arg1(...).m_arg2(...).m_origObj(...).m_left(...).m_right(...).m_qname(...).isPosted(...).peer(...).comp(...).newEventsOnly(...).eventCache(...).appContext(...).orig(...).numOfLWComponents(...).numOfHWComponents(...).isInHide(...).hintmap(...).nested(...).mimeType(...).curves(...).floatCoords(...).doubleCoords(...).active(...).e(...).s(...).c(...).form(...).member(...).fieldOffset(...).staticOffset(...).staticBase(...).ref2(...).refs(...).holder(...).external_address(...).ref(...).provider(...).state(...).algorithm(...).allPermission(...).ks(...).m(...).p(...).y(...).x(...).driver(...).key(...).zone(...).year(...).totalSeconds(...).excessDays(...).leapSecond(...).completer(...).cmp(...).gregorianCutover(...).red(...).prev(...).localeExtensions(...).baseLocale(...).stack(...).ex(...).first(...).nextTable(...).item(...).pool(...).workQueue(...).config(...).hashCode(...).heapIndex(...).lock(...).loop(...).body(...).atom(...).localIndex(...).groupIndex(...).buffer(...).op(...).values(...).names(...).impl(...).feedResolution(...).crossFeedResolution(...).members(...).locale(...).uri(...).constrainX(...).constrainY(...).isDragging(...).danger(...).springs(...).actionListener(...).sortOrder(...).column(...).uis(...)._painterInfo(...).index(...).endOffset(...).endTextLength(...).attributes(...).content(...).childIndex(...).oidnew EndPointInfo[]new String[]new String[][]new Object[]new StructMember[]new ORBPortInfo[]new Node<>[]new int[]new Class<>[]new Class<?>[]new byte[]new Constructor<?>[]new Method[]new Field[]new Type[]new TypeVariable<>[]new boolean[]new long[]new short[]new AnyImpl[]new TypeCodeImpl[]new UnionMember[]new ValueMember[]new Any[]new DynAny[]new NameDynAnyPair[]new NameValuePair[]new char[]new float[]new double[]new FullValueDescription[]new Map<>[]new boolean[][]new TypeCode[]new Parameter[]new Exception[]new TaggedComponent[]new Codec[]new ObjectReferenceTemplate[]new Interceptor[][]new Policy[]new ORBInitializer[]new SlotTable[]new ObjectStreamField[]new ObjectStreamClass[]new Annotation[][]new Remote[]new ProtectionDomain[]new ObjectStreamClassEntry[]new MethodSignature[]new OperationDescription[]new AttributeDescription[]new Initializer[]new byte[][]new Object[][]new Binding[]new NameComponent[]new Thread[]new POAImpl[]new POA[]new Key[]new Element[]new Acceptor[]new USLPort[]new StringPair[]new ParserData[]new Operation[]new Integer[]new Entry[]new StackTraceElement[]new Entry<>[]new ReaderWriter[]new ExceptionRW[]new Throwable[]new SpecialMethod[]new TaggedProfile[]new IdentityHashtableEntry[]new ColorNode[]new JPEGHuffmanTable[]new JPEGQTable[]new int[][]new ImageTypeProducer[]new ComponentSpec[]new Dimension[]new ScanComponentSpec[]new Htable[]new CloseAction[]new ColorModel[]new WidgetType[]new File[]new EventListener[]new FileFilter[]new AbstractColorChooserPanel[]new Window[]new ShadowType[]new PositionType[]new Node[]new Color[]new double[][]new XColor[]new MenuElement[]new JInternalFrame[]new Component[]new Rectangle[]new KeyBinding[]new Frame[]new State[]new Action[]new Icon[]new short[][]new Symbol[]new NotificationListener[]new LoaderEntry[]new MXBeanMapping[]new OpenType<?>[]new ObjectName[]new Collection<>[]new CompositeBuilder[][]new Descriptor[]new MBeanNotificationInfo[]new MBeanConstructorInfo[]new MBeanAttributeInfo[]new MBeanOperationInfo[]new MBeanParameterInfo[]new OpenMBeanParameterInfo[]new TargetedNotification[]new ClientListenerInfo[]new IdAndFilter[]new Callback[]new AppConfigurationEntry[]new Certificate[]new Principal[]new JJCalls[]new InetAddress[]new SnmpVarBind[]new Byte[]new SnmpOid[]new Vector<?>[]new Vector<>[]new ClientHandler[]new SnmpInformRequest[]new ExecutorThread[]new URL[]new JavaClass[]new ElementValuePair[]new Attribute[]new AnnotationEntry[]new ElementValue[]new BootstrapMethod[]new CodeException[]new Constant[]new LineNumber[]new LocalVariable[]new StackMapEntry[]new InnerClass[]new ParameterAnnotationEntry[]new MethodParameter[]new StackMapType[]new Unknown[]new AnnotationEntryGen[]new Instruction[]new MethodObject[]new InstructionTargeter[]new InstructionHandle[]new LocalVariableGen[]new CodeExceptionGen[]new LineNumberGen[]new List<>[]new PathEntry[]new SyntaxTreeNode[]new TestSeq[]new Expression[]new BranchHandle[]new Chunk[]new DOM[]new DOMAdapter[]new HeapNode[]new Collator[]new Locale[]new NodeList[]new NodeSortRecord[]new RevalidationHandler[]new Boolean[]new QName[]new CharacterBuffer[]new String[][][]new QName[][]new ContentModelValidator[]new ContentModelValidator[][]new DatatypeValidator[]new DatatypeValidator[][]new Grammar[]new CMLeaf[]new CMStateSet[]new XSSimpleType[]new XSSimpleTypeDecl[]new DateTimeData[]new ShortList[]new TypeValidator[]new XSObject[]new XSFacetImpl[]new XSMVFacetImpl[]new LocationPath[]new Step[]new int[][][]new RegularExpression[]new ClosureContext[]new Token[]new SchemaGrammar[]new ObjectList[]new XSNamedMap[]new SimpleLocator[]new XSElementDecl[]new XSGroupDecl[]new XSComplexTypeDecl[]new XSAnnotationImpl[]new XSTypeDefinition[]new XSParticleDecl[]new OneSubGroup[]new XMLInputSource[]new XSCMValidator[]new XSNotationDecl[]new XPathMatcher[]new IdentityConstraint[]new XSAttributeUseImpl[]new XSComplexTypeDecl[][]new XSSimpleTypeDecl[][]new XSAttributeUseImpl[][]new XSAttributeDecl[]new XSAttributeDecl[][]new XSModelGroupImpl[]new XSModelGroupImpl[][]new XSParticleDecl[][]new XSElementDecl[][]new XSNamedMap[][]new SymbolHash[]new IntStack[]new Occurence[]new XSCMLeaf[]new Attr[]new NodeImpl[]new NodeImpl[][]new OneAttr[]new XSDocumentInfo[]new HashMap<>[]new LSInput[]new XInt[]new XSNamedMapEntry[]new BigDecimal[]new XMLGregorianCalendar[]new Source[]new DTMAxisTraverser[]new DTM[]new HashEntry[]new ExtendedType[]new NameSpaceSymbEntry[]new XMLX509Digest[]new XMLX509SKI[]new XMLX509SubjectName[]new ElementState[]new char[][]new StringToStringTable[]new XObject[]new PredicatedNodeTest[]new DTMIterator[]new LocPathIterator[]new StepPattern[]new OptionInfo[]new KerberosKey[]new Control[]new NTSidGroupPrincipal[]new EventQueueItem[]new Set<>[]new VolatileImage[]new PropertyChangeListener[]new Cursor[]new Queue[]new FileAttribute<?>[]new DisplayMode[]new AWTKeyStroke[][]new VetoableChangeListener[]new Point[]new SystemColor[]new TrayIcon[]new AWTEventListener[]new WeakReference<>[]new ColorTransform[]new float[][]new DataFlavor[]new FlavorListener[]new Range[]new GlyphJustificationInfo[]new Shape[]new TextLineComponent[]new ColorSpace[]new ICC_Profile[]new PrintService[]new StreamPrintServiceFactory[]new EventSetDescriptor[]new PropertyDescriptor[]new MethodDescriptor[]new BeanInfo[]new ParameterDescriptor[]new Entry<?>[]new ClassDataSlot[]new HandleList[]new MemberSignature[]new UnicodeBlock[]new UnicodeScript[]new Character[]new char[][][]new TypeVariable<?>[]new Enumeration<?>[]new Package[]new Long[]new Redirect[]new Short[]new Runnable[]new ThreadGroup[]new MethodType[]new SpeciesData[]new Name[]new MethodHandle[]new NamedFunction[]new BasicType[]new LambdaForm[]new Wrapper[]new Permission[]new Name[][]new Transform[]new MemberName[]new SoftReference<>[]new MutableCallSite[]new LinkOption[]new MonitorInfo[]new LockInfo[]new WeakReference<?>[]new long[][]new BigInteger[]new BigInteger[][]new CodeSigner[]new FileAttribute<>[]new SelectionKey[]new CopyOption[]new X509Certificate[]new Provider[]new ServiceId[]new AttributedCharacterIterator[]new SoftReference<?>[]new StringBuffer[]new FieldPosition[]new StringBuilder[]new Format[]new LocalTime[]new JapaneseEra[]new Era[]new DateTimePrinterParser[]new Consumer<>[]new ZoneOffsetTransition[]new ZoneOffset[]new ZoneOffsetTransitionRule[]new LocalDateTime[]new ForkJoinTask<?>[]new Enum<?>[]new FormatString[]new Entry<?,?>[]new TimerTask[]new CounterCell[]new Segment<?,?>[]new Node<?,?>[]new Index<?,?>[]new WorkQueue[]new ExceptionNode[]new RunnableScheduledFuture<?>[]new Cell[]new CodeSource[]new Handler[]new LogRecord[]new NodeChangeListener[]new PreferenceChangeListener[]new AbstractPreferences[]new Preferences[]new GroupHead[]new Double[]new AccessibleIcon[]new AccessibleRelation[]new AccessibleState[]new ImageTypeSpecifier[]new Property[]new OpenMBeanParameterInfoSupport[]new ModelMBeanAttributeInfo[]new ModelMBeanConstructorInfo[]new ModelMBeanOperationInfo[]new ModelMBeanNotificationInfo[]new ClassNotFoundException[]new ReflectionException[]new CompositeData[]new SimpleType<?>[]new RoleInfo[]new Subject[]new NotificationFilter[]new MarshalledObject<?>[]new SortKey[]new MultiDocPrintService[]new Chromaticity[]new ColorSupported[]new Compression[]new DialogTypeSelection[]new Fidelity[]new Finishings[]new JobSheets[]new JobState[]new JobStateReason[]new MediaName[]new MediaSizeName[]new MediaTray[]new MultipleDocumentHandling[]new OrientationRequested[]new PDLOverrideSupported[]new PresentationDirection[]new PrintQuality[]new PrinterIsAcceptingJobs[]new PrinterState[]new PrinterStateReason[]new ReferenceUriSchemesSupported[]new Severity[]new SheetCollate[]new Sides[]new CredOwner[]new ModuleInfo[]new Info[]new Track[]new Patch[]new Encoding[]new AudioFormat[]new ColInfo[]new ChangeListener[]new Bias[]new AncestorListener[]new SizeRequirements[]new Row[]new Comparator<>[]new KeyStroke[]new KeyStroke[][]new Accessible[]new TreePath[]new TreePath[][]new LookAndFeel[]new UIDefaults[]new Spring[]new ComponentUI[]new LookAndFeelInfo[]new SlidingSpinner[]new Component[][]new StyleSheet[]new JButton[]new ButtonFactory[]new FontUIResource[]new MetalFontDesktopProperty[]new AlignedLabel[]new Part[]new RuntimeState[]new State<>[]new PainterInfo[]new StateInfo[]new UndoableEditListener[]new AbstractElement[]new View[]// Constructors/** register server definition. ... */// PortableActivationIDL/Repository/registerServer/** unregister server definition */// PortableActivationIDL/Repository/unregisterServer/** get server definition */// PortableActivationIDL/Repository/getServer/** Return whether the server has been installed */// PortableActivationIDL/Repository/isInstalled/** Mark the server as being installed.  Raises ServerAlreadyInstalled ... */// PortableActivationIDL/Repository/install/** Mark the server as being uninstalled.  Raises ServerAlreadyUninstalled ... */// PortableActivationIDL/Repository/uninstall/** list registered servers */// PortableActivationIDL/Repository/listRegisteredServers/** Returns list of ALL applicationNames defined in ServerDefs of registered ... */// PortableActivationIDL/Repository/getApplicationNames/** Find the ServerID associated with the given application name. */// PortableActivationIDL/Repository/getServerID// _invoke// Type-specific CORBA::Object operations// class _RepositoryImplBase/** com/sun/corba/se/PortableActivationIDL/_RepositoryStub.java . ... */// registerServer// unregisterServer// getServer// isInstalled// install// uninstall// listRegisteredServers// getApplicationNames// getServerID// class _RepositoryStub/** com/sun/corba/se/PortableActivationIDL/_ServerManagerImplBase.java . ... *//** Interface used to combine the Activator and Locator when both are ... *//** A new ORB started server registers itself with the Activator */// PortableActivationIDL/Activator/registerServer/** A server is shutting down that was started by this activator. ... */// PortableActivationIDL/Activator/serverGoingDown/** Called whenever an ORB instance is created.  This registers ... */// PortableActivationIDL/Activator/registerORB/** Construct or find an ORBD object template corresponding to the ... */// PortableActivationIDL/Activator/registerPOA/** Called whenever a POA is destroyed. */// PortableActivationIDL/Activator/poaDestroyed/** If the server is not running, start it up.  This is allowed ... */// PortableActivationIDL/Activator/activate/** If the server is running, shut it down */// PortableActivationIDL/Activator/shutdown/** Invoke the server install hook.  If the server is not ... */// PortableActivationIDL/Activator/install/** Invoke the server uninstall hook.  If the server is not ... */// PortableActivationIDL/Activator/uninstall/** list active servers */// PortableActivationIDL/Activator/getActiveServers/** list all registered ORBs for a server */// PortableActivationIDL/Activator/getORBNames/** Find the server template that corresponds to the ORBD's ... */// PortableActivationIDL/Activator/lookupPOATemplate/** locate server - returns the port with a specific type for all registered ... */// PortableActivationIDL/Locator/locateServer/** locate server - returns all ports registered with a specified ORB for ... */// PortableActivationIDL/Locator/locateServerForORB/** get the port for the endpoint of the locator */// PortableActivationIDL/Locator/getEndpoint/** Useful from external BadServerIdHandlers which need ... */// PortableActivationIDL/Locator/getServerPortForType// class _ServerManagerImplBase/** com/sun/corba/se/PortableActivationIDL/_ServerManagerStub.java . ... */// serverGoingDown// registerORB// registerPOA// poaDestroyed// activate// shutdown// getActiveServers// getORBNames// lookupPOATemplate// locateServer// locateServerForORB// getEndpoint// getServerPortForType// class _ServerManagerStub/** com/sun/corba/se/PortableActivationIDL/_ServerProxyImplBase.java . ... *//** Server callback interface, passed to Activator in registerServer method. *//** Shutdown this server.  Returns after orb.shutdown() completes. */// PortableActivationIDL/ServerProxy/shutdown/** Install the server.  Returns after the install hook completes ... */// PortableActivationIDL/ServerProxy/install/** Uninstall the server.  Returns after the uninstall hook ... */// PortableActivationIDL/ServerProxy/uninstall// class _ServerProxyImplBase/** com/sun/corba/se/PortableActivationIDL/_ServerProxyStub.java . ... */// class _ServerProxyStub/** com/sun/corba/se/PortableActivationIDL/Activator.java . ... */// interface Activator/** com/sun/corba/se/PortableActivationIDL/ActivatorHelper.java . ... *//** com/sun/corba/se/PortableActivationIDL/ActivatorHolder.java . ... *//** com/sun/corba/se/PortableActivationIDL/ActivatorOperations.java . ... */// interface ActivatorOperations/** com/sun/corba/se/PortableActivationIDL/BadServerDefinition.java . ... */// ctor// class BadServerDefinition/** com/sun/corba/se/PortableActivationIDL/BadServerDefinitionHelper.java . ... */// read and discard the repository ID// write the repository ID/** com/sun/corba/se/PortableActivationIDL/BadServerDefinitionHolder.java . ... *//** com/sun/corba/se/PortableActivationIDL/EndPointInfo.java . ... */// class EndPointInfo/** com/sun/corba/se/PortableActivationIDL/EndPointInfoHelper.java . ... *//** com/sun/corba/se/PortableActivationIDL/EndPointInfoHolder.java . ... *//** com/sun/corba/se/PortableActivationIDL/EndpointInfoListHelper.java . ... *//** A list of endpoint information for a particular ORB. *//** com/sun/corba/se/PortableActivationIDL/EndpointInfoListHolder.java . ... *//** com/sun/corba/se/PortableActivationIDL/IIOP_CLEAR_TEXT.java . ... *//** Possible values for endpointType argument on Server.getEndpoint() ... *//** com/sun/corba/se/PortableActivationIDL/InitialNameService.java . ... *//** Interface used to support binding references in the bootstrap name ... */// interface InitialNameService/** com/sun/corba/se/PortableActivationIDL/InitialNameServiceHelper.java . ... *//** com/sun/corba/se/PortableActivationIDL/InitialNameServiceHolder.java . ... *//** com/sun/corba/se/PortableActivationIDL/InitialNameServiceOperations.java . ... *//** bind initial name */// interface InitialNameServiceOperations/** com/sun/corba/se/PortableActivationIDL/InitialNameServicePackage/NameAlreadyBound.java . ... */// class NameAlreadyBound/** com/sun/corba/se/PortableActivationIDL/InitialNameServicePackage/NameAlreadyBoundHelper.java . ... *//** com/sun/corba/se/PortableActivationIDL/InitialNameServicePackage/NameAlreadyBoundHolder.java . ... *//** com/sun/corba/se/PortableActivationIDL/InvalidORBid.java . ... */// class InvalidORBid/** com/sun/corba/se/PortableActivationIDL/InvalidORBidHelper.java . ... *//** com/sun/corba/se/PortableActivationIDL/InvalidORBidHolder.java . ... *//** com/sun/corba/se/PortableActivationIDL/Locator.java . ... */// interface Locator/** com/sun/corba/se/PortableActivationIDL/LocatorHelper.java . ... *//** com/sun/corba/se/PortableActivationIDL/LocatorHolder.java . ... *//** com/sun/corba/se/PortableActivationIDL/LocatorOperations.java . ... */// interface LocatorOperations/** com/sun/corba/se/PortableActivationIDL/LocatorPackage/ServerLocationPerORB.java . ... */// class ServerLocationPerORB/** com/sun/corba/se/PortableActivationIDL/LocatorPackage/ServerLocationPerORBHelper.java . ... *//** com/sun/corba/se/PortableActivationIDL/LocatorPackage/ServerLocationPerORBHolder.java . ... *//** com/sun/corba/se/PortableActivationIDL/LocatorPackage/ServerLocationPerType.java . ... */// class ServerLocationPerType/** com/sun/corba/se/PortableActivationIDL/LocatorPackage/ServerLocationPerTypeHelper.java . ... *//** com/sun/corba/se/PortableActivationIDL/LocatorPackage/ServerLocationPerTypeHolder.java . ... *//** com/sun/corba/se/PortableActivationIDL/NoSuchEndPoint.java . ... */// class NoSuchEndPoint/** com/sun/corba/se/PortableActivationIDL/NoSuchEndPointHelper.java . ... *//** com/sun/corba/se/PortableActivationIDL/NoSuchEndPointHolder.java . ... *//** com/sun/corba/se/PortableActivationIDL/ORBAlreadyRegistered.java . ... */// class ORBAlreadyRegistered/** com/sun/corba/se/PortableActivationIDL/ORBAlreadyRegisteredHelper.java . ... *//** com/sun/corba/se/PortableActivationIDL/ORBAlreadyRegisteredHolder.java . ... *//** com/sun/corba/se/PortableActivationIDL/ORBPortInfo.java . ... */// class ORBPortInfo/** com/sun/corba/se/PortableActivationIDL/ORBPortInfoHelper.java . ... *//** com/sun/corba/se/PortableActivationIDL/ORBPortInfoHolder.java . ... *//** com/sun/corba/se/PortableActivationIDL/ORBPortInfoListHelper.java . ... *//** A list of ORB and port information for a particular endpoint type. *//** com/sun/corba/se/PortableActivationIDL/ORBPortInfoListHolder.java . ... *//** com/sun/corba/se/PortableActivationIDL/ORBProxy.java . ... *//** ORB callback interface, passed to Activator in registerORB method. */// interface ORBProxy/** com/sun/corba/se/PortableActivationIDL/ORBProxyHelper.java . ... *//** com/sun/corba/se/PortableActivationIDL/ORBProxyHolder.java . ... *//** com/sun/corba/se/PortableActivationIDL/ORBProxyOperations.java . ... *//** Method used to cause ORB to activate the named adapter, if possible. ... */// interface ORBProxyOperations/** com/sun/corba/se/PortableActivationIDL/ORBidListHelper.java . ... *//** A list of ORB IDs. *//** com/sun/corba/se/PortableActivationIDL/ORBidListHolder.java . ... *//** com/sun/corba/se/PortableActivationIDL/Repository.java . ... */// interface Repository/** com/sun/corba/se/PortableActivationIDL/RepositoryHelper.java . ... *//** com/sun/corba/se/PortableActivationIDL/RepositoryHolder.java . ... *//** com/sun/corba/se/PortableActivationIDL/RepositoryOperations.java . ... */// interface RepositoryOperations/** com/sun/corba/se/PortableActivationIDL/RepositoryPackage/AppNamesHelper.java . ... *//** Type used for a list of application names *//** com/sun/corba/se/PortableActivationIDL/RepositoryPackage/AppNamesHolder.java . ... *//** com/sun/corba/se/PortableActivationIDL/RepositoryPackage/ServerDef.java . ... */// serverName values.// Class name of server's main class.// class path used to run the server.// arguments passed to the server// arguments passed to the server's Java VM1// class ServerDef/** com/sun/corba/se/PortableActivationIDL/RepositoryPackage/ServerDefHelper.java . ... *//** com/sun/corba/se/PortableActivationIDL/RepositoryPackage/ServerDefHolder.java . ... *//** com/sun/corba/se/PortableActivationIDL/ServerAlreadyActive.java . ... */// class ServerAlreadyActive/** com/sun/corba/se/PortableActivationIDL/ServerAlreadyActiveHelper.java . ... *//** com/sun/corba/se/PortableActivationIDL/ServerAlreadyActiveHolder.java . ... *//** com/sun/corba/se/PortableActivationIDL/ServerAlreadyInstalled.java . ... */// class ServerAlreadyInstalled/** com/sun/corba/se/PortableActivationIDL/ServerAlreadyInstalledHelper.java . ... *//** com/sun/corba/se/PortableActivationIDL/ServerAlreadyInstalledHolder.java . ... *//** com/sun/corba/se/PortableActivationIDL/ServerAlreadyRegistered.java . ... */// class ServerAlreadyRegistered/** com/sun/corba/se/PortableActivationIDL/ServerAlreadyRegisteredHelper.java . ... *//** com/sun/corba/se/PortableActivationIDL/ServerAlreadyRegisteredHolder.java . ... *//** com/sun/corba/se/PortableActivationIDL/ServerAlreadyUninstalled.java . ... */// class ServerAlreadyUninstalled/** com/sun/corba/se/PortableActivationIDL/ServerAlreadyUninstalledHelper.java . ... *//** com/sun/corba/se/PortableActivationIDL/ServerAlreadyUninstalledHolder.java . ... *//** com/sun/corba/se/PortableActivationIDL/ServerHeldDown.java . ... */// class ServerHeldDown/** com/sun/corba/se/PortableActivationIDL/ServerHeldDownHelper.java . ... *//** com/sun/corba/se/PortableActivationIDL/ServerHeldDownHolder.java . ... *//** com/sun/corba/se/PortableActivationIDL/ServerIdsHelper.java . ... *//** Sequence of server Ids, used for queries about servers. *//** com/sun/corba/se/PortableActivationIDL/ServerIdsHolder.java . ... *//** com/sun/corba/se/PortableActivationIDL/ServerManager.java . ... */// interface ServerManager/** com/sun/corba/se/PortableActivationIDL/ServerManagerHelper.java . ... *//** com/sun/corba/se/PortableActivationIDL/ServerManagerHolder.java . ... *//** com/sun/corba/se/PortableActivationIDL/ServerManagerOperations.java . ... */// interface ServerManagerOperations/** com/sun/corba/se/PortableActivationIDL/ServerNotActive.java . ... */// class ServerNotActive/** com/sun/corba/se/PortableActivationIDL/ServerNotActiveHelper.java . ... *//** com/sun/corba/se/PortableActivationIDL/ServerNotActiveHolder.java . ... *//** com/sun/corba/se/PortableActivationIDL/ServerNotRegistered.java . ... */// class ServerNotRegistered/** com/sun/corba/se/PortableActivationIDL/ServerNotRegisteredHelper.java . ... *//** com/sun/corba/se/PortableActivationIDL/ServerNotRegisteredHolder.java . ... *//** com/sun/corba/se/PortableActivationIDL/ServerProxy.java . ... */// interface ServerProxy/** com/sun/corba/se/PortableActivationIDL/ServerProxyHelper.java . ... *//** com/sun/corba/se/PortableActivationIDL/ServerProxyHolder.java . ... *//** com/sun/corba/se/PortableActivationIDL/ServerProxyOperations.java . ... */// interface ServerProxyOperations/** com/sun/corba/se/PortableActivationIDL/TCPPortHelper.java . ... *//** Type of TCP port number, used in structures that describe ... *//** com/sun/corba/se/PortableActivationIDL/_ActivatorImplBase.java . ... */// class _ActivatorImplBase/** com/sun/corba/se/PortableActivationIDL/_ActivatorStub.java . ... */// class _ActivatorStub/** com/sun/corba/se/PortableActivationIDL/_InitialNameServiceImplBase.java . ... */// PortableActivationIDL/InitialNameService/bind// class _InitialNameServiceImplBase/** com/sun/corba/se/PortableActivationIDL/_InitialNameServiceStub.java . ... */// bind// class _InitialNameServiceStub/** com/sun/corba/se/PortableActivationIDL/_LocatorImplBase.java . ... */// class _LocatorImplBase/** com/sun/corba/se/PortableActivationIDL/_LocatorStub.java . ... */// class _LocatorStub/** com/sun/corba/se/PortableActivationIDL/_ORBProxyImplBase.java . ... */// PortableActivationIDL/ORBProxy/activate_adapter// class _ORBProxyImplBase/** com/sun/corba/se/PortableActivationIDL/_ORBProxyStub.java . ... */// activate_adapter// class _ORBProxyStub/** com/sun/corba/se/PortableActivationIDL/_RepositoryImplBase.java . ... *//* Copyright (c) 1997, 2002, Oracle and/or its affiliates. All rights reserved. ... *//* Copyright (c) 1999, 2003, Oracle and/or its affiliates. All rights reserved. ... */// REVISIT: After Merlin to see if we can get rid of this Thread and// make the registration of PNameService for INS and BootStrap neat.// start Name Service/* Copyright (c) 1997, 2004, Oracle and/or its affiliates. All rights reserved. ... */// create a bootstrap server// REVISIT: see ORBConfigurator. use factory in TransportDefault.// For debugging.//props.put( ORBConstants.DEBUG_PROPERTY, "naming" ) ;//props.put( ORBConstants.DEBUG_PROPERTY, "transport,giop,naming" ) ;// See Bug 4396928 for more information about why we are initializing// the ORBClass to PIORB (now ORBImpl, but should check the bugid).// parse the args and try setting the values for these// properties// orbd is being run the first time// The following two lines start the Persistent NameService/** Ensure that the Db directory exists. If not, create the Db ... */// determine the ORB db directory// create the db and the logs directories// create Initial Name Service object// create Repository object// create Locator and Activator objects/** Go through the list of ORB Servers and initialize and start ... *//** List of servers to be auto registered and started by the ORBd. ... *//* Copyright (c) 2001, 2003, Oracle and/or its affiliates. All rights reserved. ... *//** ProcessMonitorThread is started when ServerManager is instantiated. The ... */// Sleep's for a specified time, before checking// the Servers health. This will repeat as long as// the ServerManager (ORBD) is up and running.// Check each ServerTableEntry to make sure that they// are in the right state.// Too late to complain, Just use the default// sleepTime// added serialver computed by the tool// if databse does not exist, create it otherwise read it in// export the repository// check if server already registered// generate a new server id// add server def to the database// verify that the entry is valid// check to see if the server is registered// remove server from the database/** Typically the Repositoy is created within the ORBd VM but it can ... */// See Bug 4396928 for more information about why we are// initializing the ORBClass to PIORB (now ORBImpl, but see the bug).// create the repository object// wait for shutdown// initialize the Server Id counter and hashtable.// the lower id range is reserved for system servers/* Copyright (c) 1997, 2012, Oracle and/or its affiliates. All rights reserved. ... *//* TODO: ... */// redirect out and err streams/** Write a time-stamped message to the indicated PrintStream. *//** Write information to standard out only. *//** Write error message to standard out and standard err. *//** Write final message to log(s) and then terminate by calling ... */// check modifiers: public static// check return type and exceptions// determine the class loader to be used for loading the class// since ServerMain is going to be in JDK and we need to have this// class to load application classes, this is required here.// determine the main class// determine the main class, try loading with current class loader// eat the exception and try to load using SystemClassLoader// get the main method// This piece of code is required, to verify the server definition// without launching it.// verify the server// build args to the main and call it// NOTE: Very important to pass this property, otherwise the// Persistent Server registration will be unsucessfull.// shutdown the ORB and wait for completion/* Copyright (c) 1997, 2013, Oracle and/or its affiliates. All rights reserved. ... */// Using HashMap, since synchronization should be done by the calling// routines// REVISIT - NOT USED.// The ServerStartupDelay is the delay added after the Server registers// end point information. This is to allow the server to completely// initialize after ORB is instantiated.// Just use the default 1000 milliseconds as the default// locate the server// We call getEntry here so that state of the entry is// checked for validity before we actually go and locate a server// orbId is ignored for now// unlike vectors, list is not synchronized// get an entry// all done// collect the active entries// if server location is desired, then wait for the server// to register back, then return location// this is to see if the server has any listeners// passing in entry to eliminate multiple lookups for// the same entry in some cases/** This method is used to obtain the registered ports for an ORB. ... */// we need to get the serverid and the orbid from the object key// get the ORBName corresponding to the orbMapid, that was// first registered by the server// we received a list of ports corresponding to an ORB in a// particular server, now retrieve the one corresponding// to IIOP_CLEAR_TEXT, and for other created the tagged// components to be added to the IOR// create a new IOR with the correct port and correct tagged// components// This delay is required in case of Server is activated or// re-activated the first time. Server needs some time before// handling all the requests.// (Talk to Ken to see whether there is a better way of doing this)./* Copyright (c) 1997, 2003, Oracle and/or its affiliates. All rights reserved. ... */// state of each entry// get the string needed to make the activation command// create a HashMap with capacity 255// Since all methods are synchronized, we don't need any// additional synchronization mechanisms// compute the activation command// add path to the java vm// add any arguments to the server Java VM// add ORB properties// we need to pass in the verify flag, so that the server is not// launched, when we try to validate its definition during registration// into the RepositoryImpl// add classpath to the server// add server class name and arguments// Add the debug flag, if any/** Verify whether the server definition is valid. *///state = RUNNING;//notifyAll();// find if the ORB is already registered, then throw an exception// store all listener ports and their types// put this set of listener ports in the HashMap associated// with the orbId// _REVISIT_, If the state is not equal to ACTIVATED then it is a bug// need to log that error, once the Logging framework is in place// for rip-int.// shutdown the server// call the uninstall// what kind of exception should be thrown// If the State in the ServerTableEntry is RUNNING and the// Process was shut down abnormally, The method will change the// server state as De-Activated.// Clear the PortInformation as it is old// Move the state to De-Activated, So that the next// call to this server will re-activate.// get an entry corresponding to orbId// return the port corresponding to the endpointType// have everything in the table// no element in HashMap corresponding to ORBid found// ex.printStackTrace();// if command specified in the args, get it// get the command// create the POA ORB// if command specified in the args, process it// process commands interactively// create a buffered reader to read commands from standard in// print tool banner// process commands until user quits// print short help// handle the help command// print long help for a specific command// determine the subcommand and execute it// construct args to the command// execute the command// unknown command - print available commands// determine longest command name// parse register server command// minimally the server class name has to be specified// register server and activate it// register the server with the repository// activate the server// print success message// the server id has to be specified// deactivate server, hold it down and and unregister it// deactivate the server// unregister the server from the repository// parse command// determine if list single server or all servers// process the list server command/** Do a simple bubble sort to sort the server ids in ascending ... */// process the list active servers command// determine the server id// startup the server/* Copyright (c) 2003, Oracle and/or its affiliates. All rights reserved. ... *//** Trys a first ObjectCopier.  If the first throws a ReflectiveCopyException, ... */// XXX log this fallback at a low level/* Copyright (c) 2004, Oracle and/or its affiliates. All rights reserved. ... */// Yes, so make sure it is connected and converted// to a stub (if needed).../* Licensed Materials - Property of IBM ... */// subclasses must provide a matching helper class// Always valid.// Validity depends upon typecode. The 'value' and 'object' instance// members are used to hold immutable types as defined by the// isStreamed[] table below. Otherwise, 'stream' is non-null and// holds the value in CDR marshaled format. As an optimization, the// stream type is an Any extension of CDR stream that is used to// detect an optimization in read_value().// Setting the typecode via the type() accessor wipes out the value.// An attempt to extract before the value is set will result// in a BAD_OPERATION exception being raised./* This boolean array tells us if a given typecode must be ... */// null// void// short// long// ushort// ulong// float// double// boolean// char// octet// any// TypeCode// Principal// objref// struct// union// enum// string// sequence// array// alias// except// longlong// ulonglong// longdouble// wchar// wstring// fixed// value// value_box (used to be true)// native// abstract interface/** A constructor that sets the Any to contain a null. It also marks ... */// null is a valid value// Create a new AnyImpl which is a copy of obj.// basic accessors/** returns the type of the element contained in the Any. ... */// Note: Indirect types are handled in kind() method// impossible/** sets the type of the element to be contained in the Any. ... *///debug.log ("type2");// set the typecode// null is the only legal value this Any can have after resetting the type code/** checks for equality between Anys. ... *///debug.log ("equal");// first check for typecode equality.// note that this will take aliases into account// Resolve aliases here// _REVISIT_ Possible optimization for the case where// otherAny is a AnyImpl and the endianesses match.// Need implementation of CDRInputStream.equals()// For now we disable this to encourage testing the generic,// unoptimized code below.// Unfortunately this generic code needs to copy the whole stream// at least once.//    if (AnyImpl.isStreamed[realType.kind().value()]) {//        if (otherAny instanceof AnyImpl) {//            return ((AnyImpl)otherAny).stream.equals(stream);//        }// handle primitive types// Too complicated to handle value types the way we handle// other complex types above. Don't try to decompose it here// for faster comparison, just use Object.equals().// Unspecified for Java// Needed for equal() in order to achieve linear performance for complex types.// Uses up (recursively) copies of the InputStream in both Anys that got created in equal().// just so that the two stream are in sync// error resolving alias above// accessors for marshaling/unmarshaling/** returns an output stream that an Any value can be marshaled into. ... *///debug.log ("create_output_stream");/** returns an input stream that an Any value can be marshaled out of. ... */// We create a new InputStream so that multiple threads can call here// and read the streams in parallel without thread safety problems.//debug.log ("create_input_stream");// marshaling/unmarshaling routines// If the InputStream is a CDRInputStream then we can copy the bytes// since it is in our format and does not have alignment issues.//debug.log ("read_value");// Assume that someone isn't going to think they can keep reading// from this stream after calling us. That would be likely for// an IIOPInputStream but if it is an AnyInputStream then they// presumably obtained it via our create_output_stream() so they could// write the contents of an IDL data type to it and then call// create_input_stream() for us to read it. This is how Helper classes// typically implement the insert() method.// We should probably document this behavior in the 1.1 revision// task force.// could only have been created here// We could optimize this by noticing whether the target stream// has ever had anything marshaled on it that required an// alignment of greater than 4 (was write_double() ever called on it).// If not, then we can just do a byte array copy without having to// drive the remarshaling through typecode interpretation.//debug.log ("write_value");// _REVISIT_ check isInitialized whether all we write is TypeCode!/** takes a streamable and inserts its reference into the any ... *///debug.log ("insert_Streamable");//debug.log( "extract_Streamable" ) ;// insertion/extraction/replacement for all basic types/** See the description of the <a href="#anyOps">general Any operations.</a> *///debug.log ("insert_short");//debug.log ("extract_short");//debug.log ("insert_long");// A long value is applicable to enums as well, so don't erase the enum type code// in case it was initialized that way before.//debug.log ("extract_long");//debug.log ("insert_ushort");//debug.log ("extract_ushort");//debug.log ("insert_ulong");//debug.log ("extract_ulong");//debug.log ("insert_float");//debug.log ("extract_float");//debug.log ("insert_double");//debug.log ("extract_double");//debug.log ("insert_longlong");//debug.log ("extract_longlong");//debug.log ("insert_ulonglong");//debug.log ("extract_ulonglong");//debug.log ("insert_boolean");//debug.log ("extract_boolean");//debug.log ("insert_char");//debug.log ("extract_char");//debug.log ("insert_wchar");//debug.log ("extract_wchar");//debug.log ("insert_octet");//debug.log ("extract_octet");//debug.log ("insert_string");// Make sure type code information for bounded strings is not erased// Check if bounded strings length is not exceeded//debug.log ("extract_string");//debug.log ("insert_wstring");//debug.log ("extract_wstring");//debug.log ("insert_any");//debug.log ("extract_any");//debug.log ("insert_Object");/** A variant of the insertion operation that takes a typecode ... *///debug.log ("insert_Object2");//debug.log ("extract_Object");// Check if the object contained here is of the type in typeCode//debug.log ("insert_TypeCode");//debug.log ("extract_TypeCode");/** Note that the Serializable really should be an IDLEntity of ... *///debug.log ("extract_Value");//debug.log ("insert_Value");// See note in getPrimitiveTypeCodeForClass.  We// have to use the latest type code fixes in this// case since there is no way to know what ORB will// actually send this Any.  In RMI-IIOP, when using// Util.writeAny, we can do the versioning correctly,// and use the insert_Value(Serializable, TypeCode)// method.// The ORB singleton uses the latest version.//debug.log ("insert_Value2");// type isn't even of kind fixed/** Utility method for insert_Value and Util.writeAny. ... */// Look in the cache first// All cases need to be able to create repository IDs.// See bug 4391648 for more info about the tcORB in this// case.// Assertion: c instanceof Serializable?// Arrays - may recurse for multi-dimensional arrays// Strings// Anything else// We know that this is a TypeCodeImpl since it is our ORB// Intruct classTC to store its buffer// Update the cache/** It looks like this was copied from io.ValueUtility at some ... *///debug.log ("getPrimitiveTypeCodeForClass");// For Merlin or later JDKs, or for foreign ORBs,// we correctly say that a Java char maps to a// CORBA wchar.  For backwards compatibility// with our older ORBs, we say it maps to a// CORBA char.  This is only used in RMI-IIOP// in our javax.rmi.CORBA.Util delegate's// writeAny method.  In Java IDL, there's no way// to know the ORB version that the Any will be// sent out with -- it could be different than// the one used to create the Any -- so we use the// most recent version (see insert_Value).// _REVISIT_ Not sure if this is right.// Extracts a member value according to the given TypeCode from the given complex Any// (at the Anys current internal stream position, consuming the anys stream on the way)// and returns it wrapped into a new Any// This method could very well be moved into TypeCodeImpl or a common utility class,// but is has to be in this package.// There is no other way for DynAnys to find out whether the Any is initialized./* Copyright (c) 1999, 2002, Oracle and/or its affiliates. All rights reserved. ... */// helper class for deferred invocations/* The AsynchInvoke class allows for the support of asynchronous ... *//* The run operation calls the invocation on the request object, ... */// do the actual invocation// for the asynchronous case, note that the response has been// received.// update local boolean indicator// notify any client waiting on a 'get_response'// Bare implementation of CORBA Object./* Copyright (c) 1996, 2003, Oracle and/or its affiliates. All rights reserved. ... *//* Copyright (c) 1996, 2002, Oracle and/or its affiliates. All rights reserved. ... */// Note: This orb could be an instanceof ORBSingleton or ORB/** @author ... *//** @deprecated */// Note: the size arg is only a hint of the size of the NVList./* Copyright (c) 1996, 2004, Oracle and/or its affiliates. All rights reserved. ... */// data members// invocation-specific stuff// support for deferred invocations.// protected instead of private since it needs to be set by the// thread object doing the asynchronous invocation.// constructor// REVISIT - used to be protected.  Now public so it can be// accessed from xgiop.// initialize the orb// initialize target, context and operation name// initialize argument list if not passed in// set result container.// initialize exception list if not passed in// initialize context list if not passed in// initialize environment// this method has to be synchronized even though it seems// "readonly" since the thread object doing the asynchronous// invocation can potentially update this variable in parallel.// updates are currently simply synchronized againt the request// object.// release the lock. wait to be notified by the thread that is// doing the asynchronous invocation.// private helper methods/* The doInvocation operation is where the real mechanics of ... */// Initiate Client Portable Interceptors.  Inform the PIHandler that// this is a DII request so that it knows to ignore the second// inevitable call to initiateClientPIRequest in createRequest.// Also, save the RequestImpl object for later use.// Marshal args// REVISIT - minor code.// This is already handled in subcontract.// REVISIT - uncomment.//throw new INTERNAL();// NOTE: The exception should not be thrown.// However, JDK 1.4 and earlier threw the exception,// so we keep the behavior to be compatible.// REVISIT -  make protected after development - so xgiop can get it.// First unmarshal the return value if it is not void// Now unmarshal the out/inout args// Cannot happen since we only iterate till _arguments.count()// booleans to check for various operation invocation restrictions// if we support contexts, this would// presumably also  be available on// the server invocation// unmarshal the value into the Any// hang on to the NVList for marshaling the result// check for invocation restrictions// Notify portable interceptors of the result so that// ServerRequestInfo.result() functions as desired.// actual marshaling of the reply msg header and params takes place// after the DSI returns control to the ORB.// except can be called by the DIR at any time (CORBA 2.2 section 6.3).// Ensure that the Any contains a SystemException or a// UserException. If the UserException is not a declared exception,// the client will get an UNKNOWN exception.// Inform Portable interceptors of the exception that was set// so sending_exception can return the right value.// The user can only call arguments once and not at all after// set_exception.  (internal flags ensure this).  However, the user// can call set_exception multiple times.  Therefore, we only// invoke receive_request the first time set_exception is// called (if they haven't already called arguments).// We need to invoke intermediate points here.// actual marshaling of the reply msg header and exception takes place/** This is called from the ORB after the DynamicImplementation.invoke ... */// Two things to be checked (CORBA 2.2 spec, section 6.3):// 1. Unless it calls set_exception(), the DIR must call arguments()//    exactly once, even if the operation signature contains//    no parameters.// 2. Unless set_exception() is called, if the invoked operation has a//    non-void result type, set_result() must be called exactly once//    before the DIR returns.// normal invocation return// Neither a result nor an exception has been set.// Assume that the return type is void. If this is not so,// the client will throw a MARSHAL exception while// unmarshaling the return value.// marshal the operation return value// marshal the inouts/outs/* Copyright (c) 1998, 2004, Oracle and/or its affiliates. All rights reserved. ... *//** Static functions for TypeCode interpretation. */// nothing to write// _REVISIT_ As soon as the java-rtf adds digits and scale parameters to// OutputStream, this check will be unnecessary// Nothing to read// InputStream, this check will be unnecessary/* Copyright (c) 1996, 2013, Oracle and/or its affiliates. All rights reserved. ... */// no chance of subclasses, so no problems with runtime helper lookup//static final boolean debug = false;// the indirection TCKind, needed for recursive typecodes.// typecode encodings have three different categories that determine// how the encoding should be done.// no parameters// simple parameters.// complex parameters. need to// use CDR encapsulation for// parameters// a table storing the encoding category for the various typecodes.// tk_null// tk_void// tk_short// tk_long// tk_ushort// tk_ulong// tk_float// tk_double// tk_boolean// tk_char// tk_octet// tk_any// tk_typecode// tk_principal// tk_objref// tk_struct// tk_union// tk_enum// tk_string// tk_sequence// tk_array// tk_alias// tk_except// tk_longlong// tk_ulonglong// tk_longdouble// tk_wchar// tk_wstring// tk_fixed// tk_value// tk_value_box// tk_native// tk_abstract_interface// Maps TCKind values to names// This is also used in AnyImpl.// the typecode kind// data members for representing the various kinds of typecodes.// the typecode repository id// the typecode name// member count// names of members// types of members// values of union labels// union discriminator type// union default index// string/seq/array length// seq/array/alias type// value type// _REVISIT_ We might want to keep references to the ValueMember classes// passed in at initialization instead of copying the relevant data.// Is the data immutable? What about StructMember, UnionMember etc.?// VM_NONE, VM_CUSTOM,// VM_ABSTRACT, VM_TRUNCATABLE// concrete base type// visibility of ValueMember// recursive sequence support// the enclosing type code// the level of enclosure// recursive type code support// caches the byte buffer written in write_value for quick remarshaling...// ... but only if caching is enabled// the ORB instance: may be instanceof ORBSingleton or ORB// Constructors...// initialized to tk_null// to handle conversion of "remote" typecodes into "native" style.// also see the 'convertToNative(ORB orb, TypeCode tc)' function// This is a protection against misuse of this constructor.// Should only be used if tc is not an instance of this class!// Otherwise we run into problems with recursive/indirect type codes.// _REVISIT_ We should make this constructor private// set up kind// set up parameters// concrete base may be null//_memberAccess = tc._memberAccess;// Need to reconstruct _memberAccess using member_count() and member_visibility()// set up member types// set up member names// set up member count// set up stuff for unions// set up length// set up content type// dont have to worry about these since code ensures we dont step// out of bounds.// for primitive types// private API. dont bother checking that//     (creationKind < 0 || creationKind > typeTable.length)// do initialization for special cases// this is being used to create typecode for CORBA::Object// for structs and exceptions// else initializes to null// for unions// check whether this is the default branch.// for value types// for enums// for aliases and value boxes// for strings// for sequences and arrays// for recursive sequences// for recursive type codes// This is the type code of the type we stand in for, not our own.// Try to resolve it now. May return null in which case// we try again later (see indirectType()).// for fixed//if (digits < 1 || digits > 31)//throw new BAD_TYPECODE();// Other creation functions...// Optimization:// If we checked for and returned constant primitive typecodes// here we could reduce object creation and also enable more// efficient typecode comparisons for primitive typecodes.//if (debug) System.out.println("Created TypeCodeOutputStream " + tcos +// " with no parent");// Support for indirect/recursive type codes// Nothing we can do about that.// Assert that _kind == tk_indirect// can't happen// check whether return value != this which would indicate that the// repository id isn't unique.// This is an unresolved recursive sequence tc.// Try to resolve it now if the hierarchy is complete.// Create a recursive type code object as the content type.// This is when the recursive sequence typecode morphes// into a sequence typecode containing a recursive typecode.// Other private functions// TypeCode operations// _REVISIT_ for all optional names/ids, we might want to check that// they are equal in case both are non-nil.//return indirectType().equal(tc);// make sure kinds are identical.// no parameters to check.// check for bound.// check for logical id.// ignore name since its optional.// check for member count// check for repository id// check for member types.// ignore id and names since those are optional.// check for default index// check for discriminator type// check for label types and values// check for branch types// check member count// ignore names since those are optional.// check bound/length// check content type// ignore id and name since those are optional.// concrete_base may be null// check for equality with the true type// dont have to worry about these since the code ensures these dont// arise./** The equivalent operation is used by the ORB when determining type equivalence ... */// If the result of the kind operation on either TypeCode is tk_alias, recursively// replace the TypeCode with the result of calling content_type, until the kind// is no longer tk_alias.// Note: Always resolve indirect types first!// If results of the kind operation on each typecode differ,// equivalent returns false.// At this point the id operation is valid for both TypeCodes.// Return true if the results of id for both TypeCodes are non-empty strings// and both strings are equal.// If both ids are non-empty but are not equal, then equivalent returns FALSE.// id operation is not valid for either or both TypeCodes// If either or both id is an empty string, or the TypeCode kind does not support// the id operation, perform a structural comparison of the TypeCodes.// impossible if we checked correctly above// Structural comparison succeeded!// _REVISIT_ It isn't clear whether this method should operate on this or a copy.// For now just return this unmodified because the name and member_name fields// aren't used for comparison anyways.// Recursive is the only form of indirect type codes right now.// Indirection can also be used for repeated type codes.//return indirectType().id(); // same as _id// exception and objref typecodes must have a repository id.// structs, unions, enums, and aliases may or may not.// all other typecodes throw the BadKind exception.// _REVISIT_ Why create a new Any for this?// hardly possible unless caller knows our "private" stream classes.//if (debug) System.out.println("Created WrapperInputStream " + wrapper +// don't wrap a CDRInputStream reading "inner" TypeCodes.// Bug fix 5034649: allow for padding that precedes the typecode kind.// check validity of kind// Don't do any work if this is native// We have to remember the stream and position for EVERY type code// in case some recursive or indirect type code references it.// The encoding used for indirection is the same as that used for recursive ,// TypeCodes i.e., a 0xffffffff indirection marker followed by a long offset// (in units of octets) from the beginning of the long offset.// substract 4 to get back to the beginning of the long offset.// Now we have to find the referenced type// by its indirectTypePosition within topStream.//if (debug) System.out.println(// "TypeCodeImpl looking up indirection at position topPos " +//topPos + " - 4 + offset " + streamOffset + " = " + indirectTypePosition);// unmarshal the kind// start unmarshaling the rest of the typecode, based on the// encoding (empty, simple or complex).// nothing to unmarshal// get the repository id// get the name// discriminant typecode// default index// get the number of members// create arrays for the label values, names and types of members// read off label values, names and types// for the default case, read off the zero octet// _REVISIT_ figure out long double mapping// case TCKind.tk_longdouble:// _unionLabels[i].insert_longdouble(_encap.getDouble());// break;// create arrays for the identifier names// read off identifier names// get the type of the sequence// get the bound on the length of the sequence// get the type of the array// get the length of the array// get the type aliased// create arrays for the names and types of members// read off member names and types//if (debug) System.out.println("TypeCode " + _name +// " reading member " + _memberNames[i]);// get the type modifier// create arrays for the names, types and visibility of members// read off value member visibilities// Wrap OutputStream into TypeCodeOutputStream.// This test shouldn't be necessary according to the Java language spec.// Cache the buffer for repeated writes//if (outBuffer != null)//System.out.println("Caching outBuffer with length = " +//outBuffer.length + " for id = " + _id);//System.out.println("Using cached outBuffer: length = " + outBuffer.length +//", id = " + _id);// Write the first 4 bytes first to trigger alignment.// We know that it is the kind.//System.out.println("Buffer is empty for " + _id);//if (debug) tcos.printBuffer();//if (debug) System.out.println("Writing indirection " + _name + "to " + _id);//if (debug) System.out.println("TypeCodeImpl " + tcos +// " writing indirection " + _id +//" to position " + pos + " at position " + topPos);// All that gets written is _kind and offset.// The original approach changed for 5034649// topStream.addIDAtPosition(_id, tcos.getTopLevelPosition());// marshal the kind//if (debug) System.out.println("Writing " + _name + " with id " + _id);// Bug fix 5034649:// Do this AFTER the write of the _kind in case the alignment// for the long changes the position.// nothing more to marshal// marshal the bound on string length// unknown typecode kind// create an encapsulation// put the repository id// put the name// put the number of members// marshal label values, names and types// for the default case, marshal the zero octet// _encap.putDouble(_unionLabels[i].extract_longdouble());// marshal identifier names// put the type of the sequence// put the bound on the length of the sequence// put the type of the array// put the length of the array// put the type aliased// marshal member names and types// " writing member " + _memberNames[i]);// put the type modifier// marshal the encapsulation/** This is not a copy of the TypeCodeImpl objects, but instead it ... */// make sure length bound in typecode is not violated//Any tmp = new AnyImpl(_orb);// Copy repositoryId// Fall into ...// _REVISIT_ what about the inherited members of this values concrete base type?// copy each element, using the corresponding member type/* _REVISIT_ More generic code? ... */// {// double value = src.read_double();//  tagValue.insert_longdouble(value);//  dst.putDouble(value);//  break;//}// using the value of the tag, find out the type of the value// following.// use equality over anys// get the length of the sequence// check for sequence bound violated// write the length of the sequence// copy each element of the seq using content type// make sure it's resolved// copy each element of the array using content type// follow the alias// need to follow offset, get unmarshal typecode from that// offset, and use that to do the copy// Don't need to read type code before using it to do the copy.// It should be fully usable.// Utility methods// Only for union type. Returns the index of the union member// corresponding to the discriminator. If not found returns the// default index or -1 if there is no default index.// memberName might differ from the name of the member./* Copyright (c) 1999, 2004, Oracle and/or its affiliates. All rights reserved. ... *//* Copyright (c) 2000, 2003, Oracle and/or its affiliates. All rights reserved. ... */// set the current position to 0 if any has components, otherwise to -1.// DynAny interface methods// Spec: Returns a copy of the internal Any// If the other DynAny is a constructed one we don't want it to have// to create its Any representation just for this test.//System.out.println("Comparing anys");// Throw InvalidValue if this is a bounded string and the length is exceeded// _REVISIT_ Copy value here?// The spec doesn't allow us to throw back this exception// incase the anys any if of type Principal, native or abstract interface.// Instance variables// Keep in sync with DynAny[] components at all times.// get a hold of the default initialized Any without copying// This method has a different meaning for sequence and array:// For sequence value of 0 indicates an unbounded sequence,// values > 0 indicate a bounded sequence.// For array any value indicates the boundary.// _REVISIT_ More efficient copy operation// Collection methods// Initializes the elements of the ordered collection.// If value does not contain the same number of elements as the array dimension,// the operation raises InvalidValue.// If one or more elements have a type that is inconsistent with the collections TypeCode,// the operation raises TypeMismatch.// This operation does not change the current position.// We know that this is of kind tk_sequence or tk_array// _REVISIT_ More info// Creates the appropriate subtype without copying the Any//System.out.println(this + " created component " + components[i]);// Other representations are invalidated by this operation// Same semantics as set_elements(Any[])// Instance variables components and names above are kept in sync// with these two arrays at all times.// We can be sure that typeCode is of kind tk_struct// Initialize components lazily, on demand.// This is an optimization in case the user is only interested in storing Anys.// For DynAnyComplex, the operation sets the current position to -1// for empty exceptions and to zero for all other TypeCodes.// The members (if any) are (recursively) initialized to their default values.// _REVISIT_ Overridden to provide more efficient copying.// Copies all the internal representations which is faster than reconstructing them./* public org.omg.DynamicAny.DynAny copy() { ... */// Complex methods// Creates references to the parameter instead of copying it.// We know that this is of kind tk_struct// Initializes components, names, nameValuePairs and nameDynAnyPairs representation// from the Any representation// This typeCode is of kind tk_struct.// _DEBUG_//System.out.println("Created DynAny for " + memberName +//                   ", type " + memberType.kind().value());// from the internal TypeCode information with default values// This is not done recursively, only one level.// More levels are initialized lazily, on demand./* if (memberDynAny instanceof DynAnyConstructedImpl) { ... */// It is probably right not to destroy the released component DynAnys.// Some other DynAny or a user variable might still hold onto them// and if not then the garbage collector will take care of it.// needed for recursive type codes// Constructed DynAnys maintain an ordered collection of component DynAnys.//System.out.println(this + " constructed with any " + any);// assertion: typeCode has been checked to be valid for this particular subclass.// note: We don't copy TypeCodes since they are considered immutable.// _REVISIT_ Would need REPRESENTATION_TYPECODE for lazy initialization//if ( ! isRecursive()) {//    initializeComponentsFromTypeCode();// No way to find out unless the TypeCode spec changes.// DynAny traversal methods// _REVISIT_ What about status?// If all we got is TypeCode representation (no value)// then we don't want to force creating a default value//System.out.println(this + " checkInitAny before writeAny");// Makes sure that the components representation is initialized// Makes sure that the Any representation is initialized//System.out.println(this + " checkInitAny: reps does not have REPRESENTATION_ANY");//System.out.println(this + " checkInitAny: reps has REPRESENTATION_COMPONENTS");//System.out.println(this + " checkInitAny: reps has REPRESENTATION_TYPECODE");//System.out.println(this + " checkInitAny: reps != REPRESENTATION_ANY");// Collapses the whole DynAny hierarchys values into one single streamed Any//System.out.println(this + " initializeAnyFromComponents");// Not our implementation. Nothing we can do to prevent copying.//System.out.println(this + " to_any ");// Anys value may still be uninitialized if DynAny was initialized by TypeCode only// This changes the current position of dyn_any.// Make sure that our position isn't changed.// Remember the current position to restore it later//System.out.println(this + " comparing component " + i + "=" + components[i] +//                   " of type " + components[i].type().kind().value());//System.out.println("Not equal component " + i);// impossible, we checked the type codes already// Restore the current position of the other DynAny// getter / setter methods/* Copyright (c) 2000, 2011, Oracle and/or its affiliates. All rights reserved. ... */// DynAnyFactory interface methods// Returns the most derived DynAny type based on the Anys TypeCode.// Returns the most derived DynAny type based on the TypeCode.// Needed for org.omg.CORBA.Object// A DynAny is destroyable if it is the root of a DynAny hierarchy.// A DynAny is undestroyable if it is a node in a DynAny hierarchy other than the root.// A DynAny is destroyed if its root has been destroyed.// An Any is used internally to implement the basic DynAny.// It stores the DynAnys TypeCode.// For primitive types it is the only representation.// For complex types it is the streamed representation.// Destroyable is the default status for free standing DynAnys.// Uses getAny() if this is our implementation, otherwise uses to_any()// which copies the Any.// _REVISIT_ Nothing we can do about copying at this point// if this is not our implementation of DynAny.// To prevent this we would need another representation,// one where component DynAnys are initialized but not the component Anys.//System.out.println(this + " writeAny of type " + type().kind().value());// This clears the data part of the Any while keeping the TypeCode info.// Makes a copy of the Any value inside the parameter// Makes a copy of the Any parameter// If the passed Any does not contain a legal value// (such as a null string), the operation raises InvalidValue.//import org.omg.CORBA.ORBPackage.*;// DynFixed is constructed but not a subclass of DynAnyConstructedImpl//return (dynAny instanceof DynAnyConstructedImpl);/* static Any extractAnyFromAny(TypeCode memberType, Any any, ORB orb) { ... */// Creates a default Any of the given type.// The spec for DynAny differs from Any on initialization via type code:// - false for boolean// - zero for numeric types// - zero for types octet, char, and wchar// - the empty string for string and wstring// - nil for object references// - a type code with a TCKind value of tk_null for type codes// - for Any values, an Any containing a type code with a TCKind value of tk_null//   type and no value// false for boolean// zero for numeric types// zero for types octet, char, and wchar// the empty string for string and wstring// Make sure that type code for bounded strings gets respected// Doesn't erase the type of bounded string// nil for object references// a type code with a TCKind value of tk_null for type codes// We can reuse the type code that's already in the any.// for Any values, an Any containing a type code with a TCKind value// of tk_null type and no value.// This is exactly what the default AnyImpl constructor provides.// _REVISIT_ Note that this inner Any is considered uninitialized.// There are no default value for complex types since there is no// concept of a hierarchy of Anys. Only DynAnys can be arrange in// a hierarchy to mirror the TypeCode hierarchy.// See DynAnyConstructedImpl.initializeComponentsFromTypeCode()// on how this DynAny hierarchy is created from TypeCodes.// Any is already initialized to null/* static Any setTypeOfAny(TypeCode typeCode, Any value) { ... *//* static Any copy(Any inAny, ORB orb) { ... */// if copy flag wasn't true we would be using our DynAny with// a foreign Any in it.// Returning simply the value of Any.isInitialized() is not enough.// The DynAny spec says that Anys containing null strings do not contain// a "legal value" (see ptc 99-10-07, 9.2.3.3)// This is a convenient method to reset the current component to where it was// before we changed it. See DynAnyConstructedImpl.equal for use./* impossible */// Initializes components and anys representation// This typeCode is of kind tk_array.// _REVISIT_ Could use read_xxx_array() methods on InputStream for efficiency// but only for primitive types// from the internal TypeCode information with default values.// DynArray interface methods// Initializes the elements of the array.// If one or more elements have a type that is inconsistent with the DynArrays TypeCode,/* public void set_elements (org.omg.CORBA.Any[] value) ... */// This int and the any value are kept in sync at all times// The current position of a DynEnum is always -1.// The any doesn't have to be initialized. We have a default value in this case.// _REVISIT_: Fix Me// Sets the current position to -1 and sets the value of the enumerator// to the first enumerator value indicated by the TypeCode.// Returns always 0 for DynEnum// Calling current_component on a DynAny that cannot have components,// such as a DynEnum or an empty exception, raises TypeMismatch.// DynEnum interface methods// Returns the value of the DynEnum as an IDL identifier.// Sets the value of the DynEnum to the enumerated value// whose IDL identifier is passed in the value parameter.// If value contains a string that is not a valid IDL identifier// for the corresponding enumerated type, the operation raises InvalidValue.// Returns the value of the DynEnum as the enumerated values ordinal value.// Enumerators have ordinal values 0 to n-1,// as they appear from left to right in the corresponding IDL definition.// Sets the value of the DynEnum as the enumerated values ordinal value.// If value contains a value that is outside the range of ordinal values// Sets the current position to -1 and the value to zero./* public int component_count() { ... */// DynFixed interface methods// Initializes the value of the DynFixed.// The val string must contain a fixed string constant in the same format// as used for IDL fixed-point literals.// It may consist of an integer part, an optional decimal point,// a fraction part and an optional letter d or D.// The integer and fraction parts both must be sequences of decimal (base 10) digits.// Either the integer part or the fraction part, but not both, may be missing.// If val contains a value whose scale exceeds that of the DynFixed or is not initialized,// The return value is true if val can be represented as the DynFixed without loss of precision.// If val has more fractional digits than can be represented in the DynFixed,// fractional digits are truncated and the return value is false.// If val does not contain a valid fixed-point literal or contains extraneous characters// other than leading or trailing white space, the operation raises TypeMismatch.// First get rid of leading or trailing whitespace which is allowed// Now scan for the sign// Now get rid of the letter d or D.// Just to be sure// Now look for the dot to determine the integer part// Let's see if we have to drop some precision// truncate the fraction part// currentScale > 0// drop the fraction completely// integerPart.length() > digits// unable to truncate fraction part// Reinterpreted to mean raise InvalidValue only if the integer part exceeds precision,// which is handled above (integerPart.length() > digits)/* if (currentScale > scale) { ... */// Now check whether both parts are valid numbers// _REVIST_ Could make this a subclass of DynArrayImpl// But that would mean that an object that implements DynSequence also implements DynArray// which the spec doesn't mention (it also doesn't forbid it).// Sets the current position to -1 and creates an empty sequence.// This typeCode is of kind tk_sequence.// already done in the type code constructor// Writing the length first is the only difference to supers implementation// DynSequence interface methods// Returns the current length of the sequence// Sets the length of the sequence. Increasing the length of a sequence// adds new elements at the tail without affecting the values of already// existing elements. Newly added elements are default-initialized.// Increasing the length of a sequence sets the current position to the first// newly-added element if the previous current position was -1.// Otherwise, if the previous current position was not -1,// the current position is not affected.// Increasing the length of a bounded sequence to a value larger than the bound// raises InvalidValue.// Decreasing the length of a sequence removes elements from the tail// without affecting the value of those elements that remain.// The new current position after decreasing the length of a sequence is determined// as follows:// ?f the length of the sequence is set to zero, the current position is set to -1.// ?f the current position is -1 before decreasing the length, it remains at -1.// ?f the current position indicates a valid element and that element is not removed// when the length is decreased, the current position remains unaffected.// ?f the current position indicates a valid element and that element is removed, the// current position is set to -1.// Increase length// Newly added elements are default-initialized// Decrease length//for (int i=len; i<oldLength; i++) {//    components[i].destroy();// ?f the current position indicates a valid element and that element is removed,// the current position is set to -1.// Length unchanged// Maybe components is now default initialized from type code// Initializes the elements of the sequence.// The length of the DynSequence is set to the length of value.// The current position is set to zero if value has non-zero length// and to -1 if value is a zero-length sequence.// If the length of value exceeds the bound of a bounded sequence,// If value contains one or more elements whose TypeCode is not equivalent// to the element TypeCode of the DynSequence, the operation raises TypeMismatch./* public void set_elements(org.omg.CORBA.Any[] value) ... */// For DynStruct, the operation sets the current position to -1// Methods differing from DynValues// index either points to the discriminator or the named member is it exists.// The currently active member, which is of the same type as the discriminator.// We can be sure that typeCode is of kind tk_union// Sets the current position to zero.// The discriminator value is set to a value consistent with the first named member// of the union. That member is activated and (recursively) initialized to its default value.//System.out.println(this + " initializeComponentsFromTypeCode");// We can be sure that memberCount() > 0 according to the IDL language spec// Convenience methods// Necessary to guarantee OBJECT_NOT_EXIST in member()// DynUnion interface methods/** Returns the current discriminator value. */// Sets the discriminator of the DynUnion to the specified value.// If the TypeCode of the parameter is not equivalent// to the TypeCode of the unions discriminator, the operation raises TypeMismatch.// Setting the discriminator to a value that is consistent with the currently// active union member does not affect the currently active member.// Setting the discriminator to a value that is inconsistent with the currently// active member deactivates the member and activates the member that is consistent// with the new discriminator value (if there is a member for that value)// by initializing the member to its default value.// If the discriminator value indicates a non-existent union member// this operation sets the current position to 0// (has_no_active_member returns true in this case).// Otherwise the current position is set to 1 (has_no_active_member returns false and// component_count returns 2 in this case).// _REVISIT_ Could possibly optimize here if we don't need to initialize components// Sets the discriminator to a value that is consistent with the value// of the default case of a union; it sets the current position to// zero and causes component_count to return 2.// Calling set_to_default_member on a union that does not have an explicit// default case raises TypeMismatch.// Sets the discriminator to a value that does not correspond// to any of the unions case labels.// It sets the current position to zero and causes component_count to return 1.// Calling set_to_no_active_member on a union that has an explicit default case// or on a union that uses the entire range of discriminator values// for explicit case labels raises TypeMismatch.// _REVISIT_ How does one check for "entire range of discriminator values"?// erase the discriminators value so that it does not correspond// to any of the unions case labels// Returns true if the union has no active member// (that is, the unions value consists solely of its discriminator because the// discriminator has a value that is not listed as an explicit case label).// Calling this operation on a union that has a default case returns false.// Calling this operation on a union that uses the entire range of discriminator// values for explicit case labels returns false.// Returns the currently active member.// If the union has no active member, the operation raises InvalidValue.// Note that the returned reference remains valid only for as long// as the currently active member does not change.// Using the returned reference beyond the life time// of the currently active member raises OBJECT_NOT_EXIST.// Returns the name of the currently active member.// If the unions TypeCode does not contain a member name for the currently active member,// the operation returns an empty string.// Calling member_name on a union without an active member raises InvalidValue.// Returns the TCKind value of the TypeCode of the currently active member.// DynValueBox methods// DynValueCommon methods// Returns TRUE if this object represents a null valuetype// Changes the representation to a null valuetype.// If this object represents a null valuetype then this operation// replaces it with a newly constructed value with its components// initialized to default values as in DynAnyFactory::create_dyn_any_from_type_code.// If this object represents a non-null valuetype, then this operation has no effect.// the rest is done lazily// else: there is nothing to do// Methods differing from DynStruct// Required to raise InvalidValue if this is a null value type.// Overridden methods// Overridden to change to non-null status.// If we didn't get an exception then this must be a valid non-null value/* Copyright (c) 2000, 2004, Oracle and/or its affiliates. All rights reserved. ... *//** Creates read/write buffer managers to handle over/under flow ... */// The next two methods allow creation of BufferManagers based on GIOP version.// We may want more criteria to be involved in this decision.// These are only used for sending messages (so could be fragmenting)// REVISIT - On the reading side, shouldn't we monitor the incoming// fragments on a given connection to determine what fragment size// they're using, then use that ourselves?// The stream reader can handle fragmented and// non fragmented messages// REVISIT - what is appropriate?/** Case: Called from ReaderThread on complete message or fragments. ... *//** Case: called from CDRInputStream constructor before unmarshaling. ... *//** Case: called from CDRInputStream.grow. ... *//** Called once after creating this buffer manager and before ... *//** Returns the mark/reset handler for this stream. *//* Signals that the processing be cancelled. *//* Close BufferManagerRead and perform any oustanding cleanup. */// REVISIT - This should go in an abstract class called//           BufferManagerReadBase which should implement//           BufferManagerRead. Then, this class should extend//           BufferManagerReadBase.// REVISIT - should we consider throwing an exception similar to what's//           done for underflow()???// Mark and reset handler -------------------------// This will never happen// Nothing to close and cleanup./* Copyright (c) 2000, 2009, Oracle and/or its affiliates. All rights reserved. ... */// We should convert endOfStream to a final static dummy end node// REVISIT - This should go in BufferManagerRead. But, since//           BufferManagerRead is an interface. BufferManagerRead//           might ought to be an abstract class instead of an//           interface.// print address of ByteBuffer being queued//System.out.println("ENTER underflow");// print address of ByteBuffer being dequeued// VERY IMPORTANT// Release bbwi.byteBuffer to the ByteBufferPool only if// this BufferManagerStream is not marked for potential restore.// print address of ByteBuffer being released//System.out.println("EXIT underflow");// Release any queued ByteBufferWithInfo's byteBuffers to the// ByteBufferPoool// release ByteBuffers on fragmentQueue// IMPORTANT: The fragment queue may have one ByteBuffer//            on it that's also on the CDRInputStream if//            this method is called when the stream is 'marked'.//            Thus, we'll compare the ByteBuffer passed//            in (from a CDRInputStream) with all ByteBuffers//            on the stack. If one is found to equal, it will//            not be released to the ByteBufferPool.// print address of ByteBuffer released// release ByteBuffers on fragmentStack// IMPORTANT: The fragment stack may have one ByteBuffer// Mark and reset handler ----------------------------------------// List of fragment ByteBufferWithInfos received since// the mark was engaged.// Original state of the stream// Get the magic Object that the stream will use to// reconstruct it's state when reset is called// Collects fragments received since the mark was engaged.// REVISIT - call to reset without call to mark// If we actually did peek across fragments, we need// to push those fragments onto the front of the// buffer queue.// Give the stream the magic Object to restore// it's state./** Defines the contract between the BufferManager and ... *//** Has the stream sent out any fragments so far? *//** Has the entire message been sent?  (Has ... *//** Returns the correct buffer size for this type of ... *//* Called from CDROutputStream.grow. ... *//** Called after Stub._invoke (i.e., before complete message has been sent). ... *//** A reference to the connection level stream will be required when ... *//** Close the BufferManagerWrite and do any outstanding cleanup. */// XREVISIT - Currently a java.lang.Object during// the rip-int-generic transition.  Should eventually// become a GIOPOutputObject./** Collect buffer manager. */// Set the fragment's "more fragments" bit to true, put it in the// queue, and allocate a new bbwi.// Set the fragment's moreFragments field to true// Enqueue the previous fragment// Create a new bbwi// XREVISIT - Downcast// Now we must marshal in the fragment header/GIOP header// REVISIT - we can optimize this by not creating the fragment message// each time.// Send all fragments// Enqueue the last fragment// With the collect strategy, we must lock the connection// while fragments are being sent.  This is so that there are// no interleved fragments in GIOP 1.1.// Note that this thread must not call writeLock again in any// of its send methods!// Get a reference to ByteBufferPool so that the ByteBufferWithInfo// ByteBuffer can be released to the ByteBufferPool// Release ByteBufferWithInfo's ByteBuffer back to the pool// of ByteBuffers./** Close the BufferManagerWrite - do any outstanding cleanup. ... */// iterate thru queue and release any ByteBufferWithInfo's// ByteBuffer that may be remaining on the queue to the// ByteBufferPool./* Copyright (c) 2000, 2017, Oracle and/or its affiliates. All rights reserved. ... */// The code that once lived directly in CDROutputStream.grow()// has been moved ByteBufferWithInfo.growBuffer().// Grow ByteBufferWithInfo to a larger size.// Must be false for the grow case/** Close the BufferManagerWrite and do any outstanding cleanup. ... *//* Copyright (c) 2000, 2010, Oracle and/or its affiliates. All rights reserved. ... *//** Streaming buffer manager. */// Reuse the old buffer// REVISIT - need to account for case when needed > available// even after fragmenting.  This is the large array case, so// the caller should retry when it runs out of space.// REVISIT: need an ORB//System.out.println("sendFragment: last?: " + isLastFragment);// Send the fragment// Sends the last fragment/** Simple unsynchronized queue implementation for ByteBufferWithInfos. */// XREVISIT - Should be in orbutil or package private// Adds the given ByteBufferWithInfo to the front// of the queue.// Notes about the class.// Assumptions, the ByteBuffer's position is set by the constructor's// index variable and the ByteBuffer's limit points to the end of the// data. Also, since the index variable tracks the current empty// position in the buffer, the ByteBuffer's position is updated// any time there's a call to this class's position().// Although, a ByteBuffer's length is it's capacity(), the context in// which length is used in this object, this.buflen is actually the// ByteBuffer limit().// REVISIT - index should eventually be replaced with byteBuffer.position()// Current empty position in buffer.// REVISIT - CHANGE THESE TO PRIVATE// Marshal buffer.// Total length of buffer. // Unnecessary...// How many more bytes are needed on overflow.// Did the overflow operation fragment?// Right now, EncapsOutputStream's do not use pooled byte buffers.// EncapsOutputStream's is the only one that does not use pooled// byte buffers. Hence, the reason for the boolean 'usePooledByteBuffers'.// See EncapsOutputStream for additional information.// print address of ByteBuffer gotten from pool// don't allocate from pool, allocate non-direct ByteBuffer// Shallow copy constructor// So IIOPOutputStream seems more intuitive// accessor to buflen// get position in this buffer// REVISIT - This should be changed to return the//           value of byteBuffer.position() rather//           than this.index. But, byteBuffer.position//           is manipulated via ByteBuffer writes, reads,//           gets and puts. These locations need to be//           investigated and updated before//           byteBuffer.position() can be returned here.// return byteBuffer.position();// set position in this buffer// REVISIT - This should be changed to set only the//           value of byteBuffer.position rather//           than this.index. This change should be made//           in conjunction with the change to this.position().// mutator to buflen// Grow byteBuffer to a size larger than position() + needed// This code used to live directly in CDROutputStream.grow.// Recall that the byteBuffer size is 'really' the limit or// buflen.// print address of ByteBuffer just gotten// return 'old' byteBuffer reference to the ByteBuffer pool// update the byteBuffer with a larger ByteBuffer// limit and buflen must be set to newLength./* Copyright (c) 2001, 2004, Oracle and/or its affiliates. All rights reserved. ... */// REVISIT - think about this some more.// This connection normally is accessed from the message mediator.// However, giop input needs to get code set info from the connetion// *before* the message mediator is available.// XREVISIT - Should the header be kept in the stream or the// message mediator?  Or should we not have a header and// have the information stored in the message mediator// directly?/** Unmarshal the extended GIOP header ... */// Unmarshal the extended GIOP message from the buffer./** Override the default CDR factory behavior to get the ... */// If the connection doesn't have its negotiated// code sets by now, fall back on the defaults defined// in CDRInputStream.// code sets by now, we have to throw an exception.// See CORBA formal 00-11-03 13.9.2.6.// For GIOP 1.2 and UTF-16, use big endian if there is no byte// order marker.  (See issue 3405b)// For GIOP 1.1 and UTF-16, use the byte order the stream if// there isn't (and there shouldn't be) a byte order marker.// GIOP 1.0 doesn't have wchars.  If we're talking to a legacy ORB,// we do what our old ORBs did.// If we're local and don't have a Connection, use the// local code sets, otherwise get them from the connection.// If the connection doesn't have negotiated code sets// yet, then we use ISO8859-1 for char/string and wchar/wstring// are illegal.// -----------------------------------------------------------// Below this point are commented out methods with features// from the old stream.  We must find ways to address// these issues in the future.// XREVISIT//     private XIIOPInputStream(XIIOPInputStream stream) {//         super(stream);//         this.conn = stream.conn;//         this.msg = stream.msg;//         this.unmarshaledHeader = stream.unmarshaledHeader;//     }// return new XIIOPInputStream(this);// End of file./** This is delegates to the real implementation. ... */// We can move this out somewhere later.  For now, it serves its purpose// to create a concrete CDR delegate based on the GIOP version.// else fall through and report exception.// Required for the case when a ClientResponseImpl is// created with a SystemException due to a dead server/closed// connection with no warning.  Note that the stream will// not be initialized in this case.// Probably also required by ServerRequestImpl.// REVISIT.// org.omg.CORBA.portable.InputStream// org.omg.CORBA_2_3.portable.InputStream// com.sun.corba.se.impl.encoding.MarshalInputStream// org.omg.CORBA.DataInputStream// org.omg.CORBA.portable.ValueBase// java.io.InputStream// Needed by TCUtility/** return true if our ByteBuffer is sharing/equal to bb */// This should be overridden by any stream (ex: IIOPInputStream)// which wants to read values.  Thus, TypeCodeInputStream doesn't// have to do this.// Use Latin-1 for GIOP 1.0 or when code set negotiation was not// performed.// Subclasses must decide what to do here.  It's inconvenient to// make the class and this method abstract because of dup().// Prints the current buffer in a human readable form/** Aligns the current position on the given octet boundary ... */// Needed by request and reply messages for GIOP versions >= 1.2 only./** This must be called after determining the proper ORB version, ... */// In the case of SystemExceptions, a stream is created// with its default constructor (and thus no impl is set)./** Resets any internal references to code set converters. ... */// ValueInputStream -----------------------------/** Describes CDRInputStream delegates and provides some ... */// REVISIT - should we make these throw UnsupportedOperationExceptions?// Right now, they'll go up to the java.io versions!//     public abstract int read(byte b[]) throws IOException;//     public abstract int read(byte b[], int off, int len) throws IOException//     public abstract long skip(long n) throws IOException;//     public abstract int available() throws IOException;//     public abstract void close() throws IOException;// This should return false so that outside users (people using the JDK)// don't have any guarantees that mark/reset will work in their// custom marshaling code.  This is necessary since they could do things// like expect obj1a == obj1b in the following code:// is.mark(10000);// Object obj1a = is.readObject();// is.reset();// Object obj1b = is.readObject();// Needed by AnyImpl and ServiceContexts// Needed by TypeCodeImpl// Needed by IIOPInputStream and other subclasses// ValueInputStream -------------------------/* Copyright (c) 1997, 2017, Oracle and/or its affiliates. All rights reserved. ... */// Set to the ORB's transportDebugFlag value.  This value is// used if the ORB is null.// Value cache// Repository ID cache// codebase cache// Current Class Stack (repository Ids of current class being read)// private Stack currentStack = null;// Length of current chunk, or a large positive number if not in a chunk// Read end flag (value nesting depth)// Beginning with the resolution to interop issue 3526 (4328?),// only enclosing chunked valuetypes are taken into account// when computing the nesting level.  However, we still need// the old computation around for interoperability with our// older ORBs.// Flag used to determine whether blocksize was zero// private int checkForNullBlock = -1;// In block flag// private boolean inBlock = false;// Indicates whether we are inside a value// private boolean outerValueDone = true;// Int used by read_value(Serializable) that is set by this class// before calling ValueFactory.read_value// Int set by readStringOrIndirection to communicate the actual// offset of the string length field back to the caller// Flag indicating whether we are unmarshalling a chunked value// Repository ID handlers// Code set converters (created when first needed)// RMI-IIOP stream format version 2 case in which we know// that there is no more optional data available.  If the// Serializable's readObject method tries to read anything,// we must throw a MARSHAL with the special minor code// so that the ValueHandler can give the correct exception// to readObject.  The state is cleared when the ValueHandler// calls end_value after the readObject method exits.// Template method// To ensure we keep bbwi.byteBuffer.limit in sync with bbwi.buflen./** NOTE:  size passed to init means buffer size */// See description in CDRInputStream// Called by Request and Reply message. Valid for GIOP versions >= 1.2 only.// Illegal for GIOP versions < 1.2.// Since chunks can end at arbitrary points (though not within// primitive CDR types, arrays of primitives, strings, wstrings,// or indirections),// we must check here for termination of the current chunk.// we must throw a MARSHAL exception with the special minor code// Are we at the end of the current chunk?  If so,// try to interpret the next long as a chunk length.// (It has to be either a chunk length, end tag,// or valuetag.)// If it isn't a chunk length, blockLength will// remain set to maxBlockLength.// What's next is either a valuetag or// an end tag.  If it's a valuetag, we're// probably being called as part of the process// to read the valuetag.  If it's an end tag,// then there isn't enough data left in// this valuetype to read!// Are we already past the end of the current chunk?// This is always an error.// If what's next on the wire isn't a chunk length or// what we want to read (which can't be split across chunks)// won't fit in the current chunk, throw this exception.// This probably means that we're in an RMI-IIOP// Serializable's readObject method or a custom marshaled// IDL type is reading too much/in an incorrect order// REVISIT - We should look at using the built in advancement//           of using ByteBuffer.get() rather than explicitly//           advancing the ByteBuffer's position.//           This is true for anywhere we are incrementing//           the ByteBuffer's position.// It was an end tag, so there wasn't enough data// left in the valuetype's encoding on the wire// to read what we wanted// WARNING: Must compute real alignment after calling// checkBlockLength since it may move the position// This can be overridden....// Marshal primitives.// No such type in java// Don't allow transmission of wchar/wstring data with// foreign ORBs since it's against the spec.// If we're talking to one of our legacy ORBs, do what// they did:// Check for indirection// Workaround for ORBs which send string lengths of// zero to mean empty string.// IMPORTANT: Do not replace 'new String("")' with "", it may result// in a Serialization bug (See serialization.zerolengthstring) and// bug id: 4728756 for details// Skip over the 1 byte null// skip the two null terminator bytes// bbwi.position(bbwi.position() + 2);// Must call alignAndCheck at least once to ensure// we aren't at the end of a chunk.  Of course, we// should only call it if we actually need to read// something, otherwise we might end up with an// exception at the end of the stream.// Microbenchmarks are showing a loop of ByteBuffer.get(int) being// faster than ByteBuffer.get(byte[], int, int).// read off the typecode// REVISIT We could avoid this try-catch if we could peek the typecode// kind off this stream and see if it is a tk_value.  Looking at the// code we know that for tk_value the Any.read_value() below// ignores the tc argument anyway (except for the kind field).// But still we would need to make sure that the whole typecode,// including encapsulations, is read off.// We can be sure that the whole typecode encapsulation has been// read off.// read off the value of the any// ------------ RMI related methods --------------------------// IDL to Java ptc-00-01-08 1.21.4.1// The clz argument to read_Object can be either a stub// Class or the "Class object for the RMI/IDL interface type// that is statically expected."// This functions as follows:// 1. If clz==null, just use the repository ID from the stub// 2. If clz is a stub class, just use it as a static factory.//    clz is a stub class iff StubAdapter.isStubClass( clz ).//    In addition, clz is a IDL stub class iff//    IDLEntity.class.isAssignableFrom( clz ).// 3. If clz is an interface, use it to create the appropriate//    stub factory.// In any case, we must first read the IOR.// Could not create stubFactory, so use null.// XXX stubFactory handling is still too complex:// Can we resolve the stubFactory question once in// a single place?// clz is an interface class/* This is used as a general utility (e.g., the PortableInterceptor ... */// If we managed to load a stub, return it, otherwise we// must fail...// Return the "default" stub...// In RMI-IIOP the ValueHandler will recognize this// exception and use the provided indirection value// to lookup a possible indirection to an object// currently on the deserialization stack./** Examines the valuetag to see how many (if any) repository IDs ... */// Throw an exception if we have no repository ID info and// no expectedType to work with.  Otherwise, how would we// know what to unmarshal?// Read value tag// Is value null?// Is this an indirection to a previously// read valuetype?// Save where this valuetype started so we// can put it in the indirection valueCache// later// Need to save this special marker variable// to restore its value during recursion// Read repository id(s)// If isChunked was determined to be true based// on the valuetag, this will read a chunk length/** @author */// Remember that end_flag keeps track of all nested// valuetypes and is used for older ORBs// read in the class whether with the old ClassDesc or the// new one// By this point, either the expectedType or repositoryIDString// is guaranteed to be non-null.// No point attempting to use value handler below, since the// class information is not available.// Must be some form of RMI-IIOP valuetype// Just rethrow any CORBA system exceptions// that come out of the ValueHandler// Skip any remaining chunks until we get to// an end tag or a valuetag.  If we see a valuetag,// that means there was another valuetype in the sender's// version of this class that we need to skip over.// Read and process the end tag if we're chunking.// Assumes that we're at the position of the end tag// (handleEndOfValue should assure this)// Cache the valuetype that we read// Allow for possible continuation chunk.// If we're a nested valuetype inside of a chunked// valuetype, and that enclosing valuetype has// more data to write, it will need to have this// new chunk begin after we wrote our end tag.// value is null// Indirection tag// end_block();// Read repository id// Compare rep. ids to see if we should use passed helper// for callback// Put into valueCache// allow for possible continuation chunk// This method is actually called indirectly by// read_value(String repositoryId).// Therefore, it is not a truly independent read call that handles// header information itself.// Put into valueCache using valueIndirection// if (inBlock)//    end_block();// Pre-Merlin/J2EE 1.3 ORBs wrote the repository ID// and codebase strings in the wrong order.// look for two-argument static read method// must be boxed value helper// found two-argument read method, so must be non-boxed value...// ...create a blank instance// Value's constructor is protected or private// So, use the helper to read the value.// NOTE : This means that in this particular case a recursive ref.// would fail.// add blank instance to cache table// if custom type, call unmarshal method// call two-argument read method using reflection// getDeclaredMethod requires RuntimePermission accessDeclaredMembers// if a different class loader is used (even though the javadoc says otherwise)// this gets caught below// Always try to find a ValueFactory first, as required by the spec.// There are some complications here in the IDL 3.0 mapping (see 1.13.8),// but basically we must always be able to override the DefaultFactory// or Helper mappings that are also used.  This appears to be the case// even in the boxed value cases.  The original code only did the lookup// in the case of class implementing either StreamableValue or CustomValue,// but abstract valuetypes only implement ValueBase, and really require// the use of the repId to find a factory (including the DefaultFactory).// use new-style OBV support (factory object)// XXX log marshal at one of the INFO levels// Could not get a factory, so try alternatives// use old-style OBV support (helper object)// must be a boxed IDLEntity, so make a reflective call to the// helper's static read method...// If there was no error in getting the factory, use it./** End tags are only written for chunked valuetypes. ... */// Read the end tag// End tags should always be negative, and the outermost// enclosing chunked valuetype should have a -1 end tag.// handleEndOfValue should have assured that we were// at the end tag position!// If the ORB is null, or if we're sure we're talking to// a foreign ORB, Merlin, or something more recent, we// use the updated end tag computation, and are more strenuous// about the values.// If the end tag we read was less than what we were expecting,// then the sender must think it's sent more enclosing// chunked valuetypes than we have.  Throw an exception.// If the end tag is bigger than what we expected, but// still negative, then the sender has done some end tag// compaction.  We back up the stream 4 bytes so that the// next time readEndTag is called, it will get down here// again.  Even with fragmentation, we'll always be able// to do this.// When talking to Kestrel or Ladybird, we use our old// end tag rules and are less strict.  If the end tag// isn't what we expected, we back up, assuming// compaction.// This only keeps track of the enclosing chunked// valuetypes// This keeps track of all enclosing valuetypes// if (outerValueDone)// if called from alignAndCheck, need to reset blockLength// to avoid an infinite recursion loop on read_long() call// Must remember where we began the chunk to calculate how far// along we are.  See notes above about chunkBeginPos.// _REVISIT_ unsafe, should use a Java long// inBlock = true;// System.out.println("start_block snooped a " + Integer.toHexString(blockLength));// not a chunk length field// Makes sure that if we were reading a chunked value, we end up// at the right place in the stream, no matter how little the// unmarshalling code read.// After calling this method, if we are chunking, we should be// in position to read the end tag.// If we're not chunking, we don't have to worry about// skipping remaining chunks or finding end tags// Skip any remaining chunks// Now look for the end tag// This is a little wasteful since we're reading// this long up to 3 times in the worst cases (once// in start_block, once here, and once in readEndTag// Peek next long// We did find an end tag, so we're done.  readEndTag// should take care of making sure it's the correct// end tag, etc.  Remember that since end tags,// chunk lengths, and valuetags have non overlapping// ranges, we can tell by the value what the longs are.// A custom marshaled valuetype left extra data// on the wire, and that data had another// nested value inside of it.  We've just// read the value tag or null of that nested value.// In an attempt to get by it, we'll try to call// read_value() to get the nested value off of// the wire.  Afterwards, we must call handleEndOfValue// recursively to read any further chunks that the containing// valuetype might still have after the nested// value.// This probably means that the code to skip chunks has// an error, and ended up setting blockLength to something// other than maxBlockLength even though we weren't// starting a new chunk.// if in a chunk, check for underflow or overflow// Chunk ended correctly// Skip over anything left by bad unmarshaling code (ex:// a buggy custom unmarshaler).  See handleEndOfValue.// outerValueDone = false;// ------------ End RMI related methods --------------------------//--------------------------------------------------------------------//// CDRInputStream state management./** Are we at the end of the input stream? *///     public final boolean isAtEnd() {//      return bbwi.position() == bbwi.buflen;//     public int available() throws IOException {//         return bbwi.buflen - bbwi.position();// Read # of repository ids// read first array element and store it as an indirection to the whole array// read and ignore the subsequent array elements, but put them in the// indirection table in case there are later indirections back to them// Indirection/* DataInputStream methods */// digits isn't really needed here// This method is unable to yield the correct scale.// Each octet contains (up to) two decimal digits.// If the fixed type has an odd number of decimal digits, then the representation// begins with the first (most significant) digit.// Otherwise, this first half-octet is all zero, and the first digit// is in the second half-octet.// The sign configuration, in the last half-octet of the representation,// is 0xD for negative numbers and 0xC for positive and zero values.// positive number or zero// zero// positive number// done// negative number/* for debugging */// For every 16 bytes, there is one line// of output.  First, the hex output of// the 16 bytes with each byte separated// by a space.// Add any extra spaces to align the// text column in case we didn't end// at 16// Now output the ASCII equivalents.  Non-ASCII// characters are shown as periods.// Number of bytes to skip// Mark and reset -------------------------------------------------// These are the fields that may change after marking// the stream position, so we need to save them.// ---------------------------------- end Mark and Reset// Provides a hook so subclasses of CDRInputStream can provide// a CodeBase.  This ultimately allows us to grab a Connection// instance in IIOPInputStream, the only subclass where this// is actually used./** Attempts to find the class described by the given ... */// First try to load the class locally, then use// the provided URL (if it isn't null)// class cannot be loaded remotely.// Get a URL from the remote CodeBase and retry// Don't bother trying to find it locally again if// we got a null URL// Failed to load the class// Always report a bad URL// First try to load the class locally// Try to load the class using the provided// codebase URL (falls out below)// Try to load the class using a URL from the// remote CodeBase// Don't bother if the codebaseURL is null// Will ultimately return null if all three// attempts fail, but don't do anything here.// If we get here, we have failed to load the class// Utility method used to get chars from bytes// REVISIT - Look at CodeSetConversion.BTCConverter to see//           if it can work with an NIO ByteBuffer. We should//           avoid getting the bytes into an array if possible.// To be honest, I doubt this saves much real time// If the entire string is in this buffer,// just convert directly from the bbwi rather than// allocating and copying.// Microbenchmarks are showing a loop of ByteBuffer.get(int)// being faster than ByteBuffer.get(byte[], int, int).// Stretches across buffers.  Unless we provide an// incremental conversion interface, allocate and// copy the bytes.// Stream needs to go into a state where it// throws standard exception until end_value// is called.  This means the sender didn't// send any custom data.  If the reader here// tries to read more, we need to throw an// exception before reading beyond where// we're supposed to// One should never indirect to a custom wrapper// REVISIT - Could verify repository ID even though// it isn't used elsewhere// Note: isChunked should be true here.  Should have// been set to true in the containing value's read_value// Note that isChunked should still be true here.// If the containing valuetype is the highest// chunked value, it will get set to false// at the end of read_value.// tell BufferManagerRead to release any ByteBuffers// It's possible bbwi.byteBuffer is shared between// this InputStream and an OutputStream. Thus, we check// if the Input/Output streams are using the same ByteBuffer.// If they sharing the same ByteBuffer we need to ensure only// one of those ByteBuffers are released to the ByteBufferPool.// Set OutputStream's ByteBuffer and bbwi to null// so its ByteBuffer cannot be released to the pool// release this stream's ByteBuffer to the pool// See notes in CDROutputStream// Some other ORBs may have found a way to send 1.1// fragments which put alignment bytes at the end// of a fragment// We must recalculate the alignment after a possible// fragmentation since the new bbwi.position() (after the header)// may require a different alignment.// Save the size of the current buffer for// possible fragmentOffset calculation// By this point we should be guaranteed to have// a new fragment whose header has already been// unmarshalled.  bbwi.position() should point to the// end of the header.// Clear the flag// Mark/reset ---------------------------------------// --------------------------------------------------// In GIOP 1.1, interoperability with wchar is limited// to 2 byte fixed width encodings.  CORBA formal 99-10-07 15.3.1.6.// WARNING:  For UTF-16, this means that there can be no// byte order marker, so it must default to big endian!// Because of the alignAndCheck, we should be guaranteed// 2 bytes of real data.// Did the provided bytes convert to more than one// character?  This may come up as more unicode values are// assigned, and a single 16 bit Java char isn't enough.// Better to use strings for i18n purposes.// Don't include the two byte null for the// following computations.  Remember that since we're limited// to a 2 byte fixed width code set, the "length" was the// number of such 2 byte code points plus a 2 byte null.// Skip over the 2 byte null// Indicates whether the header is padded. In GIOP 1.2 and above,// the body must be aligned on an 8-octet boundary, and so the header is// padded appropriately. However, if there is no body to a request or reply// message, there is no header padding, in the unfragmented case.// used to remember headerPadding flag when mark() and restore() are used.// Called by RequestMessage_1_2 or ReplyMessage_1_2 classes only.// the mark and reset methods have been overridden to remember the// headerPadding flag.// This method has been overriden to ensure that the duplicated stream// inherits the headerPadding flag, in case of GIOP 1.2 and above, streams.// headerPadding bit is set by read method of the RequestMessage_1_2// or ReplyMessage_1_2 classes. When set, the very first body read// operation (from the stub code) would trigger an alignAndCheck// method call, that would in turn skip the header padding that was// inserted during the earlier write operation by the sender. The// padding ensures that the body is aligned on an 8-octet boundary,// for GIOP versions 1.2 and beyond.// In GIOP 1.2, a fragment may end with some alignment// padding (which leads to all fragments ending perfectly// on evenly divisible 8 byte boundaries).  A new fragment// never requires alignment with the header since it ends// on an 8 byte boundary.// In GIOP 1.2, a wchar is encoded as an unsigned octet length// followed by the octets of the converted wchar.// In GIOP 1.2, wstrings are not terminated by a null.  The// length is the number of octets in the converted format.// A zero length string is represented with the 4 byte length// value of 0.// REVISIT - only used on sendCancelRequest.// NOTE:// Used in SharedCDR (i.e., must be grow).// Used in msgtypes test.// REVISIT// Used on sendCancelRequest.// Used for needs addressing mode.// Header should only be in message mediator.// Another possibility: merge header and message mediator.// REVISIT - make protected once all encoding together/** Write the contents of the CDROutputStream to the specified ... */// Update the GIOP MessageHeader size field./** overrides create_input_stream from CDROutputStream *///return new XIIOPInputStream(orb(), getByteBuffer(), getIndex(),//isLittleEndian(), getMessageHeader(), conn);// REVISIT - only set when doing sendCancelRequest.// XREVISIT - If CDROutputObject doesn't live in the iiop// package, it will need this, here, to give package access// to xgiop.// With UTF-16:// For GIOP 1.2, we can put byte order markers if we want to, and// use the default of big endian otherwise.  (See issue 3405b)// For GIOP 1.1, we don't use BOMs and use the endianness of// the stream.// In the normal case, let the converter system handle it/** This is delegates to the real implementation. */// REVISIT - what is appropriate?  INTERNAL exceptions// are really hard to track later.// REVISIT - These two constructors should be re-factored to better hide// the fact that someone extending this class 'can' construct a CDROutputStream// that does not use pooled ByteBuffers. Right now, only EncapsOutputStream// does _not_ use pooled ByteBuffers, see EncapsOutputStream.// NOTE: When a stream is constructed for non-channel-backed sockets// it notifies the constructor not to use pooled (i.e, direct)// ByteBuffers.// org.omg.CORBA.portable.OutputStream// Provided by IIOPOutputStream and EncapsOutputStream// org.omg.CORBA_2_3.portable.OutputStream// java.io.OutputStream// com.sun.corba.se.impl.encoding.MarshalOutputStream// org.omg.CORBA.DataOutputStream// Other// Used in indirections. Overridden by TypeCodeOutputStream.// XREVISIT - return to final if possible// REVISIT - was protected - need access from msgtypes test.// REVISIT: was protected - but need to access from xgiop.// ValueOutputStream -----------------------------/** Describes CDROutputStream delegates and provides some ... */// Required by parent CDROutputStream// See EncapsOutputStream, the only one that uses the// non-pooled ByteBuffers, for additional info.//     public abstract void write(byte b[]) throws IOException;//     public abstract void write(byte b[], int off, int len) throws IOException;//     public abstract void flush() throws IOException;// Required by IIOPOutputStream and other subclasses// org.omg.CORBA.portable.ValueOutputStream// Codebase cache// Write end flag// Beginning with the resolution to interop issue 3526,// In block marker// Last end tag position// ValueHandler// REVISIT - This should be re-factored so that including whether// to use pool byte buffers or not doesn't need to be known.// ORB must not be null.  See CDROutputStream constructor.// Micro-benchmarks show ByteBuffer.get(int) out perform the bulk// ByteBuffer.get(byte[], offset, length).// No-op for GIOP 1.0// Default implementation of grow.  Subclassers may override this.// Always grow the single buffer. This needs to delegate// fragmentation policy for IIOP 1.1.// The 'if' stmt is commented out since we need the alignAndReserve to// be called, particularly when the first body byte is written,// to induce header padding to align the body on a 8-octet boundary,// for GIOP versions 1.2 and above. Refer to internalWriteOctetArray()// method that also has a similar change.//if (bbwi.position() + 1 > bbwi.buflen)//      REVISIT - Should just use ByteBuffer.put(byte) and let it//                increment the ByteBuffer position. This is true//                for all write operations in this file.// CORBA formal 99-10-07 15.3.1.6: "In the case of multi-byte encodings// of characters, a single instance of the char type may only// hold one octet of any multi-byte character encoding."// These wchar methods are only used when talking to// legacy ORBs, now.// If it's one of our legacy ORBs, do what they did:// A string is encoded as an unsigned CORBA long for the// number of bytes to follow (including a terminating null).// There is only one octet per character in the string.// Write the null ending// When talking to our legacy ORBs, do what they did:// This will only have an effect if we're already chunking// Performs no checks and doesn't tamper with chunking// This flag forces the alignAndReserve method to be called the// first time an octet is written. This is necessary to ensure// that the body is aligned on an 8-octet boundary. Note the 'if'// condition inside the 'while' loop below. Also, refer to the// write_octet() method that has a similar change.// IDL to Java formal 01-06-06 1.21.4.2// Assume value type.// Is it a CORBA.Object?// Yes.// Write our flag...// Now write out the object...// Write WStringValue's repository ID// Add indirection for object to indirection table// Write Value chunk// Write end tag//d11638// Write value_tag// Write repository ID// _REVISIT_ could check to see whether chunking really needed// Get rep id// Write rep id// Allow the ValueHandler to call writeReplace on// the Serializable (if the method is present)// Write null tag and return// Write rep. id// Handle null references// Handle shared references// Handle arrays// Handle IDL Value types// RMI-IIOP value type// Check to see if we need to start another block for a// possible outer value// no need to test for custom on the non-chunked path//Move inBlock=true to after write_long since write_long might//trigger grow which will lead to erroneous behavior with a//missing blockSizeIndex.//inBlock = true;// Save space in the buffer for block size//Has to happen after write_long since write_long could//trigger grow which is overridden by supper classes to//depend on inBlock.// Remember where to put the size of the endblock less 4// Utility method which will hopefully decrease chunking complexity// by allowing us to end_block and update chunk lengths without// calling alignAndReserve.  Otherwise, it's possible to get into// recursive scenarios which lose the chunking state.// Test to see if the block was of zero length// If so, remove the block instead of ending it// (This can happen if the last field written//  in a value was another value)// Need to assert that blockSizeIndex == bbwi.position()?  REVISIT// System.out.println("      post end_block: " + get_offset() + " " + bbwi.position());// CDROutputStream state management.// Micro-benchmarks are showing a loop of ByteBuffer.get(int) is// faster than ByteBuffer.get(byte[], offset, length)// int indirection = get_offset();// Use an indirection if available// Write it as a string.  Note that we have already done the// special case conversion of non-Latin-1 characters to escaped// Latin-1 sequences in RepositoryId.// It's not a good idea to cache them now that we can have// multiple code sets.// Add indirection for id to indirection table// Handles end tag compaction...// We are exactly at the same position and index as the// end of the last end tag.  Thus, we can back up over it// and compact the tags.// Special case in which we're at the beginning of a new// fragment, but the position is the same.  We can't back up,// so we just write the new end tag without compaction.  This// occurs when a value ends and calls start_block to open a// continuation chunk, but it's called at the very end of// a fragment.// Remember the last index and position.  These are only used when chunking.// Increment the nesting level/** Handles ORB versioning of the end tag.  Should only ... */// and codebase strings in the wrong order.  This handles// backwards compatibility.// Casts and returns an Object as a Serializable// This is required for JDK 1.1 only to avoid VerifyErrors when// passing arrays as Serializable// private java.io.Serializable make_serializable(java.lang.Object object)//  return (java.io.Serializable)object;// }// Write the IDLEntity using reflection/* DataOutputStream methods */// This will stay a custom add-on until the java-rtf issue is resolved.// Then it should be declared in org.omg.CORBA.portable.OutputStream.// Pads the string representation of bigDecimal with zeros to fit the given// digits and scale before it gets written to the stream.// Get rid of the sign// Determine integer and fraction parts// Pad both parts with zeros as necessary// This string contains no sign or dot// This method should be remove by the java-rtf issue.// Right now the scale and digits information of the type code is lost.// This string might contain sign and/or dot// The string may contain a sign and dot// Each octet contains (up to) two decimal digits// First calculate the length of the string without optional sign and dot// If the fixed type has an odd number of decimal digits,// then the representation begins with the first (most significant) digit.// is 0xD for negative numbers and 0xC for positive and zero values// Must ensure that there are no chunks between the tag// and the actual indirection value.  This isn't talked about// in the spec, but seems to cause headaches in our code.// At the very least, this method isolates the indirection code// that was duplicated so often.// write indirection tag// write indirection// Use parent.getRealIndex() so that it can be overridden by TypeCodeOutputStreams/* System.out.println("CDROutputStream_1_0 writing indirection pos " + posIndirectedTo + ... */// Make sure to chunk the custom data// possible outer value.  Since we're in the stream// format 2 custom type contained by another custom// type, mustChunk should always be true.// Here's why we need to open a continuation chunk:// We need to enclose the default data of the// next subclass down in chunks.  There won't be// an end tag separating the superclass optional// data and the subclass's default data.// tell BufferManagerWrite to release any ByteBuffers// this OutputStream and an InputStream. Thus, we check// Set InputStream's ByteBuffer and bbwi to null// This is used to keep indirections working across fragments.  When added// to the current bbwi.position(), the result is the current position// in the byte stream without any fragment headers.// It is equal to the following:// n = number of buffers (0 is original buffer, 1 is first fragment, etc)// n == 0, fragmentOffset = 0// n > 0, fragmentOffset//          = sum i=[1,n] { bbwi_i-1_.size - buffer i header length }// Notice that in 1.1, we won't end a fragment with// alignment padding.  We also won't guarantee that// our fragments end on evenly divisible 8 byte// boundaries.  There may be alignment// necessary with the header of the next fragment// since the header isn't aligned on an 8 byte// boundary, so we have to calculate it twice.// Must recompute the alignment after a grow.// In the case of fragmentation, the alignment// calculation may no longer be correct.// People shouldn't be able to set their fragment// sizes so small that the fragment header plus// this alignment fills the entire buffer.// Save the current size for possible post-fragmentation calculation// At this point, if we fragmented, we should have a ByteBufferWithInfo// with the fragment header already marshalled.  The size and length fields// should be updated accordingly, and the fragmented flag should be set.// Update fragmentOffset so indirections work properly.// At this point, oldSize is the entire length of the// previous buffer.  bbwi.position() is the length of the// fragment header of this buffer.// Note that the following code prohibits UTF-16 with a byte// order marker (which would result in 4 bytes).// The length is the number of code points (which are 2 bytes each)// including the 2 byte null.  See CORBA formal 99-10-07 15.3.2.7.// Write the 2 byte null ending// There's a situation with chunking with fragmentation// in which the alignment for a primitive value is needed// to fill fragment N, but the primitive won't fit so// must go into fragment N + 1.  The behavior is the same// as that for specialChunks.// Unfortunately, given the current code, we can't reuse// specialChunk.  If you wrap each of the following// write calls with handleSpecialChunkBegin/End, you// will lose your state because the primitive calls will// change the variables, etc.// All of the CDR code should be rewritten moving chunking// to a different level, perhaps in the buffer managers.// We want to move to a compositional model rather than// using inheritance.// Note that in the grow case, chunks are _NOT_ closed// at grow points, now.// **** NOTE ****// Since we will not support valuetypes with GIOP 1.1, that// also means we do not support chunking there.// Used in chunking.  Here's how this works:// When chunking and writing an array of primitives, a string, or a// wstring, _AND_ it won't fit in the buffer do the following.  (As// you can see, this is a very "special" chunk.)//     1.  Write the length of the chunk including the array length//     2.  Set specialChunk to true// 3 applies to ALL chunking://     3.  In grow, if we need to fragment and specialChunk is false//               a) call end_block//               b) fragment// Now back to the array only case://     [write the data]//     4.  if specialChunk is true//               a) Close the chunk//               b) Set specialChunk to false// Indicates whether the header should be padded. In GIOP 1.2 and above, the// body must be aligned on a 8-octet boundary, and so the header needs to be// message, there is no need to pad the header, in the unfragmented case.// If we're chunking and the item won't fit in the buffer// Duplicating some code from end_block.  Compute// and write the total chunk length.//write_long(oldSize - blockSizeIndex);// Set the special flag so we don't end the chunk when// we fragment// If we're in a chunk and the item spanned fragments// This is unnecessary, but I just want to show that// we're done with the current chunk.  (the end_block// call is inappropriate here)// Start a new chunk since we fragmented during the item.// Thus, no one can go back to add more to the chunk length// Now turn off the flag so we go back to the normal// behavior of closing a chunk when we fragment and// reopening afterwards.// Called after writing primitives// It would be nice to have a StreamPosition// abstraction if we could avoid allocation// overhead.// Start a new chunk// headerPadding bit is set by the write operation of RequestMessage_1_2// or ReplyMessage_1_2 classes. When set, the very first body write// operation (from the stub code) would trigger an alignAndReserve// method call, that would in turn add the appropriate header padding,// such that the body is aligned on a 8-octet boundary. The padding// is required for GIOP versions 1.2 and above, only if body is present.// In GIOP 1.2, we always end fragments at our// fragment size, which is an "evenly divisible// 8 byte boundary" (aka divisible by 16).  A fragment can// end with appropriate alignment padding, but no padding// is needed with respect to the next GIOP fragment// header since it ends on an 8 byte boundary.// See notes where specialChunk is defined, as well as the// above notes for primitiveAcrossFragmentedChunk.// If we're writing a primitive and chunking, we need to update// the chunk length to include the length of the primitive (unless// this complexity is handled by specialChunk).// Note that this is wasted processing in the grow case, but that// we don't actually close the chunk in that case.// with the fragment header already marshalled.  The buflen and position// Note that fragmented is only true in the streaming and collect cases.// We just fragmented, and need to signal that we should// start a new chunk after writing the primitive.// followed by the octets of the converted wchar.  This is good,// but it causes problems with our chunking code.  We don't// want that octet to get put in a different chunk at the end// of the previous fragment.// Ensure that this won't happen by overriding write_wchar_array// and doing our own handleSpecialChunkBegin/End here.// Write the bytes without messing with chunking// See CDROutputStream_1_0// Unfortunately, because of chunking, we have to convert the// entire char[] to a byte[] array first so we can know how// many bytes we're writing ahead of time.  You can't split// an array of primitives into multiple chunks.// Remember that every wchar starts with an octet telling// its length.  The buffer size is an upper bound estimate.// Convert one wchar// Make sure to add the octet length// Copy it into our buffer// Now that we know the total length, we can deal with chunking.// Note that we don't have to worry about alignment since they're// just octets.// Must use totalNumBytes rather than buffer.length since the// buffer.length is only the upper bound estimate.// Write the octet array without tampering with chunking/* Copyright (c) 2001, 2012, Oracle and/or its affiliates. All rights reserved. ... *//** Provides the reading side with a per connection cache of ... */// Ensures that we've used the connection's IOR to create// a valid CodeBase delegate.  If this returns false, then// it is not valid to access the delegate.// The delegate was null, so see if the connection's// IOR was set.  If so, then we just need to connect// it.  Otherwise, there is no hope of checking the// remote code base.  That could be bug if the// service context processing didn't occur, or it// could be that we're talking to a foreign ORB which// doesn't include this optional service context.// REVISIT.  Use Merlin logging service to report that// codebase functionality was requested but unavailable.// Recheck the condition to make sure another// thread didn't already do this while we waited// Do we have a reference initialized by another connection?// Connect the delegate and update the cache// Save it for the benefit of other connections// It's now safe to use the delegate/* stubFactory *//** Thread local cache of sun.io code set converters for performance. ... *//** The ThreadLocal data is a 2 element Map array indexed ... *//** Index in the thread local converterCaches array for ... *//** Retrieve a CharsetDecoder from the Map using the given key. *//** Retrieve a CharsetEncoder from the Map using the given key. *//** Stores the given CharsetDecoder in the thread local cache, ... *//** Stores the given CharsetEncoder in the thread local cache, ... *//* Copyright (c) 1998, 2003, Oracle and/or its affiliates. All rights reserved. ... *//** CodeSetComponent is part of an IOR multi-component profile.  Two ... *//** CodeSetContext goes in a GIOP service context *//** Our default code set scheme is as follows: ... *//** Creates a CodeSetComponent from a String which contains a comma ... */// The first value is the native code set// Now process the other values as part of the// conversion code set list.// decode allows us to specify hex, decimal, etc// Otherwise return the CodeSetComponent representing// the given values/** Code sets for local cases without a connection. *//** Collection of classes, interfaces, and factory methods for ... *//** Abstraction for char to byte conversion. ... */// Perform the conversion of the provided char or String,// allowing the caller to query for more information// before writing.// How many bytes resulted from the conversion?// What's the maximum number of bytes per character?// What byte boundary should the stream align to before// calling writeBytes?  For instance, a fixed width// encoding with 2 bytes per char in a stream which// doesn't encapsulate the char's bytes should align// on a 2 byte boundary.  (Ex:  UTF16 in GIOP1.1)// Note: This has no effect on the converted bytes.  It// is just information available to the caller.// Get the resulting bytes.  Warning:  You must use getNumBytes()// to determine the end of the data in the byte array instead// of array.length!  The array may be used internally, so don't// save references./** Abstraction for byte to char conversion. */// In GIOP 1.1, interoperability can only be achieved with// fixed width encodings like UTF-16.  This is because wstrings// specified how many code points follow rather than specifying// the length in octets.// Called after getChars to determine the true size of the// converted array.// Perform the conversion using length bytes from the given// input stream.  Warning:  You must use getNumChars() to// determine the correct length of the resulting array.// The same array may be used internally over multiple// calls./** Implementation of CTBConverter which uses a nio.Charset.CharsetEncoder ... */// nio.Charset.CharsetEncoder actually does the work here// have to use it directly rather than through String's interface// because we want to know when errors occur during the conversion.// Proper alignment for this type of converter.  For instance,// ASCII has alignment of 1 (1 byte per char) but UTF16 has// alignment of 2 (2 bytes per char)// Char buffer to hold the input.// How many bytes are generated from the conversion?// How many characters were converted (temporary variable// for cross method communication)// ByteBuffer holding the converted input.  This is necessary// since we have to do calculations that require the conversion// before writing the array to the stream.// What code set are we using?// This can only happen if one of our Entries has// an invalid name.// an unsupported name.// The CharToByteConverter only takes a char[]// Try to save a memory allocation if possible.  Usual// space/time trade off.  If we could get the char[] out of// the String without copying, that would be great, but// it's forbidden since String is immutable.// Note that you can't use buffer.length since the buffer might// be larger than the actual number of converted bytes depending// on the encoding.// Possible optimization of directly converting into the CDR buffer.// However, that means the CDR code would have to reserve// a 4 byte string length ahead of time, and we'd need a// confusing partial conversion scheme for when we couldn't// fit everything in the buffer but needed to know the// converted length before proceeding due to fragmentation.// Then there's the issue of the chunking code.// For right now, this is less messy and basic tests don't// show more than a 1 ms penalty worst case.  Less than a// factor of 2 increase.// Convert the characters// ByteBuffer returned by the encoder will set its limit// to byte immediately after the last written byte.// an encoding operation is already in progress// There were illegal Unicode char pairs// A character doesn't map to the desired code set// CORBA formal 00-11-03.// If this happens, then some other encoding error occured/** Special UTF16 converter which can either always write a BOM ... */// Using this constructor, we will always write a BOM// Using this constructor, we don't use a BOM and use the// byte order specified/** Implementation of BTCConverter which uses a sun.io.ByteToCharConverter ... */// Obtain a Decoder// Should only be called if isFixedWidthEncoding is true// IMPORTANT: This calls OSFCodeSetRegistry.Entry, not//            CharsetDecoder.maxCharsPerByte().// Possible optimization of reading directly from the CDR// byte buffer.  The sun.io converter supposedly can handle// incremental conversions in which a char is broken across// two convert calls.// Basic tests didn't show more than a 1 ms increase// worst case.  It's less than a factor of 2 increase.// Also makes the interface more difficult.// CharBuffer returned by the decoder will set its limit// IMPORTANT - It's possible the underlying char[] in the//             CharBuffer returned by btc.decode(byteBuf)//             is longer in length than the number of characters//             decoded. Hence, the check below to ensure the//             char[] returned contains all the chars that have//             been decoded and no more.// There were a decoding operation already in progress// A character doesn't map to the desired code set.// If this happens, then a character decoding error occured./** Utility method to find a CharsetDecoder in the ... */// This can only happen if one of our charset entries has// an illegal name./** Special converter for UTF16 since it's required to optionally ... */// When there isn't a byte order marker, used the byte// order specified./** Utility method for determining if a UTF-16 byte order marker is present. */// If there aren't enough bytes to represent the marker and data,// return false./** The current solution for dealing with UTF-16 in CORBA ... */// Use the getConverter method from our superclass./** CTB converter factory for single byte or variable length encodings. *//** CTB converter factory for multibyte (mainly fixed) encodings. ... */// UCS2 doesn't have byte order markers, and we're encoding it// as UTF-16 since UCS2 isn't available in all Java platforms.// They should be identical with only minor differences in// negative cases.// We can write UTF-16 with or without a byte order marker.// Everything else uses the generic JavaCTBConverter.// Variable width encodings are aligned on 1 byte boundaries.// A fixed width encoding with a max. of 4 bytes/char should// align on a 4 byte boundary.  Note that UTF-16 is a special// case because of the optional byte order marker, so it's// handled above.// This doesn't matter for GIOP 1.2 wchars and wstrings// since the encoded bytes are treated as an encapsulation./** BTCConverter factory for single byte or variable width encodings. *//** BTCConverter factory for fixed width multibyte encodings. *//** Follows the code set negotiation algorithm in CORBA formal 99-10-07 13.7.2. ... */// A "null" value for the server's nativeCodeSet means that// the server desired not to indicate one.  We'll take that// to mean that it wants the first thing in its conversion list.// If it's conversion list is empty, too, then use the fallback// codeset.// Best case -- client and server don't have to convert// Is this client capable of converting to the server's// native code set?// The client will convert to the server's// native code set.// Is the server capable of converting to the client's// The server will convert to the client's// See if there are any code sets that both the server and client// support (giving preference to the server).  The order// of conversion sets is from most to least desired.// Before using the fallback codesets, the spec calls for a// compatibility check on the native code sets.  It doesn't make// sense because loss free communication is always possible with// UTF8 and UTF16, the fall back code sets.  It's also a lot// of work to implement.  In the case of incompatibility, the// spec says to throw a CODESET_INCOMPATIBLE exception.// Use the fallback/** Perform the code set negotiation algorithm and come up with ... */// No one should instantiate a CodeSetConversion but the singleton// instance method// initialize-on-demand holder/** CodeSetConversion is a singleton, and this is the access point. */// Singleton instance// Number used internally to indicate the fallback code// set.// Provides a thread local cache for the sun.io// converters./* Copyright (c) 2001, 2013, Oracle and/or its affiliates. All rights reserved. ... *//** Encapsulations are supposed to explicitly define their ... */// corba/EncapsOutputStream// corba/ORBSingleton// iiop/ORB// ior/IdentifiableBase// ior/IIOPProfile// corba/AnyImpl// CDREncapsCodec// ServiceContext// Assumes big endian (can use consumeEndian to read and set// the endianness if it is an encapsulation with a byte order// mark at the beginning)/** Full constructor with a CodeBase parameter useful for ... */// Wide characters don't exist in GIOP 1.0// In GIOP 1.1, we shouldn't have byte order markers.  Take the order// of the stream if we don't see them.// Assume anything else adheres to GIOP 1.2 requirements.// Our UTF_16 converter will work with byte order markers, and if// they aren't present, it will use the provided endianness.// With no byte order marker, it's big endian in GIOP 1.2.// formal 00-11-03 15.3.16.// REVISIT - Right now, EncapsOutputStream's do not use// pooled byte buffers. This is controlled by the following// static constant. This should be re-factored such that// the EncapsOutputStream doesn't know it's using pooled// byte buffers.// REVISIT - Right now, valuetypes in encapsulations will// only use stream format version 1, which may create problems// for service contexts or codecs (?).// corba/ORB// iiop/GIOPImpl// GIOP version 1.2 with no fragmentation, big endian,// UTF8 for char data and UTF-16 for wide char data;// REVISIT.  A UTF-16 encoding with GIOP 1.1 will not work// with byte order markers.// Used by IIOPProfileTemplate// In the case of GIOP 1.1, we take the byte order of the stream and don't// use byte order markers since we're limited to a 2 byte fixed width encoding.// Assume anything else meets GIOP 1.2 requirements// Use byte order markers?  If not, use big endian in GIOP 1.2.// (formal 00-11-03 15.3.16)/** Implementation class that uses Java serialization for input streams. ... */// [GIOPHeader(12) + requestID(4)] bytes// Used for mark / reset operations.// needs SerializablePermission("enableSubstitution")/** Connect the Stub to the ORB. */// Note: at this point, the buffer position is zero. The setIndex()// method call can be used to set a desired read index.// Called from read_octet or read_long or read_ulong method.//System.out.print(" is ");// Primitive types.// dequeue// peek// enqueue// check if size < [ GIOPHeader(12) + requestID(4)] bytes//markedItemQ.addLast(Byte.valueOf(value)); // only in JDK 1.5// Use big endian (network byte order). This is fixed.// Both the writer and reader use the same byte order.// Cannot happen. All direct reads are contained// within the first 16 bytes.// String types.// Array types./* // Cannot use this efficient read due to mark/reset support. ... */// Complex types.// kind off this stream and see if it is a tk_value.// Looking at the code we know that for tk_value the Any.read_value()// below ignores the tc argument anyway (except for the kind field).// read off the value of the any.// We don't need an implementation for this method, since principal// is absent in GIOP version 1.2 or above.// Each octet contains (up to) two decimal digits. If the fixed type has// an odd number of decimal digits, then the representation//     public int read(byte b[]) throws IOException;//     public int read(byte b[], int off, int len) throws IOException//     public long skip(long n) throws IOException;//     public int available() throws IOException;//     public void close() throws IOException;// Nested mark disallowed.// Further, mark is not supported until first 16 bytes are read./* // Note: only ByteArrayInputStream supports mark/reset. ... */// Set the buffer position.// Set mark related data.// Used exclusively by the dup() method.// no-op. We don't care about body alignment while using// Java serialization. What the GIOP spec states does not apply here.// this is redundant, since buffer size was already specified// as part of the init call. So, ignore.// No-op./* Copyright (c) 2004, 2013, Oracle and/or its affiliates. All rights reserved. ... *//** Implementation class that uses Java serialization for output streams. ... *//** Checks for objects that are instances of java.rmi.Remote ... *///System.out.print(" os ");// direct write.// Cannot happen. All direct writes are contained// Complex types (objects and graphs).// First calculate the string length without optional sign and dot.// If the fixed type has an odd number of decimal digits, then the// representation begins with the first (most significant) digit.// Otherwise, this first half-octet is all zero, and the first// digit is in the second half-octet.// The sign configuration in the last half-octet of the representation,// Write the boolean flag.// Now write out the object.// com.sun.corba.se.os.encoding.MarshalOutputStream// new copy.// Other.// Java serialization uses network byte order, that is, big-endian.//System.out.println("Total length : " + buf.length);// Note: These methods are defined in the super class and accessible.//public abstract void write(byte b[]) throws IOException;//public abstract void write(byte b[], int off, int len)//    throws IOException;//public abstract void flush() throws IOException;//public abstract void close() throws IOException;/** Defines an abstraction for a RestorableInputStream to ... *//* The methods necessary to support RMI *//* Additional Methods */// Determines the current byte stream position// (also handles fragmented streams)// mark/reset from java.io.InputStream/** This must be called once before unmarshaling valuetypes or anything ... *//** Tells the input stream to null any code set converter ... *//** Information from the OSF code set registry version 1.2g. ... */// Numbers from the OSF code set registry version 1.2g.// Please see the individual Entry definitions for// more details./** An entry in the OSF registry which allows users ... *//** Returns the Java equivalent name.  If the encoding has ... *//** Get the OSF registry number for this code set. *//** Is this a fixed or variable width code set?  (In CORBA ... *//** First checks reference equality since it's expected ... *//** Uses the registry number as the hash code. *//** 8-bit encoding required for GIOP 1.0, and used as the char set ... *//** UTF-16 as specified in the OSF registry has an optional ... *//** Fallback wchar code set. ... *//** Fallback char code set.  Also the code set for char data ... *//* At least in JDK 1.3, UCS-2 isn't one of the mandatory Java character ... *//** This is the encoding older JavaSoft ORBs advertised as their ... *//** Given an OSF registry value, return the corresponding Entry. ... *//** Defines the methods on an input stream which provide ... *//* Copyright (c) 2002, 2013, Oracle and/or its affiliates. All rights reserved. ... *///if (TypeCodeImpl.debug) System.out.println("Creating typeMap");//if (TypeCodeImpl.debug) System.out.println(this + " adding tc " + tc + " at position " + position);//if (TypeCodeImpl.debug) {//System.out.println("Getting tc " + (TypeCode)typeMap.get(new Integer(position)) +//" at position " + position);// The enclosed stream has to consider if the enclosing stream// had to read the enclosed stream completely when creating it.// This is why the size of the enclosed stream needs to be substracted.// Substract getBufferLength from the parents pos because it read this stream// from its own when creating it//System.out.println("TypeCodeInputStream.getTopLevelPosition using getTopLevelPosition " + topPos +//(isEncapsulation ? " - encaps length 4" : "") +//" - getBufferLength() " + getBufferLength() +//" + getPosition() " + getPosition() + " = " + pos);//System.out.println("TypeCodeInputStream.getTopLevelPosition returning getPosition() = " +//getPosition() + " because enclosure is " + enclosure);// _REVISIT_ Would be nice if we didn't have to copy the buffer!// read off part of the buffer corresponding to the encapsulation// create an encapsulation using the marshal buffer//System.out.println("Created TypeCodeInputStream " + encap + " with parent " + is);//encap.printBuffer();// first entry in an encapsulation is the endianess//System.out.println("Created TypeCodeInputStream " + tcis + " with no parent");//tcis.printBuffer();/* public boolean isEncapsulatedIn(TypeCodeOutputStream outerEnclosure) { ... */// Add four bytes for the encaps length, not another 4 for the byte order// which is included in getPosition().//System.out.println("TypeCodeOutputStream.getTopLevelPosition using getTopLevelPosition " +//((TypeCodeOutputStream)enclosure).getTopLevelPosition() +//" + getPosition() " + getPosition() +//(isEncapsulation ? " + encaps length 4" : "") +//" = " + pos);//System.out.println("TypeCodeOutputStream.getTopLevelPosition returning getPosition() = " +//getPosition() + ", enclosure is " + enclosure);//if (TypeCodeImpl.debug) System.out.println(this + " adding id " + id + " at position " + position);//if (TypeCodeImpl.debug) System.out.println("Getting position " + ((Integer)typeMap.get(id)).intValue() +//" for id " + id);// Writes this streams buffer to the given OutputStream// without byte order flag and length as is the case for encapsulations.// Make sure to align s to 4 byte boundaries.// Unfortunately we can't do just this:// s.alignAndReserve(4, 4);// So we have to take the first four bytes given in firstLong and write them// with a call to write_long which will trigger the alignment.// Then write the rest of the byte array.//System.out.println(this + ".writeRawBuffer(" + s + ", " + firstLong + ")");//if (s instanceof CDROutputStream) {//System.out.println("Parent position before writing kind = " + ((CDROutputStream)s).getIndex());//System.out.println("Parent position after writing kind = " + ((CDROutputStream)s).getIndex());// get bytes from DirectByteBuffer// NOTE: Microbenchmarks are showing it is faster to do//       a loop of ByteBuffer.get(int) than it is to do//       a bulk ByteBuffer.get(byte[], offset, length)//System.out.println("Parent position after writing all " + getIndex() + " bytes = " + ((CDROutputStream)s).getIndex());//if (TypeCodeImpl.debug) System.out.println("Created TypeCodeOutputStream " + encap + " with parent " + this);//if (TypeCodeImpl.debug) System.out.println("Created TypeCodeOutputStream " + tos + " with parent " + os);//if (TypeCodeImpl.debug) System.out.println("TypeCodeOutputStream.getRealIndex using getTopLevelPosition " +//topPos + " instead of getPosition " + getPosition());/* protected void printBuffer() { ... */// Returns the buffer trimmed of the trailing zeros and without the// known _kind value at the beginning.//System.out.println("outBuffer length = " + (getIndex() - 4));// Micro-benchmarks show that DirectByteBuffer.get(int) is faster// than DirectByteBuffer.get(byte[], offset, length).// REVISIT - May want to check if buffer is direct or non-direct//           and use array copy if ByteBuffer is non-direct./* Copyright (c) 2002, 2003, Oracle and/or its affiliates. All rights reserved. ... */// for debugging//public void printBuffer();//if (TypeCodeImpl.debug) System.out.println("Getting tc " + (TypeCodeImpl)typeMap.get(new Integer(position)) +// WrapperInputStream has no enclosure//if (TypeCodeImpl.debug) System.out.println("WrapperInputStream.getTopLevelPosition " +//"returning getPosition " + getPosition() + " - startPos " + startPos +//" = " + (getPosition() - startPos));// This is never actually called on a WrapperInputStream, but// exists to satisfy the interface requirement.//public void printBuffer() { stream.printBuffer(); }/* Copyright (c) 2000, 2013, Oracle and/or its affiliates. All rights reserved. ... *//** CDREncapsCodec is an implementation of Codec, as described ... */// The ORB that created the factory this codec was created from// The GIOP version we are encoding for/* ****************************************************************** ... *//** Creates a new codec implementation.  Uses the given ORB to create ... *//** Convert the given any into a CDR encapsulated octet sequence *//** Decode the given octet sequence into an any based on a CDR ... *//** Convert the given any into a CDR encapsulated octet sequence.  Only ... *//** Convert the given any into a CDR encapsulated octet sequence. ... */// _REVISIT_ Note that InvalidTypeForEncoding is never thrown in// the body of this method.  This is due to the fact that CDR*Stream// will never throw an exception if the encoding is invalid.  To// fix this, the CDROutputStream must know the version of GIOP it// is encoding for and it must check to ensure that, for example,// wstring cannot be encoded in GIOP 1.0.// As part of the GIOP 1.2 work, the CDRInput and OutputStream will// be versioned.  This can be handled once this work is complete.// Create output stream with default endianness.// This is an encapsulation, so put out the endian:// Sometimes encode type code:// Encode value and return.// return value// _REVISIT_ Currently there is no way for us to distinguish between// a FormatMismatch and a TypeMismatch because we cannot get this// information from the CDRInputStream.  If a RuntimeException occurs,// it is turned into a FormatMismatch exception.// If type code not specified, read it from octet stream:// Create a new Any object:// See above note./* Copyright (c) 2000, 2012, Oracle and/or its affiliates. All rights reserved. ... *//** Implementation of the ClientRequestInfo interface as specified in ... */// The available constants for startingPointCall// The available constants for endingPointCall// NOTE: IF AN ATTRIBUTE IS ADDED, PLEASE UPDATE RESET();// The current retry request status.  True if this request is being// retried and this info object is to be reused, or false otherwise.// The number of times this info object has been (re)used.  This is// incremented every time a request is retried, and decremented every// time a request is complete.  When this reaches zero, the info object// is popped from the ClientRequestInfoImpl ThreadLocal stack in the ORB.// The RequestImpl is set when the call is DII based.// The DII query calls like ParameterList, ExceptionList,// ContextList will be delegated to RequestImpl.// Sources of client request information// Cached information:// key = Integer, value = IOP.ServiceContext.// key = Integer, value = TaggedComponent/** Reset the info object so that it can be reused for a retry, ... */// Please keep these in the same order that they're declared above.// 6763340// Do not reset entryCount because we need to know when to pop this// from the stack.// Clear cached attributes:/* ********************************************************************* ... */// Method IDs for all methods in ClientRequestInfo.  This allows for a// convenient O(1) lookup for checkAccess().// ClientRequestInfo validity table (see ptc/00-08-06 table 21-1).// Note: These must be in the same order as specified in contants.// LEGEND:// s_req = send_request     r_rep = receive_reply// s_pol = send_poll        r_exc = receive_exception//                          r_oth = receive_other// A true value indicates call is valid at specified point.// A false value indicates the call is invalid.// NOTE: If the order or number of columns change, update// checkAccess() accordingly.//                              { s_req, s_pol, r_rep, r_exc, r_oth }// RequestInfo methods:/* request_id *//* operation *//* arguments *//* exceptions *//* contexts *//* operation_context *//* result *//* response_expected *//* sync_scope *//* reply_status *//* forward_reference *//* get_slot *//* get_request_service_context *//* get_reply_service_context */// ClientRequestInfo methods::/* target *//* effective_target *//* effective_profile *//* received_exception *//* received_exception_id *//* get_effective_component *//* get_effective_components *//* get_request_policy *//* add_request_service_context *//** Creates a new ClientRequestInfo implementation. ... *//** The object which the client called to perform the operation. */// access is currently valid for all states://checkAccess( MID_TARGET );/** The actual object on which the operation will be invoked.  If the ... *///checkAccess( MID_EFFECTIVE_TARGET );// Note: This is not necessarily the same as locatedIOR.// Reason: See the way we handle COMM_FAILURES in// ClientRequestDispatcher.createRequest, v1.32// REVISIT - get through chain like getLocatedIOR helper below./** The profile that will be used to send the request.  If a location ... *///checkAccess( MID_EFFECTIVE_PROFILE );// Good citizen: In the interest of efficiency, we assume interceptors// will not modify the returned TaggedProfile in any way so we need// not make a deep copy of it./** Contains the exception to be returned to the client. */// will not modify the returned Any in any way so we need/** The CORBA::RepositoryId of the exception to be returned to the client. */// Note: exception should never be null here since we will// throw a BAD_INV_ORDER if this is not called from// receive_exception.// _REVISIT_ We need to be able to handle a UserException in the// DII case.  How do we extract the ID from a UserException?/** Returns the IOP::TaggedComponent with the given ID from the profile ... *//** Returns all the tagged components with the given ID from the profile ... */// Look in cache:// null could mean we cached null or not in cache.// Not in cache.  Get it from the profile:// As per ptc/00-08-06, section 21.3.13.6., If not found, raise// BAD_PARAM with minor code INVALID_COMPONENT_ID.// Good citizen: In the interest of efficiency, we will assume// interceptors will not modify the returned TaggedCompoent[], or// the TaggedComponents inside of it.  Otherwise, we would need to// clone the array and make a deep copy of its contents./** Returns the given policy in effect for this operation. */// _REVISIT_ Our ORB is not policy-based at this time./** Allows interceptors to add service contexts to the request. ... */// NOTE: When adding a method, be sure to:// 1. Add a MID_* constant for that method// 2. Call checkAccess at the start of the method// 3. Define entries in the validCall[][] table for interception points./** See RequestInfoImpl for javadoc. *///checkAccess( MID_REQUEST_ID );/* NOTE: The requestId in client interceptors is the same as the ... *///checkAccess( MID_OPERATION );// If it is DII request then get the arguments from the DII req// and convert that into parameters.// Good citizen: In the interest of efficiency, we assume// interceptors will be "good citizens" in that they will not// modify the contents of the Parameter[] array.  We also assume// they will not change the values of the containing Anys.// Get the list of exceptions from DII request data, If there are// no exceptions raised then this method will return null.// modify the contents of the TypeCode[] array.  We also assume// they will not change the values of the containing TypeCodes.// Get the list of contexts from DII request data, If there are// no contexts then this method will return null.// modify the contents of the String[] array.// _REVISIT_ The API for get_values is not compliant with the spec,// Revisit this code once it's fixed.// _REVISIT_ Our ORB doesn't support Operation Context, This code// will not be excerscised until it's supported.// The first parameter in get_values is the start_scope which// if blank makes it as a global scope.// The second parameter is op_flags which is set to RESTRICT_SCOPE// As there is only one defined in the spec.// The Third param is the pattern which is '*' requiring it to// get all the contexts.// The String[] array will contain Name and Value for each// context and hence double the size in the array.// Get the result from the DII request data.// Good citizen: In the interest of efficiency, we assume that// interceptors will not modify the contents of the result Any.// Otherwise, we would need to create a deep copy of the Any.//checkAccess( MID_RESPONSE_EXPECTED );// Check to make sure we are in LOCATION_FORWARD// state as per ptc/00-08-06, table 21-1// footnote 2.// Do not cache this value since if an interceptor raises// forward request then the next interceptor in the// list should see the new value.// REVISIT - this most likely causes reportRedirect to happen twice.// Once here and once inside the request dispatcher./** does not contain an etry for that ID, BAD_PARAM with a minor code of ... */// In the event this is called from a oneway, we will have no// response object.// In the event this is called after a IIOPConnection.purgeCalls,// we will have a response object, but that object will// not contain a header (which would hold the service context// container).  See bug 4624102.// REVISIT: this is the only thing used// from response at this time.  However, a more general solution// would avoid accessing other parts of response's header.// Instead of throwing a NullPointer, we will// "gracefully" handle these with a BAD_PARAM with minor code 25.// REVISIT how this is programmed - not what it does.// See purge calls test.  The waiter is woken up by the// call to purge calls - but there is no reply containing// service contexts.// Override RequestInfoImpl connection to work in framework.// REVISIT - so mediator can handle DII in subcontract./** Set or reset the retry request flag. *//** Retrieve the current retry request status. *//** Increases the entry count by 1. *//** Decreases the entry count by 1. *//** Retrieve the current entry count *//** Overridden from RequestInfoImpl.  Calls the super class, then ... *//** Sets DII request object in the RequestInfoObject. *//** Keeps track of whether initiate was called for a DII request.  The ORB ... *//** See comment for setDIIInitiate *//** The PICurrent stack should only be popped if it was pushed. ... *//** Overridden from RequestInfoImpl. */// Clear cached values:/** See description for RequestInfoImpl.checkAccess */// Make sure currentPoint matches the appropriate index in the// validCall table:// Check the validCall table:/** CodecFactoryImpl is the implementation of the Codec Factory, as described ... */// The ORB that created this Codec Factory// The maximum minor version of GIOP supported by this codec factory.// Currently, this is 1.2.// The pre-created minor versions of Codec version 1.0, 1.1, ...,// 1.(MAX_MINOR_VERSION_SUPPORTED)/** Creates a new CodecFactory implementation.  Stores the ORB that ... */// Precreate a codec for version 1.0 through// 1.(MAX_MINOR_VERSION_SUPPORTED).  This can be// done since Codecs are immutable in their current implementation.// This is an optimization that eliminates the overhead of creating// a new Codec each time create_codec is called./** Creates a codec of the given encoding.  The only format recognized ... */// This is the only format we can currently create codecs for:/** Called when an invalid null parameter was passed.  Throws a ... *//** IORInfoImpl is the implementation of the IORInfo class, as described ... */// State values that determine which methods are allowed.// get_effective_policy, manager_id, and adapter_state are valid unless STATE_DONE// add_component, and add_component_to_profile are valid.// adapter_template, and R/W to current_factory are valid// No methods are valid in this state// The current state of this object// The ObjectAdapter associated with this IORInfo object./** Creates a new IORInfo implementation.  This info object will establish ... *//** An ORB service implementation may determine what server side policy ... *//** A portable ORB service implementation calls this method from its ... */// At this point, the iortemp must contain only a single// IIOPProfileTemplate.  This is a restriction of our// implementation.  Also, note the the ObjectReferenceTemplate// is called when a certain POA is created in a certain ORB// in a certain server, so the server_id, orb_id, and// poa_id operations must be well-defined no matter what// kind of implementation is used: e.g., if a POA creates// IORs with multiple profiles, they must still all agree// about this information.  Thus, we are justified in// extracting the single IIOPProfileTemplate to create// an ObjectReferenceTemplate here./** Internal utility method to add an IOR component to the set of profiles ... */// Convert the given IOP::TaggedComponent into the appropriate// type for the TaggedProfileTemplate// Iterate through TaggedProfileTemplates and add the given tagged// component to the appropriate one(s).// If no profile was found with the given id, throw a BAD_PARAM:// (See orbos/00-08-06, section 21.5.3.3.)// REVISIT: add minor codes!/** Handles invocation of interceptors.  Has specific knowledge of how to ... */// The ORB// The list of interceptors to be invoked// True if interceptors are to be invoked, or false if not// Note: This is a global enable/disable flag, whereas the enable flag// in the RequestInfoStack in PIHandlerImpl is only for a particular Thread.// PICurrent variable.// NOTE: Be careful about adding additional attributes to this class.// Multiple threads may be calling methods on this invoker at the same// time./** Creates a new Interceptor Invoker.  Constructor is package scope so ... *//** Enables or disables the interceptor invoker *//** Called when a new POA is created. ... */// If invocation is not yet enabled, don't do anything.// Create IORInfo object to pass to IORInterceptors:// Call each IORInterceptor:// Implementation note:// This loop counts backwards for greater efficiency.// Benchmarks have shown that counting down is more efficient// than counting up in Java for loops, as a compare to zero is// faster than a subtract and compare to zero.  In this case,// it doesn't really matter much, but it's simply a force of habit.// as per PI spec (orbos/99-12-02 sec 7.2.1), if// establish_components throws an exception, ignore it.// Change the state so that only template operations are valid// Note that exceptions here are NOT ignored, as per the// ORT spec (orbos/01-01-04)// Change the state so that no operations are valid,// in case a reference to info escapes this scope.// This also completes the actions associated with the// template interceptors on this POA.// No-op: ignore exception in this case/** Invokes either send_request, or send_poll, depending on the value ... */// Make a a fresh slot table available to TSC in case// interceptors need to make out calls.// Client's TSC is now RSC via RequestInfo.// Get all ClientRequestInterceptors:// We will assume that all interceptors returned successfully,// and adjust the flowStackIndex to the appropriate value if// we later discover otherwise.// Determine whether we are calling send_request or send_poll:// (This is currently commented out because our ORB does not// yet support the Messaging specification, so send_poll will// never occur.  Once we have implemented messaging, this may// be uncommented.)// int startingPointCall = info.getStartingPointCall();// Again, it is not necessary for a switch here, since// there is only one starting point call type (see// above comment).//switch( startingPointCall ) {//case ClientRequestInfoImpl.CALL_SEND_REQUEST://clientInterceptors[i].send_request( info );//break;//case ClientRequestInfoImpl.CALL_SEND_POLL://clientInterceptors[i].send_poll( info );// as per PI spec (orbos/99-12-02 sec 5.2.1.), if// interception point throws a ForwardRequest,// no other Interceptors' send_request operations are// called.// For some reason, using break here causes the VM on// NT to lose track of the value of flowStackIndex// after exiting the for loop.  I changed this to// check a boolean value instead and it seems to work// fine.// interception point throws a SystemException,// check a boolean value instead and it seems to// work fine.// Remember where we left off in the flow stack:// Make the SlotTable fresh for the next interception point.// end enabled check/** Invokes either receive_reply, receive_exception, or receive_other, ... */// NOTE: It is assumed someplace else prepared a// fresh TSC slot table.// Determine whether we are calling receive_reply,// receive_exception, or receive_other:// If we would be calling RECEIVE_REPLY, but this is a// one-way call, override this and call receive_other:// Only step through the interceptors whose starting points// have successfully returned.// Unlike the previous loop, this one counts backwards for a// reason - we must execute these in the reverse order of the// starting points.// interception point throws a ForwardException,// ending point call changes to receive_other.// ending point call changes to receive_exception.// See doc for setPICurrentPushed as to why this is necessary.// Check info for null in case errors happen before initiate.// After the pop, original client's TSC slot table// remains avaiable via PICurrent./** Invokes receive_request_service_context interception points. */// Make a fresh slot table for RSC.// Make a fresh slot table for TSC in case// Get all ServerRequestInterceptors:// Currently, there is only one server-side starting point// interceptor called receive_request_service_contexts.// as per PI spec (orbos/99-12-02 sec 5.3.1.), if// no other Interceptors' starting points are// called and send_other is called.// The remaining points, ServantManager and Servant// all run in the same logical thread.// Now TSC and RSC are equivalent./** Invokes receive_request interception points */// NOTE: do not touch the slotStack.  The RSC and TSC are// equivalent at this point.// Currently, there is only one server-side intermediate point// interceptor called receive_request.// no other Interceptors' intermediate points are/** Invokes either send_reply, send_exception, or send_other, ... */// REVISIT: This is moved out to PIHandlerImpl until dispatch// path is rearchitected.  It must be there so that// it always gets executed so if an interceptor raises// an exception any service contexts added in earlier points// this point get put in the exception reply (via the SC Q).//info.setCurrentExecutionPoint( info.EXECUTION_POINT_ENDING );// Determine whether we are calling// send_exception, or send_other:// ending point call changes to send_exception.// Remember that all interceptors' starting and ending points// have already been executed so we need not do anything.// Get rid of the Server side RSC./** Update the client delegate in the event of a ForwardRequest, given the ... */// ForwardRequest may be null if the forwarded IOR is set internal// to the ClientRequestDispatcher rather than explicitly through Portable// Interceptors.  In this case, we need not update the client// delegate ForwardRequest object.// Convert the forward object into an IOR:/** Provides a repository of registered Portable Interceptors, organized ... */// Interceptor type list.  If additional interceptors are needed,// add additional types in numerical order (do not skip numbers),// and update NUM_INTERCEPTOR_TYPES and classTypes accordingly.// NUM_INTERCEPTOR_TYPES represents the number of interceptor// types, so we know how many lists to maintain.// Array of class types for interceptors.  This is used to create the// appropriate array type for each interceptor type.  These must// match the indices of the constants declared above.// True if no further interceptors may be registered with this list.// List of interceptors currently registered.  There are// NUM_INTERCEPTOR_TYPES lists of registered interceptors.// For example, interceptors[INTERCEPTOR_TYPE_CLIENT] contains an array// of objects of type ClientRequestInterceptor./** Creates a new Interceptor List.  Constructor is package scope so ... */// Create empty interceptors arrays for each type:/** Registers an interceptor of the given type into the interceptor list. ... */// If locked, deny any further addition of interceptors.// Cache interceptor name:// If this is not an anonymous interceptor,// search for an interceptor of the same name in this category:// An O(n) search will suffice because register_interceptor is not// likely to be called often./** Locks this interceptor list so that no more interceptors may be ... *//** Retrieves an array of interceptors of the given type.  For efficiency, ... *//** Returns true if there is at least one interceptor of the given type, ... *//** Initializes all interceptors arrays to zero-length arrays of the ... */// Create a zero-length array for each type:/** Grows the given interceptor array by one: */// Create new array to replace the old one.  The new array will be// one element larger but have the same type as the old one./** Destroys all interceptors in this list by invoking their destroy() ... *//** @param ... *//** Sort interceptors. */// Get fresh sorting bins for each non empty type.// not synchronized like we want.// Let the RuntimeExceptions thrown by sort// (i.e., ClassCastException and UnsupportedOperationException)// flow back to the user./** ORBInitInfoImpl is the implementation of the ORBInitInfo class to be ... */// The ORB we are initializing// The arguments passed to ORB_init// The ID of the ORB being initialized// The CodecFactory// The current stage of initialization// The pre-initialization stage (pre_init() being called)// The post-initialization stage (post_init() being called)// Reject all calls - this object should no longer be around.// The description for the OBJECT_NOT_EXIST exception in STAGE_CLOSED/** Creates a new ORBInitInfoImpl object (scoped to package) ... *//** Return the ORB behind this ORBInitInfo.  This is defined in the ... *//** Sets the current stage we are in.  This limits access to certain ... *//** Throws an exception if the current stage is STAGE_CLOSED. ... *//** This attribute contains the arguments passed to ORB_init.  They may ... *//** This attribute is the ID of the ORB being initialized *//** This attribute is the IOP::CodecFactory.  The CodecFactory is normally ... *//** See orbos/99-12-02, Chapter 11, Dynamic Initial References on page ... */// As per CORBA 3.0 section 21.8.1,// if null is passed as the obj parameter,// throw BAD_PARAM with minor code OMGSystemException.RIR_WITH_NULL_OBJECT.// Though the spec is talking about IDL null, we will address both// Java null and IDL null:// Note: Local Objects can never be nil!// This check was made to determine that the objref is a// non-local objref that is fully// initialized: this was called only for its side-effects of// possibly throwing exceptions.  However, registering// local objects should be permitted!// XXX/Revisit?// IOR ior = ORBUtility.getIOR( obj ) ;// Delegate to ORB.  If ORB version throws InvalidName, convert to// equivalent Portable Interceptors InvalidName./** This operation is only valid during post_init.  It is identical to ... */// Initializer is not allowed to invoke this method during// this stage.// _REVISIT_ Spec issue: What exception should really be// thrown here?// Convert PIDL to IDL exception:// New method from CORBA 3.1// XXX ignore policies for now/** This operation is used to add a client-side request Interceptor to ... *//** This operation is used to add a server-side request Interceptor to ... *//** This operation is used to add an IOR Interceptor to ... *//** A service calls allocate_slot_id to allocate a slot on ... *//** Register a PolicyFactory for the given PolicyType. ... *//** PICurrent is the implementation of Current as specified in the Portable ... */// slotCounter is used to keep track of ORBInitInfo.allocate_slot_id()// The ORB associated with this PICurrent object.// True if the orb is still initialzing and get_slot and set_slot are not// to be called.// ThreadLocal contains a stack of SlotTable which are used// for resolve_initial_references( "PICurrent" );/** PICurrent constructor which will be called for every ORB ... *//** This method will be called from ORBInitInfo.allocate_slot_id( ). ... *//** This method gets the SlotTable which is on the top of the ... *//** This method pushes a SlotTable on the SlotTableStack. When there is ... *//** This method pops a SlotTable on the SlotTableStack. *//** This method sets the slot data at the given slot id (index) in the ... */// As per ptc/00-08-06 if the ORB is still initializing, disallow// calls to get_slot and set_slot.  If an attempt is made to call,// throw a BAD_INV_ORDER./** This method gets the slot data at the given slot id (index) from the ... *//** This method resets all the slot data to null in the ... *//** Called from ORB when the ORBInitializers are about to start ... *//** Provides portable interceptor functionality. */// REVISIT - delete these after framework merging.// A unique id used in ServerRequestInfo.// This does not correspond to the GIOP request id.// Stores the codec factory for producing codecs// The arguments passed to the application's main method.  May be null.// This is used for ORBInitializers and set from set_parameters.// The list of portable interceptors, organized by type:// Cached information for optimization - do we have any interceptors// registered of the given types?  Set during ORB initialization.// temp always true// The class responsible for invoking interceptors// There will be one PICurrent instantiated for every ORB.// This table contains a list of PolicyFactories registered using// ORBInitInfo.registerPolicyFactory() method.// Key for the table is PolicyType which is an Integer// Value is PolicyFactory.// Table to convert from a ReplyMessage.? to a PI replyStatus short.// Note that this table relies on the order and constants of// ReplyMessage not to change.// = ReplyMessage.NO_EXCEPTION// = ReplyMessage.USER_EXCEPTION// = ReplyMessage.SYSTEM_EXCEPTION// = ReplyMessage.LOCATION_FORWARD// = ReplyMessage.LOCATION_FORWARD_PERM// = ReplyMessage.NEEDS_ADDRESSING_MODE// ThreadLocal containing a stack to store client request info objects// and a disable count.// ThreadLocal containing the current server request info object.// Class to contain all ThreadLocal data for ClientRequestInfo// maintenance.// We use an ArrayList instead since it is not thread-safe.// RequestInfoStack is used quite frequently.// Number of times a request has been made to disable interceptors.// When this reaches 0, interception hooks are disabled.  Any higher// value indicates they are enabled.// NOTE: The is only currently used on the client side.// Create codec factory:// Create new interceptor list:// Create a new PICurrent.// Create new interceptor invoker, initially disabled:// Register the PI current and Codec factory objects// If we have any orb initializers, make use of them:// Create the ORBInitInfo object to pass to ORB intializers:// Make sure get_slot and set_slot are not called from within// ORB initializers:// Call pre_init on all ORB initializers:// Call post_init on all ORB initializers:// Proprietary: sort interceptors:// Re-enable get_slot and set_slot to be called from within// Ensure nobody makes any more calls on this object.// Set cached flags indicating whether we have interceptors// registered of a given type.// XXX This must always be true, so that using the new generic// RPC framework can pass info between the PI stack and the// framework invocation stack.  Temporary until Harold fixes// this.  Note that this must never be true until after the// ORBInitializer instances complete executing.//hasClientInterceptors = interceptorList.hasInterceptorsOfType(//InterceptorList.INTERCEPTOR_TYPE_CLIENT );// Enable interceptor invoker (not necessary if no interceptors// are registered).  This should be the last stage of ORB// initialization./** ptc/00-08-06 p 205: "When an application calls ORB::destroy, the ORB ... *//* **************** ... */// Invoke the starting interception points and record exception// and reply status info in the info object:// Check reply status.  If we will not have another chance later// to invoke the client ending points, do it now.// Note: Transport retry cannot happen here since this happens// before the request hits the wire.// Do not throw anything.  Otherwise, it must be a// SystemException, UserException or RemarshalException.// It should not be possible for an interceptor to throw// a UserException.  By asserting instead of throwing the// UserException, we need not declare anything but// RemarshalException in the throws clause.// Needed when an error forces a retry AFTER initiateClientPIRequest// but BEFORE invokeClientPIStartingPoint.// Translate ReplyMessage.replyStatus into PI replyStatus:// Note: this is also an assertion to make sure a valid replyStatus// is passed in (IndexOutOfBoundsException will be thrown otherwise)// Invoke the ending interception points and record exception// Check reply status:// If this is a forward or a retry, reset and reuse// info object:// fix for 6763340:// ... and return a RemarshalException so the orb internals know// Get the most recent info object from the thread local// ClientRequestInfoImpl stack:// In RequestImpl.doInvocation we already called// initiateClientPIRequest( true ), so ignore this initiate.// If there is no info object or if we are not retrying a request,// push a new ClientRequestInfoImpl on the stack:// 6763340: don't push unless this is not a retry// Note: the entry count is automatically initialized to 0.// Reset the retry request flag so that recursive calls will// push a new info object, and bump up entry count so we know// when to pop this info object:// KMC 6763340: I don't know why this wasn't set earlier,// but we do not want a retry to pick up the previous// reply status, so clear it here.  Most likely a new// info was pushed before, so that this was not a problem.// If this is a DII request, make sure we ignore the next initiate.// fix for 6763340// If the replyStatus has not yet been set, this is an indication// that the ORB threw an exception before we had a chance to// invoke the client interceptor ending points.// _REVISIT_ We cannot handle any exceptions or ForwardRequests// flagged by the ending points here because there is no way// to gracefully handle this in any of the calling code.// This is a rare corner case, so we will ignore this for now.// Decrement entry count, and if it is zero, pop it from the stack.// fix for 6763340, and probably other cases (non-recursive retry)// RequestInfoStack<ClientRequestInfoImpl> infoStack =//     threadLocalClientRequestInfoStack.get();// Handle SystemException or ForwardRequest:// Clear servant from info object so that the user has control over// its lifetime:// REVISIT: This needs to be done "early" for the following workaround.// REVISIT: This was done inside of invokeServerInterceptorEndingPoint// but needs to be here for now.  See comment in that method for why.// It is possible we might have entered this method more than// once (e.g. if an ending point threw a SystemException, then// a new ServerResponseImpl is created).// Note: this is also an assertion to make sure a valid// replyStatus is passed in (IndexOutOfBoundsException will be// thrown otherwise)// Make forwarded IOR available to interceptors, if applicable:// REVISIT: Do early above for now.// Make reply message available to interceptors://info.setReplyMessage( replyMessage );// Remember exception so we can tell if an interceptor changed it.// _REVISIT_ We do not have access to the User Exception at// this point, so treat it as an UNKNOWN for now.// Note that if this is a DSI call, we do have the user exception.// Invoke the ending interception points:// Check reply status.  If an interceptor threw a SystemException// and it is different than the one that we came in with,// rethrow it so the proper response can be constructed:// If we are to forward the location:// Treat a ForwardRequest as a ForwardException.// Treat a ForwardRequest by changing the IOR.// Notify request object that once response is constructed, make// sure we execute ending points./** Handles exceptions for the starting and intermediate points for ... */// If a system exception was thrown, throw it to caller:// If an interceptor throws a forward request, convert it// into a ForwardException for easier handling:/** Utility method to convert a PI reply status short to a ReplyMessage ... *//** Convenience method to get the ClientRequestInfoImpl object off the ... *//** Convenience method to get the ServerRequestInfoImpl object off the ... *//** Convenience method to determine whether Client PI is enabled ... *//** Call pre_init on all ORB initializers */// Inform ORBInitInfo we are in pre_init stage// Step through each initializer instantiation and call its// pre_init.  Ignore any exceptions.// As per orbos/99-12-02, section 9.3.1.2, "If there are// any exceptions, the ORB shall ignore them and proceed."/** Call post_init on all ORB initializers */// Inform ORBInitInfo we are in post_init stage// Step through each initializer instantiation and call its post_init.// Ignore any exceptions./** Creates the ORBInitInfo object to be passed to ORB intializers' ... */// arguments comes from set_parameters.  May be null.// _REVISIT_ The spec does not specify which ID this is to be.// We currently get this from the corba.ORB, which reads it from// the ORB_ID_PROPERTY property./** Called by ORBInitInfo when an interceptor needs to be registered. ... */// We will assume interceptor is not null, since it is called// internally.// Register with interceptor list:/** This is the implementation of standard API defined in org.omg.CORBA.ORB ... *//** This method registers the Policy Factory in the policyFactoryTable, ... *//* Copyright (c) 2003, 2012, Oracle and/or its affiliates. All rights reserved. ... *//** This is No-Op implementation of PIHandler. It is used in ORBConfigurator ... *//** Implementation of the RequestInfo interface as specified in ... */// The ORB from which to get PICurrent and other info// The number of interceptors actually invoked for this client request.// See setFlowStackIndex for a detailed description.// The type of starting point call to make to the interceptors// See ClientRequestInfoImpl and ServerRequestInfoImpl for a list of// appropriate constants.// The type of intermediate point call to make to the interceptors// See ServerRequestInfoImpl for a list of appropriate constants.// This does not currently apply to client request interceptors but is// here in case intermediate points are introduced in the future.// The type of ending point call to make to the interceptors// The reply status to return in reply_status.  This is initialized// to UNINITIALIZED so that we can tell if this has been set or not.// Constant for an uninitizlied reply status.// Which points we are currently executing (so we can implement the// validity table).// Set to true if all interceptors have had all their points// executed.// Sources of request information// The ForwardRequest object if this request is being forwarded.// Either the forwardRequest or the forwardRequestIOR field is set.// When set, the other field is set to null initially.  If the other// field is queried, it is lazily calculated and cached.  These// two attributes are always kept in sync.// PICurrent's  SlotTable// The exception to be returned by received_exception and// received_exception_id// Please keep these in the same order as declared above.// We don't need to reset the Slots because they are// already in the clean state after recieve_<point> interceptor// are called.// Method IDs for all methods in RequestInfo.  This allows for a// The last value from RequestInfo (be sure to update this):/** Creates a new RequestInfoImpl object. */// Capture the current TSC and make it the RSC of this request./** Implementation for request_id() differs for client and server ... *//** Implementation for operation() differs for client and server ... *//** This method returns the list of arguments for the operation that was ... *//** This method returns the list of exceptios  that was raised when the ... *//** This method returns the list of contexts for the DII operation. ... *//** This method returns the list of operation_context for the DII operation. ... *//** This method returns the result from the invoked DII operation. ... *//** Implementation for response_expected() differs for client and server ... *//** Defined in the Messaging specification.  Pertinent only when ... */// REVISIT - get from MessageMediator/** Describes the state of the result of the operation invocation.  Its ... *//** Implementation for forward_reference() differs for client and server ... *//** Returns the data from the given slot of the PortableInterceptor::Current ... *///checkAccess( MID_GET_SLOT );// Delegate the call to the slotTable which was set when RequestInfo was// created./** Implementation for get_request_service_context() differs for client ... *//** Implementation for get_reply_service_context() differs for client ... */// 3. Define entries in the validCall[][] table for interception points//    in both ClientRequestInfoImpl and ServerRequestInfoImpl./** Inserts the UserException inside the given ApplicationException ... */// Extract the UserException from the ApplicationException.// Look up class name from repository id:// Find the read method on the helper class:// Invoke the read method, passing in the input stream to// retrieve the user exception.  Mark and reset the stream// as to not disturb it.// Insert this UserException into the provided Any using the// helper class./** Inserts the UserException into the given Any. ... */// Find insert( Any, class ) method// Call helper.insert( result, userException ):/** Internal utility method to convert an NVList into a PI Parameter[] */// _REVISIT_ This utility method should probably be doing a deep// copy so interceptor can't accidentally change the arguments.// ParameterMode spec can be found in 99-10-07.pdf// Section:10.5.22// nv.flags spec can be found in 99-10-07.pdf// Section 7.1.1// nv.flags has ARG_IN as 1, ARG_OUT as 2 and ARG_INOUT as 3// To convert this into enum PARAM_IN, PARAM_OUT and// PARAM_INOUT the value is subtracted by 1./** Utility to wrap the given Exception in an Any object and return it. ... */// Note: exception should never be null here since we will throw// a BAD_INV_ORDER if this is not called from receive_exception.// Use the Helper class for this exception to insert it into an// Any.// Insert the user exception inside the application exception// into the Any result:// As per ptc/00-08-06, 21.3.13.4. if we cannot find the// appropriate class, then return an any containing UNKNOWN,// with a minor code of 1.  This is conveniently the same// exception that is returned from the// insertApplicationException utility method./** Utility method to look up a service context with the given id and ... */// Search cache first:// null could normally mean that either we cached the value null// or it's not in the cache.  However, there is no way for us to// cache the value null in the following code.// Not in cache.  Find it and put in cache.// Get the desired "core" service context.// Convert the "core" service context to an// "IOP" ServiceContext by writing it to a// CDROutputStream and reading it back.// Good citizen: For increased efficiency, we assume that interceptors// will not modify the returned ServiceContext.  Otherwise, we would// have to make a deep copy./** Utility method to add an IOP.ServiceContext to a core.ServiceContexts ... */// Convert IOP.service_context to core.ServiceContext:// Constructor expects id to already have been read from stream.// Place IOP.ServiceContext in cache as well:/** Sets the number of interceptors whose starting interception ... *//** Returns the number of interceptors whose starting interception ... *//** Sets which ending interception point should be called ... *//** Retrieves the current ending point call type (see ... *//** Sets which intermediate interception point should be called ... *//** Retrieves the current intermediate point call type (see ... *//** Sets which starting interception point should be called ... *//** Retrieves the current starting point call type (see ... *//** Returns true if all interceptors' starting and ending points ... *//** Sets whether all interceotrs' starting and ending points ... *//** Sets the value to be returned by reply_status *//** Gets the current reply_status without doing an access check ... *//** Stores the given ForwardRequest object for later analysis. ... *//** Stores the given IOR for later forward request analysis. ... *//** Retrieves the ForwardRequest object as a ForwardRequest exception. */// Convert the internal IOR to a forward request exception// by creating an object reference./** Retrieves the IOR of the ForwardRequest exception. *//** Sets the exception to be returned by received_exception and ... *//** Returns the exception to be returned by received_exception and ... *//** Sets the execution point that we are currently executing ... *//** Check whether the caller is allowed to access this method at ... *//** The server side does an explicit set rather than taking the ... *//** Implementation of the ServerRequestInfo interface as specified in ... */// The available constants for intermediatePointCall.  The default (0)// is receive_request, but can be set to none on demand.// Set to true if the server ending point raised ForwardRequest at some// point in the ending point.// Sources of server request information:// Information cached from calls to oktemp// reset cached attributes:// Method IDs for all methods in ServerRequestInfo.  This allows for a// ServerRequestInfo validity table (see ptc/00-08-06 table 21-2).// r_rsc = receive_request_service_contexts// r_req = receive_request// s_rep = send_reply// s_exc = send_exception// s_oth = send_other//                              { r_rsc, r_req, s_rep, s_exc, s_oth }// ServerRequestInfo methods::/* sending_exception *//* object_id *//* adapter_id *//* target_most_derived_inte... *//* get_server_policy *//* set_slot *//* target_is_a *//* add_reply_service_context *//* orb_id *//* server_id *//* adapter_name *//** Creates a new ServerRequestInfo implementation. ... *//** Any containing the exception to be returned to the client. */// sending_exception should not be callable if both dsiException// and exception are null./** The opaque object_id describing the target of the operation invocation. */// For some reason, we never set object id.  This could be// because a servant locator caused a location forward or// raised an exception.  As per ptc/00-08-06, section 21.3.14,// we throw NO_RESOURCES/** @return ... */// interceptors will not change the resulting byte[] array.// Otherwise, we would need to make a clone of this array.// For some reason, we never set the ObjectKeyTemplate/** The opaque identifier for the object adapter. *//** The RepositoryID for the most derived interface of the servant. *//** Returns the policy in effect for this operation for the given policy ... *///checkAccess( MID_GET_SERVER_POLICY );// _REVISIT_ RTF Issue: get_server_policy spec not in sync with// get_effective_policy spec./** Allows an Interceptor to set a slot in the Current that is in the scope ... *///checkAccess( MID_SET_SLOT );/** Returns true if the servant is the given RepositoryId, false if it is ... *//** Allows Interceptors to add service contexts to the request. *///checkAccess( MID_ADD_REPLY_SERVICE_CONTEXT );// May be null.  If this is null, create a new one in its place.// This is during and ending point, so we now have enough// information to add the reply service context.// We enqueue all adds for the following reasons:// If we are not in the ending point then we do not yet have a// pointer to the ServiceContexts object so we cannot access the// service contexts until we get to the ending point.// So we enqueue this add reply service context request.// It is added when we do have a handle on the service contexts object.// If we are in the ending point and we just add directly to the// SC container but then an interceptor raises a SystemException// then that add will be lost since a new container is created// for the SystemException response.// Therefore we always enqueue and never dequeue (per request) so// that all adds will be completed.// REVISIT: this does not add to the cache./** See ServerRequestInfo for javadocs. *//* NOTE: The request id in server interceptors is NOT the ... */// If it is a DSI request then get the arguments from the DSI req// _REVISIT_ PI RTF Issue: No exception list on server side.// We do not support this because our ORB does not send contexts.// We do not support this because our ORB does not send// operation_context.// state as per ptc/00-08-06, table 21-2// A command encapsulating a request to add a reply service context.// These commands are enqueued until we have a handle on the actual// reply service context, at which point they are executed.// Adds the given add reply service context command to the queue of// such commands.  If a command is detected to have the same id as// the service context in this command, and replace is false,// BAD_INV_ORDER is thrown.  If replace is true, the original command// in the queue is replaced by this command./** Overridden from RequestInfoImpl.  This version calls the super ... */// If we are transitioning to ending point, we will now have a pointer// to the reply service contexts, so we can execute all queued// add reply service context requests.// _REVISIT_  The only way this can happen is if during// rrsc or rr, the interceptor tried to add with// replace=false to a service context that is present in// the reply message.  At that time there was no way for// us to check for this, so the best we can do is ignore// the original request.// We specifically do not empty the SC queue so that if// the interceptor raises an exception the queued service contexts// will be put in the exception response./** Stores the various sources of information used for this info object. */// Clear cached exception value:// Make sure DSIException is null because this is the more recent one./** Set reply message *//** Release the servant object so the user has control over its lifetime. ... *//** Sets the forwardRequestRaisedInEnding flag to true, indicating that ... *//** Returns true if ForwardRequest was raised by a server ending point ... *//** Returns true if this is a dynamic invocation, or false if not *//** SlotTable is used internally by PICurrent to store the slot information. */// The vector where all the slot data for the current thread is stored// Required for instantiating Any object.// The flag to check whether there are any updates in the current SlotTable.// The slots will be reset to null, only if this flag is set./** The constructor instantiates an Array of Any[] of size given by slotSize ... *//** This method sets the slot data at the given slot id (index). */// First check whether the slot is allocated// If not, raise the invalid slot exception/** This method get the slot data for the given slot id (index). *//** This method resets all the slot data to null if dirtyFlag is set. *//** This method returns the size of the allocated slots. *//** SlotTableStack is the container of SlotTable instances for each thread */// SlotTablePool is the container for reusable SlotTables'// Contains a list of reusable SlotTable// High water mark for the pool// If the pool size reaches this limit then putSlotTable will// not put SlotTable to the pool.// currentIndex points to the last SlotTable in the list/** Puts SlotTable to the re-usable pool. */// If there are enough SlotTables in the pool, then don't add// this table to the pool.// Let the garbage collector collect it./** Gets SlotTable from the re-usable pool. */// If there are no entries in the pool then return null// Works like a stack, Gets the last one added first// Contains all the active SlotTables for each thread.// The List is made to behave like a stack.// Keeps track of number of PICurrents in the stack.// For Every Thread there will be a pool of re-usable SlotTables'// stored in SlotTablePool// The ORB associated with this slot table stack/** Constructs the stack and and SlotTablePool */// SlotTableStack will be created with one SlotTable on the stack.// This table is used as the reference to query for number of// allocated slots to create other slottables./** pushSlotTable  pushes a fresh Slot Table on to the stack by doing the ... */// get an existing PICurrent to get the slotSize// NOTE: Very important not to always "add" - otherwise a memory leak.// Add will cause the table to grow.// Set will override unused slots./** popSlotTable does the following ... */// Do not pop the SlotTable, If there is only one.// This should not happen, But an extra check for safety.// Do not leak memory./** peekSlotTable gets the top SlotTable from the SlotTableStack without ... *//* Copyright (c) 1999, 2011, Oracle and/or its affiliates. All rights reserved. ... *//** This class acts as the remote interface to receivers wishing to retrieve ... */// Contains rep. ids as keys to FullValueDescriptions// Private ORBSingleton used when we need an ORB while not// having a delegate set.// backward compatability so that appropriate rep-id calculations// can take place// this needs to be transient to prevent serialization during// marshalling/unmarshalling// Operation to obtain the IR from the sending context// Operations to obtain a URL to the implementation code// default to using the current ORB version in case the// vhandler is not set// Util.getCodebase may return null which would// cause a BAD_PARAM exception.// the same information// information/* Copyright (c) 1998, 2015, Oracle and/or its affiliates. All rights reserved. ... *//** IIOPInputStream is used by the ValueHandlerImpl to handle Java serialization ... */// Necessary to pass the appropriate fields into the// defaultReadObjectDelegate method (which takes no// parameters since it's called from// java.io.ObjectInpuStream defaultReadObject()// which we can't change).// This is only used in the case where the fields had// to be obtained remotely because of a serializable// version difference.  Set in inputObjectUsingFVD.// Part of serialization evolution fixes for Ladybird,// bug 4365188.//d4365188// The ActiveRecursionManager replaces the old RecursionManager which// used to record how many recursions were made, and resolve them after// an object was completely deserialized.// That created problems (as in bug 4414154) because when custom// unmarshaling in readObject, there can be recursive references// to one of the objects currently being unmarshaled, and the// passive recursion system failed./* Remember the first exception that stopped this stream. *//* Vector of validation callback objects ... */// Serialization machinery fields/* Arrays used to keep track of classes and ObjectStreamClasses ... */// TCKind TypeCodes used in FVD inputClassFields//public static final TypeCode kRemoteTypeCode = new TypeCodeImpl(TCKind._tk_objref);//public static final TypeCode kValueTypeCode =  new TypeCodeImpl(TCKind._tk_value);// removed TypeCodeImpl dependency// TESTING CODE - useFVDOnly should be made final before FCS in order to// optimize out the check.// Since java.io.OptionalDataException's constructors are// package private, but we need to throw it in some special// cases, we try to do it by reflection.// Grab the OptionalDataException boolean ctor and make// it accessible.  Note that any exceptions// will be wrapped in ExceptionInInitializerErrors.// XXX I18N, logging needed.// Create a new OptionalDataException with the EOF marker// set to true.  See handleOptionalDataMarshalException.// Return the stream format version currently being used// to deserialize an object// At the beginning of data sent by a writeObject or// writeExternal method there is a byte telling the// reader the stream format version.// XXX I18N?  Logging for IOException?//  useFVDOnly = val;/** Dummy constructor; passes upper stream a dummy stream; *///added setSender and getSender// 4365188 this is added to enable backward compatability w/ wrong// rep-ids/** Override the actions of the final method "readObject()" ... */// The CDR stream had never seen the given offset before,// so check the recursion manager (it will throw an// IOException if it doesn't have a reference, either)./* throws OptionalDataException, ClassNotFoundException, IOException *//* Save the current state and get ready to read an object. */// Entering/* Check for reset, handle it before reading an object. */// d4365188: backward compatability// System.out.println("CLZ = " + clz + "; " + ioe.toString());/* Check for thrown exceptions and re-throw them, clearing them if ... *//** This method is called by trusted subclasses of ObjectOutputStream ... *//** Override the actions of the final method "defaultReadObject()" ... *//* throws IOException, ClassNotFoundException, NotActiveException */// The array will be null unless fields were retrieved// remotely because of a serializable version difference.// Bug fix for 4365188.  See the definition of// defaultReadObjectFVDMembers for more information.// WARNING:  Be very careful!  What if some of// these fields actually have to do this, too?// This works because the defaultReadObjectFVDMembers// reference is passed to inputClassFields, but// there is no guarantee that// defaultReadObjectFVDMembers will point to the// same array after calling inputClassFields.// Use the remote fields to unmarshal.// Use the local fields to unmarshal./** Override the actions of the final method "enableResolveObject()" ... *//* throws SecurityException */// The following three methods allow the implementing orbStream// to provide mark/reset behavior as defined in java.io.InputStream.// unreliable// no op// d11623 : implement readFully, required for serializing some core classes/** Helper method for correcting the Kestrel bug 4367783 (dealing ... */// If the ORB stream detects an incompatibility between what's// on the wire and what our Serializable's readObject wants,// it throws a MARSHAL exception with a specific minor code.// This is rethrown to the readObject as an OptionalDataException.// So far in RMI-IIOP, this process isn't specific enough to// tell the readObject how much data is available, so we always// set the OptionalDataException's EOF marker to true.// Java Object Serialization spec 3.4: "If the readObject method// of the class attempts to read more data than is present in the// optional part of the stream for this class, the stream will// return -1 for bytewise reads, throw an EOFException for// primitive data reads, or throw an OptionalDataException// with the eof field set to true for object reads."/* Get the descriptor and then class of the incoming object. *///currentClassDesc.setClass(currentClass);/* If Externalizable, ... */// Store this object and its beginning position// since there might be indirections to it while// it's been unmarshalled.// Read format version// end : if (currentClassDesc.isExternalizable())/* Count number of classes and descriptors we might have ... */// current top of stack/* The object's classes should be processed from supertype to subtype ... *//* This is your basic diff pattern, made simpler ... */// sun.4296963 ibm.11861// d11861 we should stop when we find the highest serializable class// We need this so that when we allocate the new object below, we// can call the constructor of the non-serializable superclass.// Note that in the JRMP variant of this code the// ObjectStreamClass.lookup() method handles this, but we've put// this fix here rather than change lookup because the new behaviour// is needed in other cases./* sun.4296963 ibm.11861 *//* Search the classes to see if the class of this ... */// found a superclass that matches this descriptor/* Ignore a class that doesn't match.  No ... */// end : for (cl = currclass; cl != null; cl = cl.getSuperclass())/* Test if there is room for this new entry. ... *//* Class not found corresponding to this descriptor. ... *//* Current class descriptor matches current class. ... */// end : for (currdesc = currentClassDesc, currclass = currentClass;/* Allocate a new object.  The object is only constructed ... *//* For all the pushed descriptors and classes. ... *//* Set current descriptor and corresponding class *//* Read the data from the stream described by the ... */// Changed since invokeObjectReader no longer does this.// Read defaultWriteObject indicator// Error case of no readObject and didn't call// defaultWriteObject handled in default state// _REVISIT_ : Can we ever get here?/* No local class for this descriptor, ... */// Make sure we exit at the same stack level as when we started.// We've completed deserializing this object.  Any// future indirections will be handled correctly at the// CDR level.  The ActiveRecursionManager only deals with// objects currently being deserialized.// This retrieves a vector of FVD's for the hierarchy of serializable classes stemming from// repositoryID.  It is assumed that the sender will not provide base_value id's for non-serializable// classes!/** This input method uses FullValueDescriptions retrieved from the sender's runtime to ... *//* Allocate a new object. */// Read and throw away one level of the fvdslist// This seems to mean that the sender had a superclass that// we don't have// WARNING: If stream format version is 1 and there's// optional data, we'll get some form of exception down// the line or data corruption.// If the sender used custom marshaling, then it should have put// the two bytes on the wire indicating stream format version// and whether or not the writeObject method called// defaultWriteObject/writeFields.// Always use readObject if it exists, and fall back to default// unmarshaling if it doesn't.// See the definition of defaultReadObjectFVDMembers// for more information.  This concerns making sure// we use the remote FVD's members in defaultReadObject.// Note that the !usedReadObject !calledDefaultWriteObject// case is handled by the beginUnmarshalCustomValue method// of the default state// The remaining hierarchy of the local class does not match the sender's FVD.// So, use remaining FVDs to read data off wire.  If any remaining FVDs indicate// custom marshaling, throw MARSHAL error.// end : while(fvdsList.hasMoreElements())// the line.// Use default marshaling/* Invoke the readObject method if present.  Assumes that in the case of custom ... *//* Reset the stream to be just like it was after the constructor. */// discard any pending callbacks/** Factored out of inputClassFields  This reads a primitive value and sets it ... *///reflective code: field.getField().setByte( o, byteValue ) ;//reflective code: field.getField().setBoolean( o, booleanValue ) ;//reflective code: field.getField().setChar( o, charValue ) ;//reflective code: field.getField().setShort( o, shortValue ) ;//reflective code: field.getField().setInt( o, intValue ) ;//reflective code: field.getField().setLong( o, longValue ) ;//reflective code: field.getField().setFloat( o, floatValue ) ;//reflective code: field.getField().setDouble( o, doubleValue ) ;/* This case should never happen. If the field types ... */// Make sure type = null// Decide what method call to make based on the type. If// it is a type for which we need to load a stub, convert// the type to the correct stub type.// NOTE : Since FullValueDescription does not allow us// to ask whether something is an interface we do not// have the ability to optimize this check.// RMI Object reference...// REVISIT.  If we don't have the local class,// we should probably verify that it's an RMI type,// query the remote FVD, and use is_abstract.// Our FVD seems to get NullPointerExceptions for any// non-RMI types.// This uses the local class in the same way as// inputObjectField(ObjectStreamField) does.  REVISIT// inputObjectField(ObjectStreamField)'s loadStubClass// logic.  Assumption is that the given type cannot// evolve to become a CORBA abstract interface or// a RMI abstract interface.// Now that we have used the FVD of the field to determine the proper course// of action, it is ok to use the type (Class) from this point forward since// the rep. id for this read will also follow on the wire./** Factored out of inputClassFields and reused in ... */// fields have an API to provide the actual class// corresponding to the data type// Class type = osc.forClass();// This may change if stub loaded.// Decide what method call to make based on the fieldType. If// IDL Object reference...// IDL Abstract Object reference...// RMI Abstract Object reference...// Must have this local variable since defaultReadObjectFVDMembers// may get mangled by recursion.// Backwards compatibility.  Older Sun ORBs sent// _tk_char even though they read and wrote wchars// correctly.// Fall through to the _tk_wchar case./** Called from InputStreamHook. ... */// Handle the primitives first/* Read and set object fields from the input stream. *//* Read the fields of the specified class from the input stream and set ... */// check input field type is a declared field type// input field is a subclass of the declared field// reflective code: fields[i].getField().set( o, objectValue ) ;// end : for loop// REVISIT.  Convert to a log message.// This is a normal case when fields have// been added as part of evolution, but// silently skipping can make it hard to// debug if there's an error//                                 System.out.println("**** warning, not setting field: "//                                                    + fields[i].name//                                                    + " since not on class "//                                                    + osc.getName());/* Read the fields of the specified class from the input stream throw data away. ... */// Read value// Decide what method call to make based on the type.// Since we are throwing this away, don't bother handling recursion./** This class maintains a map of stream position to ... */// A hash map is unsynchronized and allows// null values// Called right after allocating a new object.// Offset is the starting position in the stream// of the object.// If the given starting position doesn't refer// to the beginning of an object currently being// deserialized, this throws an IOException.// Otherwise, it returns a reference to the// Called when an object has been completely// deserialized, so it should no longer be in// this mapping.  The CDR level can handle// further indirections.// If the given offset doesn't map to an Object,// then it isn't an indirection to an object// currently being deserialized./* Copyright (c) 1998, 2013, Oracle and/or its affiliates. All rights reserved. ... *//** IIOPOutputStream is ... ... */// Used when calling an object's writeObject method// If using RMI-IIOP stream format version 2, this tells// the ORB stream (which must be a ValueOutputStream) to// begin a new valuetype to contain the optional data// of the writeObject method./** Override the actions of the final method "writeObject()" ... *//* throws IOException */// if (!checkSpecialClasses(obj) && !checkSubstitutableSpecialClasses(obj))/* Restore state of previous call incase this is a nested call *//* If the recursion depth is 0, test for and clear the pending exception. ... */// Required by the superclass./** Override the actions of the final method "defaultWriteObject()" ... */// XXX I18N, Logging needed./** Override the actions of the final method "enableReplaceObject()" ... *//** Reset will disregard the state of any objects already written ... *///orbStream.reset();// INTERNAL UTILITY METHODS/* Check for special cases of serializing objects. ... *//* If this is a class, don't allow substitution *///if (obj instanceof Class) {//    throw new IOException("Serialization of Class not supported");/* Check for special cases of substitutable serializing objects. ... *///if (obj.getClass().isArray()) {//    outputArray(obj);//    return true;/* Write out the object *//* Get the Class descriptor for this class, ... *//* If the object is externalizable, ... */// Write format version/* For currentClassDesc and all the pushed class descriptors ... *//* Invoke writer. ... */// writeObject(obj, c, this);// cannot happen// What to do if it's null?/* Write the fields of the specified class by invoking the appropriate ... *//* Copyright (c) 1999, 2013, Oracle and/or its affiliates. All rights reserved. ... */// These should be visible in all the nested classes/** Get the ObjectStreamClass that describes the fields in the stream. ... *//** Return true if the named field is defaulted and has no value ... *//** Get the value of the named boolean field from the persistent field. *//** Get the value of the named char field from the persistent fields. *//** Get the value of the named byte field from the persistent fields. *//** Get the value of the named short field from the persistent fields. *//** Get the value of the named int field from the persistent fields. *//** Get the value of the named long field from the persistent fields. *//** Get the value of the named float field from the persistent fields. *//** Get the value of the named double field from the persistent field. *//** Get the value of the named Object field from the persistent field. */// See java.io.ObjectInputStream.GetField// Remember that this is equivalent to defaultReadObject// in RMI-IIOP// We were treating readFields same as defaultReadObject. It is// incorrect if the state is readOptionalData. If this line// is uncommented, it will throw a stream corrupted exception.// _REVISIT_: The ideal fix would be to add a new state. In// writeObject user may do one of the following// 1. Call defaultWriteObject()// 2. Put out optional fields// 3. Call writeFields// We have the state defined for (1) and (2) but not for (3), so// we should ideally introduce a new state for 3 and have the// beginDefaultReadObject do nothing.//readObjectState.beginDefaultReadObject(this);// The following is a State pattern implementation of what// should be done when the sender's Serializable has a// writeObject method.  This was especially necessary for// RMI-IIOP stream format version 2.  Please see the// state diagrams in the docs directory of the workspace.// On the reader's side, the main factors are whether or not// we have a readObject method and whether or not the// sender wrote default data// Description of possible actions// This will happen for Big Integer which uses// writeFields in it's writeObject. We should be past// start_value by now.// NOTE: If we don't log any exception here we should// be fine. If there is an error, it will be caught// while reading the optional data.// XXX I18N and logging needed.// REVISIT.  If a readObject exits here without reading// default data, we won't skip it.  This could be done automatically// as in line 1492 in IIOPInputStream.// This should never happen.// In stream format version 2, we can skip over// the optional data this way.  In stream format version 1,// we will probably wind up with an error if we're// unmarshaling a superclass.// Read the fake valuetype header in stream format version 2// Fix Date interop bug. For older versions of the ORB don't do// anything for readData(). Before this used to throw// StreamCorruptedException for older versions of the ORB where// calledDefaultWriteObject always returns true.// Code should read default fields before calling this/* Copyright (c) 1998, 2014, Oracle and/or its affiliates. All rights reserved. ... *//** A ObjectStreamClass describes a class that can be serialized to a stream ... *//** true if represents enum type *//** Find the descriptor for a class that can be serialized.  Null ... *//* Find the class descriptor for the specified class. ... *//* Synchronize on the hashtable so no two threads will do ... *//* Find the matching descriptor if it already known *//* Check if it's serializable *//* If the class is only Serializable, ... *//* Check if its' externalizable. ... *//* Create a new version descriptor, ... */// Must always call init.  See bug 4488137.  This code was// incorrectly changed to return immediately on a non-null// cache result.  That allowed threads to gain access to// unintialized instances.// History: Note, the following init() call was originally within// the synchronization block, as it currently is now. Later, the// init() call was moved outside the synchronization block, and// the init() method used a private member variable lock, to// avoid performance problems. See bug 4165204. But that lead to// a deadlock situation, see bug 5104239. Hence, the init() method// has now been moved back into the synchronization block. The// right approach to solving these problems would be to rewrite// this class, based on the latest java.io.ObjectStreamClass./** The name of the class described by this descriptor. *//** Return the serialVersionUID for this class. ... *//** Return the serialVersionUID string for this class. ... *//** Return the actual (computed) serialVersionUID for this class. *//** Return the class in the local VM that this version is mapped to. ... *//** Return an array of the fields of this serializable class. ... */// Return a copy so the caller can't change the fields.// Ignore this; all we want to do is return false// Note that ValueUtility.getSignature can throw checked exceptions./* Avoid unnecessary allocations. *//** Get the field of this class by name. ... *//* Binary search of fields by name. *//** Return a string describing this ObjectStreamClass. *//* Create a new ObjectStreamClass from a loaded class. ... *//* created from this class */// proxy classes are never externalizable/* Enter this class in the table of known descriptors. ... *//* The remainder of initialization occurs in init(), which is called ... *//** Creates a PermissionDomain that grants no permission. *//** Aggregate the ProtectionDomains of all the classes that separate ... */// that's not supposed to happen// make a ProtectionDomain with no permission.// should we throw instead?/* Initialize class descriptor.  This method is only invoked on class ... */// See description at definition of initialized./* Ask for permission to override field access checks. *//* Fill in the list of persistent fields. ... *//* Get all of the declared fields for this ... */// For each declared persistent field, look for an actual// reflected Field. If there is one, make sure it's the correct// type and cache it in the ObjectStreamClass for that field.// Nothing to do/* Set up field data for use while writing using the API api. *//* Get the serialVersionUID from the class. ... */// Lookup special Serializable members using reflection.// proxy classes always have serialVersionUID of 0L// SerialBug 5:  static final SUID should be read// SerialBug 2: should be computed after writeObject// actualSuid = computeStructuralUID(cl);/* Look for the writeObject method ... */// This call depends on a lot of information computed above!// If we have a write object method, precompute the// RMI-IIOP stream format version 2 optional data// repository ID.// This must be done last./** Returns non-static private method with given signature defined by given ... */// Specific to RMI-IIOP/** Java to IDL ptc-02-01-12 1.5.1 ... *//** This will return null if there is no writeObject method. *//* Create an empty ObjectStreamClass for a class about to be read. ... *//* Set the class this version descriptor matches. ... */// XXX I18N, logging needed/* Check for exceptional cases that allow mismatched suid. *//* Allow adding Serializable or Externalizable ... *//* Disregard the serialVersionUID of an array ... *//* compare the class names, stripping off package names. *//* Test that both implement either serializable or externalizable. */// The next check is more generic, since it covers the// Proxy case, the JDK 1.3 serialization code has// both checks//if ((serializable && localClassDesc.externalizable) ||//    (externalizable && localClassDesc.serializable))//    throw new InvalidClassException(localCl.getName(),//            "Serializable is incompatible with Externalizable");/* Set up the reflected Fields in the class where the value of each ... *//* Find this field in the dest *//* found match *//* Skip over any fields in the dest that are not in the src */// go on to the next source field/* Set up field data for use while reading from the input stream. *//* Remember the class this represents *//* get the cache of these methods from the local class ... *//* Compare the base class names of streamName and localName. ... *//* Compare the types of two class descriptors. ... *//* Return the superclass descriptor of this descriptor. *//** Return whether the class has a readObject method *//* Return whether the class has a writeObject method *//** Returns when or not this class should be custom ... *//* Return true if all instances of 'this' Externalizable class ... *//** Creates a new instance of the represented class.  If the class is ... */// Can't use PrivilegedExceptionAction with jsa// not supposed to happen// should not occur, as access checks have been suppressed/** Returns public no-arg constructor of given class, or null if none found. ... *//** Returns subclass-accessible no-arg constructor of first non-serializable ... *//* Return the ObjectStreamClass of the local class this one is based on. *//* Get the Serializability of the class. *//* Get the externalizability of the class. *//* Calculate the size of the array needed to store primitive data and the ... *//* JDK 1.5 has introduced some new modifier bits (such as SYNTHETIC) ... *//* Compute a hash for the specified class.  Incrementally add ... *//* Workaround for javac bug that only set ABSTRACT for ... */// Mask out any post-1.4 attributes/* Get the list of interfaces supported, ... *//* In 1.2fcs, getInterfaces() was modified to return ... *//* Sort the field names to get a deterministic order *//* Include in the hash all fields except those that are ... */// Mask out any post-1.4 bits// TBD: what modifiers does it have/* Get the list of constructors including name and signature ... */// mask out post-1.4 modifiers/* Include in the hash all methods except those that are ... *//* Compute the hash value for this class. ... *//* can't happen, but be deterministic anyway. */// Get SUID of parent// SerialBug 1; acc. to spec the one for// java.lang.object// should be computed and put//     && (parent != java.lang.Object.class))//data.writeLong(computeSerialVersionUID(null,parent));// CORBA formal 00-11-03 10.6.2:  For each field of the// class that is mapped to IDL, sorted lexicographically// by Java field name, in increasing order...// ...Java field name in UTF encoding, field// descriptor, as defined by the JVM spec...// int minimum = Math.min(8, hasharray.length);// SerialBug 3: SHA computation is wrong; for loop reversed//for (int i = minimum; i > 0; i--)/** Compute the JVM signature for the class. *//* Compute the JVM method descriptor for the method. */// avoid clone/* Compute the JVM constructor descriptor for the constructor. *//* Cache of Class -> ClassDescriptor Mappings. *//* findDescriptorFor a Class.  This looks in the cache for a ... *//* Free any initial entries whose refs have been cleared *//* Traverse the chain looking for a descriptor with ofClass == cl. ... */// This entry has been cleared,  unlink it/* insertDescriptorFor a Class -> ObjectStreamClass mapping. */// Make sure not already present/* The name of this descriptor *//* The descriptor of the supertype. *//* Flags for Serializable and Externalizable. *//* Array of persistent fields of this class, sorted by ... *//* Class that is a descriptor for in this virtual machine. *//* True if descriptor for a proxy class. *//* SerialVersionUID for this class. *//* Actual (computed) SerialVersionUID for this class. *//* The total number of bytes of primitive fields. ... *//** Flag indicating whether or not this instance has ... *//* Internal lock object. *//* In JDK 1.1, external data was not written in block mode. ... *//** Beginning in Java to IDL ptc/02-01-12, RMI-IIOP has a ... *//* ObjectStreamClass that this one was built from. *//* Find out if the class has a static class initializer <clinit> *//** Returns true if the given class defines a static initializer method, ... *//** use serialVersionUID from JDK 1.1. for interoperability *//** Set serialPersistentFields of a Serializable class to this value to ... *//* Entries held in the Cache of known ObjectStreamClass objects. ... */// extends java.lang.ref.SoftReference//super(c);/* Comparator object for Classes and Interfaces *//** Comparator for ObjectStreamFields by name *//* Comparator object for Members, Fields, and Methods *//* It is expensive to recompute a method or constructor signature ... */// cached parameter signature/* Given an array of Method or Constructor members, ... *//* A better implementation would be to implement the returned data ... *//* Assumes that o1 and o2 are either both methods ... *//* Arrays.sort calls compare when o1 and o2 are equal. */// is a Method./** Returns non-static, non-abstract method with given signature provided it ... *//** Returns true if classes are defined in the same package, false ... */// This file contains some utility methods that// originally were in the OSC in the RMI-IIOP// code delivered by IBM.  They don't make// sense there, and hence have been put// here so that they can be factored out in// an attempt to eliminate redundant code from// ObjectStreamClass.  Eventually the goal is// to move to java.io.ObjectStreamClass, and// java.io.ObjectStreamField.// class is package private for security reasons/** Return true, iff, ... */// #1// #2/* Returns TRUE if type is 'any'. *//** A description of a field in a serializable class. ... *//** Create a named field with the specified type. */// Compute the typecode for easy switching/** Create an ObjectStreamField containing a reflected Field. *//** Get the name of this field. *//** Get the type of the field. *//* Default constructor creates an empty field. ... *//** test if this field is a primitive or not. *//** Compare this with another ObjectStreamField. ... *//** Compare the types of two class descriptors. ... *//* Return true if the primitive types matched *//* Returns the signature of the Field. *//** Return a string describing this field. *//* Returns the Field ID */// the name of the field// type first byte of the type signature// Reflected field// iff object, typename// the type of this field, if has been resolved// the next 2 things are RMI-IIOP specific, it can be easily// removed, if we can figure out all place where there are dependencies// to this.  Signature is esentially equal to typestring. Then// essentially we can use the java.io.ObjectStreamField as such.// the signature of the field/* Copyright (c) 1998, 2002, Oracle and/or its affiliates. All rights reserved. ... *//** Unexpected data appeared in an ObjectInputStream trying to read ... *//* Create an <code>OptionalDataException</code> with a length. *//* Create an <code>OptionalDataException</code> signifing no ... *//** The number of bytes of primitive data available to be read ... *//** True if there is no more data in the buffered part of the stream. *//* Copyright (c) 1999, 2015, Oracle and/or its affiliates. All rights reserved. ... *//** Since ObjectOutputStream.PutField methods specify no exceptions, ... *//** Put the value of the named boolean field into the persistent field. *//** Put the value of the named char field into the persistent fields. *//** Put the value of the named byte field into the persistent fields. *//** Put the value of the named short field into the persistent fields. *//** Put the value of the named int field into the persistent fields. *//** Put the value of the named long field into the persistent fields. *//** Put the value of the named float field into the persistent fields. *//** Put the value of the named double field into the persistent field. *//** Put the value of the named Object field into the persistent field. *//** Write the data and fields to the specified ObjectOutput stream. */// Write the fields to the stream in the order// provided by the ObjectStreamClass.  (They should// be sorted appropriately already.)// Stream format version, saved/restored during recursive calls// to serialize an object// User uses PutFields to simulate default data.// See java.io.ObjectOutputStream.PutFields// should be done when a Serializable has a// We didn't write any data, so write the// called defaultWriteObject indicator as false// If we're in stream format verison 2, we must// put the "null" marker to say that there isn't// any optional data// The writeObject method called defaultWriteObject// or writeFields, so put the called defaultWriteObject// indicator as true// The writeObject method first called a direct// write operation.  Write the called defaultWriteObject// indicator as false, put the special stream format// version 2 header (if stream format version 2, of course),// and write the data// We only wrote default data, so if in stream format// version 2, put the null indicator to say that there// is no optional data// The writeObject method called a direct write operation.// If in stream format version 2, put the fake valuetype// header.// In stream format version 2, we must tell the ORB// stream to close the fake custom valuetype.// We don't have to do anything special here, just let// the stream write the data./* Copyright (c) 1998, 2012, Oracle and/or its affiliates. All rights reserved. ... */// Property to override our maximum stream format version// The ValueHandler's maximum stream format version to advertise,// set in a static initializer.// Looks for the FORMAT_VERSION_PROPERTY system property// to allow the user to override our default stream format// version.  Note that this still only allows them to pick// a supported version (1 through MAX_STREAM_FORMAT_VERSION).// The property wasn't set// REVISIT.  Just set to MAX_SUPPORTED_FORMAT_VERSION// or really let the system shutdown with this Error?// REVISIT.  Swallow this or really let// the system shutdown with this Error?// See javax.rmi.CORBA.ValueHandlerMultiFormat/** Writes the value to the stream using java semantics. ... *//** Reads a value from the stream using java semantics. ... */// Must use narrow rather than a direct cast to a com.sun// class.  Fix for bug 4379539.// backward compatability 4365188// Indirections are resolved immediately since// the change to the active recursion manager,// so this will never happen.// clazz == null indicates an FVD situation for a nonexistant class/** Returns the repository ID for the given RMI value Class. ... *//** Indicates whether the given Class performs custom or ... *//** Returns the CodeBase for this ValueHandler.  This is used by ... */// set the valueHandler so that correct/incorrect RepositoryID// calculations can be done based on the ORB version// methods supported for backward compatability so that the appropriate// Rep-id calculations take place based on the ORB version/** Returns a boolean of whether or not RepositoryId indicates ... *//** If the value contains a writeReplace method then the result ... */// Read length of coming array// The CDR stream had never seen the given offset// before, so check the recursion manager (it will// throw an IOException if it doesn't have a// reference, either).// Translate to a MARSHAL exception since// ValueHandlers aren't allowed to throw// IOExceptions// Decide what method call to make based on the componentType.// If it is a componentType for which we need to load a stub,// convert the componentType to the correct stub type.// String className = componentType.getName();// for better performance, load the stub class once// instead of for each element of the array// componentType = null;// Throw exception under the carpet./** Construct a built in implementation with priveleges. ... *//** Returning null indicates a non-built is specified. *//** Create a custom implementation without privileges. */// Note: We use the thread context or system ClassLoader here// since we want to load classes outside of the// core JDK when running J2EE Pure ORB and// talking to Kestrel.// Since the ClassLoader should cache the class, this isn't// as expensive as it looks./** Holds utility methods for converting from ObjectStreamClass to ... */// tk_null         0// tk_void         1// tk_short        2// tk_long         3// tk_ushort       4// tk_ulong        5// tk_float        6// tk_double       7// tk_boolean      8// tk_char         9// tk_octet        10// tk_any          11// tk_typecode     12// tk_principal    13// tk_objref       14// tk_struct       15// tk_union        16// tk_enum         17// tk_string       18// tk_sequence     19// tk_array        20// tk_alias        21// tk_except       22// tk_longlong     23// tk_ulonglong    24// tk_longdouble   25// tk_wchar        26// tk_wstring      27// tk_fixed        28// tk_value        29// tk_value_box    30// tk_native       31// tk_abstract_interface 32// REVISIT.  Can the type be something that is// non-primitive yet not a value_box, value, or objref?// If so, should use ObjectStreamClass or throw// exception.// Create FullValueDescription// Set FVD name// Set FVD id _REVISIT_ : Manglings// Set FVD is_abstract// Set FVD is_custom// Set FVD defined_in _REVISIT_ : Manglings// Set FVD version// Skip FVD operations - N/A// Skip FVD attributed - N/A// Set FVD members// Maps classes to repositoryIDs strings. This is used to detect recursive types.// Stores all types created for resolving indirect types at the end.// Skip FVD initializers - N/A// Skip FVD supported_interfaces// Skip FVD abstract_base_values - N/A// Set FVD base_value// Set FVD type//result.type = createTypeCodeForClass(orb, osc.forClass());//11638// Note : fields come out of ObjectStreamClass in correct order for// writing.  So, we will create the same order in the members array.// _REVISIT_ : Manglings// _REVISIT_ : IDLType implementation missing// When using serialPersistentFields, the class may// no longer have an actual Field that corresponds// to one of the items.  The Java to IDL spec// ptc-00-01-06 1.3.5.6 says that the IDL field// should be private in this case.// 11638// case '['://      members[i].type = orb.get_primitive_tc(TCKind.tk_value_box); //11638//      members[i].id = RepositoryId.createForAnyType(fields[i].getType());//      break;// end switch// end for loop// This wrapper method is the protection against infinite recursion.// cache the rep id BEFORE creating a new typecode.// so that recursive tc can look up the rep id.// Maintains a stack of key-value pairs. Compares elements using == operator.// type modifier// REVISIT truncatable and abstract?// concrete base// members/* Copyright (c) 2001, 2002, Oracle and/or its affiliates. All rights reserved. ... *//** The array buffer into which the components of the ByteBuffer are ... *//** The number of valid components in this <tt>ByteBuffer</tt> object. ... *//** The amount by which the capacity of the ByteBuffer is automatically ... *//** Constructs an empty ByteBuffer with the specified initial capacity and ... *//** Constructs an empty ByteBuffer so that its internal data array ... *//** Trims the capacity of this ByteBuffer to be the ByteBuffer's current ... *//** This implements the unsynchronized semantics of ensureCapacity. ... *//** Returns the current capacity of this ByteBuffer. ... *//** Returns the number of components in this ByteBuffer. ... *//** Tests if this ByteBuffer has no components. ... *//** Returns an array containing all of the elements in this ByteBuffer ... *//** This static utility class contains various utility methods for reading and ... *//** Read the count from is, then read count Identifiables from ... *//** Write all Identifiables that we contain to os.  The total ... *//** Helper method that is used to extract data from an output ... *//** Helper method to read the octet array from is, deencapsulate it, ... *//** Helper method that reads an octet array from an input stream. ... *//** Simple class that delegates all List operations to ... */// Methods overridden from AbstractList// We also override subList so that the result is a FreezableList.// NO-OP// XXX remove this once getProfile is gone/** An IOR is represented as a list of profiles. ... *//* This variable is set directly from the constructors that take ... *//** Construct an empty IOR.  This is needed for null object references. *//** Construct an IOR from an IORTemplate by applying the same ... */// The check for typeId length of 0 below is commented out// as a workaround for a bug in ORBs which send a// null objref with a non-empty typeId string./* && (typeId.length() == 0) */// Maps ObjectKeyTemplate to IORTemplate// used to check that all profiles have the same oid.// Check that all oids for all profiles are the same: if they are not,// throw exception.// Find or create the IORTemplate for oktemp./** Return the IORTemplateList for this IOR.  Will throw ... *//** Return the first IIOPProfile in this IOR. ... */// if we come to this point then no IIOP Profile// is present.  Therefore, throw an exception./** This class is a container of TaggedProfileTemplates. ... *//** Ensure that this IORTemplate and all of its profiles can not be ... *//* This class must override add( int, Object ) and set( int, Object ) ... *//* Copyright (c) 2017, Oracle and/or its affiliates. All rights reserved. ... *//* A note on the validation flow: ... *//* check if the class name corresponding to an IOR Type name ... *//* Check the IOR interface class name against the set of ... *//** This constructor reads the template ONLY from the stream. *//** This constructor reads a complete ObjectKey (template and Id) ... */// subclass must set the version, since we don't have the object key here./** Special constructor used for OA IDs of length 2. *//** ObjectAdapterIdNumber is used to represent pre-JDK 1.4 POA adapter ... *//** Based on the magic and scid, return the appropriate ... *//** Singleton used to manufacture ObjectKey and ObjectKeyTemplate ... */// Magic used in our object keys for JDK 1.2, 1.3, RMI-IIOP OP,// J2EE 1.0-1.2.1.// Magic used only in JDK 1.3.1.  No format changes in object keys.// New magic used in our object keys for JDK 1.4, J2EE 1.3 and later.// Format changes: all object keys have version string; POA key format// is changed.// Beginning in JDK 1.3.1_01, we introduced changes which required// the ability to distinguish between JDK 1.3.1 FCS and the patch// versions.  See OldJIDLObjectKeyTemplate.// XXX The handlers still need to be made pluggable.// I think this can be done as follows:// 1. Move the Handler interface into the SPI as ObjectKeyHandler.// 2. Add two methods to ObjectAdapterFactory://      ObjectKeyHandler getHandlerForObjectKey( ) ;//      ObjectKeyHandler getHandlerForObjectKeyTemplate( ) ;// 3. Move the implementation of the fullKey handler and the//    oktempOnly handler into TOAFactory and POAFactory.// 4. Move the ObjectKey impl classes into the impl/oa packages.// 5. Create an internal interface//      interface HandlerFinder {//          ObjectKeyHandler get( int scid ) ;//      }//    and modify create(InputStream,Handler,OctetSeqHolder)//    to take a HandlerFinder instead of a Handler.// 6. Modify create( byte[] ) and createTemplate( InputStream )//    to create an instance of HandlerFinder: something like://      new HandlerFinder() {//          ObjectKeyHandler get( int scid )//          {//              return orb.getRequestDispatcherRegistry().//                  getObjectAdapterFactory( scid ).getHandlerForObjectKey() ;//          }//      and similarly for getHandlerForObjectKeyTemplate./** This handler reads the full object key, both the oktemp ... *//** This handler reads only the oktemp. *//** Returns true iff magic is in the range of valid magic numbers ... *//** Creates an ObjectKeyTemplate from the InputStream.  Most of the ... */// XXX log this error// ignore this: error handled below because oktemp == null// If we did not successfully construct a oktemp, reset the// stream so that WireObjectKeyTemplate can correctly construct the// object key.// ignore this// Fixed constants for Java IDL object key template forms// write out serverid, orbid, oaid// All subclasses should set the version in their constructors.// Public so it can be used in a white-box test./** This is an implementation of the ObjectReferenceFactory abstract value ... */// Note that this repository ID must reflect the implementation// of the abstract valuetype (that is, this class), not the// repository ID of the org.omg.PortableInterceptor.ObjectReferenceFactory// class.  This allows for multiple independent implementations// of the abstract valuetype, should that become necessary./** Read the data into a (presumably) empty ObjectReferenceFactoryImpl. ... *//** Write the state to the OutputStream. *//** This is an implementation of the ObjectReferenceTemplate abstract value ... */// repository ID of the org.omg.PortableInterceptor.ObjectReferenceTemplate/** Read the data into a (presumably) empty ORTImpl.  This sets the ... *//** Handles object keys created by JDK ORBs from before JDK 1.4.0. *//** JDK 1.3.1 FCS did not include a version byte at the end of ... *//** Beginning with JDK 1.3.1_01, a byte was placed at the end of ... */// set version based on magic// any other magic should not be here/** This constructor reads the template ONLY from the stream *//* Copyright (c) 2003, 2018, Oracle and/or its affiliates. All rights reserved. ... */// Be very careful: com.sun.corba imports must not depend on// PEORB internal classes in ways that prevent portability to// other vendor's ORBs./** This class implements a very simply IOR representation ... */// cached hash code// IOR components// write the IOR to an OutputStream and get an InputStream// read the IOR components back from the stream// write the IOR components to an org.omg.CORBA.portable.OutputStream// read the IOR back from the stream// read the IOR from the ObjectInputStream// write the IOR to the ObjectOutputStream/** Returns a hash code value for the object which is the same for all stubs ... */// compute the hash code/** Returns a string representation of this stub. Returns the same string ... */// Skip the component ID: we just wrote it out above// All WireObjectKeyTemplates are the same, so they should// have the same hashCode.// Does nothing/** While it might make sense to throw an exception here, this causes ... *//** Adapter ID is not available, since our ... */// 3 in CORBA 2.3.1 13.6.3// Uses our default code sets (see CodeSetComponentInfo)// 1 in CORBA 2.3.1 13.6.3// Ports are marshalled as shorts on the wire.  The IDL// type is unsigned short, which lacks a convenient representation// in Java in the 32768-65536 range.  So, we treat ports as// ints throught this code, except that marshalling requires a// scaling conversion.  intToShort and shortToInt are provided// for this purpose.// Cached lookups// First, read all of the IIOP IOR data// Handle any tagged components (if applicable)// If there is no codebase in this IOR and there IS a// java.rmi.server.codebase property set, we need to// update the IOR with the local codebase.  Note that// there is only one instance of the local codebase, but it// can be safely shared in multiple IORs since it is immutable.// Whether codebase is null or not, we have it,// and so getCodebase ned never call uncachedGetCodebase./** Return the servant for this IOR, if it is local AND if the OA that ... */// Could not find the OA, so just return null.// This usually happens when POAs are being deleted,// and the POA always return null for getLocalServant anyway./** Return GIOPVersion for this IOR. ... */// Adding tagged components is not allowed for IIOP 1.0,// so this template is complete and should be made immutable.// Note that this is NOT an encapsulation: do not marshal// the endianness flag.  However, the length is required.// Note that this cannot be accomplished with a codec!// Use the byte order of the given stream/** Write out this IIOPProfileTemplateImpl only. */// 25 in CORBA 2.3.1 13.6.3/** Tagged component that contains a value that indicates the Java ... *//* Copyright (c) 2002, 2004, Oracle and/or its affiliates. All rights reserved. ... */// Java to IDL ptc 02-01-12 1.4.11// TAG_RMI_CUSTOM_MAX_STREAM_FORMAT// 0 in CORBA 2.3.1 13.6.3/** Base class from which all static RMI-IIOP stubs must inherit. *//** Sets the IOR components if not already set. */// If the Stub is not connected to an ORB, BAD_OPERATION exception// will be raised by the code below./** Compares two stubs for equality. Returns <code>true</code> when used to compare stubs ... */// no need to call init() because of calls to hashCode() below// hashCodes being the same does not mean equality. The stubs still// could be pointing to different IORs. So, do a literal comparison.// Apparently the ONLY way to do this (other than using private// reflection)  toString, because it is not possible to directly// access the StubDelegateImpl from the Stub./** Connects this stub to an ORB. Required after the stub is deserialized ... *//** Serialization method to restore the IOR state. *//** Serialization method to save the IOR state. ... */// Util (sed marker, don't remove!)// This class must be able to function with non-Sun ORBs.// This means that any of the following com.sun.corba classes// must only occur in contexts that also handle the non-Sun case./** Provides utility methods that can be used by stubs and ties to ... */// Runs as long as there are exportedServants// Maps targets to ties.// Used by TOAFactory.shutdown to unexport all targets for this// particular ORB.  This happens during ORB shutdown.// Bug 4476347: BAD_OPERATION is thrown if the ties delegate isn't set.// We can ignore this because it means the tie is not connected to an ORB.// We neglect this exception if at all if it is// raised. It is not harmful./* Ignore *//** Maps a SystemException to a RemoteException. ... */// Build the message string...// Now map to the correct RemoteException type...// Pre-Merlin Sun ORBs used the incorrect minor code for// this case.  See Java to IDL ptc-00-01-08 1.4.8.// Just map to a generic RemoteException.../** Writes any java.lang.Object as a CORBA any. ... */// Create Any// Make sure we have a connected object...// Handle the null case, including backwards// compatibility issues// If they're our Any and ORB implementations,// we may want to do type code related versioning./** When using our own ORB and Any implementations, we need to get ... *//** This is used to create the TypeCode for a null reference. ... */// Preserve backwards compatibility with Kestrel and Ladybird// by not fully implementing interop issue resolution 3857,// and returning a null TypeCode with a tk_value TCKind.// If we're not talking to Kestrel or Ladybird, fall through// to the abstract interface case (also used for foreign ORBs).// Use tk_abstract_interface as detailed in the resolution// REVISIT: Define this in IDL and get the ID in generated code/** Reads a java.lang.Object as a CORBA any. ... *//** Writes a java.lang.Object as a CORBA Object. If <code>obj</code> is ... */// Make sure we have a connected object, then// write it out.../** Writes a java.lang.Object as either a value or a CORBA Object. ... *//** @return *//** Registers a target for a tie. Adds the tie to an internal table and calls ... */// Do we already have this target registered?// No, so register it and set the target...// Do we need to instantiate our keep-alive thread?// Yes. Instantiate our keep-alive thread and start// it up.../** Removes the associated tie from an internal table and calls {@link Tie#deactivate} ... */// ignore// This can happen when the target was never associated with a POA.// We can safely ignore this case.// Is it time to shut down our keep alive thread?/** Returns the tie (if any) for a given target object. ... *//** An unsynchronized version of getTie() for internal use. *//** Returns a singleton instance of a class that implements the ... *//** Returns the codebase, if any, for the given class. ... *//** Returns a class instance for the specified class. ... *//** The <tt>isLocal</tt> method has the same semantics as the ... */// For the Sun ORB// For a non-Sun ORB/** Wraps an exception thrown by an implementation ... *//** Copies or connects an array of objects. Used by local stubs ... */// Bug fix for 5018613: JCK test expects copyObjects to throw// NPE when obj==null.  This is actually not in the spec, since// obj is not really an RMI-IDL data type, but we follow our// test here, and force this error to be thrown.// obj is an array of remote impl types.  This// causes problems with stream copier, so we copy// it over to an array of Remotes instead./** Copies or connects an object. Used by local stubs to copy ... */// This gets the copier for the current invocation, which was// previously set by preinvoke.// copyObject was invoked outside of an invocation, probably by// a test.  Get the default copier from the ORB.// XXX should we just make the default copier available directly// and avoid constructing one on each call?/** Server implementation objects may either inherit from ... *//** Makes a server object ready to receive remote calls. Note ... */// Has this object already been exported to IIOP?// Yes, so this is an error...// Can we load a Tie?// Yes, so export it to IIOP...// No, so export to JRMP. If this is called twice for the// same object, it will throw an ExportException.../** Returns a stub for the given server object. ... */// If the class is already an IIOP stub then return it.// If the class is already a JRMP stub then return it.// Has it been exported to IIOP?/** Deregisters a server object from the runtime, allowing the object to become ... *//** Checks to ensure that an object of a remote or abstract interface type ... */// Is narrowTo an interface that might be// implemented by a servant running on iiop?// Create an id from the narrowTo type.../** Makes a Remote object ready for remote communication. This normally ... */// Is this a servant that was exported to iiop?/* loadTie always succeeds for dynamic RMI-IIOP ... */// Yes. Do we have an ORB from the source object?// If not, we're done - there is nothing to do to// connect a JRMP object. If so, it is an error because// the caller mixed JRMP and IIOP...// The target object is IIOP. Make sure we have a// valid ORB from the source object...// And, finally, connect it up...// Is the tie already connected?// Yes. Is it the same orb?// Yes, so nothing to do...// No, so this is an error...// No, so do it...// The stub or tie was already connected...// REVISIT - this is done in SocketOrChannelConnectionImpl////////////////////////////////////////////////////// LegacyServerSocketManager// Only used in ServerManagerImpl.// Only used by POAPolicyMediatorBase.// this server is activated by orbd// this is a user-activated server// Only used by PI IORInfoImpl.// Used in RepositoryImpl, ServerManagerImpl, POAImpl,// POAPolicyMediatorBase, TOAImpl.// To get either default or bootnaming endpoint.// Check to see if the given port is equal to any of the ORB Server Ports.// XXX Does this need to change for the multi-homed case?// Used in IIOPProfileImpl, ORBImpl.// Implementation./* Copyright (c) 2003, 2004, Oracle and/or its affiliates. All rights reserved. ... */// pept Acceptor// Socket-factory client constructor.// REVISIT - probably need a contact info for both// client and server for removing connections from cache?// REVISIT - case - needs interface method// IMPORTANT: non-channel-backed sockets must use// dedicated reader threads.// Note: public to override parent.// See SocketOrChannelAcceptorImpl.createMessageMediator// See SocketFactoryContactInfoImpl.constructor()// See SocketOrChannelContactInfoImpl.constructor()// pept.transport.ContactInfo// java.lang.Object// XREVISIT - is this used?// pept.transport.ContactInfoList// java.util.Iterator// REVISIT:// on comm_failure maybe need to give IOR instead of located.// pept.ContactInfoListIterator// retry from root ior// Log wrapper class for Sun private system exceptions in group ACTIVATION// Generated by MC.java version 1.0, DO NOT EDIT BY HAND!// Generated from input file /jenkins/workspace/8-2-build-macosx-x86_64/jdk8u251/737/corba/src/share/classes/com/sun/corba/se/spi/logging/data/Activation.mc on Thu Mar 12 02:38:09 PDT 2020///////////////////////////////////////////////////////////// INITIALIZE// INTERNAL// OBJECT_NOT_EXIST// Log wrapper class for Sun private system exceptions in group IOR// Generated from input file /jenkins/workspace/8-2-build-macosx-x86_64/jdk8u251/737/corba/src/share/classes/com/sun/corba/se/spi/logging/data/IOR.mc on Thu Mar 12 02:38:09 PDT 2020// BAD_OPERATION// BAD_PARAM// INV_OBJREF// Log wrapper class for Sun private system exceptions in group INTERCEPTORS// Generated from input file /jenkins/workspace/8-2-build-macosx-x86_64/jdk8u251/737/corba/src/share/classes/com/sun/corba/se/spi/logging/data/Interceptors.mc on Thu Mar 12 02:38:09 PDT 2020// BAD_INV_ORDER// COMM_FAILURE// NO_IMPLEMENT// UNKNOWN// Log wrapper class for Sun private system exceptions in group NAMING// Generated from input file /jenkins/workspace/8-2-build-macosx-x86_64/jdk8u251/737/corba/src/share/classes/com/sun/corba/se/spi/logging/data/Naming.mc on Thu Mar 12 02:38:09 PDT 2020// Log wrapper class for standard exceptions// Generated from input file /jenkins/workspace/8-2-build-macosx-x86_64/jdk8u251/737/corba/src/share/classes/com/sun/corba/se/spi/logging/data/OMG.mc on Thu Mar 12 02:38:10 PDT 2020// BAD_CONTEXT// BAD_TYPECODE// DATA_CONVERSION// IMP_LIMIT// INV_POLICY// INTF_REPOS// MARSHAL// NO_RESOURCES// TRANSACTION_ROLLEDBACK// TRANSIENT// OBJ_ADAPTER// Log wrapper class for Sun private system exceptions in group ORBUTIL// Generated from input file /jenkins/workspace/8-2-build-macosx-x86_64/jdk8u251/737/corba/src/share/classes/com/sun/corba/se/spi/logging/data/ORBUtil.mc on Thu Mar 12 02:38:10 PDT 2020// Log wrapper class for Sun private system exceptions in group POA// Generated from input file /jenkins/workspace/8-2-build-macosx-x86_64/jdk8u251/737/corba/src/share/classes/com/sun/corba/se/spi/logging/data/POA.mc on Thu Mar 12 02:38:10 PDT 2020// Log wrapper class for Sun private system exceptions in group UTIL// Generated from input file /jenkins/workspace/8-2-build-macosx-x86_64/jdk8u251/737/corba/src/share/classes/com/sun/corba/se/spi/logging/data/Util.mc on Thu Mar 12 02:38:10 PDT 2020// List of all child Monitored Objects// All the Attributes of this Monitored Object instance// Constructor/** calls clearState() on all the registered children MonitoredObjects and ... */// First call clearState on all the local attributes// next call clearState on all the children MonitoredObjects// Import general CORBA classes// Import org.omg.CosNaming classes/** Class BindingIteratorImpl implements the org.omg.CosNaming::BindingIterator ... *//** Create a binding iterator servant. ... *//** Return the next binding. It also returns true or false, indicating ... */// NextOne actually returns the next one/** Return the next n bindings. It also returns true or false, indicating ... *//** lists next n bindings. It returns true or false, indicating ... */// Take the smallest of what's left and what's being asked for// Create a resulting BindingList// Keep iterating as long as there are entries// Found any at all?// No// Set into holder/** Destroy this BindingIterator object. The object corresponding to this ... */// Destroy actually destroys/** Abstract method for returning the next binding in the NamingContext ... *//** Abstract method for destroying this BindingIterator. ... *//** Abstract method for returning the remaining number of elements. ... */// Import org.omg.CosNaming types/** Class InteroperableNamingImpl implements the methods defined ... *//** Method which stringifies the Name Components given as the input ... *//** This method converts a single Namecomponent to String, By adding Escapes ... *//** This method adds escape '\' for the Namecomponent if neccessary */// Adding escape for the "."/** Method which converts the Stringified name into Array of Name Components. ... *//** Step1 in converting Stringified name into  array of Name Component ... */// This is the end of all the occurence of '/' and hence come// out of the loop// If the '/' is found, first check whether it is// preceded by escape '\'// If not then set theIndices and increment theIndicesIndex// and also set the index else just ignore the '/'/** This method breaks one big String into multiple substrings based ... */// This is done for the last component/** Step 2: After Breaking the Stringified name into set of NameComponent ... */// If any of the above is true, then we create an invalid Name// Component to indicate that it is an invalid name.// The format could be XYZ (Without kind)// The format is .XYZ (Without ID)// This check is for the Namecomponent which is just "." meaning Id// and Kinds are null// No more '.', which means there is no Kind/** This method cleans the escapes in the Stringified name and returns the ... */// If there is a AlphaNumeric character after a \// then include slash, as it is not intended as an// escape character./** Method which converts the Stringified name  and Host Name Address into ... *//** Encodes the string according to RFC 2396 IETF spec required by INS. */// Do no Escape for characters in this list// RFC 2396// Add escape/** Class InternalBindingKey implements the necessary wrapper code ... */// A key contains a name// Default Constructor// Normal constructor// Setup the object// Precompute lengths and values since they will not change// Compare the keys by comparing name's id and kind// Both lengths must match// If id is set is must be equal// If kind is set it must be equal// Must be the same// Return precomputed value/** Class InternalBindingKey acts as a container for two objects, namely ... */// Default constructor/** This interface defines a set of methods that must be implemented by the ... *//** Method which implements binding a name to an object as ... *//** Method which implements resolving the specified name, ... *//** Method which implements unbinding a name. ... *//** Method which implements listing the contents of this ... *//** Method which implements creating a new NamingContext. ... *//** Method which implements destroying this NamingContext. ... *//** Method which returns whether this NamingContext is empty ... */// Imports for Logging/** Class NamingContextImpl implements the org.omg.CosNaming::NamingContext ... */// The grammer for Parsing and Building Interoperable Stringified Names// are implemented in this class/** Create a naming context servant. ... *//** Bind an object under a name in this NamingContext. If the name ... */// doBind implements all four flavors of binding// isLoggable call to make sure that we save some precious// processor cycles, if there is no need to log./** Bind a NamingContext under a name in this NamingContext. If the name ... */// This should not happen/** Resolve a name in this NamingContext and return the object reference ... */// doResolve actually resolves/** Remove a binding from this NamingContext. If the name contains ... */// doUnbind actually unbinds/** List the contents of this NamingContest. A sequence of bindings ... */// List actually generates the list/** Create a NamingContext object and return its object reference. ... */// Create actually creates a new naming context// If naming context is null, then that must be a serious// error./** Create a new NamingContext, bind it in this Naming Context and return ... */// The obvious solution:/** Destroy this NamingContext object. If this NamingContext contains ... */// The context is empty so it can be destroyed// This context is not empty!// Not a fatal error, warning should do./** Implements all four flavors of binding. It uses Resolve() to ... */// Valid name?// At bottom level?// The identifier must be set// Ensure synchronization of backend// Yes: bind object in this context under the name// Refer Naming Service Doc:00-11-01 section 2.2.3.4// If there is an object already bound with the name// and the binding type is not ncontext a NotFound// Exception with a reason of not a context has to be// raised.// Fix for bug Id: 4384628// Previously a Context was bound and now trying to// bind Object. It is invalid.// "Resistence is futile." [Borg pickup line]// Now there are no other bindings under this name// No: bind in a different context// Compute tail// How should we propagate the bind// Bind as object// Narrow to a naming context using Java casts. It must// work.// Bind as context/** Implements resolving names in this NamingContext. The first component ... */// Length must be greater than 0// Resolve first level in this context// Object was not found// n.length > 1// Compute restOfName = name[1..length]// Resolve rest of name in context// First try to resolve using the local call, this should work// most of the time unless there are federated naming contexts./** Implements unbinding bound names in this NamingContext. If the ... */// Name valid?// Unbind here?// Yes: unbind in this context// It was not bound// Done// No: unbind in a different context// Resolve first  - must be resolveable// Propagate unbind to this context/** Implements resolving a NameComponent in this context and ... */// Was it bound as a context?// It was not a context// Narrow to a naming context// Hmm. must be ok/** This operation creates a stringified name from the array of Name ... *//** This operation  converts a Stringified Name into an  equivalent array ... */// If there is a name component whose id and kind null or// zero length string, then an invalid name exception needs to be/** This operation creates a URL based "iiopname://" format name ... */// Extra check to see that corba name url created is valid as per// INS spec grammer./** This operation resolves the Stringified name into the object ... */// Debugging aids.// Do not instantiate this class/** Debug flag which must be true for debug streams to be created and ... *//** Prints the message to the debug stream if debugging is enabled. ... *//** Prints the message to the error stream (System.err is default). ... *//** Prints the stacktrace of the supplied exception to the error stream. ... *//** Create a debug print stream to the supplied log file. ... */// Create an outputstream for debugging// Emit first message/** Create a error print stream to the supplied file. ... */// Create an outputstream for errors/** A utility method that takes Array of NameComponent and converts ... *//** The debug printstream. *//** The error printstream. */// Get org.omg.CosNaming Types// Get base implementation// Get a hash table/** Class TransientBindingIterator implements the abstract methods ... */// There is only one POA used for both TransientNamingContext and// TransientBindingIteraor servants./** Constructs a new TransientBindingIterator object. ... *//** Returns the next binding in the NamingContext. Uses the enumeration ... */// If there are more elements get the next element// Return empty but marshalable binding/** Destroys this BindingIterator by disconnecting from the ORB ... */// Remove the object from the Active Object Map./** Returns the remaining number of elements in the iterator. ... *//** Class TransientNameServer is a standalone application which ... */// If debug was compiled to be true for testing purposes,// don't change it./** Main startup routine. It instantiates a TransientNameService ... */// Determine the initial bootstrap port to use// Create an ORB object// Try environment// -Dorg.omg.CORBA.ORBInitialPort=0 is invalid// do nothing// Let arguments override// Was the initial port specified?// -ORBInitialPort 0 is invalid// If initialPort is not set, then we need to set the Default// Initial Port Property for the ORB// Set -ORBInitialPort = Persistent Server Port so that ORBImpl// will start Boot Strap.// This is used for handshaking by the IBM test framework!// Do not modify, unless another synchronization protocol is// used to replace this hack!// Serve objects.// Let the User Know that -ORBInitialHost is not valid for// tnameserver// Let the User Know that -ORBInitialPort 0 is not valid for/** Private constructor since no object of this type should be instantiated. */// Get CORBA type// Get org.omg.CosNaming types// Import transient naming context/** Class TransientNameService implements a transient name service ... *//** Constructs a new TransientNameService, and creates an initial ... */// Default constructor uses "NameService" as the key for the Root Naming// Context. If default constructor is used then INS's object key for// Transient Name Service is "NameService"// This constructor gives the flexibility of providing the Object Key// for the Root Naming Context that is registered with INS./** This method initializes Transient Name Service by associating Root ... */// Create an initial context/** Return the initial NamingContext. ... */// The initial naming context for this name service/** Class TransientNamingContext implements the methods defined ... */// XXX: the wrapper calls are all preceded by logger updates.// These can be combined, and then we simply use 3 NamingSystemException wrappers,// for read, update, and lifecycl./** Constructs a new TransientNamingContext object. ... *//** Binds the object to the name component as the specified binding type. ... */// Create a key and a value// insert it/** Resolves the supplied name to an object reference and returns ... */// Is the initial naming context requested?// Create a key and lookup the value// Copy out binding type and object reference/** Deletes the binding with the supplied name. It creates a ... */// Create a key and remove it from the hashtable// Return what was found/** List the contents of this NamingContext. It creates a new ... */// Create a new binding iterator servant with a copy of this// hashtable. nsPOA is passed to the object so that it can// de-activate itself from the Active Object Map when// Binding Iterator.destroy is called.// Have it set the binding list// Get the object reference for the binding iterator servant// Convert to a CORBA system exception/** Create a new NamingContext. It creates a new TransientNamingContext ... */// Create a new servant/** Destroys this NamingContext by disconnecting from the ORB. ... */// Destroy the object reference by disconnecting from the ORB/** A Utility Method For Logging.. *//** Return whether this NamingContext contains any bindings. It forwards ... */// A hashtable to store the bindings/** The local root naming context. *//** The corbaloc: URL definitions from the -ORBInitDef and -ORBDefaultInitDef's ... *//** This constructor parses the URL and initializes all the variables. Once ... */// First Clean the URL Escapes if there are any// There is something wrong with the URL escapes used// so throw an exception// If there is no '/' then the endIndex is at the end of the URL// _REVISIT_: Add a testcase to check 'corbaloc:/'// The url starts with a '/', it's an error// Anything between corbaloc: and / is the host,port information// of the server where the Service Object is located// There should be atleast one token, because there are checks// to make sure that there is host information before the// delimiter '/'. So no need to explicitly check for number of// tokens != 0// Right now we are not allowing any other protocol// other than iiop:, rir: so raise exception indicating// that the URL is malformed// Add the Host information if RIR flag is set,// If RIR is set then it means use the internal Boot// Strap protocol for Key String resolution// If there is something after corbaloc:endpointInfo/// then that is the keyString/** A Utility method to throw BAD_PARAM exception to signal malformed ... *//** If there is 'iiop:' token in the URL, this method will parses ... */// Check the iiop syntax/** This is to handle the case of host information with no 'iiop:' prefix. ... */// String after ":"// The format can be 1.2@<host>:<port>// There can be 1 or 2 tokens with '@' as the delimiter//  - if there is only 1 token then there is no GIOP version//    information.  A Default GIOP version of 1.2 is used.//  - if there are 2 tokens then there is GIOP version is specified//  - if there are no tokens or more than 2 tokens, then that's an//    error// There is VersionInformation after iiop:// There is a version without ., which means// Malformed list// A Hack to differentiate IPV6 address// from IPV4 address, Current Resolution// is to use [ ] to differentiate ipv6 host// ipv6Host should be enclosed in// [ ], if not it will result in a// BAD_PARAM exception// There are three possible cases here// 1. Host and Port is explicitly specified by using ":" as a//    a separator// 2. Only Host is specified without the port// 3. HostAndPort info is null// Case 1: There is Host and Port Info// Case 2: Only Host is specified. iiopEndpointInfo is// initialized to use the default INS port, if no port is// specified// Case 3: If no Host and Port info is provided then we use the// the default LocalHost and INSPort. iiopEndpointInfo is// already initialized with this info.// Any kind of Exception is bad here.// Possible causes: A Number Format exception because port info is// malformed/** Validate 'rir:' case. *//** Returns an IPV6 Port that is after [<ipv6>]:. There is no validation ... */// If there is port information, then it has to be after ] bracket// indexOf returns the count from the index of zero as the base, so// equality check requires squareBracketEndIndex + 1.// PortInformation  should be after ']:' delimiter// If there is an exception then it will be caught in// checkcorbaGrammer method and rethrown as BAD_PARAM/** Returns an IPV6 Host that is inside [ ] tokens. There is no validation ... */// get the host between [ ]/** Will be true only in CorbanameURL class. *//** The corbaname: URL definitions from the -ORBInitDef and -ORBDefaultInitDef's ... *//** This constructor takes a corbaname: url with 'corbaname:' prefix stripped ... */// Append corbaloc: for Grammar check, Get the string between// corbaname: and # which forms the corbaloc string// Build a corbaloc string to check the grammar.// 10 is the length of corbaname:// If the string doesnot end with a / then add one to end the// URL correctly// Check the corbaloc grammar and set the returned corbaloc// object to the CorbaName Object// String after '#' is the Stringified name used to resolve// the Object reference from the rootnaming context. If// the String is null then the Root Naming context is passed// back/** A Utility method to throw BAD_PARAM exception. *//** A Utility method to copy all the variables from CorbalocURL object to ... *//** EndpointInfo is used internally by CorbaLoc object to store the ... */// Version information// Host Name and Port Number// Default IIOP Version// Default host is localhost// Default INS Port/** Internal Debug Method. *//** INS URL is a generic interface for two different types of URL's specified ... */// There can be one or more Endpoint's in the URL, so the return value is// a List// This method will return true only in CorbanameURL, It is provided because// corbaname: URL needs special handling.// A debug method, which is not required for normal operation// If rirFlag is set to true that means internal// boot strapping technique will be used. If set to// false then the EndpointInfo will be used to create the// Service Object reference./** This class is the entry point to parse different types of INS URL's. ... */// Length of corbaloc:// Length of corbaname:/** Constants specific to INS parsing and validation. */// iiop length// rir: length/** Utility methods for Naming. ... *//** cleanEscapes removes URL escapes as per IETF 2386 RFP. */// Get the two hexadecimal digits and convert that into int// Convert the integer to ASCII/** Converts an Ascii Character into Hexadecimal digit ... *//** If GIOP Version is not correct, This method throws a BAD_PARAM ... */// computed by serialver tool// If One is Null and the other is not then it's a mismatch// So, return false// We have checked all the possibilities, so return true// The value stores both Stringified Object Reference and// Non-Stringified Object Reference. This is done to avoid// calling orb.string_to_object( ) everytime. Instead it// will be set once and then the result will be used everytime.// Objectreference or Context/** Class NameServer is a standalone application which ... */// name server database directory// create the ORB Object// set up the database directory// create the persistent name service// add root naming context to initial naming// wait for invocations/** Create NameService which starts the Root Naming Context in Persistent CosNaming ... */// Moved this to the creation of the ORB that is passed into this// constructor.// This is required for creating Persistent Servants under this ORB// Right now the Persistent NameService and ORBD are launched together// Find out a better way of doing this, Since ORBD is an important// process which should not be killed because of some external process// orb.setPersistentServerId( (int) 1000 );// get and activate the root naming POA// create a new POA for persistent Naming Contexts// With Non-Retain policy, So that every time Servant Manager// will be contacted when the reference is made for the context// The id assignment is made by the NameServer, The Naming Context// id's will be in the format NC<Index>// create and set the servant manager// The RootObject key will be NC0// initialize the root Naming Context/** This method returns the Root Naming Context *//** This method returns nsPOA which is the only POA that we use for ... *//** This method  creates a NewContext, This will internally invoked from ... */// Get the new Naming Context Key from// the ServantManager// Create the new Naming context and create the Persistent// reference// If the context is read from the File, The following three entries// will be null. So a fresh setup may be required.//throw e;/** getObjectReferenceFromKey returns the Object reference from the objectkey using POA.create_reference_with_id method ... *//** getObjectKey gets the Object Key from the reference using POA.reference_to_id method ... *//** Class NamingContextImpl implements the org.omg.CosNaming::NamingContext and ... */// The ORB is required to do string_to_object() operations// All the references are stored in the files in the form of IOR strings// The ObjectKey will be in the format NC<Index> which uniquely identifies// The NamingContext internaly// Hash table contains all the entries in the NamingContexts. The// CORBA.Object references will be stored in the form of IOR strings// and the Child Naming Contexts will have it's key as the entry in the// table. This table is written into File everytime an update is made// on this context.// The NameServiceHandle is required to get the ObjectId from the// NamingContext's references. These references are created using// POA in the NameService.// ServantManager is the single point of contact to Read, Write and// Update the NamingContextFile// All the INS (Interoperable Naming Service) methods are defined in this class// All the calls to INS will be delegated to this class.// orb.namingDebugFlag ;// insImpl will be null if the NamingContext graph is rebuilt from// the persistence store.// Narrow to a naming context using Java casts. It must work./** Implements all flavors of binding( bind and bindcontext) ... */// Raise a Valid Exception and Return// If the BindingType is an ObjectRef then Stringify this ref and// Store it in InternalBindingValue instance. This is required// because the Object References has to be stored in file// If the BindingType is a NamingContext then get it's object key// from the NameService and store it in the Internal Binding Value instance// There was an entry with this name in the Hashtable and hence throw CTX_ALREADY_BOUND// exception// Everything went smooth so update the NamingContext file with the// latest Hashtable image// Something went wrong while updating the context// so speak the error// Something went wrong while Binding the Object Reference// Speak the error again./** This method resolves the NamingContext or Object Reference for one level ... */// If the NameComponent list has no entry then it means the current// context was requested// No entry was found for the given name and hence return NULL// NamingContextDataStore throws appropriate exception if// required.// Check whether the entry found in the Hashtable starts with NC// Which means it's a name context. So get the NamingContext reference// from ServantManager, which would either return from the cache or// read it from the File.// Else, It is a Object Reference. Check whether Object Reference// can be obtained directly, If not then convert the stringified// reference to object and return./** This method Unbinds the NamingContext or Object Reference for one level ... */// Ignore the exception in Hashtable.remove/** Destroys the NamingContext. */// XXX note that orb.disconnect is illegal here, since the// POA is used.  However, there may be some associated state// that needs to be cleaned up in ServerManagerImpl which we will// look into further at another time./* // XXX This needs to be replaced by cleaning up the ... *//** This is a Debugging Method *//** Constructs a new PersistentBindingIterator object. ... */// computed using serialver tool// initialize the counter database// nada// Returning Context from Cache/* Copyright (c) 2002, 2010, Oracle and/or its affiliates. All rights reserved. ... *//** AOMEntry represents a Servant or potential Servant in the ActiveObjectMap. ... */// The actual etherealize operation// for this entry.  It is// represented as a Thread because// the POA.deactivate_object never// waits for the completion.// single element holder for counter// accessed in actions// XXX Log this//          State,   Input,     Guard,                  Action,             new State// Methods that drive the FSM: the real interface to this class// Most just call the doIt method, but startEtherealize needs// the etherealizer./** The ActiveObjectMap maintains associations between servants and ... */// Use the same hash function as for String// Map< Key, AOMEntry >// Map< AOMEntry, Servant >// Map< Servant, AOMEntry >/** get Returbs the entry assigned to the key, or creates a new ... */// Map< AOMEntry, Key >// This case does not need the key.// Map< AOMEntry, Set< Key > >/** The bad server id handler is used to locate persistent objects. ... *///Not within an invocation context//REVISIT// The get_interface() method has been replaced by get_interface_def()// XXX Needs to be turned into LocalObjectImpl.// Standard OMG operations.// Implementation operations used by POA package.// If is OK for the servant to be null.// This could happen if POAImpl.getServant is called but// POAImpl.internalGetServant throws an exception.// This is public so we can test the stack balance.// It is not a security hole since this same info can be obtained from// PortableInterceptors.// Class utilities.// The completion status is maybe because this could happen// after the servant has been invoked./* Copyright (c) 2002, 2009, Oracle and/or its affiliates. All rights reserved. ... */// Maps servants to POAs for deactivating servants when unexportObject is called.// Maintained by POAs activate_object and deactivate_object./** All object adapter factories must have a no-arg constructor. */// Implementation of ObjectAdapterFactory interface// It is important to copy the list of POAManagers first because// pm.deactivate removes itself from poaManagers!// Special methods used to manipulate global POA related state// We delay the evaluation of makeRootPOA until// a call to resolve_initial_references( "RootPOA" ).// The Future guarantees that makeRootPOA is only called once.// See if we are trying to getRootPOA while shutting down the ORB./** POAImpl is the implementation of the Portable Object Adapter. It ... *//* POA creation takes place in 2 stages: first, the POAImpl constructor is ... */// Notes on concurrency.// The POA requires careful design for concurrency management to correctly// implement the specification and avoid deadlocks.  The order of acquiring// locks must respect the following locking hierarchy:// 1. Lock POAs before POAManagers// 2. Lock a POA before locking its child POA// Also note that there are 3 separate conditions on which threads may wait// in the POA, as defined by invokeCV, beingDestroyedCV, and// adapterActivatorCV.  This means that (for this reason as well as others)// we cannot simply use the standard Java synchronized primitive.// This implementation uses a modified version of Doug Lea's// util.concurrent (version 1.3.0) that supports reentrant// mutexes to handle the locking.  This will all be replaced by the new JSR// 166 concurrency primitives in J2SE 1.5 and later once the ORB moves to// J2SE 1.5.// POA state constants// Note that ordering is important here: we must have the state defined in// this order so that ordered comparison is possible.// DO NOT CHANGE THE VALUES OF THE STATE CONSTANTS!!!  In particular, the// initialization related states must be lower than STATE_RUN.// POA is created in STATE_START// Valid state transitions:// START to INIT                        after find_POA constructor call// START to RUN                         after initialize completes// INIT to INIT_DONE                    after initialize completes// INIT to DESTROYED                    after failed unknown_adapter// INIT_DONE to RUN                     after successful unknown_adapter// STATE_RUN to STATE_DESTROYING        after start of destruction// STATE_DESTROYING to STATE_DESTROYED  after destruction completes.// constructor complete// waiting for adapter activator// adapter activator called create_POA// initialized and running// being destroyed// destruction complete// Current state of the POA// The POA request handler that performs all policy specific operations// Note that POAImpl handles all synchronization, so mediator is (mostly)// unsynchronized.// Representation of object adapter ID// counts depth of tree.  Root = 1.// the actual object adapter ID for this POA// the name of this POA// This POA's POAManager// ID for this POA that is unique relative// to the POAFactory, which has the same// lifetime as the ORB.// The POA that created this POA.// Map from name to POA of POAs created by// this POA.// pending invocations on this POA.// Data used to control POA concurrency// XXX revisit for JSR 166// Master lock for all POA synchronization.  See lock and unlock.// package private for access by AOMEntry.// Wait on this CV for AdapterActivator upcalls to complete// Wait on this CV for all active invocations to complete// Wait on this CV for the destroy method to complete doing its work// thread local variable to store a boolean to detect deadlock in// POA.destroy().// This includes the most important information for debugging// POA problems.// package private for mediator implementations.// package private for access to servant to POA map// package private so that POAFactory can access it.// package private so that POAPolicyMediatorBase can access it.// package private so that POAPolicyMediator can access it.// package private so that DelegateImpl can access it.// Note that the parent POA must be locked when this constructor is called.// This was done in initialize, but I moved it here// to get better searchability when tracing.// This is the root POA, which counts as 1 level// My level is one more than that of my parent// Get an array of all of the POA names in order to// create the poaid.// The POA lock must be held when this method is called.// Construct the object key template// Note that parent == null iff this is the root POA.// This was used to avoid executing interceptors on the RootPOA.// That is no longer necessary.// parent != null ;// XXX extract codebase from policies and pass into initializeTemplate// after the codebase policy change is finalized.// codebase// manager id// The poaMutex must be held when this method is called// Note that a POA could be destroyed while in STATE_INIT due to a// failure in the AdapterActivator upcall.// This method checks that the AdapterActivator finished the// initialization of a POA activated in find_POA.  This is// determined by checking the state of the POA.  If the state is// STATE_INIT, the AdapterActivator did not complete the// inialization.  In this case, we destroy the POA that was// partially created and return false.  Otherwise, we return true.// In any case, we must wake up all threads waiting for the adapter// activator, either to continue their invocations, or to return// errors to their client.// The poaMutex must NOT be held when this method is called.// Don't just use destroy, because the check for// deadlock is too general, and can prevent this from// functioning properly.// Extract the ObjectId from the first TaggedProfile in the IOR.// If ior was created in this POA, the same ID was used for// every profile through the profile templates in the currentFactory,// so we will get the same result from any profile.// Converted from anonymous class to local class// so that we can call performDestroy() directly.// Catch exceptions since setDaemon can cause a// security exception to be thrown under netscape// in the Applet mode// Returns true if destruction must be completed, false// if not, which means that another thread is already// destroying poa.// Note that we do not synchronize on this, since this is// the PerformDestroy instance, not the POA.// destroy may be called multiple times, and each call// is allowed to proceed with its own setting of the wait// flag, but the etherealize value is used from the first// call to destroy.  Also all children should be destroyed// before the parent POA.  If the poa is already destroyed,// we can just return.  If the poa has started destruction,// but not completed, and wait is true, we need to wait// until destruction is complete, then just return.// Make a copy since we can't hold the lock while destroying// the children, and an iterator is not deletion-safe.// We are not holding the POA mutex here to avoid holding it// while destroying the POA's children, since this may involve// upcalls to etherealize methods.// NOTE: If we are here, poa is in STATE_DESTROYING state. All// other state checks are taken care of in prepareForDestruction.// No other threads may either be starting new invocations// by calling enter or starting to destroy poa.  There may// still be pending invocations.// Note that we must lock the parent before the child.// The parent lock is required (if poa is not the root)// to safely remove poa from parent's children Map.// We have just destroyed the root POA, so we need to// make sure that the next call to// resolve_initial_reference( "RootPOA" )// will recreate a valid root POA.//*******************************************************************// Public POA API/** <code>create_POA</code> ... */// We cannot create children of a POA that is (being) destroyed.// This has been added to the CORBA 3.0 spec./** <code>find_POA</code> ... */// Do not hold the parent POA lock while// waiting for child to complete initialization.// Make sure that the child has completed its initialization,// if it was created by an AdapterActivator, otherwise throw// a standard TRANSIENT exception with minor code 4 (see// CORBA 3.0 11.3.9.3, in reference to unknown_adapter)// Note that found may be in state DESTROYING or DESTROYED at// this point.  That's OK, since destruction could start at// any time.// Create a child, but don't initialize it.  The newly// created POA will be in state STATE_START, which will// cause other calls to find_POA that are creating the same// POA to block on the waitUntilRunning call above.// Initialization must be completed by a call to create_POA// inside the unknown_adapter upcall.  Note that// this.poaMutex must be held here so that this.children// can be safely updated.  The state is set to STATE_INIT// so that initialize can make the correct state transition// when create_POA is called inside the AdapterActivator.// This avoids activating the new POA too soon// by transitioning to STATE_RUN after unknown_adapter// returns.// assert (found != null)// assert not holding this.poaMutex OR found.poaMutex// We must not hold either this.poaMutex or found.poaMutex here while// waiting for intialization of found to complete to prevent possible// deadlocks.// Prevent more than one thread at a time from executing in act// in case act is shared between multiple POAs.// ignore most non-system exceptions, but log them for// diagnostic purposes.// At this point, we have completed adapter activation.// Whether this was successful or not, we must call// destroyIfNotInitDone so that calls to enter() and create_POA()// that are waiting can execute again.  Failing to do this// will cause the system to hang in complex tests.// OMG Issue 3740 is resolved to throw AdapterNonExistent if// unknown_adapter() returns false./** <code>destroy</code> ... */// This is to avoid deadlock/** <code>create_thread_policy</code> ... *//** <code>create_lifespan_policy</code> ... *//** <code>create_id_uniqueness_policy</code> ... *//** <code>create_id_assignment_policy</code> ... *//** <code>create_implicit_activation_policy</code> ... *//** <code>create_servant_retention_policy</code> ... *//** <code>create_request_processing_policy</code> ... *//** <code>the_name</code> ... *//** <code>the_parent</code> ... *//** <code>the_children</code> *//** <code>the_POAManager</code> ... *//** <code>the_activator</code> ... *//** <code>get_servant_manager</code> ... *//** <code>set_servant_manager</code> ... *//** <code>get_servant</code> ... *//** <code>set_servant</code> ... *//** <code>activate_object</code> ... */// Allocate a new system-generated object-id.// This will throw WrongPolicy if not SYSTEM_ID// policy.// This exception can not occur in this case,// since id is always brand new./** <code>activate_object_with_id</code> ... */// Clone the id to avoid possible errors due to aliasing// (e.g. the client passes the id in and then changes it later)./** <code>deactivate_object</code> ... *//** <code>create_reference</code> ... *//** <code>create_reference_with_id</code> ... *//** <code>servant_to_id</code> ... *//** <code>servant_to_reference</code> ... *//** <code>reference_to_servant</code> ... */// reference_to_id should throw WrongAdapter// if the objref was not created by this POA/** <code>reference_to_id</code> ... *//** <code>id_to_servant</code> ... *//** <code>id_to_reference</code> ... *//** <code>id</code> ... *///***************************************************************//Implementation of ObjectAdapter interface// Avoid deadlock if this is the thread that is processing the// POA.destroy because this is the only thread that can notify// waiters on beingDestroyedCV.  This can happen if an// etherealize upcall invokes a method on a colocated object// served by this POA./** Called from the subcontract to let this POA cleanup after an ... *//** POAManagerImpl is the implementation of the POAManager interface. ... */// factory which contains global state// for all POAManagers// for adapterManagerStateChanged// current state of this POAManager// all poas controlled by this POAManager// Number of invocations in progress// Number of threads waiting for// invocations to complete// This POAManager's ID// initially false, set true as soon as// one of activate, hold_request,// discard_request, or deactivate is called.// NOP// XXX This is probably not the correct error/** ************************************************************************** ... *//** <code>activate</code> ... */// set the state to ACTIVE// Notify any invocations that were waiting because the previous// state was HOLDING, as well as notify any threads that were waiting// inside hold_requests() or discard_requests()./** <code>hold_requests</code> ... */// set the state to HOLDING// Notify any threads that were waiting in the wait() inside// discard_requests. This will cause discard_requests to return// (which is in conformance with the spec)./** <code>discard_requests</code> ... */// set the state to DISCARDING// state was HOLDING. Those invocations will henceforth be rejected with// a TRANSIENT exception. Also notify any threads that were waiting// inside hold_requests()./** <code>deactivate</code> ... */// state was HOLDING. Those invocations will then be rejected with// an OBJ_ADAPTER exception. Also notify any threads that were waiting// Make sure that poas cannot change while we copy it!// Each RETAIN+USE_SERVANT_MGR poa// must call etherealize for all its objects/** Added according to the spec CORBA V2.3; this returns the ... */// called from POA.find_POA before calling// AdapterActivator.unknown_adapter.// This notifies any threads that were in the// wait_for_completion loop in hold/discard/deactivate()./** Activate the POAManager if no explicit state change has ever been ... */// ignore the exception./** POAPolicyMediator defines an interface to which the POA delegates all ... *//** Return the policies object that was used to create this ... *//** Return the subcontract ID to use in the IIOP profile in IORs ... *//** Return the server ID to use in the IIOP profile in IORs ... *//** Get the servant to use for an invocation with the ... *//** Release a servant that was obtained from getInvocationServant. *//** Etherealize all servants associated with this POAPolicyMediator. ... *//** Delete everything in the active object map. *//** Return the servant manager.  Will throw WrongPolicy ... *//** Set the servant manager.  Will throw WrongPolicy ... *//** Return the default servant.   Will throw WrongPolicy ... *//** Set the default servant.   Will throw WrongPolicy ... *//** Deactivate the object that is associated with the given id. ... *//** Allocate a new, unique system ID.  Requires the ID assignment policy ... *//** Implementation of POARequesHandler that provides policy specific ... */// Create a delegate and stick it in the servant.// This delegate is needed during dispatch for the ObjectImpl._orb()// method to work.//This new servant delegate no longer needs the id for// its initialization./* Copyright (c) 2002, 2012, Oracle and/or its affiliates. All rights reserved. ... */// assert policies.retainServants() && policies.useActiveObjectMapOnly()// Check for an ObjectAlreadyActive error// Default does nothing, but the USE_SERVANT_MANAGER case// must handle etherealization// XXX needs to handle call from an invocation on this POA// assert !isUnique || (servant not in activateObjectMap)// This can't occur here, since id is always brand new.// create an appropriate policy mediator based on the policies.// Note that the policies object has already been validated before// this call, so it can only contain valid combinations of POA policies./** Implementation of POAPolicyMediator that provides policy specific ... */// assert !policies.retainServants() && policies.useDefaultServant()// assert !policies.retainServants() && policies.useServantManager()// Try - finally is J2EE requirement.// assert policies.retainServants()// policies.useActiveObjectMapOnly()// policies.useDefaultServant()/* This handles a rather subtle bug (4939892).  The problem is that ... */// Drop the POA lock during the incarnate call and// re-acquire it afterwards.  The entry state machine// prevents more than one thread from executing the// incarnate method at a time within the same POA.// servant == null means incarnate threw an exception,// while servant instanceof NullServant means incarnate returned a// null servant.  Either case is an incarnate failure to the// entry state machine.// XXX Does the AOM leak in this case? Yes,// but the problem is hard to fix.  There may be// a number of threads waiting for the state to change// from INCARN to something else, which is VALID or// INVALID, depending on the incarnate result.// The activeObjectMap.get() call above creates an// ActiveObjectMap.Entry if one does not already exist,// and stores it in the keyToEntry map in the AOM.// here check for unique_id policy, and if the servant// is already registered for a different ID, then throw// OBJ_ADAPTER exception, else activate it. Section 11.3.5.1// 99-10-07.pdf// check if the servant already is associated with some id// Copy the elements in the set to an array to avoid// changes in the set due to concurrent modification// Here we etherealize in the thread that called this// method, rather than etherealizing in a new thread// as in the deactivate case.  We still inform the// entry state machine so that only one thread at a// time can call the etherealize method.// ignore all exceptions/* Order of *POLICY_ID : ... */// Maps Integer(policy type) to Policy/* Returns the integer value of the POA policy, if this is a ... *//** If any errors were found, throw INVALID_POLICY with the smallest ... *//** Add the first index in policies at which the policy is of type ... *//** Main constructor used from POA::create_POA.  This need only be visible ... */// Make sure the defaults are set according to the POA spec// Set to record all indices in policies for which errors// were observed.// Save the policy in policyMap to support// POA.get_effective_policy, if it was not already saved// in policyMap.// if the value of this POA policy was previously set to a// different value than the current value given in// POAPolicyValue, record an error.// Check for bad policy combinations// NON_RETAIN requires USE_DEFAULT_SERVANT or USE_SERVANT_MANAGER// IMPLICIT_ACTIVATION requires SYSTEM_ID and RETAIN/* Thread Policies *//* Lifespan *//* ID Uniqueness *//* ID Assignment *//* Servant Rentention *//* Request Processing *//* Implicit Activation *//* proprietary servant caching policy *//** The Transient Object Adapter is used for standard RMI-IIOP and Java-IDL ... *//** Connect the given servant to the ORB by allocating a transient object key ... *//** Disconnect the object from this ORB. */// Return the dispatch-only TOA, which can dispatch// request for objects created by any TOA.// The dispatch-only TOA is not used for creating// objrefs, so its codebase can be null (and must// be, since we do not have a servant at this point)/** The Transient Object Adapter (TOA) represents the OA for purely transient ... */// Make the object key template// REVISIT - POA specific// REVISIT - absorb codebase into a policy// Methods required for dispatching requests/** Get the servant for the request given by the parameters. ... */// This is expected to result in an RMI-IIOP NoSuchObjectException.// See bug 4973160./** Return the most derived interface for the given servant and objectId. */// XXX For now, this does nothing.// This will need fixing once we support ORB and thread level policies,// but for now, there is no way to associate policies with the TOA, so// getEffectivePolicy must always return null.// Methods unique to the TOA// Store the objref and get a userkey allocated by the transient// object manager.// Find out the repository ID for this objref.// Create the new objref// Copy the delegate from the new objref to the argument// XXX handle the case of an attempt to connect a local object.// Get the delegate, then ior, then transientKey, then delete servant// servant not found// if we come here Object does not exist// Assume caller is synchronized// also stores "next pointer" in free list// valid=true if this Element contains// a valid servant// Convert the index+counter into an 8-byte (big-endian) key.// prevent double deletion// add this to freeList/* Copyright (c) 2002, Oracle and/or its affiliates. All rights reserved. ... */// We do not use system properties for applets in order to// avoid security exceptions.// XXX This is fully initialized here.  So do we ever want to// generalize this (or perhaps this is the wrong place for this?)// Make sure that we are ready to handle -ORBInitRef.  This is special// due to the need to handle multiple -ORBInitRef args as prefix// parsing.//////////////////////////////////////////////////////////// Public interface defined in DataCollector// public interface from DataCollector that must be defined// in subclasses// Implementation methods needed in subclasses// methods for use by subclasses// All command-line args are of the form "-ORBkey value".// The key is mapped to <prefix>.ORBkey.// Cannot use propertyPrefixes here, since there is no// way to fetch properties by prefix from an Applet.// Special Case:// Convert any applet parameter relative URLs to an// absolute URL based on the Document Root. This is so HTML// URLs can be kept relative which is sometimes useful for// managing the Document Root layout.// Just preserve the original (malformed) value:// the error will be handled later.// Map System properties to ORB properties.// Security bug fix 4278205:// Only allow reading of system properties with ORB prefixes.// Previously a malicious subclass was able to read ANY system property.// Note that other prefixes are fine in other contexts; it is only// system properties that should impose a restriction.// internal implementation// Store name, value in resultProps, with special// treatment of ORBInitRef.  All updates to resultProps// must happen through this method.// Value is <name>=<URL>// For each prefix in prefixes, For each name in propertyNames,// if (prefix is a prefix of name) get value from getProperties and// setProperty (name, value).// Note: do a put even if value is null since just// the presence of the property may be significant.// For each prefix in names, get the corresponding property// value from the callback, and store the name/value pair in// the result.// Map command-line arguments to ORB properties.// This will not throw a SecurityException because this// class was loaded from rt.jar using the bootstrap classloader.// if (ORBInitDebug)// dprint( "ORB properties file " + fileName + " not found: " +// exc) ;// Return only those element of prefixes for which hasCORBAPrefix// is true.// Used to collect properties from various sources./** Create a String[] of all suffixes of property names that ... */// XXX This should go away once we get rid of the port exchange for ORBD// XXX These should move to SPI// XXX This needs an SPI// REVISIT: this should be ProtocolDefault.// Run any pluggable configurators.  This is a lot like// ORBInitializers, only it uses the internal ORB and has// access to all data for parsing.// XXX Log this exception// ignore this for now: a bad user configurator does nothing// determine the ORBD port so that persistent objrefs can be// REVISIT - use exception instead of -1./** This is made somewhat complex because we are currently supporting ... */// BEGIN Legacy// END Legacy// Check for incorrect configuration.// Client and Server side setup.// Set up client side.// Since the user specified a legacy socket factory we need to// use a ContactInfoList that will use the legacy socket factory.// The user specified an explicit ContactInfoListFactory.// Use the default.// Set up server side.// Maybe allocate the Legacy default listener.// If old legacy properties set, or there are no explicit// acceptors then register a default listener.  Type of// default listener depends on presence of legacy socket factory.// Note: this must happen *BEFORE* registering explicit acceptors.// Allocate user listeners./* Legacy: name. */// REVISIT: see ORBD. make factory in TransportDefault.// Note: the createServerSocket and createSocket methods on the// DefaultSocketFactory need to get data from the ORB but// we cannot change the interface.  So set the ORB (if it's ours)// by reflection.// NOTE: If there is no method then it// is not ours - so ignore it.// Register the Dynamic Any factory// No optimization or policy selection here.// Register the ValueFactory instances for ORT// Register an ObjectKeyFactory// register client subcontracts// register server delegates// register local client subcontracts/* Register the server delegate that implements the ancient bootstrap ... */// Register object adapter factories// This is not initialized from ParserTable.// Public accessor methods ========================================================================//Always grow for 1.0//If a "faulty" GIOPVersion is passed, it's going to return 0;//public void setPersistentServerPort(int sp)//{//persistentServerPort = sp;//persistentPortInitialized = true;/** Set the persistent-server-id of this server. This id is the same ... *///public void setPersistentServerId(int id)//persistentServerId = id;//persistentServerIdInitialized = true;/** Return the persistent-server-id of this server. This id is the same ... *//** Get the prefered code sets for connections. Should the client send the code set service context on every ... */// Methods for constructing and initializing this object ===========================================/* Copyright (c) 2002, 2017, Oracle and/or its affiliates. All rights reserved. ... *//** The JavaIDL ORB implementation. */// pure java orb, caching the servant IOR per ORB// Vector holding deferred Requests// XXX Should we move invocation tracking to the first level server dispatcher?// ORB.shutdown(true).// This map is caching TypeCodes created for a certain class (key)// and is used in Util.writeAny()// Cache to hold ValueFactories (Helper classes) keyed on repository ids// thread local variable to store the current ORB version.// default ORB version is the version of ORB with correct Rep-id// changes// Needed here to implement connect/disconnect// Needed here for set_delegate// The interceptor handler, which provides portable interceptor services for// subcontracts and object adapters.// All access to resolver, localResolver, and urlOperation must be protected using// resolverLock.  Do not hold the ORBImpl lock while accessing// resolver, or deadlocks may occur.// Note that we now have separate locks for each resolver type.  This is due// to bug 6980681 and 6238477, which was caused by a deadlock while resolving a// corbaname: URL that contained a reference to the same ORB as the// ORB making the call to string_to_object.  This caused a deadlock between the// client thread holding the single lock for access to the urlOperation,// and the server thread handling the client is_a request waiting on the// same lock to access the localResolver.// Used for resolver_initial_references and list_initial_services// Used for register_initial_references// Converts strings to object references for resolvers and string_to_object// resolverLock must be used for all access to either resolver or// localResolver, since it is possible for the resolver to indirectly// refer to the localResolver.  Also used to protect access to// insNamingDelegate.// Methods that are synchronized MUST stay synchronized.// Methods that are NOT synchronized must stay that way to avoid deadlock.// checkShutDownState - lock on different object - and normalize usage.// starting/FinishDispatch and Shutdown/** Create a new ORB. Should be followed by the appropriate ... */// All initialization is done through set_parameters().// preInit initializes all non-pluggable ORB data that is independent// of the property parsing.// Before ORBConfiguration we need to set a PINoOpHandlerImpl,// because PersisentServer Initialization inside configurator will// invoke orb.resolve_initial_references( ) which will result in a// check on piHandler to invoke Interceptors. We do not want any// Interceptors to be invoked before the complete ORB initialization.// piHandler will be replaced by a real PIHandler implementation at the// end of this method.// This is the unique id of this server (JVM). Multiple incarnations// of this server will get different ids.// Compute transientServerId = milliseconds since Jan 1, 1970// Note: transientServerId will wrap in about 2^32 / 86400000 = 49.7 days.// If two ORBS are started at the same time then there is a possibility// of having the same transientServerId. This may result in collision// and may be a problem in ior.isLocal() check to see if the object// belongs to the current ORB. This problem is taken care of by checking// to see if the IOR port matches ORB server port in legacyIsLocalServerPort()// XXX need to move server ID to a string for CORBA 3.0.  At that point,// make this more unique (possibly use java.rmi.server.UID).// set default to version of the ORB with correct Rep-ids// If there is a public boolean data member in this class// named token + "DebugFlag", set it to true.// ignore it XXX log this as info// Class that defines a parser that gets the name of the// ORBConfigurator class.// The default here is the ORBConfiguratorImpl that we define,// but this can be replaced.// First, create the standard ORB config data.// This must be initialized before the ORBConfigurator// is executed.// Set the debug flags early so they can be used by other// parts of the initialization.// REVISIT: this should go away after more transport init cleanup// and going to ORT based ORBD.// Create a parser to get the configured ORBConfigurator.// Finally, run the configurator.  Note that the default implementation allows// other configurators with their own parsers to run,// using the same DataCollector.// Last of all, create the PIHandler and run the ORB initializers.// Initialize the thread manager pool and byte buffer pool// so they may be initialized & accessed without synchronization/** Get a Current pseudo-object. ... *//* _REVISIT_ ... *//** Create an NVList ... *//** Create an NVList corresponding to an OperationDef ... *//** Create a NamedValue ... *//** Create an ExceptionList ... *//** Create a ContextList ... *//** Get the default Context object ... *//** Create an Environment ... */// Invoke the send_oneway on each new Request/** Send multiple dynamic requests asynchronously. ... */// add the new Requests to pending dynamic Requests// Invoke the send_deferred on each new Request/** Find out if any of the deferred invocations have a response yet. */// poll on each pending request/** Get the next request that has gotten a response. ... */// check if there already is a response// get the response for this successfully polled Request// wait for a response// reinitialize the response flag/** Notify response to ORB for get_next_response *//** Convert an object ref to a string. ... */// Handle the null objref case// Throw MARSHAL instead if this is a LOCAL_OBJECT_NOT_ALLOWED error.// Not a local object problem: just rethrow the exception.// Do not wrap and log this, since it was already logged at its// point of origin./** Convert a stringified object reference to the object it represents. ... */// pure java orb support, moved this method from FVDCodeBaseImpl.// Note that we connect this if we have not already done so.// i.e. We are already connected to it/** Get the TypeCode for a primitive type. ... *//** Create a TypeCode for a structure. ... *//** Create a TypeCode for a union. ... *//** Create a TypeCode for an enum. ... *//** Create a TypeCode for an alias. ... *//** Create a TypeCode for an exception. ... *//** Create a TypeCode for an interface. ... *//** Create a TypeCode for a string. ... *//** Create a TypeCode for a wide string. ... *//** Create a TypeCode for a sequence. ... *//** Create a recursive TypeCode in a sequence. ... *//** Create a TypeCode for an array. ... *//** Create a new Any ... */// TypeCodeFactory interface methods.// Keeping track of type codes by repository id.// Keeping a cache of TypeCodes associated with the class// they got created from in Util.writeAny().// Store only one TypeCode per class./** Get a list of the initially available CORBA services. ... *//** Resolve the stringified reference of one of the initially ... *//** If this operation is called with an id, <code>"Y"</code>, and an ... */// Make all remote object references available for INS.// This is to avoid deadlock: don't allow a thread that is// processing a request to call shutdown( true ), because// the shutdown would block waiting for the request to complete,// while the request would block waiting for shutdown to complete.// Avoid more than one thread performing shutdown at a time.// At this point, the ORB status is certainly STATUS_SHUTTING_DOWN.// If wait is true, another thread already called shutdown( true ),// and so we wait for completion// NOP: just loop and wait until state is changed// perform the actual shutdown// Cause all ObjectAdapaterFactories to clean up all of their internal state, which// may include activated objects that have associated state and callbacks that must// complete in order to shutdown.  This will cause new request to be rejected.// Note that the caller must hold the ORBImpl lock./** formal/99-10-07 p 159: "If destroy is called on an ORB that has ... *//** Registers a value factory for a particular repository ID. ... *//** Unregisters a value factory for a particular repository ID. ... *//** Finds and returns a value factory for the given repository ID. ... *//** The bad server id handler is used by the Locator to ... *//** This is the implementation of the public API used to connect ... */// ORBServerId is specified then use that value// XXX All of the isLocalXXX checking needs to be revisited.// First of all, all three of these methods are called from// only one place in impl.ior.IORImpl.  Second, we have problems// both with multi-homed hosts and with multi-profile IORs.// A possible strategy: like the LocalClientRequestDispatcher, we need// to determine this more abstractly at the ContactInfo level.// This level should probably just get the CorbaContactInfoList from// the IOR, then iterator over ContactInfo.  If any ContactInfo is// local, the IOR is local, and we can pick one to create the// LocalClientRequestDispatcher as well.  Bottom line: this code needs to move.// XXX What about multi-homed host?// XXX isTransient info should be stored in subcontract registry/** *********************************************************************** ... *//* keeping a copy of the getLocalHostName so that it can only be called ... *//** **************************************************************************** ... *//** This method always returns false because the ORB never needs the ... *//** This method does nothing. It is not required by the spec to do anything! */// pept.broker.Broker// This is a new call - not a retry.// Reset retry so recursive calls will get a new info object.// 6763340: don't pop if this is a retry!/** Set the resolver used in this ORB.  This resolver will be used for list_initial_services ... *//** Get the resolver used in this ORB.  This resolver will be used for list_initial_services ... *//** Set the LocalResolver used in this ORB.  This LocalResolver is used for ... *//** Get the LocalResolver used in this ORB.  This LocalResolver is used for ... *//** Set the operation used in string_to_object calls.  The Operation must expect a ... *//** Get the operation used in string_to_object calls.  The Operation must expect a ... */// Class ORBImpl/// Helper class for a Synchronization Variable// Synchronization Variable// set Flag to true// get value// reset Flag to true/* The restricted singleton ORB implementation. ... */// This is used to support read_Object.// orbos 98-01-18: Objects By Value -- begin/* Not strictly needed for TypeCode factory duty but these seem ... *//* Things that aren't allowed. */// To enable read_Object./** Return the service context registry *//** Get the transient server ID *//** Return the bootstrap naming port specified in the ORBInitialPort param. *//** Return the bootstrap naming host specified in the ORBInitialHost param. *//* Things from corba.ORB. */// Always use our latest ORB version (latest fixes, etc)// NOTE: REMOVE THIS METHOD ONCE WE HAVE A ORT BASED ORBD// The Comparable interface says that this// method throws a ClassCastException if the// given object's type prevents it from being// compared./** Return the property name or prefix for which this action ... *//** Return whether this action is for an exact match or a prefix ... *//** Return the field name in an object that is set with the result *//** Apply this action to props and return the result. *//** Initialize the parser data for the standard ORB parser.  This is used both ... */// REVISIT: The test data gets put into a Properties object where// order is not guaranteed.  Thus the above array is in reverse.// propertyName,// operation,// fieldName, defaultValue,// testValue, testData (string or Pair[])// Where did this come from?//ParserDataFactory.make( ORBConstants.INITIAL_PORT_PROPERTY,//OperationFactory.booleanAction(),//"ORBInitialPortInitialized", Boolean.FALSE,//Boolean.TRUE, "27314" ),// NOTE: We are putting SERVER_HOST_NAME configuration info into// DataCollectorBase to avoid a security hole.  However, that forces// us to also set LISTEN_ON_ALL_INTERFACES at the same time.// This all needs to be cleaned up for two reasons: to get configuration// out of DataCollectorBase and to correctly support multihoming.// REVISIT after switch// ParserDataFactory.make( ORBConstants.INITIAL_SERVICES_PROPERTY,// OperationFactory.URLAction(),// "servicesURL", null,// testServicesURL, testServicesString ),// ParserDataFactory.make( ORBConstants.DEFAULT_INIT_REF_PROPERTY,// OperationFactory.stringAction(),// "defaultInitRef", null,// "Fooref", "Fooref" ),// Note that the same property is used to set two different// fields here.  This requires that both entries use the same test// data, or the test will fail.// No default - must be set by user if they are using// legacy socket factory.// Socket/Channel control// Acceptor:// useNIOSelector == true//   useSelectThreadToWait = true//   useWorkerThreadForEvent = false// else//   useSelectThreadToWait = false//   useWorkerThreadForEvent = true// Connection:// For security reasons avoid creating an instance if// this socket factory class is not one that would fail// the class cast anyway.// ClassNotFoundException, IllegalAccessException,// InstantiationException, SecurityException or// ClassCastException// For security reasons avoid creating an instance// if this class is one that would fail the class cast// to ORBInitializer anyway.// Now that we have a class object, instantiate one and// remember it:// Unwrap the exception, as we don't care exc here// REVISIT - this is a cut and paste modification of makeROIOperation.// Object is String[] of length 2./** For each String s that matches the prefix given by getPropertyName(), ... */// Find all keys in props that start with propertyName// Convert the list into an array of the proper type.// An Object[] as a result does NOT work.  Also report// any errors carefully, as errors here or in parsers that// use this Operation often show up at ORB.init().// this chains the collision list of table "map"// this chains the collision list of table "rmap"// size must be power of 2//System.out.println("using new cache table");// now rehash the entries into the new table// these are the "supplemental hash function" copied from// java.util.HashMap, supposed to be "critical"// if we get here we are trying to put in the same key/val pair// this is a no-op, so we just return// this means the key is not present in our table// then it shouldnt be present in our reverse table either/** Utility for managing mappings from densely allocated integer ... *//** If key >= 0, return the value bound to key, or null if none. ... *//** If key >= 0, bind value to the key. ... *//** A convenience class for retrieving the string value of a system ... *//** Constructor that takes the name of the system property whose ... *//** Constructor that takes the name of the system property and the default ... *//** Determines the string value of the system property whose ... *//** Writes each input byte as a 2 byte hexidecimal output pair making it ... *//** Creates a new HexOutputStream. ... *//** Writes a byte. Will block until the byte is actually ... *//** Get the ObjectStreamClass that describes the fields in the stream. *//** All the Keywords that will be used in Logging Messages for CORBA need to ... *//** * Keywords for Lifecycle Loggers. ... *//** * Keywords for Naming Read Loggers. *//** * Keywords for Naming Update Loggers. *//* TAGS ... */// All NEO service contexts must be in the range// NEO_FIRST_SERVICE_CONTEXT to// NEO_FIRST_SERVICE_CONTEXT + NUM_NEO_SERVICE_CONTEXTS - 1// Tagged Components Ids// Used by AS 7 for IIOP failover.// Used by AS 8.1 for Request Partioning// TaggedComponentId for Java serialization tagged component.// Service Context Ids// All Sun policies are allocated using the SUNVMCID, which is also// used for minor codes.  This allows 12 bits of offset, so// the largest legal Sun policy is SUNVMCID.value + 4095.// These are the subcontract IDs for various qualities of// service/implementation.// Persistent SCIDs have the second bit as 1.// SCIDs less than FIRST_POA_SCID are JavaIDL SCIDs.// Constants for ORB properties **************************************************************// All ORB properties must follow the following rules:// 1. Property names must start with either//    ORG_OMG_CORBA_PREFIX or SUN_PREFIX.// 2. Property names must have unique suffixes after the last ".".// 3. Property names must have "ORB" as the first 3 letters//    in their suffix.// 4. proprietary property names should have a subsystem//    where appropriate after the prefix.// org.omg.CORBA properties must be defined by OMG standards// The well known org.omg.CORBA.ORBClass and// org.omg.CORBA.ORBSingletonClass are not included here// since they occur in org.omg.CORBA.ORB.// All of our proprietary properties must start with com.sun.CORBA// general properties// This property is provided for backward compatibility reasons// Property for setting use of repository Ids during serialization.// NOTE: This is an internal property.  It should never be set by// a user.  That is the reason it has spaces in its name - to make it// harder to use.// giop related properties - default settings in decimal form//Growing//Streaming// object key used for target addressing// iop profile used for target addressing// ior used for target addressing// accept all target addressing dispositions (default)// CORBA formal 00-11-03 sections 15.4.2.2, 15.4.3.2, 15.4.6.2// state that the GIOP 1.2 RequestMessage, ReplyMessage, and// LocateReply message bodies must begin on 8 byte boundaries.// The GIOP 1.2 fragments must be divisible by 8.  We generalize this// to GIOP 1.1 fragments, as well.// connection management properties// Legacy:// Request partitioning maximum and minimum thread pool id constants.// transport read tcp timeout property, colon separated property// with syntax <initial time to wait:max read giop header time to// wait: max read message time to wait:backoff factor>// initial time to wait in milliseconds if a transport// tcp read returns 0 bytes// max time to spend in cumulative waits in milliseconds// if a transport tcp read returns 0 bytes// if a transport tcp read of GIOP header returns 0 bytes// A backoff percentage used to compute the next amount of time to// wait on a subsequent transport tcp read of 0 bytes// "Socket" | "SocketChannel"// Note: Connections accepted by SocketChannel will be SocketChannel.// Applicable if using SocketChannel and using select thread.// Applicable on client-side. "Socket" | "SocketChannel"// Applicable if using SocketChannel and using select thread// Used to disable the use of direct byte buffers.  This enables much easier// debugging, because the contents of a direct byte buffer cannot be// viewed in most (all?) debuggers.// POA related policies// Server Properties; e.g. when properties passed to ORB activated// servers// This one is an exception, but it may be externally visible// Necessary for package renaming to work correctly// Property for enabling ORB's use of Java serialization.// Constants for ORB prefixes **************************************************************// Constants for NameService properties ************************************// http://www.omg.org/cgi-bin/doc?ptc/00-08-07 [ Section 13.6.7.3 ]// defines the default GIOP minor version to be 0.// Constants for INS properties ********************************************// GIOP Version number for validation of INS URL format addresses// Subcontract's differentiation using the TRANSIENT and PERSISTENT// Name Service Property.// Constants for ORBD properties ****************************************************************// These properties are never passed on ORB init: they are only passed to ORBD.// If RI is starting the NameService then they would indicate that by// passing the RI flag. That would start a Persistent Port to listen to// INS request.//***************** Constants for Logging ****************// Constants for initial references *************************************************************// A large Number to make sure that other ServerIds doesn't collide// with NameServer Persistent Server Id// New for Portable Interceptors// Constants for ORBD DB ***********************************************************************// Constants for ThreadPool ********************************************************************// Default value for when inactive threads in the pool can stop running (ms)// Default name of the threadpool// Default name of the workqueue// Constants for minor code bases **************************************************************// This is the value that pre-Merlin Sun ORBs incorrectly used.  We preserve this// here for backwards compatibility, but note that the current ORB must never// create a BAD_PARAM system exception with this minor code.// Code Set related *******************************************************// If we don't always send the code set context, there's a possibility// of failure when fragments of a smaller request are interleved with// those of a first request with other large service contexts.// Use byte order markers in streams when applicable?  This won't apply to// GIOP 1.1 due to limitations in the CDR encoding.// Use byte order markers in encapsulations when applicable?// The CHAR_CODESETS and WCHAR_CODESETS allow the user to override the default// connection code sets.  The value should be a comma separated list of OSF// registry numbers.  The first number in the list will be the native code// Number can be specified as hex if preceded by 0x, otherwise they are// interpreted as decimal.// Code sets that we accept currently (see core/OSFCodeSetRegistry):// char/string:// ISO8859-1 (Latin-1)     0x00010001// ISO646 (ASCII)          0x00010020// UTF-8                   0x05010001// wchar/string:// UTF-16                  0x00010109// UCS-2                   0x00010100// Note:  The ORB will let you assign any of the above values to// either of the following properties, but the above assignments// are the only ones that won't get you into trouble.// Constants to make stream format version code easier to read/* Copyright (c) 2000, 2016, Oracle and/or its affiliates. All rights reserved. ... *//** Handy class full of static functions that don't belong in util.Utility for pure ORB reasons. *//** Static method for writing a CORBA standard exception to an Any. ... *//** Return default ValueHandler *//** Returns true if it was accurately determined that the remote ORB is ... *//** Unmarshal a byte array to an integer. ... *//** Marshal an integer to a byte array. ... *//** Converts an Ascii Character into Hexadecimal digit */// method moved from util.Utility/** Static method for writing a CORBA standard exception to a stream. ... *//** Static method for reading a CORBA standard exception from a stream. ... *//** Get the class name corresponding to a particular repository Id. ... *//** Return true if this repositoryId is a SystemException. ... */// Is Java serialization enabled?// Check the JavaSerializationComponent (tagged component)// in the IIOPProfile. If present, the peer ORB's GIOP is capable// of using Java serialization instead of CDR serialization.// In such a case, use Java serialization, iff the java serialization// versions match.// throw error?// Since encodingVersion is <= 0 (CDR_ENC_VERSION).// default/** Get the repository id corresponding to a particular class. ... */// construct repositoryId -> className hashtable// SystemExceptions from OMG Transactions Service Spec// from portability RTF 98-07-01.txt// from orbrev/00-09-01 (CORBA 2.4 Draft Specification)// Exception types introduced between CORBA 2.4 and 3.0// Exception types introduced in CORBA 3.0// construct className -> repositoryId hashtable/** Parse a version string such as "1.1.6" or "jdk1.2fcs" into ... *///find the maximum span of the string "n.n.n..." where n is an integer//no digit found//cases like "n." or "n..m"//convert equivalent to "n.0" or "n.0.m"/** Compare two version arrays. ... *///v1 is longer or greater than v2/** Compare two version strings. ... */// Note that this must end in . in order to be renamed correctly.// Return a compressed representation of the thread name.  This is particularly// useful on the server side, where there are many SelectReaderThreads, and// we need a short unambiguous name for such threads.// This depends on the formatting in SelectReaderThread and CorbaConnectionImpl.// Pattern for SelectReaderThreads:// SelectReaderThread CorbaConnectionImpl[ <host> <post> <state>]// Any other pattern in the Thread's name is just returned.// print the stack trace, ommitting the zeroth element, which is// always this method.// Implements all dprint calls in this package./** Throws the CORBA equivalent of a java.io.NotSerializableException ... *//** Returns the maximum stream format version supported by our ... *//** This method is used to create untyped object references. *//** This method obtains an IOR from a CORBA object reference. ... */// This is our code, but the ContactInfoList is not a// CorbaContactInfoList.  This should not happen, because// we are in the CORBA application of the DCSA framework.// This is a coding error, and thus an INTERNAL exception// should be thrown.// XXX needs minor code// obj is implemented by a foreign ORB, because the Delegate is not a// ClientDelegate.// XXX this case could be handled by marshalling and// unmarshalling.  However, object_to_string cannot be used// here, as it is implemented with getIOR.  Note that this// will require access to an ORB, so that we can create streams// as needed.  The ORB is available simply as io._orb()./** Obtains an IOR for the object reference obj, first connecting it to ... */// Letters and $ _// ` ^// -// = ~ + | < >// !@#%&*;':",./?// ( [ {// ) ] }// Returns a String which looks similar to:// PermissionCollection java.security.Permissions@1053693 ...// (java.io.FilePermission <<ALL FILES>> ....)// (java.io.FilePermission /export0/sunwappserv/lib/- ...)// ... other permissions ...// Domain ProtectionDomain  (file:/export0/sunwappserv/lib-)// java.security.Permissions@141fedb (// (java.io.FilePermission <<ALL FILES>> ...)// (java.io.FilePermission /var/tmp//- ...)// Don't need to add 'Protection Domain' string, it's// in ProtectionDomain.toString() already./* Copyright (c) 2000, 2014, Oracle and/or its affiliates. All rights reserved. ... */// for computing the structural UID// maintained here for backward compatability with JDK 1.3, where// writeObject method was not being checked at all, so there is// no need to lookup the ObjectStreamClass// for non-serializable/proxy classes// to maintain same suid as the JDK 1.3, we pick// up suid only for classes with private,static,final// declarations, and compute it for all others//} catch (IllegalAccessException ex) {//     suid = _computeSerialVersionUID(cl);//In the old case, for the caller class, the write Method wasn't considered// for rep-id calculations correctly, but for parent classes it was taken// into account.  That is the reason there is the klude of getting the write// Object method in there// need to find the java replacement for hasStaticInitializer// use java.io.ObjectStream's hasStaticInitializer method// private static native boolean hasStaticInitializer(Class cl);//if (!Modifier.isPrivate(mods) ||//    Modifier.isStatic(mods)) {//    method = null;// Since it is alright if methodName does not exist,// no need to do anything special here./* Copyright (c) 2001, 2014, Oracle and/or its affiliates. All rights reserved. ... *//** This is duplicated here to preserve the JDK 1.3.1FCS behavior ... *//** A ObjectStreamClass_1_3_1 describes a class that can be serialized to a stream ... *//** Return a string describing this ObjectStreamClass_1_3_1. *//* Create a new ObjectStreamClass_1_3_1 from a loaded class. ... */// already initialized// serial bug 7; the serialPersistentFields were not// being read and stored as Accessible bit was not set// serial bug 7; need to find if the field is of type// java.io.ObjectStreamField/* Thrown if a field serialPersistentField exists ... */// type and cache it in the ObjectStreamClass_1_3_1 for that field.// reflField.setAccessible(true);// get rid of native code// suid = getSerialVersionUIDField(cl);/* Cache lookup of writeObject and readObject for ... */// Method must be private and non-static/* Look for the readObject method ... */// Compute the structural UID.  This must be done after the// calculation for writeObject.  Fixed 4/20/2000, eea1// SerialBug 2: to have correct value in RepId/* Create an empty ObjectStreamClass_1_3_1 for a class about to be read. ... *//* Return the ObjectStreamClass_1_3_1 of the local class this one is based on. */// Field[] field = ObjectStreamClass_1_3_1.getDeclaredFields(cl);// Must make sure that the Field array we allocate// below is exactly the right size.  Bug fix for// 4397133.//Serial 6//if (Modifier.isTransient(m) || Modifier.isStatic(m))// spec reference 00-01-06.pdf, 1.3.5.6, states non-static// non-transient, public fields are mapped to Java IDL.// Here's the quote from the first paragraph:// Java non-static non-transient public fields are mapped to// OMG IDL public data members, and other Java fields are// not mapped.// if (Modifier.isTransient(m) || Modifier.isStatic(m))//     continue;/* insertDescriptorFor a Class -> ObjectStreamClass_1_3_1 mapping. *//* True if this class has/had a writeObject method *//* ObjectStreamClass_1_3_1 that this one was built from. *//* Get the private static final field for serial version UID */// private static native long getSerialVersionUIDField(Class cl);/* Entries held in the Cache of known ObjectStreamClass_1_3_1 objects. ... *//** This is duplicated here somewhat in haste since we can't ... *//* Returns the Field ID ... */// the next 3 things are RMI-IIOP specific, it can be easily// private static native long getFieldIDNative(Class c, String fieldName, String fieldSig);/** If arr1 and arr2 are both arrays of the same component type, ... *///=================================================================================================// Implementation// array of object/** Expected patterns: ... *//** Delegates to the current RepositoryId implementation in ... */// RepositoryIdFactory methods// RepositoryIdUtility methods// RepositoryIdInterface methods// Constructor used for factory/utility cases// Constructor used by getIdFromString.  All non-static// RepositoryId methods will use the provided delegate./** Returns the latest version RepositoryIdStrings instance *//** Returns the latest version RepositoryIdUtility instance *//* Copyright (c) 2000, 2002, Oracle and/or its affiliates. All rights reserved. ... *//** Methods on specific instances of RepositoryId.  Hides ... *//** Factory methods for creating various repository ID strings ... *//** Utility methods for working with repository IDs. */// These are currently the same in both RepositoryId and// RepositoryId_1_3, but provide the constants again here// to eliminate awkardness when using this interface.// Determine how many (if any) repository IDs follow the value// tag.// Accessors for precomputed value tags// We implement a Stack here instead of using java.util.Stack because// java.util.Stack is thread-safe, negatively impacting performance.// The stack for RequestInfo objects.// Tests if this stack is empty.// Looks at the object at the top of this stack without removing it// Removes the object at the top of this stack and returns that// object as the value of this function.// Pushes an item onto the top of the stack/* File: ConditionVariable.java ... *//** This class is designed for fans of POSIX pthreads programming. ... *//** The mutex * *//** Create a new CondVar that relies on the given mutual ... *//** Wait for notification. This operation at least momentarily ... */// Must ignore interrupt on re-acquire/** Wait for at most msecs for notification. ... *//** Notify a waiting thread. ... *//** Notify all waiting threads * *//* File: Mutex.java ... *//** A simple non-reentrant mutual exclusion lock. ... *//** The lock status * *//** A simple reentrant mutual exclusion lock. ... *//** The thread holding the lock * *//** number of times thread has acquired the lock * */// This can't happen, but make sure anyway/* File: Sync.java ... *//** Main interface for locks, gates, and conditions. ... *//** Wait (possibly forever) until successful passage. ... *//** Wait at most msecs to pass; report whether passed. ... *//** Potentially enable others to pass. ... *//** One second, in milliseconds; convenient as a time-out value * *//** One minute, in milliseconds; convenient as a time-out value * *//** One hour, in milliseconds; convenient as a time-out value * *//** One day, in milliseconds; convenient as a time-out value * *//** One week, in milliseconds; convenient as a time-out value * *//** One year in milliseconds; convenient as a time-out value  * */// Not that it matters, but there is some variation across// standard sources about value at msec precision.// The value used is the same as in java.util.GregorianCalendar/** One century in milliseconds; convenient as a time-out value * *//** Method to acquire a Sync without ever throwing an ... */// Return just the name of the class, not the full qualified name./** Encodes the state transition function for a finite state machine. ... */// An action that does nothing at all.// optimize FSM here if desired.  For example,// we could choose different strategies for implementing// the state transition function based on the distribution// of values for states and input labels.// This method is present only for debugging.// innerDoIt does the actual transition.// Use the currentState defaults if// set, otherwise use the state engine default.// The state engine default never changes the state// Locals needed for performing the state transition, once we determine// the required transition.// Do until no guard has deferred.// clear this after each deferral!// Search for a guard that is not DISABLED.// All DISABLED means use defaults.// ga has the next state and action.// Perform the state transition.  Pre and post actions are only// performed if the state changes (see UML hidden transitions).// Note that action may be null in a transition, which simply// means that no action is needed.  Note that action.doIt may// throw an exception, in which case the exception is// propagated after making sure that the transition is properly// completed.// end of StateEngineImpl.java// Set<Node>/* Set<Node> *//* Map<Node,NodeData> *//** ******************************************************************************** *//** ********** AbstractSet implementation ****************************************** */// Required for AbstractSet// obj must be a Node// Clear every node// This visits every node in the graph exactly once.  A// visitor is allowed to modify the graph during the// traversal.// Repeat the traversal until every node has been visited.  Since// it takes one pass to determine whether or not each node has// already been visited, this loop always runs at least once.// Copy entries to array to avoid concurrent modification// problem with iterator if the visitor is updating the graph.// Visit each node in the graph that has not already been visited.// If any node is visited in this pass, we must run at least one more// pass.// Iterator<Node>// Make sure the child is in the graph so it can be// visited later if necessary.// Mark the child as a non-root, since a child is never a root./** Node in a graph. *//** Get all the children of this node. *//** Data about a node in a graph. *//** Return whether this node has been visited in a traversal. ... *//** Return whether this node is a root. */// serial counter useful for debugging// Any time currentThreadCount and/or availableWorkerThreads is updated// or accessed this ThreadPool's WorkQueue must be locked. And, it is// expected that this ThreadPool's WorkQueue is the only object that// updates and accesses these values directly and indirectly though a// call to a method in this ThreadPool. If any call to update or access// those values must synchronized on this ThreadPool's WorkQueue.// Stores the number of available worker threads// Stores the number of threads in the threadpool currently// Minimum number of worker threads created at instantiation of the threadpool// Maximum number of worker threads in the threadpool// Inactivity timeout value for worker threads to exit and stop running// Indicates if the threadpool is bounded or unbounded// Running count of the work items processed// Set the value to 1 so that divide by zero is avoided in// averageWorkCompletionTime()// Running aggregate of the time taken in millis to execute work items// processed by the threads in the threadpool// Name of the ThreadPool// MonitoredObject for ThreadPool// ThreadGroup in which threads should be created/** This constructor is used to create an unbounded threadpool *//** This constructor is used to create an unbounded threadpool ... *//** This constructor is used to create bounded threadpool */// Note that this method should not return until AFTER all threads have died.// Copy to avoid concurrent modification problems.// Setup monitoring for this threadpool// Get root monitored object// Create the threadpool monitoring root// Add the monitored object for the WorkQueue// Package private method to get the monitored object for this// class/** To be called from the workqueue when work is added to the ... */// Thread creation needs to be in a doPrivileged block// if there is a non-null security manager for two reasons:// 1. The creation of a thread in a specific ThreadGroup//    is a privileged operation.  Lack of a doPrivileged//    block here causes an AccessControlException//    (see bug 6268145).// 2. We want to make sure that the permissions associated//    with this thread do NOT include the permissions of//    the current thread that is calling this method.//    This leads to problems in the app server where//    some threads in the ThreadPool randomly get//    bad permissions, leading to unpredictable//    permission errors (see bug 6021011).//    A Java thread contains a stack of call frames,//    one for each method called that has not yet returned.//    Each method comes from a particular class.  The class//    was loaded by a ClassLoader which has an associated//    CodeSource, and this determines the Permissions//    for all methods in that class.  The current//    Permissions for the thread are the intersection of//    all Permissions for the methods on the stack.//    This is part of the Security Context of the thread.//    When a thread creates a new thread, the new thread//    inherits the security context of the old thread.//    This is bad in a ThreadPool, because different//    creators of threads may have different security contexts.//    This leads to occasional unpredictable errors when//    a thread is re-used in a different security context.//    Avoiding this problem is simple: just do the thread//    creation in a doPrivileged block.  This sets the//    inherited security context to that of the code source//    for the ORB code itself, which contains all permissions//    in either Java SE or Java EE.// The thread must be set to a daemon thread so the// VM can exit if the only threads left are PooledThreads// or other daemons.  We don't want to rely on the// calling thread always being a daemon.// Note that no exception is possible here since we// are inside the doPrivileged block./** To be called from the workqueue to create worker threads when none ... */// If we get here, we need to create a thread.// Decrementing the count of current worker threads.// But, it will be increased in the finally block./** This method will return the number of WorkQueues serviced by the threadpool. *//** This method will decrement the number of available threads ... *//** This method will increment the number of available threads ... */// unique id for the thread// name seen by Thread.getName()// set currentWork to null so that the work item can be// garbage collected without waiting for the next work item.// This should not be possible// End of WorkerThread class// See bugs 4916766 and 4936203// We intend to create new threads in a reliable thread group.// This avoids problems if the application/applet// creates a thread group, makes JavaIDL calls which create a new// connection and ReaderThread, and then destroys the thread// group. If our ReaderThreads were to be part of such destroyed thread// group then it might get killed and cause other invoking threads// sharing the same connection to get a non-restartable// CommunicationFailure. We'd like to avoid that.// Our solution is to create all of our threads in the highest thread// group that we have access to, given our own security clearance.// try to get a thread group that's as high in the threadgroup// parent-child hierarchy, as we can get to.// this will prevent an ORB thread created during applet-init from// being killed when an applet dies.// Discontinue going higher on a security exception.// something wrong, we go back to the original code/** This method will return an instance of the threadpool given a threadpoolId, ... *//** This method will return an instance of the threadpool given a numeric threadpoolId. ... *//** This method is used to return the numeric id of the threadpool, given a String ... *//** Return a String Id for a numericId of a threadpool managed by the threadpool ... *//** Returns the first instance of ThreadPool in the ThreadPoolManager *//** Return an instance of ThreadPoolChooser based on the componentId that was ... *///FIXME: This method is not used, but should be fixed once//nio select starts working and we start using ThreadPoolChooser/** Return an instance of ThreadPoolChooser based on the componentIndex that was ... *//** Sets a ThreadPoolChooser for a particular componentId in the ThreadPoolManager. This ... *//** Gets the numeric index associated with the componentId specified for a ... */// Initialized to 1 to avoid divide by zero in averageTimeInQueue()// Name of the work queue// MonitoredObject for work queue// Setup monitoring for this workqueue/** Returns the total number of Work items added to the Queue. ... *//** Returns the total number of Work items in the Queue to be processed ... *//* Copyright (c) 2006, Oracle and/or its affiliates. All rights reserved. ... *//** This class controls the use of dynamic proxies. ... *///private static final long serialVersionUID = -8343910153355041693L;/** Creates a new DynamicAccessPermission with the specified name. ... *//** Creates a new DynamicAccessPermission object with the specified name. ... */// true if copyObjects call needs for args// true if copyObject call needs for result// Assume that cls is not Remote, !isAnyClass(cls), and// !org.omg.CORBA.Object.class.isAssignableFrom( cls ).// Then return whether cls is an RMI-IIOP abstract interface.// Either cls is an interface that extends IDLEntity, or else// cls does not extend java.rmi.Remote and all of its methods// throw RemoteException.// Check that all methods (other than those declared in java.lang.Object)// throw an exception that is a subclass of RemoteException.// Check that some exceptionType is a subclass of RemoteException// For anything else, just read it as a value type.// This could be further optimized to avoid// copying if argTypes contains at most one// immutable object type.// XXX Do we need _get_codebase?// The actual DynamicProxy for this stub.// XXX Should probably only allow this once.// XXX log this/** Return true iff cls is an exception class that is ... *//** Write the exception ex to os.  ex must be assignment ... *//** Read the exception contained in the InputStream ... *//* Copyright (c) 2003, 2010, Oracle and/or its affiliates. All rights reserved. ... *////////////////////////////////////////////////////////////////////////////////// ExceptionRW interface and implementations.// Used to read and write exceptions.// read and ignore!/* The following check is not performed ... */// This may occur when rws has not been fully// populated, in which case the search should just fail.// Note that the exception ID is present in both ae// and in the input stream from ae.  The exception// reader must actually read the exception ID from// This is here just for the dynamicrmiiiop test/* Copyright (c) 2003, 2013, Oracle and/or its affiliates. All rights reserved. ... *//** Bidirectional translator between RMI-IIOP interface methods and ... */// From CORBA Spec, Table 6 Keywords.// Note that since all IDL identifiers are case// insensitive, java identifier comparisons to these// will be case insensitive also.// used to mangle java inner class names// used to form IDL array type names// used to mangling java identifiers that have a leading underscore// separator used between types in a mangled overloaded method name// string appended to attribute if it clashes with a method name// strings prepended to the attribute names in order to form their// IDL names.// Convert keyword to all caps to ease equality// check.// Instance state// Remote interface for name translation.// Maps used to hold name translations.  These do not need to be// synchronized since the translation is never modified after/** Return an IDLNameTranslator for the given interface. ... *//** Return an IDLNameTranslator for the given interfacex. ... */// Requirements for this method:// 1. cls must be an exception but not a RemoteException.// 2. If cls has an IDL keyword name, an underscore is prepended (1.3.2.2).// 3. If cls jas a leading underscore, J is prepended (1.3.2.3).// 4. If cls has an illegal IDL ident char, it is mapped to UXXXX where//    XXXX is the unicode value in hex of the char (1.3.2.4).// 5. double underscore for inner class (1.3.2.5).// 6. The ID is "IDL:" + name with / separators + ":1.0"./** Initialize an IDLNameTranslator for the given interface. ... */// holds method info, keyed by method// Handle the case of a non-public interface!// Take an initial pass through all the methods and create some// information that will be used to track the IDL name// transformation.// Perform case sensitivity test first.  This applies to all// method names AND attributes.  Compare each method name and// attribute to all other method names and attributes.  If names// differ only in case, apply mangling as defined in section 1.3.2.7// of Java2IDL spec.  Note that we compare using the original names.// Now check for overloaded method names and apply 1.3.2.6.// Now mangle any properties that clash with method names.// Ensure that no mapped method names clash with mapped name// of container(1.3.2.9).  This is a case insensitive comparison.// Populate name translation maps.// Final check to see if there are any clashes after all the// manglings have been applied.  If so, this is treated as an// invalid interface.  Currently, we do a CASE-SENSITIVE// comparison since that matches the rmic behavior.// @@@ Shouldn't this be a case-insensitive check?// @@@ I18N/** Perform all necessary stand-alone identifier mangling operations ... */// Apply leading underscore test (1.3.2.3)// This should be done before IDL Keyword clash test, since clashing// IDL keywords are mangled by adding a leading underscore.// Apply IDL keyword clash test (1.3.2.2).// This is not needed for attributes since when the full property// name is composed it cannot clash with an IDL keyword.// (Also, rmic doesn't do it.)// Replace illegal IDL identifier characters (1.3.2.4)// for all method names and attributes.// isIDLKeyword and mangleIDLKeywordClash are exposed here so that// IDLType can use them.// XXX refactoring needed:// 1. Split off isIDLKeywork and mangleIDLKeywordClash (and possibly//    other methods) into a utility class.// 2. Move all of classToIDLType to a constructor inside IDLType.// The problem appears to be that we need all of the code that// performs various checks for name problems and the corresponding// fixes into a utility class.  Then we need to see what other// refactorings present themselves./** Checks whether a java identifier clashes with an ... *//** Checks whether a java identifier starts with an underscore. ... *//** Implements Section 1.3.2.4 of Java2IDL Mapping. ... *//** Implements mangling portion of Section 1.3.2.7 of Java2IDL spec. ... */// There is always at least one trailing underscore, whether or// not the identifier has uppercase letters.// This bit of logic is needed to ensure that we have// an underscore separated list of indices but no// trailing underscores.  Basically, after we have at least// one uppercase letter, we always put an undercore before// printing the next one./** Implements Section 1.3.2.9 of Java2IDL Mapping. Container in this ... *//** Returns Unicode mangling as defined in Section 1.3.2.4 of ... */// 1st char must be alphbetic./** True if character is one of 114 Alphabetic characters as ... */// NOTE that we can't use the java.lang.Character// isUpperCase, isLowerCase, etc. methods since they// include many characters other than the Alphabetic list in// the CORBA spec.  Instead, we test for inclusion in the// Unicode value ranges for the corresponding legal characters.// A - Z// a - z// other letter uppercase, other letter lowercase, which is// the entire upper half of C1 Controls except X and //** True if character is one of 10 Decimal Digits ... *//** Mangle an overloaded method name as defined in Section 1.3.2.6 of ... */// Start by appending the separator string// Calculate array depth, as well as base element type.// Section 1.3.2.5 of Java2IDL spec defines mangling rules for// inner classes.// replace inner class separator with double underscore// Get raw package name.  If there is a package, it// will still have the "." separators and none of the// mangling rules will have been applied.// If this is a generated IDL Entity Type we need to// prepend org_omg_boxedIDL per sections 1.3.5 and 1.3.9// Section 1.3.2.1 and 1.3.2.6 of Java2IDL spec defines// rules for mapping java packages to IDL modules and for// mangling module name portion of type name.  NOTE that// of the individual identifier mangling rules,// only the leading underscore test is done here.// The other two(IDL Keyword, Illegal Unicode chars) are// done in mangleOverloadedMethodName./** Return Class' package name or null if there is no package. */// Try to get package name by introspection.  Some classloaders might// not provide this information, so check for null.// brute force method/** Return portion of class name excluding package name. *//** Internal helper class for tracking information related to each ... */// If this is a property, originalName holds the original// attribute name. Otherwise, it holds the original method name.// If this is a property, mangledName holds the mangled attribute// name. Otherwise, it holds the mangled method name./** Holds information about the OMG IDL mapping of a Java type. */// terminology for OMG IDL type package name// name of element within module// Note that this should probably be makeConcatenatedName( '/', true )// for spec compliance,// but rmic does it this way, so we'll leave this.// The effect is that an overloaded method like// void foo( bar.typedef.Baz )// will get an IDL name of foo__bar_typedef_Baz instead of// foo__bar__typedef_Baz (note the extra _ before typedef).// Here we will check for IDL keyword collisions (see bug 5010332).// This means that the repository ID for// foo.exception.SomeException is// "IDL:foo/_exception/SomeEx:1.0" (note the underscore in front// of the exception module name).// See bug 4989312: we must always add the Ex./** True if this type doesn't have a containing module.  This ... *//** Checked exception containing information about an ... *//* Copyright (c) 2003, 2006, Oracle and/or its affiliates. All rights reserved. ... *//** Utility class for testing RMI/IDL Types as defined in ... *//* rmic -iiop does not correctly implement the clause in 1.3.4.3 ... *//** Validate a class to ensure it conforms to the rules for a ... */// Get all methods, including super-interface methods.// Removed because of bug 4989053// validateDirectInterfaces(c);/** Section 1.2.2 Primitive Types *//** Section 1.2.4 *//** Section 1.2.5 *//** Section 1.2.6 */// Must be a checked exception, not including RemoteException or// its subclasses./** Section 1.2.7 *//** Section 1.2.8 *//** Return true if given method is legal property accessor as defined in ... */// Some final checks that apply to all properties.// Look for a valid corresponding Read property// ignore. this means we didn't find a corresponding get property.// Look for a valid corresponding Is property// ignore. this means we didn't find a corresponding Is property.// ignore. this means we didn't find a corresponding read property.// don't set the first letter to lower-case if the// first two are upper-case/** Return IDL Type name for primitive types as defined in ... *//** Return IDL Type name for special case type mappings as defined in ... *//** Implements 1.2.3 #2 and #4 */// Section 1.2.3, #2// Section 1.2.3, #4// See also bug 4972402// For all exceptions E in exceptions,// (isCheckedException(E) => (isValue(E) || RemoteException.isAssignableFrom( E ) )/** Returns true if the method's throw clause conforms to the exception ... *//** Implements Section 1.2.3, #2. *//** Implements Section 1.2.3, #5. */// Comparison is based on method names only.  First collect// all methods from current interface, eliminating duplicate// names.// Now check each method against list of all unique method// names processed so far./** Implements 1.2.3 #6 *//** Return the stub, which will actually be written to the stream. ... */// This is also used in DynamicStubImpl to implement readResolve.// Create an invocation handler for the methods defined on DynamicStub,// which extends org.omg.CORBA.Object.  This handler delegates all// calls directly to a DynamicStubImpl, which extends// org.omg.CORBA.portable.ObjectImpl.// Create an invocation handler that handles any remote interface// methods.// Create a composite handler that handles the DynamicStub interface// as well as the remote interfaces.// If the method passed to invoke is not from DynamicStub or its superclasses,// it must be from an implemented interface, so we just handle// all of these with the stubMethodHandler.  This used to be// done be adding explicit entries for stubMethodHandler for// each remote interface, but that does not work correctly// for abstract interfaces, since the graph analysis ignores// abstract interfaces in order to compute the type ids// correctly (see PresentationManagerImpl.NodeImpl.getChildren).// Rather than produce more graph traversal code to handle this// problem, we simply use a default.// This also points to a possible optimization: just use explict// checks for the three special classes, rather than a general// table lookup that usually fails.// XXX This creates a dependendcy on the implementation// of the CosNaming service provider./** StateFactory that turns java.rmi.Remote objects to org.omg.CORBA.Object. ... */// XXX log exception at FINE/** Returns the CORBA object for a Remote object. ... */// Not for this StateFactory// Wrong kind of context, so just give up and let another StateFactory// try to satisfy getStateToBind.// XXX log at FINE level?// Wrong sort of object: just return null to allow another StateFactory// to handle this.  This can happen easily because this StateFactory// is specified for the application, not the service context provider.// to handle this call.// ignore RemoteException because stub might have already// been connected// This is necessary because the _orb field is package private in// com.sun.jndi.cosnaming.CNCtx.  This is not an ideal solution.// The best solution for our ORB is to change the CosNaming provider// to use the StubAdapter.  But this has problems as well, because// other vendors may use the CosNaming provider with a different ORB// entirely.// XXX log this exception at FINE level// ignore the exception and return null.// Note that the exception may be because ctx// is not a CosNaming context.// XXX these should probably be WeakHashMaps.////////////////////////////////////////////////////////////////////////////////// PresentationManager interface// At this point, rootSet contains those remote interfaces// that are not related by inheritance, and gr contains// all reachable remote interfaces.// Graph computations// rootSet just contains root here// Use this class and its superclasses (not Object) as initial roots// Expand all nodes into the graph// remove the roots and find roots again// List<String> for the typeids// If the rootSet has more than one element, we must// put the type id of the implementation class first.// Root represents the implementation class here.// Unwrap the actual exception so that it can be wrapped by an// UnknownException or thrown if it is a system exception.// This is expected in the server dispatcher code./** Connect the stub to the orb if necessary. ... */// No IOR, can we get a Tie for this stub?// Is the tie already connected?  If it is, check that it's// connected to the same ORB, otherwise connect it.// Thrown when tie is an ObjectImpl and its delegate is not set.// Thrown when tie is a Servant and its delegate is not set.// Get the delegate for the stub from the tie.// ior is initialized, so convert ior to an object, extract// the delegate, and set it on ourself// this.loader must not be null, or the newProxyInstance call// will fail./** Returns the stub classname for the given interface name. ... */// IDL stubs must always use static factories.// The old code was optimized to try to guess which way to load classes// first.  The real stub class name could either be className or// "org.omg.stub." + className.  We will compute this as follows:// If stubName starts with a "forbidden" package, try the prefixed// version first, otherwise try the non-prefixed version first.// In any case, try both forms if necessary.// log only at FINE level// XXX Is this step necessary, or should the Util.loadClass// algorithm always produce a valid class if the setup is correct?// Does the OMG standard algorithm need to be changed to include// this step?// XXX make this a system exception// XXX log exceptions at FINE level//_REVISIT_ The spec does not specify a loadingContext parameter for//the following call.  Would it be useful to pass one?// Construct the dynamic proxy that implements this stub// using the composite handler/** Invoke the given method with the args and return the result. ... */// create request// marshal arguments// finish invocation// unmarshal result// local branch// Make sure that we can invoke a method from a normally// inaccessible package, as this reflective class must always// be able to invoke a non-public method.// mex should never be null, as null cannot be thrown// This is not a user thrown exception from the// method call, so don't copy it.  This is either// an error or a reflective invoke exception./** This exception is thrown while reading GIOP 1.2 Request, LocateRequest ... *//** Class BootstrapServerRequestDispatcher handles the requests coming to the ... *//** Dispatch is called by the ORB and will serve get(key) and list() ... */// Get the name of the requested service// Look it up// Write reply value// Marshal the exception thrown// Unknown exception/** Locates the object mentioned in the locate requests, and returns ... *//** Not implemented */// implements com.sun.corba.se.impl.core.ClientRequestDispatcher// so RMI-IIOP Util.isLocal can call ClientRequestDispatcher.useLocalInvocation.// framework.subcontract.Delegate// CORBA_2_3.portable.Delegate// Remember chosen subcontract for invoke and releaseReply.// NOTE: This is necessary since a stream is not available in// releaseReply if there is a client marshaling error or an// error in _invoke.// NOTE: InputStream may be null (e.g., exception request from PI).// instantiate the stub// check if returned object is of correct type// This cannot happen.// dest is the typeId of the interface to compare against.// repositoryIds is the list of typeIds that the stub knows about.// First we look for an answer using local information.// But repositoryIds may not be complete, so it may be necessary to// go to server.// DO NOT clear out internal variables to release memory// This delegate may be pointed-to by other objrefs.// obj._get_delegate() == this due to the argument passing conventions in// portable.ObjectImpl, so we just ignore obj here.// If ref is a local object, it is not a Stub!// Optimize the x.is_equivalent( x ) case// If delegate was created by a different ORB, return false/** This method overrides the org.omg.CORBA.portable.Delegate.equals method, ... */// Come here if other is not implemented by our ORB./** Returns true if this object is implemented by a local servant. ... */// XXX this need to check isNextCallValid// XXX Should this be public?/* Returns the codebase for object reference provided. ... *//** ClientDelegate is the RMI client-side subcontract or representation ... */// Portable Interceptor initialization.// Connection.// This locking is done so that multiple connections are not created// for the same endpoint// 7046238 - Synchronization on a single monitor for contactInfo parameters// with identical hashCode(), so we lock on same monitor for equal parameters// (which can refer to equal (in terms of equals()) but not the same objects)// REVISIT: this part similar to marshalingComplete below.// this part similar to Remarshal in this method below// REVISIT: cast// Do not do connection reclaim here since the connections// are marked in use by registerWaiter() call and since this// call happens later do it after that.//              connectionCache.reclaim();// NOTE: Thread data so we can get the mediator in release reply// in order to remove the waiter in CorbaConnection.// We cannot depend on obtaining information in releaseReply// via its InputStream argument since, on certain errors// (e.g., client marshaling errors), the stream may be null.// Likewise for releaseReply "self".// NOTE: This must be done before initializing the message since// that may start sending fragments which may end up in "early"// replies or client marshaling exceptions.// NOTE: Not necessary for oneways, but useful for debugging.// This must be done BEFORE message initialization since fragments// may be sent at that time.// Do connection reclaim now// This MUST come before message is initialized so// service contexts may be added by PI because// initial fragments may be sent during message initialization.// NOTE: We get here because an interceptor raised ForwardRequest// and updated the IOR/Iterator.  Since we have a fresh iterator// hasNext should succeed.// REVISIT: We should feed ALL interceptor exceptions to// iterator.reportException so it can determine if it wants// to retry.  Right now, SystemExceptions will flow to the// client code.// This assumes that interceptors update// ContactInfoList outside of subcontract.// Want to move that update to here.// Fix for 6763340: Complete the first attempt before starting another.//Bug 6382377: must not lose exception in PI// Must run interceptor end point before retrying.// NOTE: Interceptor ending point will run in releaseReply.// for compiler// We know for sure now that we've sent a message.// So OK to not send initial again.// NOTE: not necessary to set MessageMediator for PI.// It already has it.// Process the response.// Invoke Portable Interceptors with receive_other// Now that we have the service contexts processed and the// correct ORBVersion set, we must finish initializing the stream.// REVISIT - need interface for this operation.// Invoke Portable Interceptors with receive_exception:// If PI did not change the exception, throw a// Remarshal.// exception = null is to maintain symmetry with// GenericPOAClientSC.//  Otherwise, throw the exception PI wants thrown.// No retry, so see if was unknown.// It was not a comm failure nor unknown.// This is the general case.// Note: We should never need to execute this line, but// we should assert in case exception is null somehow.// For DII:// This return will be ignored - already unmarshaled above.// NOTE: Expects iterator to update target IOR// Invoke Portable Interceptors with receive_other:// If PI did not change exception, throw Remarshal, else// throw the exception PI wants thrown.// KMC: GenericPOAClientSC did not check exception != null// Set the desired target addressing disposition.// For consistency with corresponding code in GenericPOAClientSC:// KMC: GenericPOAClientSC did not include exception != null check/* normal response */// Invoke Portable Interceptors with receive_reply:// Remember: not thrown if exception is null.// Filters the given exception into a SystemException or a// RemarshalException and throws it.  Assumes the given exception is// of one of these two types.  This is a utility method for// the above invoke code which must do this numerous times.// If the exception is null, no exception is thrown.// Note that this code is duplicated in GenericPOAClientSC.java// REVISIT - unify with PI handling// NOTE - We must unregister the waiter NOW for this request// since the retry will result in a new request id.  Therefore// the old request id would be lost and we would have a memory// leak in the responseWaitingRoom.// The messageMediator may be null if COMM_FAILURE before// it is created.// Add the RMI-IIOP max stream format version// service context to every request.  Once we have GIOP 1.3,// we could skip it since we now support version 2, but// probably safer to always send it.// ORBVersion servicecontext needs to be sent// NOTE : We only want to send the runtime context the first time// Do not do c.setPostInitialContexts() here.// If a client interceptor send_request does a ForwardRequest// which ends up using the same connection then the service// context would not be sent.// no service context available, return gracefully.// set the codebase returned by the server// see if the version subcontract is present, if yes, then set// the ORBversion// Note: the inputObject may be null if an error occurs//       in request or before _invoke returns.// Note: self may be null also (e.g., compiler generates null in stub).// Release any outstanding NIO ByteBuffers to the ByteBufferPool// XREVISIT NOTE - Assumes unregistering the waiter for// location forwards has already happened somewhere else.// The code below is only going to unregister the final successful// request.// NOTE: In the case of a recursive stack of endRequests in a// finally block (because of Remarshal) only the first call to// unregisterWaiter will remove the waiter.  The rest will be// noops.// Invoke Portable Interceptors cleanup.  This is done to handle// exceptions during stream marshaling.  More generally, exceptions// that occur in the ORB after send_request (which includes// after returning from _request) before _invoke:// REVISIT: Early replies?// See CDRInput/OutputObject.close() for more info.// This won't result in a Corba error if an IOException happens.// XXX This seems to be a broken double checked locking idiom: FIX IT!// conn.getCodeSetContext() is null when no other requests have// been made on this connection to trigger code set negotation.// Double checking.  Don't let any other// threads use this connection until the// code sets are straight.// This only looks at the first code set component.  If// there can be multiple locations with multiple code sets,// this requires more work.// Didn't have a code set component.  The default will// be to use ISO8859-1 for char data and throw an// exception if wchar data is used.// Get the native and conversion code sets the// server specified in its IOR// Perform the negotiation between this ORB's code sets and// the ones from the IOR// REVISIT.  OMG issue 3318 concerning sending the code set// service context more than once was deemed too much for the// RTF.  Here's our strategy for the moment:// Send it on every request (necessary in cases of fragmentation// with multithreaded clients or when the first thing on a// connection is a LocateRequest).  Provide an ORB property// to disable multiple sends.// Note that the connection is null in the local case and no// service context is included.  We use the ORB provided// encapsulation streams.// Also, there will be no negotiation or service context// in GIOP 1.0.  ISO8859-1 is used for char/string, and// wchar/wstring are illegal.// Get the negotiated code sets (if any) out of the connection// Either we shouldn't send the code set service context, or// for some reason, the connection doesn't have its code sets.// Perhaps the server didn't include them in the IOR.  Uses// ISO8859-1 for char and makes wchar/wstring illegal.// REVISIT - need interface for mark/reset// REVISIT - these needs to be an interface-based impl.// REVISIT: make sure no memory leaks in client/server request/reply maps.// REVISIT: normalize requestHeader, replyHeader, messageHeader.// Client-side constructor.// Acceptor constructor.// Dispatcher constructor.// Note: in some cases (e.g., a reply message) this message// mediator will only be used for dispatch.  Then the original// request side mediator will take over.// MessageMediator// REVISIT: probably move logic in outputObject to here.// CorbaMessageMediator// REVISIT - need separate field?// Case: first a location forward, then a marshaling// exception (e.g., non-serializable object).  Only// send cancel once.// REVISIT: we could attempt to send a final incomplete// fragment in this case.// Find the typecode for the exception// Since we dont have the actual user exception// class, the spec says we have to create an// UnknownUserException and put it in the// environment.// must be a truly unknown exception// A null msg should never happen. But, we'll be// defensive just in case.// REVISIT: ContactInfo/Acceptor output object factories// just use this.  Maybe need to distinguish://    createOutputObjectForRequest//    createOutputObjectForReply// then do getStreamFormatVersionForRequest/ForReply here./** If the RMI-IIOP maximum stream format version service context ... */// NOTE: The request service contexts may indicate the max.// Defaults to 1 for GIOP 1.2 or less, 2 for// GIOP 1.3 or higher.//return replyHeader.getReplyStatus() == ReplyMessage.LOCATION_FORWARD;// Used by server side.// REVISIT: should look up in orb registry.// ResponseHandler// Note: relies on side-effect of setting mediator output field.// REVISIT - cast - need interface// Didn't have the max stream format version tagged// component.// REVISIT - This could be a separate implementation object looked// up in a registry.  However it needs some state in the message// mediator so combine for now.// pept.protocol.ProtocolHandler// REVISIT - this should be handled internally.// iiop.messages.MessageHandler// Leader/Follower when using reader thread.// When this thread is done working it will go back in pool.// First unregister current registration.// Have another thread become the reader.// When using reader thread then wen this thread is// done working it will continue reading.// NOTE: VERY IMPORTANT:// Only participate in select after getting to the point// that proper serialization of fragments is ensured.// REVISIT: not-OO:// IMPORTANT: To avoid bug (4953599), we force the Thread that does the NIO select// to also do the enable/disable of Ops using SelectionKey.interestOps(Ops of Interest).// Otherwise, the SelectionKey.interestOps(Ops of Interest) may block indefinitely in// this thread.// REVISIT: refactor createInputObject (and createMessageMediator)// into base PlugInFactory.  Get via connection (either ContactInfo// or Acceptor).// This will end up using the MessageMediator associated with// the original request instead of the current mediator (which// need to be constructed to hold the dispatchBuffer and connection).// This handles message types for which we don't create classes.// Mask the exception from thread.;// REVISIT: this is identical to 1_0 except for fragment part.// NOTE: in the old code this used to be done conditionally:// if (header.moreFragmentsToFollow()).// Now we always put it in. We take it out when// the response is done.// This must happen now so if a header is fragmented the stream// may be found.// Leader/Follower.// Note: This *MUST* come after putting stream in above map// since the header may be fragmented and you do not want to// start reading again until the map above is set.//inputObject.unmarshalHeader(); // done in subcontract.// REVISIT: this should be done by waiting thread.// More fragments are coming to complete this reply, so keep// a reference to the InputStream so we can add the fragments// In 1.1, we can't assume that we have the request ID in the// first fragment.  Thus, another thread is used// to be the reader while this thread unmarshals// the extended header and wakes up the client thread.// REVISIT - error handling.// This must be done now.// Not fragmented, therefore we know the request// ID is here.  Thus, we can unmarshal the extended header// and wake up the client thread without using a third// thread as above.// REVISIT - error handling during unmarshal.// This must be done now to get the request id.// We know that the request ID is in the first fragment// REVISIT Put in subcontract.// Fragmented LocateReplies are not allowed in 1.1.// No need to put in client reply map - already there.// If no input stream available, then discard the fragment.// This can happen:// 1. if a fragment message is received prior to receiving//    the original request/reply message. Very unlikely.// 2. if a fragment message is received after the//    reply has been sent (early replies)// Note: In the case of early replies, the fragments received// during the request processing (which are never unmarshaled),// will eventually be discarded by the GC.// need to release dispatchByteBuffer to pool if// we are discarding// NOTE: This *must* come after queing the fragment// when using the selector to ensure fragments stay in order.// Note:  We know it's a 1.2 fragment, we have the data, but// we need the IIOPInputStream instance to unmarshal the// request ID... but we need the request ID to get the// IIOPInputStream instance. So we peek at the raw bytes.// See 1.1 comments.// REVISIT: but if it is a server don't you have to remove the// stream from the map?/* REVISIT ... */// REVISIT: Move these two to subcontract.// REVISIT: move this to subcontract (but both client and server need it).// The GIOP version of CancelRequest does not matter, since// CancelRequest_1_0 could be sent to cancel a request which// has a different GIOP version./* CancelRequest processing logic : ... */// we do not support bi-directional giop yet, ignore.// Try to get hold of the InputStream buffer.// In the case of 1.0 requests there is no way to get hold of// InputStream. Try out the 1.1 and 1.2 cases.// was the request 1.2 ?// was the request 1.1 ?// XXX log this!// either the request was 1.0// or an early reply has already been sent// or request processing is over// or its a spurious CancelRequest// A spurious 1.1 CancelRequest has been received.// special case// this means that// 1. the 1.1 requests' requestId has not been received//    i.e., a CancelRequest was received even before the//    1.1 request was received. The spec disallows this.// 2. or the 1.1 request has a requestId 0.// It is a little tricky to distinguish these two. So, be// conservative and do not cancel the request. Downside is that// 1.1 requests with requestId of 0 will never be cancelled.// Any mediator obtained here should only ever be for a GIOP// At this point we have a valid message mediator that contains// a valid requestId.// at this point we have chosen a request to be cancelled. But we// do not know if the target object's method has been invoked or not.// Request input stream being available simply means that the request// processing is not over yet. simply set the abort flag in the// BMRS and hope that the worker thread would notice it (this can// happen only if the request stream is being unmarshalled and the// target's method has not been invoked yet). This guarantees// that the requests which have been dispatched to the// target's method will never be cancelled.// spi.protocol.CorbaProtocolHandler// REVISIT - this makes hcks sendTwoObjects fail// messageMediator.getConnection().close();// REVISIT - type and location// REVISIT - can be null for TRANSIENT below.// release NIO ByteBuffers to ByteBufferPool// Given what close() does, this catch shouldn't ever happen.// It also won't result in a Corba error if an IOException happens.// Does nothing if already unmarshaled.// This is necessary so mediator can act as ResponseHandler// and pass necessary info to response constructors located// in the subcontract.// REVISIT - same class right now.//messageMediator.setProtocolHandler(this);// REVISIT: Should we catch SystemExceptions?// create a response containing the expected target// addressing disposition.// no need to send reply// REVISIT If exception is not OBJECT_NOT_EXIST, it should// have a different reply// This handles OBJECT_NOT_EXIST exceptions thrown in// the subcontract or obj manager. Send back UNKNOWN_OBJECT.// outputObject.setMessage(reply); // REVISIT - not necessary// locate msgs 1.0 & 1.1 :=> grow,// 1.2 :=> stream// If we haven't unmarshaled the header, we probably don't// have enough information to even send back a reply.// Cannot do this check.  When target addressing disposition does// not match (during header unmarshaling) it throws an exception// to be handled here./* if (! ((CDRInputObject)messageMediator.getInputObject()) ... */// REVISIT - catch and ignore RequestCanceledException.// REVISIT - should we close connection?// Else.// User code (e.g., postinvoke, interceptors) may change// the exception, so we end up back here.// Report the changed exception.// Reporting an exception response causes the// poa current stack, the interceptor stacks, etc.// to be balanced.  It also notifies interceptors// that the request was cancelled.// NOTE: We do not trap ThreadDeath above Throwable.// There is no reason to stop the thread.  It is// just a worker thread.  The ORB never throws// ThreadDeath.  Client code may (e.g., in ServantManagers,// interceptors, or servants) but that should not// effect the ORB threads.  So it is just handled// generically.// Last resort.// If user code throws a non-SystemException report it generically.// from iiop.RequestProcessor.// Respond with expected target addressing disposition.// REVISIT: via acceptor factory.// REVISIT: ignore service contexts during framework transition.// They are set in SubcontractResponseHandler to the wrong connection.// Then they would be set again here and a duplicate contexts// exception occurs.// REVISIT - same as above// NOTE: This service context container gets augmented in// tail call.// It is possible that fragments of response have already been// sent.  Then an error may occur (e.g. marshaling error like// non serializable object).  In that case it is too late// to send the exception.  We just return the existing fragmented// stream here.  This will cause an incomplete last fragment// to be sent.  Then the other side will get a marshaling error// when attempting to unmarshal.// REVISIT: Impl - make interface method to do the following.// REVISIT: need to think about messageMediator containing correct// pointer to output object.// Only do this if interceptors have been initialized on this request// and have not completed their lifecycle (otherwise the info stack// may be empty or have a different request's entry on top).// REVISIT: not necessary in framework now?// Inform Portable Interceptors of the SystemException.  This is// required to be done here because the ending interception point// is called in the when creating the response below// but we do not currently write the SystemException into the// response until after the ending point is called.// NOTE: We MUST add the service context before creating// the response since service contexts are written to the// stream when the response object is created.// NOTE: From here on, it is too late to add more service contexts.// They have already been serialized to the stream (and maybe fragments// sent).// NOTE: you must flush or baos will be empty.// REVISIT - IOR arg is ignored.// REVISIT - these should be invoked from subcontract.// REVISIT = do not use null.// REVISIT - not necessary?//messageMediator.this.replyIOR = reply.getIOR();// NOTE: The mediator holds onto output object so return value// not really necessary.// Run ServantLocator::postinvoke.  This may cause a SystemException// which will throw out of the constructor and return later// to construct a reply for that exception.  The internal logic// of returnServant makes sure that postinvoke is only called once.// REVISIT: instead of instanceof, put method on all orbs.// This flag is to deal with BootstrapServer use of reply streams,// with ServerRequestDispatcher's use of reply streams, etc.// It is possible to get marshaling errors in the skeleton after// postinvoke has completed.  We must set this to false so that// when the error exception reply is constructed we don't try// to incorrectly access poa current (which will be the wrong// one or an empty stack.// Invoke server request ending interception points (send_*):// Note: this may end up with a SystemException or an internal// Runtime ForwardRequest// Note this will be executed even if a ForwardRequest or// SystemException is thrown by a Portable Interceptors ending// point since we end up in this constructor again anyway.// See createSystemExceptionResponse for why this is necesary.// Once you get here then the final reply is available (i.e.,// postinvoke and interceptors have completed.// send ORBVersion servicecontext as part of the Reply// REVISIT - this method should be migrated to orbutil.ORBUtility//           since all locations that release ByteBuffers use//           very similar logic and debug information.// my ORB instance// Added from last version because it broke the build - RTW// XXX remove me and rebuild: probably no longer needed// public static final int UNKNOWN_EXCEPTION_INFO_ID = 9;/** XXX/REVISIT: ... */// Called only for its side-effect of throwing appropriate exceptions// to set the codebase information, if any transmitted; and also// appropriate ORB Version.// correct ORBVersion set, we must finish initializing the// stream.// Check that this server is the right server// Thrown by Portable Interceptors from InterceptorInvoker,// through Response constructor.// DO NOT CALL THIS HERE:// releaseServant(objectAdapter);// The problem is that OADestroyed is only thrown by oa.enter, in// which case oa.exit should NOT be called, and neither should// the invocationInfo stack be popped.// Destroyed POAs can be recreated by normal adapter activation.// So just restart the dispatch.// IDLJ generated non-tie based skeletons do not catch the// RequestCanceledException. Rethrow the exception, which will// cause the worker thread to unwind the dispatch and wait for// other requests.// RMIC generated tie skeletons convert all Throwable exception// types (including RequestCanceledException, ThreadDeath)// thrown during reading fragments into UnknownException.// If RequestCanceledException was indeed raised,// then rethrow it, which will eventually cause the worker// thread to unstack the dispatch and wait for other requests.// Note that objectAdapter.enter() must be called before getServant.// Prepare Portable Interceptors for a new server request// and invoke receive_request_service_contexts.  The starting// point may throw a SystemException or ForwardException.// This must be set just after the enter so that exceptions thrown by// enter do not cause// the exception reply to pop the thread stack and do an extra oa.exit.// Note: we do not know the MDI on a null servant.// We only end up in that situation if _non_existent called,// so that the following handleNullServant call does not throw an/** Always throws OBJECT_NOT_EXIST if operation is not a special method. ... */// we cannot depend on this since for our local case, we do not send// in this service context.  Can we rely on just the CodeSetServiceContext?// boolean rtSC = false; // Runtime ServiceContext// the RTSC is sent only once during session establishment.  We// need to find out if the CodeBaseRef is already set.  If yes,// then also the rtSC flag needs to be set to true// this is not possible for the LocalCase since there is no// IIOPConnection for the LocalCase// used for a case where we have JDK 1.3 supporting 1.0 protocol,// but sending 2 service contexts, that is not normal as per// GIOP rules, based on above information, we figure out that we// are talking to the legacy ORB and set the ORB Version Accordingly.// this special case tell us that it is legacy SUN orb// and not a foreign one// rtSC is not available for localcase due to which this generic// path would fail if relying on rtSC//if (giopVersion.equals(GIOPVersion.V1_0) && hasCodeSetContext && rtSC)// System.out.println("setting legacy ORB version");// If it didn't include our ORB version service context (below),// then it must be a foreign ORB.// try to get the ORBVersion sent as part of the ServiceContext// if any// Invoke on the servant using the portable DSI skeleton// Note: When/if dynimpl.invoke calls arguments() or// set_exception() then intermediate points are run.// Check if ServerRequestImpl.result() has been called// normal return// Marshal out/inout/return parameters into the ReplyMessage/** Must always be called, just after the servant's method returns. ... */// Check if the servant set a SystemException or// UserException// Get the exception object from the Any// Marshal the exception back/** Handles setting the connection's code sets if required. ... */// Somehow a code set service context showed up in the local case.// If it's GIOP 1.0, it shouldn't have this context at all.  Our legacy// ORBs sent it and we need to know if it's here to make ORB versioning// decisions, but we don't use the contents.// Note on threading:// getCodeSetContext and setCodeSetContext are synchronized// on the Connection.  At worst, this will result in// multiple threads entering this block and calling// setCodeSetContext but not actually changing the// values on the Connection.// Alternative would be to lock the connection for the// whole block, but it's fine either way.// The connection's codeSetContext is null until we've received a// request with a code set context with the negotiated code sets.// Use these code sets on this connection// We had to read the method name using ISO 8859-1// (which is the default in the CDRInputStream for// char data), but now we may have a new char// code set.  If it isn't ISO8859-1, we must tell// the CDR stream to null any converter references// it has created so that it will reacquire// the code sets again using the new info.// This should probably compare with the stream's// char code set rather than assuming it's ISO8859-1.// (However, the operation name is almost certainly// ISO8859-1 or ASCII.)// If no code set information is ever sent from the client,// the server will use ISO8859-1 for char and throw an// exception for any wchar transmissions.// In the local case, we use ORB provided streams for// marshaling and unmarshaling.  Currently, they use// ISO8859-1 for char/string and UTF16 for wchar/wstring.// Note that info is shared across multiple threads// using the same subcontract, each of which may// have its own operation.  Therefore we need to clone it./** INSServerRequestDispatcher handles all INS related discovery request. The INS Service ... */// Need to signal one of OBJECT_HERE, OBJECT_FORWARD, OBJECT_NOT_EXIST.// send a locate forward with the right IOR. If the insKey is not// registered then it will throw OBJECT_NOT_EXIST Exception/** getINSReference if it is registered in INSObjectKeyMap. */// If entry is not null then the locate is with an INS Object key,// so send a location forward with the right IOR.// have its own operation.  Therefore we need to copy it.// REVISIT - This is called from TOAImpl.// DO NOT set the IOR to null.  (Un)exporting is only concerns// the servant not the IOR.  If the ior is set to null then// null pointer exceptions happen during an colocated invocation.// It is better to let the invocation proceed and get OBJECT_NOT_EXIST// from the server side.//ior = null;// Cached information needed for local dispatch// If isNextIsLocalValid.get() == Boolean.TRUE,// the next call to isLocal should be valid/* Possible paths through ... *//** Check that the servant in info (which must not be null) is ... */// Normally, this test will never fail.  However, if the servant// and the stub were loaded in different class loaders, this test// When servant_preinvoke returns null, the stub will// recursively re-invoke itself.  Thus, the next call made from// the stub is another useLocalInvocation call.// REVISIT: Rewrite rmic.HelloTest and rmic.LocalStubTest// (which directly call servant_preinvoke)// then revert to exception again.// Look up the servant for this request and return it in a// ServantObject.  Note that servant_postinvoke is always called// by the stub UNLESS this method returns null.  However, in all// cases we must be sure that ObjectAdapter.getServant and// ObjectAdapter.returnServant calls are paired, as required for// Portable Interceptors and Servant Locators in the POA.// Thus, this method must call returnServant if it returns null.// So just reinvoke this method.// Cleanup after this call, then throw to allow// outer try to handle the exception appropriately.// ThreadDeath on the server side should not cause a client// side thread death in the local case.  We want to preserve// this behavior for location transparency, so that a ThreadDeath// has the same affect in either the local or remote case.// The non-colocated case is handled in iiop.ORB.process, which// throws the same exception./** If this exception is caught explicitly, this need to be rethrown. *//** This is a registry of all subcontract ID dependent objects.  This includes: ... */// The default subcontract ID to use if// there is no more specific ID available.// This happens when invoking a foreign IOR.// ServerRequestDispatcher registry// ClientRequestDispatcher registry// ObjectAdapterFactory registry// LocalClientRequestDispatcherFactory registry// Set of all ObjectAdapterFactory instances// Read-only view of oaf instances// Map from obect key string to// ServerSubcontract// for special bootstrap IORs// **************************************************// Methods to find the subcontract side subcontract// Note that both forms of getServerRequestDispatcher need to return// the default server delegate if no other match is found.// This is essential to proper handling of errors for// malformed requests.  In particular, a bad MAGIC will// result in a lookup in the named key table (stringToServerSubcontract),// which must return a valid ServerRequestDispatcher.  A bad subcontract ID// will similarly need to return the default ServerRequestDispatcher.// XXX This should be in the SPI// InvocationInfo must be pushed before calling getInvocationServant// This is an error since no user of this implementation// should ever throw this exception// End of File// Rather than have separate CDR subcontract,// use same CorbaClientRequestDispatcherImpl but have// different MessageMediator finishSendingRequest and waitForResponse// handle what is done below.// Benefit: then in ContactInfo no need to do a direct new// of subcontract - does not complicate subcontract registry.// Create server-side input object.// Dispatch// REVISIT: Impl cast.// InputStream must be closed on the InputObject so that its// ByteBuffer can be released to the ByteBufferPool. We must do// this before we re-assign the cdrInputObject reference below.// No need to do anything since we're done with the input stream// and cdrInputObject will be re-assigned a new client-side input// object, (i.e. won't result in a corba error).// Create client-side input object// _non_existent// _not_existent// _is_a// _get_interface/** com/sun/corba/se/impl/protocol/giopmsgheaders/AddressingDispositionHelper.java ... *//** This interface captures the CancelRequestMessage contract. ... *//** This implements the GIOP 1.0 CancelRequest header. ... */// Accessor methods// IO methods// class CancelRequestMessage_1_0/** This implements the GIOP 1.1 CancelRequest header. ... */// class CancelRequestMessage_1_1/** This implements the GIOP 1.2 CancelRequest header. ... */// class CancelRequestMessage_1_2/** This interface captures the FragmentMessage contract. ... *//** This implements the GIOP 1.1 Fragment header. ... */// 1.1 has no fragment header and so no request_id/* This will never be called, since we do not currently read the ... *//* 1.1 has no request_id; so nothing to write */// class FragmentMessage_1_1/** This implements the GIOP 1.2 Fragment header. ... */// This is currently never called.// class FragmentMessage_1_2/** com/sun/corba/se/impl/protocol/giopmsgheaders/IORAddressingInfo.java ... */// class IORAddressingInfo/** com/sun/corba/se/impl/protocol/giopmsgheaders/IORAddressingInfoHelper.java ... *//** com/sun/corba/se/impl/protocol/giopmsgheaders/KeyAddr.java ... *//** This interface captures the LocateReplyMessage contract. ... */// 1.2/** This implements the GIOP 1.0 LocateReply header. ... */// 1.0 LocateReply body does not contain SystemException// raises exception on error// The code below reads the reply body if status is OBJECT_FORWARD// Note, this writes only the header information.// IOR may be written afterwards into the reply mesg body.// Static methods// class LocateReplyMessage_1_0/** This implements the GIOP 1.1 LocateReply header. ... */// Note, this writes only the header information. SystemException or// class LocateReplyMessage_1_1/** This implements the GIOP 1.2 LocateReply header. ... */// default;// GIOP 1.2 LocateReply message bodies are not aligned on// 8 byte boundaries.// The code below reads the reply body in some cases// LOC_SYSTEM_EXCEPTION & OBJECT_FORWARD & OBJECT_FORWARD_PERM &// LOC_NEEDS_ADDRESSING_MODE// read GIOP::AddressingDisposition from body and resend the// original request using the requested addressing mode. The// resending is transparent to the caller.// IOR or GIOP::AddressingDisposition may be written afterwards into the// reply mesg body.// class LocateReplyMessage_1_2/** This interface captures the LocateRequestMessage contract. ... *//** This implements the GIOP 1.0 LocateRequest header. ... */// Accessor methods (LocateRequestMessage interface)// this will raise a MARSHAL exception upon errors.// class LocateRequestMessage_1_0/** This implements the GIOP 1.1 LocateRequest header. ... */// class LocateRequestMessage_1_1/** This implements the GIOP 1.2 LocateRequest header. ... */// this does AddressingDisposition check// class LocateRequestMessage_1_2/** This is the base interface for different message type interfaces. ... */// Generic constants// Other useful constants// Encoding related constants// Message types// 1.1 & 1.2:// Mutator methods/** This class acts as the base class for the various GIOP message types. This ... */// This is only used when the giopDebug flag is// turned on.// (encodingVersion == 0x00) implies CDR encoding,// (encodingVersion >  0x00) implies Java serialization version.// Since this is executed in debug mode only the overhead of// using a View Buffer is not an issue. We'll also use a// read-only View Buffer so we don't disturb the state of// byteBuffer.// Sanity checks/* check for magic corruption ... */// If Magic is incorrect, it is an error.// ACTION : send MessageError and close the connection.// Extract the encoding version from the request GIOP Version,// if it contains an encoding, and set GIOP version appropriately.// For Java serialization, we use GIOP Version 1.2 message format.// Entering this block means the request is using Java encoding,// and the encoding version is <= this ORB's Java encoding version.// For requests, sending ORB should use the version info// published in the IOR or may choose to use a <= version// for requests. If the version is greater than published version,// it is an error.// For replies, the ORB should always receive a version it supports// or less, but never greater (except for MessageError)// ACTION : Send back a MessageError() with the the highest version// the server ORB supports, and close the connection.// create appropriate messages types//msg = new RequestMessage(orb.giopDebugFlag);// 1.0// 1.1//msg = new LocateRequestMessage(orb.giopDebugFlag);//msg = new CancelRequestMessage(orb.giopDebugFlag);//msg = new ReplyMessage(orb.giopDebugFlag);//msg = new LocateReplyMessage(orb.giopDebugFlag);// REVISIT a MessageError  may contain the highest version server// can support. In such a case, a new request may be made with the// correct version or the connection be simply closed. Note the// connection may have been closed by the server.//msg = new Message(orb.giopDebugFlag);//msg = new FragmentMessage(orb.giopDebugFlag);// not possible (error checking done already)// unknown message type ?// ACTION : send MessageError and close the connection// Initialize the generic GIOP header instance variables.// 'request partitioning' not supported on GIOP version 1.0// so just use the default thread pool, 0.// 1.1 & 1.2// IMPORTANT: For 'request partitioning', the thread pool to use//            information is stored in the leading 6 bits of byte 6.// IMPORTANT: Request partitioning is a PROPRIETARY EXTENSION !!!// NOTE: Bitwise operators will promote a byte to an int before//       performing a bitwise operation and bytes, ints, longs, etc//       are signed types in Java. Thus, the need for the//       THREAD_POOL_TO_USE_MASK operation.// For debugging purposes, save the 12 bytes of the header// REVISIT: is giopHeader still used?// Note: Currently we use response_expected flag to decide if the// call is oneway or not. Ideally, it is possible to expect a// response on a oneway call too, but we do not support it now./* // REVISIT The following is the correct way to do it. This gives ... */// object key will be used for target addressing// only object_key based target addressing is allowed for// GIOP 1.0 & 1.1// iop profile will be used// ior will be used// profile index// invalid target addressing disposition value// add request partitioning thread pool to use info// default pool// This method is not currently used.// New fragment messages are always created from existing messages.// Creating a FragmentMessage from InputStream is done in// createFromStream(..)/** Set a flag in the given buffer (fragment bit, byte order bit, etc) *//** Clears a flag in the given buffer *//** Construct an ObjectKey from a byte[]. ... */// XXX log this exception// This exception is thrown if any exceptions are raised while// extracting the object key or if the object key is empty./** Extract the object key from TargetAddress. ... */// AddressingDisposition::KeyAddr// AddressingDisposition::ProfileAddr// AddressingDisposition::IORAddr// this cannot happen// There is no need for a explicit exception, since the// TargetAddressHelper.read() would have raised a BAD_OPERATION// exception by now.// extracting the object key from the TargetAddress or if all the// the valid TargetAddress::AddressingDispositions are empty./** Interface which allows an implementation to use ... */// REVISIT - These should not throw IOException.//           Should be handled internally./** Used for message types for which we don't have concrete classes, yet, ... */// Request// Reply// LocateRequest// LocateReply// Fragment// CancelRequest/* This implements the GIOP 1.0 Message header. ... */// Patch the size field in the header.// This should do nothing even if it is called. The Message Header already// is read off java.io.InputStream (not a CDRInputStream) by IIOPConnection// in order to choose the correct CDR Version, msg_type, and msg_size.// So, we would never need to read the Message Header off a CDRInputStream./* this.magic = istream.read_long(); ... */// class Message_1_0/* This implements the GIOP 1.1 & 1.2 Message header. ... */// Constants// NOTE: This is a SUN PROPRIETARY EXTENSION// Add the poolToUse to the upper 6 bits of byte 6 of the GIOP header.// this.flags represents byte 6 here.// IMPORTANT: Bitwise operations will promote//            byte types to int before performing//            bitwise operations. And, Java//            types are signed./** Allows us to create a fragment message from any message type. */// check for message type validity/* // A fragmented mesg can be created only if the current mesg' fragment ... */// This should do nothing even if it is called. The Message Header is read// off a java.io.InputStream (not a CDRInputStream) by IIOPConnection// in order to choose the correct CDR Version , msg_type, and msg_size.// class Message_1_1/** The byteBuffer is presumed to have contents of the message already ... */// save// restore/** com/sun/corba/se/impl/protocol/giopmsgheaders/ProfileAddr.java ... *//** com/sun/corba/se/impl/protocol/giopmsgheaders/ReferenceAddr.java ... *//** This interface captures the ReplyMessage contract. ... */// Note: If the value, order, or number of these constants change,// please update the REPLY_MESSAGE_TO_PI_REPLY_STATUS table in PIHandlerImpl./** This implements the GIOP 1.0 Reply header. ... */// SYSTEM_EXCEPTION & LOCATION_FORWARD// do nothing. The client stub will read the exception from body./** This implements the GIOP 1.1 Reply header. ... *//** This implements the GIOP 1.2 Reply header. ... */// CORBA formal 00-11-0 15.4.2.2 GIOP 1.2 body must be// aligned on an 8 octet boundary.// Ensures that the first read operation called from the stub code,// during body deconstruction, would skip the header padding, that was// inserted to ensure that the body was aligned on an 8-octet boundary.// SYSTEM_EXCEPTION & LOCATION_FORWARD & LOCATION_FORWARD_PERM &// NEEDS_ADDRESSING_MODE// resending is transparent to the client program.// Ensures that the first write operation called from the stub code,// during body construction, would insert a header padding, such that// the body is aligned on an 8-octet boundary.// class ReplyMessage_1_2/** This interface captures the RequestMessage contract. ... */// interface RequestMessage/** This implements the GIOP 1.0 Request header. ... */// Accessor methods (RequestMessage interface)// REVISIT Should we throw an exception or return null ?// Mutators// No-op, must be GIOP Version 1.1 or greater// to support this SUN PROPRIETARY EXTENSION.// class RequestMessage_1_0/** This implements the GIOP 1.1 Request header. ... */// Added in GIOP 1.1// class RequestMessage_1_1/** This implements the GIOP 1.2 Request header. ... *//* case 1: LSBit[1] == 1 ... */// class RequestMessage_1_2/** com/sun/corba/se/impl/protocol/giopmsgheaders/TargetAddress.java ... */// class TargetAddress/** com/sun/corba/se/impl/protocol/giopmsgheaders/TargetAddressHelper.java ... */// Branch for object_key// Branch for profile// Branch for ior// Create a new IOR with the magic of INIT/** For the BootStrap operation we do not expect to have more than one ... */// Invoke.// If there is a location forward then you will need// to invoke again on the updated information.// Just calling this same routine with the same host/port// does not take the location forward info into account.// The only reason a null objref is passed is to get the version of// invoke used by streams.  Otherwise the PortableInterceptor// call stack will become unbalanced since the version of// invoke which only takes the stream does not call// PortableInterceptor ending points.// Note that the first parameter is ignored inside invoke.// NOTE: do note trap and ignore errors.// Let them flow out.// Obtain all the keys from the property object/** Checks the lastModified() timestamp of the file and optionally ... *//** This class provides an Operation that converts from CORBA INS URL strings into ... */// Root Naming Context for default resolution of names.// The URLHandler to parse INS URL's// "UPPER NIBBLE" shift factor for <</** This static method takes a Stringified IOR and converts it into IOR object. ... */// Length must be even for str to be valid// XXX handle this as just another URL scheme// XXX resolve should be a method on INSURL/** resolves a corbaloc: url that is encapsulated in a CorbalocURL object. ... */// If RIR flag is true use the Bootstrap protocol/** resolves a corbaname: url that is encapsulated in a CorbanameURL object. ... */// Case 1 of corbaname: rir#// Case 2 of corbaname: ::hostname#// This means return the Root Naming context/** This is an internal method to get the IOR from the CorbalocURL object. ... */// corbalocObject cannot be null, because it's validated during// parsing. So no null check is required.// If there is no KeyString then it's invalid// Add profile for GIOP version used by this ORB// Now remove this value from the map// Create a comparator that can sort in decending order (1.2, 1.1, ...)// Now sort using the above comparator// Add the profiles in the sorted order// Finally add the 1.0 profiles/** This is required for corbaname: resolution. Currently we ... *//** A utility method to clear the RootNamingContext, if there is an ... */// XXX Validate the URL?// If the ORBDefaultInitRef is not defined simply return null// If the ORBDefaultInitDef is  defined as corbaloc: then create the// corbaloc String in the format// <ORBInitDefaultInitDef Param>/<Identifier>// and resolve it using resolveCorbaloc method// Construct a ByteBufferPool for a pool of NIO ByteBuffers// of ORB fragment size./* Locations where ByteBuffers are gotten from the pool: ... */// If the requested ByteBuffer size is less than or equal to// the ORB fragment size, and we have not disabled use of// direct byte buffers (normally for debugging purposes)// then get a DirectByteBuffer from the// pool if there is one, if there is not one in the pool,// then allocate a a DirectByteBuffer of ORB fragment size.// If the request ByteBuffer size is greater than the ORB fragment// size, allocate a new non-direct ByteBuffer.// check if there's one in the pool, if not allocate one.// clear ByteBuffer before returning it// NOTE: Moved the 'else' part of the above if statement//       outside the synchronized block since it is likely//       less expensive to check poolSize than to allocate a//       DirectByteBuffer in the synchronized block.// increment the number of ByteBuffers gotten from pool// IMPORTANT: Since this counter is used only for information//            purposes, it does not use synchronized access.// Requested ByteBuffer size larger than the pool manages.// Just allocate a non-direct ByteBuffer/* Locations where ByteBuffers are released to the pool: ... */// If the ByteBuffer is a DirectByteBuffer, add it to the pool.// Otherwise, set its reference to null since it's not kept in// the pool and caller is saying he/she is done with it.// NOTE: The size of the ByteBuffer is not checked with the//       this pool's ByteBuffer size since only DirectByteBuffers//       ever allocated. Hence, only DirectByteBuffer are checked//       here. An additional check could be added here for that though.// use with debug to determine if byteBuffer is already// in the pool.// Check to make sure we don't have 'thebb' reference// already in the pool before adding it.// NOTE: The else part of this if will only get called//       if debug = true and refInPool = true, see logic above.// add ByteBuffer back to the pool// otherwise, log a stack trace with duplicate message// decrement the count of ByteBuffers released// ByteBuffer not pooled nor needed// Get a count of the outstanding allocated DirectByteBuffers.// (Those allocated and have not been returned to the pool)./* Copyright (c) 2001, 2010, Oracle and/or its affiliates. All rights reserved. ... */// pept.transport.ConnectionCache// _REVISIT_ Need to worry about wrap around some day/** Discarding least recently used Connections that are not busy ... */// REVISIT - A less expensive alternative connection reclaiming//           algorithm could be investigated.// Find least recently used and not busy connection in cache// REVISIT - log// XXX is necessary to do a GC to reclaim// closed network connections ??// java.lang.System.gc();// spi.transport.ConnectionCache// This is public so folb.Server test can access it.// NOTE: This may be different from same named one in CorbaContactInfoList.// Note: not all derived classes will use a connection cache.// These are convenience methods that may not be used.// Called when client making an invocation.// REVISIT: Would like version, ior, requestid, etc., decisions// to be in client subcontract.  Cannot pass these to this// factory method because it breaks generic abstraction.// Maybe set methods on mediator called from subcontract// after creation?// Called when connection handling a read event.// read giop header only// read entire giop message// Called when connection reading message body// read giop body only// REVISIT: Duplicate of acceptor code.// spi.transport.CorbaContactInfo// REVISIT - remove this./* Copyright (c) 2002, 2006, Oracle and/or its affiliates. All rights reserved. ... */// spi.transport.CorbaContactInfoList// org.omg.CORBA.portable.Delegate// REVISIT - hashCode(org.omg.CORBA.Object self)// For use by "sticky manager" if one is registered.// NOTE: IMPORTANT:// Only do local.  The APP Server interceptors check// effectiveTarget.isLocal - which is determined via// the IOR - so if we added other addresses then// transactions and interceptors would not execute.// XREVISIT - See Base Line 62/** setLocalSubcontract sets cached information that is set whenever ... */// XXX Note that this always uses the first IIOP profile to get the// scid.  What about multi-profile IORs?  This should perhaps be// tied to the current ContactInfo in some way, together with an// implementation of ClientDelegate that generally prefers co-located// ContactInfo.  This may in fact mean that we should do this at// the ContactInfo level, rather than the IOR/profile level.// REVISIT: create a unit test for this class.// ITERATOR state// End ITERATOR state// listOfContactInfos is null when used by the legacy// socket factory.  In that case this iterator is NOT used.// List is immutable so no need to synchronize access.// REVISIT: Implement as internal closure iterator which would// wraps sticky or default.  Then hasNext and next just call// the closure.// We hold onto the last in case we get an addressing// disposition retry.  Then we use it again.// We also hold onto it for the sticky manager.// com.sun.corba.se.pept.transport.ContactInfoListIterator// spi.CorbaContactInfoListIterator// The normal operation for a standard iterator is to throw// ConcurrentModificationException whenever the underlying collection// changes.  This is implemented by keeping a modification counter (the// timestamp may fail because the granularity is too coarse).// Essentially what you need to do is whenever the iterator fails this// way, go back to ContactInfoList and get a new iterator.// Need to update CorbaClientRequestDispatchImpl to catch and use// that exception.// If we report the exception in _request (i.e., beginRequest// we cannot throw RemarshalException to the stub because _request// does not declare that exception.// To keep the two-level dispatching (first level chooses ContactInfo,// second level is specific to that ContactInfo/EPT) we need to// ensure that the request dispatchers get their iterator from the// InvocationStack (i.e., ThreadLocal). That way if the list iterator// needs a complete update it happens right here.// pept.transport.InboundConnectionCache// ORB// REVISIT - add ORBUtil mkdir -p like operation for this.// CONNECTION// INBOUND CONNECTION// NODE FOR THIS CACHE// ATTRIBUTE// pept.transport.OutboundConnectionCache// OUTBOUND CONNECTION// Maps requestId to an OutCallDesc.// pept.transport.ResponseWaitingRoom// The waiter is removed in releaseReply in the same// way as a normal request.// Wait for the reply from the server.// The ReaderThread reads in the reply IIOP message// and signals us.// REVISIT -- exceptions from unmarshaling code will// go up through this client thread!// On fragmented streams the header MUST be unmarshaled here// (in the client thread) in case it blocks.// If the header was already unmarshaled, this won't// do anything// REVISIT: cast - need interface method.// This is an interesting case.  It could mean that someone sent us a// reply message, but we don't know what request it was for.  That// would probably call for an error.  However, there's another case// that's normal and we should think about --// If the unmarshaling thread does all of its work inbetween the time// the ReaderThread gives it the last fragment and gets to the// out_calls.get line, then it will also be null, so just return;// Set the reply InputObject and signal the client thread// that the reply has been received.// The thread signalled will remove outcall descriptor if appropriate.// Otherwise, it'll be removed when last fragment for it has been put on// BufferManagerRead's queue.// CorbaResponseWaitingRoom// anything waiting for BufferManagerRead's fragment queue// needs to be cancelled// IMPORTANT: If inputObject is null, then no need to tell//            BufferManagerRead to cancel request processing.// attempt to wake up waiting threads in all cases// This can happen when getting early reply fragments for a// request which has completed (e.g., client marshaling error).// REVISIT - impl/poa specific:// pept TransportManager// REVISIT: Would like to be able to configure// the connection cache type used.// CorbaTransportManager// REVISIT - need to filter based on arguments.// REVISIT - initialization will be moved to OA.// Lazy initialization of acceptors.// REVISIT - POA specific policies// implemenation// NOTE: we could check for 0 (i.e., CSIv2) but, for a// non-CSIv2-configured client ORB talking to a CSIv2 configured// server ORB you might end up with an empty contact info list// which would then report a failure which would not be as// instructive as leaving a ContactInfo with a 0 port in the list.// Disable Nagle's algorithm (i.e., always send immediately).// EventHandler methods/* NOTE: ... */// REVISIT: need to close connection.// ListenerThread methods.// Work methods.// REVISIT - this needs alot more from previous ListenerThread// ReaderThread methods.// REVISIT - this needs alot more from previous ReaderThread.// REVISIT - put in pool;// tell Selector Thread there's an update to a SelectorKey's Ops// wakeup Selector thread to process close request// Kill listeners.// Kill readers.// Selector// Thread methods./* if (timeout == 0 && orb.transportDebugFlag) { ... */// IMPORTANT: ignore all errors so the select thread keeps running.// Otherwise a guaranteed hang./////////////////////////////////////////////////////// REVISIT - better handling/reporting// Need to check if the SelectionKey is valid because a// connection's SelectionKey could be put on the list to// have its OP enabled and before it's enabled be reclaimed.// Otherwise, the enabling of the OP will throw an exception// here and exit this method an potentially not enable all// registered ops.// So, we ignore SelectionKeys that are invalid. They will get// cleaned up on the next Selector.select() call.// Private class to contain a SelectionKey and a SelectionKey op.// Used only by SelectorImpl to register and enable SelectionKey// Op.// REVISIT - Could do away with this class and use the EventHanlder//           directly.// A SelectionKey.[OP_READ|OP_WRITE|OP_ACCEPT|OP_CONNECT]// This is only necessary for the pi.clientrequestinfo test.// It tests that request ids are different.// Rather than rewrite the test, just fake it.// REVISIT - use registry/// XXX LOGGING// Connection;// Fake RequestId// NOTE: GROW.// REVISIT impl/poa specific// BEGIN Legacy support.// END Legacy support.// pept.transport.Acceptor// Determine the listening port (for the IOR).// This is important when using emphemeral ports (i.e.,// when the port value to the constructor is 0).// Register with transport (also sets up monitoring).// Finish configuation.// Configure to use listener and reader threads.// NOTE: The connection MUST be put in the cache BEFORE being// registered with the selector.  Otherwise if the bytes// are read on the connection it will attempt a time stamp// but the cache will be null, resulting in NPE.// A connection needs to be timestamped before putting to the cache.// Otherwise the newly created connection (with 0 timestamp) could be// incorrectly reclaimed by concurrent reclaim() call OR if there// will be no events on this connection then it could be reclaimed// by upcoming reclaim() call.// REVISIT - need to close - recreate - then register new one.// NOTE: if register cycling we do not want to shut down ORB// since local beans will still work.  Instead one will see// a growing log file to alert admin of problem.// CorbaAcceptor// REVISIT - how does this play with legacy ORBD port exchange?/* CONFLICT: with legacy below. ... */// IMPORTANT: To avoid bug (4953599), we force the// Thread that does the NIO select to also do the// enable/disable of Ops using SelectionKey.interestOps().// Otherwise, the SelectionKey.interestOps() may block// indefinitely.// NOTE: If "acceptorSocketUseWorkerThreadForEvent" is// set to to false in ParserTable.java, then this method,// doWork(), will get executed by the same thread// (SelectorThread) that does the NIO select.// If "acceptorSocketUseWorkerThreadForEvent" is set// to true, a WorkerThread will execute this method,// doWork(). Hence, the registering of the enabling of// the SelectionKey's interestOps is done here instead// of calling SelectionKey.interestOps(<interest op>).// Factory methods.// REVISIT: refactor into common base or delegate.// REVISIT - no factoring so cheat to avoid code dup right now.// REVISIT **** COUPLING !!!!// SocketOrChannelAcceptor// BEGIN Legacy support// LegacyServerSocketEndPointInfo and EndPointInfo// Kluge alert:// Work and Legacy both define getName.// Try to make this behave best for most cases.// END Legacy support// New transport.// protected for test: genericRPCMSGFramework.IIOPConnection constructor.// From iiop.Connection.java// The socket used for this connection.// Start at some value other than zero since this is a magic// value in some protocols.// Server request map: used on the server side of Connection// Maps request ID to IIOPInputStream.// This is a flag associated per connection telling us if the// initial set of sending contexts were sent to the receiver// already...// Remote reference to CodeBase server (supplies// FullValueDescription, among other things)// CodeBase cache for this connection.  This will cache remote operations,// handle connecting, and ensure we don't do any remote operations until// necessary.// transport read timeout values// A message mediator used when shouldReadGiopHeaderOnly is// true to maintain request message state across execution in a// SelectorThread and WorkerThread.// Used in genericRPCMSGFramework test.// Both client and servers.// Client constructor.// Client-side convenience.// Server-side constructor.// Server-side convenience// framework.transport.Connection// Null can happen when client closes stream// causing purgecalls.// REVISIT - use common factory base class.// REVISIT - make sure reader thread is killed.// Notify anyone waiting.//keepRunning = false;// REVISIT - if this is called after purgeCalls then// the state of the socket is ABORT so the writeLock// in close throws an exception.  It is ignored but// causes IBM (screen scraping) tests to fail.//close();// This call is the transition from the tranport block// to the protocol block.// The reading of data incorporates a strategy to detect a// rogue client. The strategy is implemented as follows. As// long as data is being read, at least 1 byte or more, we// assume we have a well behaved client. If no data is read,// then we sleep for a time to wait, re-calculate a new time to// wait which is lengthier than the previous time spent waiting.// Then, if the total time spent waiting does not exceed a// maximum time we are willing to wait, we attempt another// read. If the maximum amount of time we are willing to// spend waiting for more data is exceeded, we throw an// IOException.// NOTE: Reading of GIOP headers are treated with a smaller//       maximum time to wait threshold. Based on extensive//       performance testing, all GIOP headers are being//       read in 1 read access.// ignore exception// failed to read entire message// To support non-channel connections./* NOTE: cannot perform this test.  If one ask for a ... */// IMPORTANT: For non-blocking SocketChannels, there's no guarantee//            all bytes are written on first write attempt.// TimeStamp connection to indicate it has been used// Note granularity of connection usage is assumed for// now to be that of a IIOP packet./** Note:it is possible for this to be called more than once */// REVISIT It will be good to have a read lock on the reader thread// before we proceed further, to avoid the reader thread (server side)// from processing requests. This avoids the risk that a new request// will be accepted by ReaderThread while the ListenerThread is// attempting to close this connection.// we are busy!// stop the reader without causing it to do purgeCalls//Exception ex = new Exception();//reader.stop(ex); // REVISIT// NOTE: !!!!!!// This does writeUnlock().// REVISIT - remove this method from Connection and all it subclasses.// This is used by the GIOPOutputObject in order to// throw the correct error when handling code sets.// Can we determine if we are on the server side by// other means?  XREVISIT// REVISIT: ASSERT/** Sets the writeLock for this connection. ... */// Keep looping till we can set the writeLock.// somebody has changed 'state' so be careful// Loop back// do not stay here too long if state != ESTABLISHED// Bug 4752117// XXX// Need to distinguish between client and server roles// here probably.// the connection has been closed or closing// ==> throw rebind exception// wake up one guy waiting to write// Assumes the caller handles writeLock and writeUnlock// Don't we need to check for CloseConnection// here?  REVISIT// XREVISIT - Shouldn't the MessageMediator// be the one to handle writing the data here?// Write the fragment/message// REVISIT - no flush?//socket.getOutputStream().flush();/* ADDED(Ram J) 10/13/2000 In the event of an IOException, try ... */// Since IIOPOutputStream's msgheader is set only once, and not// altered during sending multiple fragments, the original// msgheader will always have the requestId.// REVISIT This could be optimized to send a CancelRequest only// if any fragments had been sent already./* REVISIT: MOVE TO SUBCONTRACT ... */// REVISIT When a send failure happens, purgeCalls() need to be// called to ensure that the connection is properly removed from// further usage (ie., cancelling pending requests with COMM_FAILURE// with an appropriate minor_code CompletionStatus.MAY_BE).// Relying on the IIOPOutputStream (as noted below) is not// sufficient as it handles COMM_FAILURE only for the final// fragment (during invoke processing). Note that COMM_FAILURE could// happen while sending the initial fragments.// Also the IIOPOutputStream does not properly close the connection.// It simply removes the connection from the table. An orderly// closure is needed (ie., cancel pending requests on the connection// COMM_FAILURE as well.// IIOPOutputStream will cleanup the connection info when it// sees this exception.// REVISIT - Reading of a GIOP header only is information//           that should be passed into the constructor//           from the SocketOrChannelConnection factory.//    public Acceptor getAcceptor() - already defined above.// IMPORTANT: Sanity checks on SelectionKeys such as//            SelectorKey.isValid() should not be done//            here.// get the partialMessageMediator// created by SelectorThread// read remaining info needed in a MessageMediator// spi.transport.CorbaConnection.// IMPORTANT: Reader Threads must NOT read Giop header only.// REVISIT - inteface defines isServer but already defined in// higher interface.// REVISIT: this is also defined in:// com.sun.corba.se.spi.legacy.connection.Connection/** It is possible for a Close Connection to have been ... */// Negotiated code sets for char and wchar data// Needs to be synchronized for the following case when the client// doesn't send the code set context twice, and we have two threads// in ServerRequestDispatcher processCodeSetContext.// Thread A checks to see if there is a context, there is none, so//     it calls setCodeSetContext, getting the synch lock.// Thread B checks to see if there is a context.  If we didn't synch,//     it might decide to outlaw wchar/wstring.// Double check whether or not we need to do this// If the client says it's negotiated a code set that// isn't a fallback and we never said we support, then// it has a bug.// from iiop.IIOPConnection.java// Map request ID to an InputObject.// This is so the client thread can start unmarshaling// the reply and remove it from the out_calls map while the// ReaderThread can still obtain the input stream to give// new fragments.  Only the ReaderThread touches the clientReplyMap,// so it doesn't incur synchronization overhead.// Can never be unset.../** Wake up the outstanding requests on the connection, and hand them ... */// If this invocation is a result of ThreadDeath caused// by a previous execution of this routine, just exit.// Grab the writeLock (freeze the calls)// Mark the state of the connection// and determine the request status// Signal all threads with outstanding requests on this// connection and give them the SystemException;// REVISIT: Stop the reader thread// Signal all the waiters of the writeLock.// There are 4 types of writeLock waiters:// 1. Send waiters:// 2. SendReply waiters:// 3. cleanUp waiters:// 4. purge_call waiters:/** Send a CancelRequest message. This does not lock the connection, so the ... */// REVISIT: See comments in CDROutputObject constructor.// Begin Code Base methods ---------------------------------------// Set this connection's code base IOR.  The IOR comes from the// SendingContext.  This is an optional service context, but all// JavaSoft ORBs send it.// The set and get methods don't need to be synchronized since the// first possible get would occur during reading a valuetype, and// that would be after the set.// Sets this connection's code base IOR.  This is done after// getting the IOR out of the SendingContext service context.// Our ORBs always send this, but it's optional in CORBA.// Get a CodeBase stub to use in unmarshaling.  The CachedCodeBase// won't connect to the remote codebase unless it's necessary.// End Code Base methods -----------------------------------------// set transport read thresholds// Must be public - used in encoding./** IdentityHashtable is a modified copy of the 1.1.6 Hashtable class which ... *//** The hash table data. *//** The total number of entries in the hash table. *//** Rehashes the table when count exceeds this threshold. *//** The load factor for the hashtable. *//** Constructs a new, empty hashtable with the specified initial ... *//** Constructs a new, empty hashtable with the specified initial capacity ... *//** Constructs a new, empty hashtable with a default capacity and load ... *//** Returns the number of keys in this hashtable. ... *//** Tests if this hashtable maps no keys to values. ... *//** Returns an enumeration of the keys in this hashtable. ... *//** Returns an enumeration of the values in this hashtable. ... *//** Tests if some key maps into the specified value in this hashtable. ... *//** Tests if the specified object is a key in this hashtable. ... *//** Returns the value to which the specified key is mapped in this hashtable. ... *//** Rehashes the contents of the hashtable into a hashtable with a ... *///System.out.println("rehash old=" + oldCapacity + ", new=" + newCapacity + ", thresh=" + threshold + ", count=" + count);/** Maps the specified <code>key</code> to the specified ... */// Make sure the value is not null// Makes sure the key is not already in the hashtable.// Rehash the table if the threshold is exceeded// Creates the new entry./** Removes the key (and its corresponding value) from this ... *//** Clears this hashtable so that it contains no keys. ... *//** Returns a rather long string representation of this hashtable. ... *//** IdentityHashtable collision list. *//** A hashtable enumerator class.  This class should remain opaque ... *//* Copyright (c) 1995, 2004, Oracle and/or its affiliates. All rights reserved. ... *//** Utility methods for doing various method calls which are used ... *//** Get local codebase System property (java.rmi.server.codebase). ... *//** Return true if the system property "java.rmi.server.useCodebaseOnly" ... *//* // If on 1.2, use a policy with all permissions. ... *//** Set the codebase and useCodebaseOnly properties. This is public ... *//** Set the default code base. This method is here only ... *//** Utility method for crawling call stack to load class */// Maintain the same error semantics as Class.forName()// It would be nice to bypass JDKClassLoader's attempts completely// if it's known that the latest user defined ClassLoader will// fail.// Otherwise, we end up calling Class.forName here as well as in// the next step in JDKBridge.  That can take a long time depending// on the length of the classpath.// Note: Looking at the only place in JDKBridge where this code// is invoked, it is clear that aClass will always be null.// See createKey for a description of what's involved// Loading this class with the call stack// loader isn't known to fail, so try// to load it.// Record that we failed to find the class// with this particular loader.  This way, we won't// waste time looking with this loader, again./** Private cache implementation specific to JDKClassLoader. */// JDKClassLoader couldn't find the class with the located// ClassLoader.  Note this in our cache so JDKClassLoader// can abort early next time.// Factory for a key (CacheKey is an implementation detail// of JDKClassLoaderCache).// A key currently consists of the class name as well as// the latest user defined class loader, so it's fairly// expensive to create.// Determine whether or not this combination of class name// and ClassLoader is known to fail.// Synchronized WeakHashMap// Cache result used to mark the caches when there is// no way JDKClassLoader could succeed with the given// key// Key consisting of the class name and the latest// user defined class loader// Try to incorporate both class name and loader// into the hashcode// WeakHashMap may compare null keys// I've made a decision to actually compare the// loader references.  I don't want a case when// two loader instances override their equals// methods and only compare code base.// This way, at worst, our performance will// be slower, but we know we'll do the correct// loading.// Check if orb.properties exists// Write properties to orb.properties/** PackagePrefixChecker provides static utility methods for getting package prefixes. ... */// || p.startsWith("com.sun.") || p.equals("com.sun")// Imports for using codebase URL to load class//d11638 files in the same package, therefore remove their reference//import com.sun.corba.se.impl.util.JDKBridge;//import com.sun.corba.se.impl.util.IdentityHashtable;// Legal IDL Identifier characters (1 = legal). Note// that '.' (2E) is marked as legal even though it is// not legal in IDL. This allows us to treat a fully// qualified Java name with '.' package separators// uniformly, and is safe because that is the only// legal use of '.' in a Java name.// 0 1 2 3  4 5 6 7  8 9 a b  c d e f// 00-0f// 10-1f// 20-2f// 30-3f// 40-4f// 50-5f// 60-6f// 70-7f// 80-8f// 90-9f// a0-af// b0-bf// c0-cf// d0-df// e0-ef// f0-ff// Repository ID fragments// Value tag utility methods and constants// Public, well known repository IDs// _REVISIT_ : A table structure with a good search routine for all of this// would be more efficient and easier to maintain...// String// Any// Class// Anita4: convert to uppercase// Object// Sequence// Serializable// Externalizable// Remote (The empty string is used for java.rmi.Remote)//kSpecialCasesClasses.put(kRemoteTypeStr, java.rmi.Remote.class);/** Used to convert ascii to hex. */// bug fix for 4328952; to eliminate possibility of overriding this// in a subclass.// Interface Rep ID Strings// Dummy arguments for getIdFromHelper method// To create a RepositoryID, use code similar to the following:// RepositoryId.cache.getId( id );// Special case for remote// fix where Attempting to obtain a FullValueDescription// for an RMI value type with a String field causes an exception.// default if not explicitly specified// we have a declared hash also// actualSuid = suid.substring(pos);// suid = suid.substring(0, pos-1);// _REVISIT_ : Special case version failure ?// This method will return the classname from the typestring OR if the classname turns out to be// a special class "pseudo" name, then the matching real classname is returned.// This method calls getClazzFromType() and falls back to the repStrToClass// cache if no class was found.  It's used where any class matching the// given repid is an acceptable result./** Checks to see if the FullValueDescription should be retrieved. ... */// to avoid race condition where multiple threads could be// accessing this method, and their access to the cache may// be interleaved giving unexpected results//ObjectStreamClass osc = ObjectStreamClass.lookup(clazz);//com.sun.corba.se.impl.io.ValueUtility.log("RepositoryId",mssg);/** Creates a repository ID for a sequence.  This is for expert users only as ... *//** Creates a repository ID for a normal Java Type. ... *//** Creates a repository ID for an IDL Java Type. ... *//** Createa a repository ID for the type if it is either a java type ... *//** Convert strings with illegal IDL identifier characters. ... */// We gotta convert. Have we already started?// No, so get set up...// Convert the character into the IDL escape syntax.../** Convert strings with ISO Latin 1 escape sequences back to original strings. ... */// Convert Hexadecimal// Really limited pool - in this case just creating several at a time...// Pool management//if (cache.size() <= MAX_CACHE_SIZE)/* // _REVISIT_ This will not work w/out either thread tracing or weak references.  I am ... *///repId = pool.popId().init(key);/** The vendor minor code ID reserved for Sun by the OMG. ... *//** The vendor minor code ID reserved for Sun. This value is or'd with ... *//** Handy class full of static functions. *//** Ensure that stubs, ties, and implementation objects ... */// The stub could not be connected because it// has an invalid IOR...// This is an implementation object which has not been// exported to IIOP OR is a JRMP stub or implementation// object which cannot be marshalled into an ORB stream...// Didn't need to do anything, just return the input.../* Get a new instance of an RMI-IIOP Tie for the ... */// Have we tried to find this guy before?// No, so try it...// First try the classname...// If we don't have a valid tie at this point,// walk up the parent chain until we either// load a tie or encounter PortableRemoteObject// or java.lang.Object...// Did we get it?// Nope, so cache that fact...// Yes, so cache it...// Yes, return a new instance or fail again if// it was a miss last time.../* Load an RMI-IIOP Tie *//* Clear the stub/tie caches. Intended for use by ... *//* Load a class and check that it is assignable to a given type. ... *///Sequence finding of the stubs according to spec//If-else is put here for speed up of J2EE.//According to the OMG spec, the if clause is not dead code.//It can occur if some compiler has allowed generation//into org.omg.stub hierarchy for non-offending//classes. This will encourage people to//produce non-offending class stubs in their own hierarchy.// If no class was loaded, or if the loaded class is not of the// correct type, make a further attempt to load the correct class// using the classloader of the expected type.// _REVISIT_ Is this step necessary, or should the Util,loadClass/* Load a class and check that it is compatible with a given type. ... */// If no class was not loaded, or if the loaded class is not of the// using the classloader of the related type./** Get the helper for an IDLValue ... */// no repId or unrecognized repId/** Get the factory for an IDLValue ... */// Try other way// if earlier search found a non-default factory, or the same default// factory that loadClassForClass would return, bale out now.../* Load an RMI-IIOP Stub given a Tie. ... */// Do we already have it cached?// No, so go try to load it...// Yes, is it a stub?  If not, it was a miss last// time, so return null again...// It's a stub.// Does the cached stub meet the requirements// of the caller? If the caller does not require// the most derived stub and does not require// a specific stub type, we don't have to check// any further because the cached type is good// enough...// We must reload because we do not have// the most derived cached already...// The stubFactory arg must be null here// to force onlyMostDerived=true to work// We do not have exactly the right stub. First, try to// upgrade the cached stub by forcing it to the most// derived stub...// If that failed, try again with the exact type// we need...// Use the cached stub. Is the delegate set?// No, so set it if we can.../* Load an RMI-IIOP Stub given a Tie, but do not look in the cache. ... */// This will throw an exception if the tie// is not a Servant.  XXX Handle this better?// Now walk all the RepIDs till we find a stub or fail...// Stub == null, so cache the miss...// The tie does not have a delegate set, so stash// this tie away using the stub as a key so that// later, when the stub is connected, we can find// and connect the tie as well...// Tie extends Servant// Exception is caught because of any of the// following reasons// 1) POA is not associated with the TIE// 2) POA Policies for the tie-associated POA//    does not support _this_object() call.// Update the cache.../* If we loadStub(Tie,...) stashed away a tie which was ... *//* Remove any cached Stub for the given tie. *//* Remove cached tie/servant pair. *//* Convert a RepId to a stubName... */// Convert the typeid to a RepositoryId instance, get// the className and mangle it as needed.../* Load an RMI-IIOP Stub.  This is used in PortableRemoteObject.narrow. */// Get the codebase from the delegate to use when loading// the new stub, if possible...// We can't assume that narrowFrom is a CORBA_2_3 stub, yet// it may have a 2_3 Delegate that provides a codebase.  Swallow// the ClassCastException otherwise./* Load an RMI-IIOP Stub class.  This is used in the ... */// Get the repID and check for "" special case.// We should never be called with it (See CDRInputStream// and the loadStub() method)...// Get the stubname from the repID and load// the class. If we have a valid 'sender', fall// back to using its codebase if we need to.../** Create an RMI stub name. *//** Create an RMI tie name. *//** Throws the CORBA equivalent of a java.io.NotSerializableException *//** Create an IDL stub name. *//** Read an object reference from the input stream and narrow ... *//** Read an abstract interface type from the input stream and narrow ... *//** Class BootstrapServer is the main entry point for the bootstrap server ... *//** Main startup routine for the bootstrap server. ... */// Process arguments// Look for the filename// Was the initial port specified? If so, override// This property normally is applied for the client side// configuration of resolvers.  Here we are using it to// define the server port that the with which the resolvers// communicate.// Create a file// Verify that if it exists, it is readable// Success: start up// Use the SERVER_PORT to create an Acceptor using the// old legacy code in ORBConfiguratorImpl.  When (if?)// the legacy support is removed, this code will need// to create an Acceptor directly.// This causes the acceptors to start listening./** Deprecated class for backward compatibility. *//* Copyright (c) 1995, 2003, Oracle and/or its affiliates. All rights reserved. ... *//* 1.4 value: com.sun.corba.se.internal.corba.ORB */// Class ORB/** This ORB class is defined to provide a home for the ... *//** <p> An <code>InputObject</code> is the interface used by the ... *//** <p> An <code>OutputObject</code> is the interface used by the ... *//** <p>The presentation block interacts with the PEPt architecture ... *//** The {@link com.sun.corba.se.pept.broker.Broker Broker} associated ... *//** Get the ... *//** <code>ClientRequestDispatcher</code> coordinates the request (and possible ... *//** At the beginning of a request the presentation block uses this ... *//** After the presentation block has set data on the ... */// REVISIT EXCEPTIONS/** After the presentation block completes a request it signals ... *//** <code>MessageMediator</code> is a central repository for artifacts ... *//** Used to initialize message headers. ... *//** Used to send the message (or its last fragment). ... *//** Used to wait for a response for synchronous messages. ... *//** Used to set the ... *//** Used to get the ... *//** <code>ProtocolHandler</code> is used to determine the ... */// REVISIT - return type/** This method determines the type of an incoming message and ... *//** <code>ServerRequestDispatcher</code> coordinates the request (and possible ... *//** This method coordinates the processing of a message received ... *//** <p>The <b><em>primary</em></b> PEPt server-side plug-in point and enabler ... *//** Used to initialize an <code>Acceptor</code>. ... *//** Used to determine if an <code>Acceptor</code> has been initialized. ... *//** PEPt uses separate caches for each type of <code>Acceptor</code> ... *//** Set the ... *//** Used to determine if the <code>Acceptor</code> should register ... *//** Accept a connection request. ... *//** Close the <code>Acceptor</code>. */// Factory methods// REVISIT: Identical to ContactInfo method.  Refactor into base interface./** Used to get a ... *//** Used to finish creating a ... */// Usage dictates implementation equals and hashCode./** <p><code>Connection</code> represents a <em>transport</em> in the ... *//** Used to determine if the <code>Connection</code> should register ... */// REVISIT - why special?/** Called to read incoming messages. ... *//** Close the <code>Connection</code>. */// REVISIT: replace next two with PlugInFactory (implemented by ContactInfo// and Acceptor)./** Indicates whether a ... *//** Indicates if the <code>Connection</code> is in the process of ... *//** Timestamps are used for connection management, in particular, for ... *//** The "state" of the <code>Connection</code>. ... *//** Grab a write lock on the <code>Connection</code>. ... *//** Release a write lock on the <code>Connection</code>. *//* Send the data encoded in ... *//** Register an invocation's ... *//** If a message expect's a response then this method is called. ... *//** Unregister an invocation's ... *//** Close all connections in the connection cache. ... *//** <p>The <b><em>primary</em></b> PEPt client-side plug-in point and enabler ... *//** The parent ... *//** Used to determine if a ... *//** Used to determine if the ... *//** PEPt uses separate caches for each type of <code>ContactInfo</code> ... *//** Used to lookup artifacts associated with this <code>ContactInfo</code>. ... *//** <p> <code>ContactInfoList</code> contains one or more ... *//** <code>ContactInfoIterator</code> is used to retrieve individual ... *//** The underlying list for this iterator. ... *//** Used to report information to the iterator to be used ... *//** The exception to report to the presentation block. ... */// NOTE: if there is more than one interest op this does not// allow discrimination between different ops and how threading// is handled.// REVISIT: need base class with two derived.// REVISIT: maybe return void (or MessageMediator)./** com/sun/corba/se/spi/activation/Activator.java . ... *//** com/sun/corba/se/spi/activation/ActivatorHelper.java . ... *//** com/sun/corba/se/spi/activation/ActivatorHolder.java . ... *//** com/sun/corba/se/spi/activation/ActivatorOperations.java . ... */// A new ORB started server registers itself with the Activator// Install a particular kind of endpoint// list active servers// If the server is not running, start it up.// If the server is running, shut it down// currently running, this method will activate it.// list all registered ORBs for a server// After this hook completes, the server may still be running./** com/sun/corba/se/spi/activation/BadServerDefinition.java . ... *//** com/sun/corba/se/spi/activation/BadServerDefinitionHelper.java . ... *//** com/sun/corba/se/spi/activation/BadServerDefinitionHolder.java . ... *//** com/sun/corba/se/spi/activation/EndPointInfo.java . ... *//** com/sun/corba/se/spi/activation/EndPointInfoHelper.java . ... *//** com/sun/corba/se/spi/activation/EndPointInfoHolder.java . ... *//** com/sun/corba/se/spi/activation/EndpointInfoListHelper.java . ... *//** com/sun/corba/se/spi/activation/EndpointInfoListHolder.java . ... *//** com/sun/corba/se/spi/activation/IIOP_CLEAR_TEXT.java . ... */// to avoid a compilation dependency./** com/sun/corba/se/spi/activation/InitialNameService.java . ... *//** com/sun/corba/se/spi/activation/InitialNameServiceHelper.java . ... *//** com/sun/corba/se/spi/activation/InitialNameServiceHolder.java . ... *//** com/sun/corba/se/spi/activation/InitialNameServiceOperations.java . ... */// bind initial name/** com/sun/corba/se/spi/activation/InitialNameServicePackage/NameAlreadyBound.java . ... *//** com/sun/corba/se/spi/activation/InitialNameServicePackage/NameAlreadyBoundHelper.java . ... *//** com/sun/corba/se/spi/activation/InitialNameServicePackage/NameAlreadyBoundHolder.java . ... *//** com/sun/corba/se/spi/activation/InvalidORBid.java . ... *//** com/sun/corba/se/spi/activation/InvalidORBidHelper.java . ... *//** com/sun/corba/se/spi/activation/InvalidORBidHolder.java . ... *//** com/sun/corba/se/spi/activation/Locator.java . ... *//** com/sun/corba/se/spi/activation/LocatorHelper.java . ... *//** com/sun/corba/se/spi/activation/LocatorHolder.java . ... *//** com/sun/corba/se/spi/activation/LocatorOperations.java . ... */// Starts the server if it is not already running.// get the port for the endpoint of the locator// to pick a particular port type./** com/sun/corba/se/spi/activation/LocatorPackage/ServerLocation.java . ... */// class ServerLocation/** com/sun/corba/se/spi/activation/LocatorPackage/ServerLocationHelper.java . ... *//** com/sun/corba/se/spi/activation/LocatorPackage/ServerLocationHolder.java . ... *//** com/sun/corba/se/spi/activation/LocatorPackage/ServerLocationPerORB.java . ... *//** com/sun/corba/se/spi/activation/LocatorPackage/ServerLocationPerORBHelper.java . ... *//** com/sun/corba/se/spi/activation/LocatorPackage/ServerLocationPerORBHolder.java . ... *//** com/sun/corba/se/spi/activation/NoSuchEndPoint.java . ... *//** com/sun/corba/se/spi/activation/NoSuchEndPointHelper.java . ... *//** com/sun/corba/se/spi/activation/NoSuchEndPointHolder.java . ... *//** com/sun/corba/se/spi/activation/ORBAlreadyRegistered.java . ... *//** com/sun/corba/se/spi/activation/ORBAlreadyRegisteredHelper.java . ... *//** com/sun/corba/se/spi/activation/ORBAlreadyRegisteredHolder.java . ... *//** com/sun/corba/se/spi/activation/ORBPortInfo.java . ... *//** com/sun/corba/se/spi/activation/ORBPortInfoHelper.java . ... *//** com/sun/corba/se/spi/activation/ORBPortInfoHolder.java . ... *//** com/sun/corba/se/spi/activation/ORBPortInfoListHelper.java . ... *//** com/sun/corba/se/spi/activation/ORBPortInfoListHolder.java . ... *//** com/sun/corba/se/spi/activation/ORBidHelper.java . ... */// issue resolved./** com/sun/corba/se/spi/activation/ORBidListHelper.java . ... *//** com/sun/corba/se/spi/activation/ORBidListHolder.java . ... *//** com/sun/corba/se/spi/activation/POANameHelper.java . ... *//** com/sun/corba/se/spi/activation/POANameHolder.java . ... *//** com/sun/corba/se/spi/activation/Repository.java . ... *//** com/sun/corba/se/spi/activation/RepositoryHelper.java . ... *//** com/sun/corba/se/spi/activation/RepositoryHolder.java . ... *//** com/sun/corba/se/spi/activation/RepositoryOperations.java . ... */// always uninstalled.// unregister server definition// get server definition// Return whether the server has been installed// if the server is currently marked as installed.// if the server is currently marked as uninstalled.// list registered servers// servers.// Find the ServerID associated with the given application name./** com/sun/corba/se/spi/activation/RepositoryPackage/ServerDef.java . ... *//** com/sun/corba/se/spi/activation/RepositoryPackage/ServerDefHelper.java . ... *//** com/sun/corba/se/spi/activation/RepositoryPackage/ServerDefHolder.java . ... *//** com/sun/corba/se/spi/activation/RepositoryPackage/StringSeqHelper.java . ... *//** com/sun/corba/se/spi/activation/RepositoryPackage/StringSeqHolder.java . ... *//** com/sun/corba/se/spi/activation/Server.java . ... *//** Server callback API, passed to Activator in active method. */// interface Server/** com/sun/corba/se/spi/activation/ServerAlreadyActive.java . ... *//** com/sun/corba/se/spi/activation/ServerAlreadyActiveHelper.java . ... *//** com/sun/corba/se/spi/activation/ServerAlreadyActiveHolder.java . ... *//** com/sun/corba/se/spi/activation/ServerAlreadyInstalled.java . ... *//** com/sun/corba/se/spi/activation/ServerAlreadyInstalledHelper.java . ... *//** com/sun/corba/se/spi/activation/ServerAlreadyInstalledHolder.java . ... *//** com/sun/corba/se/spi/activation/ServerAlreadyRegistered.java . ... *//** com/sun/corba/se/spi/activation/ServerAlreadyRegisteredHelper.java . ... *//** com/sun/corba/se/spi/activation/ServerAlreadyRegisteredHolder.java . ... *//** com/sun/corba/se/spi/activation/ServerAlreadyUninstalled.java . ... *//** com/sun/corba/se/spi/activation/ServerAlreadyUninstalledHelper.java . ... *//** com/sun/corba/se/spi/activation/ServerAlreadyUninstalledHolder.java . ... *//** com/sun/corba/se/spi/activation/ServerHeldDown.java . ... *//** com/sun/corba/se/spi/activation/ServerHeldDownHelper.java . ... *//** com/sun/corba/se/spi/activation/ServerHeldDownHolder.java . ... *//** com/sun/corba/se/spi/activation/ServerHelper.java . ... *//** com/sun/corba/se/spi/activation/ServerHolder.java . ... *//** com/sun/corba/se/spi/activation/ServerIdHelper.java . ... *//** com/sun/corba/se/spi/activation/ServerIdsHelper.java . ... *//** com/sun/corba/se/spi/activation/ServerIdsHolder.java . ... *//** com/sun/corba/se/spi/activation/ServerManager.java . ... *//** com/sun/corba/se/spi/activation/ServerManagerHelper.java . ... *//** com/sun/corba/se/spi/activation/ServerManagerHolder.java . ... *//** com/sun/corba/se/spi/activation/ServerManagerOperations.java . ... *//** com/sun/corba/se/spi/activation/ServerNotActive.java . ... *//** com/sun/corba/se/spi/activation/ServerNotActiveHelper.java . ... *//** com/sun/corba/se/spi/activation/ServerNotActiveHolder.java . ... *//** com/sun/corba/se/spi/activation/ServerNotRegistered.java . ... *//** com/sun/corba/se/spi/activation/ServerNotRegisteredHelper.java . ... *//** com/sun/corba/se/spi/activation/ServerNotRegisteredHolder.java . ... *//** com/sun/corba/se/spi/activation/ServerOperations.java . ... */// interface ServerOperations/** com/sun/corba/se/spi/activation/TCPPortHelper.java . ... *//** com/sun/corba/se/spi/activation/_ActivatorImplBase.java . ... */// activation/Activator/active// activation/Activator/registerEndpoints// activation/Activator/getActiveServers// activation/Activator/activate// activation/Activator/shutdown// activation/Activator/install// activation/Activator/getORBNames// activation/Activator/uninstall/** com/sun/corba/se/spi/activation/_ActivatorStub.java . ... */// active// registerEndpoints/** com/sun/corba/se/spi/activation/_InitialNameServiceImplBase.java . ... */// activation/InitialNameService/bind/** com/sun/corba/se/spi/activation/_InitialNameServiceStub.java . ... *//** com/sun/corba/se/spi/activation/_LocatorImplBase.java . ... */// activation/Locator/locateServer// activation/Locator/locateServerForORB// activation/Locator/getEndpoint// activation/Locator/getServerPortForType/** com/sun/corba/se/spi/activation/_LocatorStub.java . ... *//** com/sun/corba/se/spi/activation/_RepositoryImplBase.java . ... */// activation/Repository/registerServer// activation/Repository/unregisterServer// activation/Repository/getServer// activation/Repository/isInstalled// activation/Repository/install// activation/Repository/uninstall// activation/Repository/listRegisteredServers// activation/Repository/getApplicationNames// activation/Repository/getServerID/** com/sun/corba/se/spi/activation/_RepositoryStub.java . ... *//** com/sun/corba/se/spi/activation/_ServerImplBase.java . ... */// activation/Server/shutdown// activation/Server/install// activation/Server/uninstall// class _ServerImplBase/** com/sun/corba/se/spi/activation/_ServerManagerImplBase.java . ... *//** com/sun/corba/se/spi/activation/_ServerManagerStub.java . ... *//** com/sun/corba/se/spi/activation/_ServerStub.java . ... */// class _ServerStub/** Manager of ObjectCopier implementations used to support javax.rmi.CORBA.Util.copyObject(s). ... *//** Set the Id of the copier to use if no other copier has been set. *//** Return the copier for the default copier id.  Throws a BAD_PARAM exception ... *//** Register an ObjectCopierFactory under a particular id.  This can be retrieved ... *//** Obtain the ORB stream copier factory.  Note that this version behaves differently ... *//** Obtain the reference object "copier".  This does no copies: it just ... *//** Create a fallback copier factory from the two ObjectCopierFactory ... *//** Provides an interface for a variety of means to copy an arbitrary ... *//** ObjectCopier factory interface used for registration. *//** Create a new instance of an ObjectCopier. *//** Policy used to specify the copyObject implementation to use. *//** Policy used to support the request partitioning feature and to ... *//** Policy used to implement servant caching optimization in the POA. ... *//** Do not cache servants in the ClientRequestDispatcher.  This will ... *//** Perform servant caching, preserving POA current and POA destroy semantics. ... *//** Perform servant caching, preservent only POA current semantics. ... *//** Perform servant caching, not preserving POA current or POA destroy semantics. *//** Return the default servant caching policy. *//** Policy used to implement zero IIOP port policy in the POA. *//** Return the type id string from the IOR. *//** Return an iterator that iterates over tagged profiles with ... *//** Return a representation of this IOR in the standard GIOP stringified ... *//** Return a representation of this IOR in the standard GIOP marshalled ... *//** Return true if this IOR has no profiles. *//** Return true if this IOR is equivalent to ior.  Here equivalent means ... *//** Return the IORTemplate for this IOR.  This is simply a list ... *//** This class provides a number of factory methods for creating ... *//** Create an ObjectId for the given byte sequence. *//** Create an ObjectKey for the given ObjectKeyTemplate and ... *//** Create an empty IOR for the given orb and typeid.  The result is mutable. *//** Create an empty IOR for the given orb with a null typeid.  The result is mutable. *//** Read an IOR from an InputStream.  ObjectKeys are not shared. *//** Create an IORTemplate with the given ObjectKeyTemplate.  The result ... *//** Read an IORTemplate from an InputStream. *//** This method must be called in order to register the value ... */// Create and register the factory for the Object Reference Template// implementation.// Create and register the factory for the Object Reference Factory/** An IORFactory provides the capability of creating IORs.  It contains ... *//** Construct an IOR containing the given ORB, typeid, and ObjectId. ... *//** Return true iff this.makeIOR(orb,typeid,oid).isEquivalent( ... *//** An IORTemplate provides all of the data necessary to create an IOR except ... *//** Iterate over all TaggedProfileTemplates in this IORTemplate ... *//** An IORTemplateList is a list of IORTemplate instances.  It can be used to create IORs. ... *//** This interface represents an entity that can be written to an ... *//** Return the (type) identity of this entity. ... *//** Provide support for properly reading and writing Identifiable objects ... *//** Write the data for this object as a CDR encapsulation. ... *//** Convenience class for defining objects that contain lists of Identifiables. ... *//** Create this class with an empty list of identifiables. ... *//** Return an iterator which iterates over all contained Identifiables ... *//** Factory interface for creating Identifiables. *//** Return the id of this factory, which is the id of the result ... *//** Construct the appropriate Identifiable object with the ... *//** Interface used to manage a group of related IdentifiableFactory instances. ... *//** If there is a registered factory for id, use it to ... *//** Register a factory for the given id. *//** This is the object adapter ID for an object adapter. ... *//** Return the number of elements in the adapter ID. *//** Return an iterator that iterates over the components ... *//** Get the adapter name simply as an array of strings. *//** The full object key, which is contained in an IIOPProfile. ... *//** Return the object identifier for this Object key. *//** Return the template for this object key. *//** Construct ObjectKey and ObjectKeyTemplate instances from their ... *//** Create an ObjectKey from its octet sequence representation. *//** Create an ObjectKeyTemplate from its representation ... *//** An ObjectKeyTemplate represents the part of an Object Key ... *//** An ID used to determine how to perform operations on this ... *//** Return the server ID for this template. ... *//** Return the ORB ID for this template. *//** Return the object adapter ID for this template. *//** Compute an adapter ID for this template than includes ... *//** Generic interface for all tagged components.  Users of the ORB may ... *//** Base class to use for implementing TaggedComponents.  It implements ... *//** Create a tagged component from a GIOP marshalled representation ... *//** TaggedProfile represents a tagged profile in an IOR. ... *//** Return true is prof is equivalent to this TaggedProfile. ... *//** Return the TaggedProfile as a CDR encapsulation in the standard ... *//** Return true if this TaggedProfile was created in orb. ... *//** Base template for creating TaggedProfiles.  A TaggedProfile will often contain ... *//** Return an iterator that iterates over tagged components with ... *//** Create a TaggedProfile from this template. *//** Write the profile create( oktemp, id ) to the OutputStream os. *//** Return true if temp is equivalent to this template.  Equivalence ... *//** Return the tagged components in this profile (if any) ... *//** This interface represents an entity that can be written to an OutputStream. ... *//** Write this object directly to the output stream. */// Static fields// Major version 13 indicates Java serialization,// Minor version [00-FF] is the version number.// General methods/** This chooses the appropriate GIOP version. ... */// Check if the profile is from a legacy Sun ORB.// we are dealing with a SUN legacy orb which emits 1.1 IORs,// in spite of being able to handle only GIOP 1.0 messages.// Now the target has to be (FOREIGN | NEWER*)// both major version are the same/** IIOPAddress represents the host and port used to establish a ... *//** This class provides all of the factories for the IIOP profiles and ... *//** IIOPProfile represents an IIOP tagged profile. ... *//** Return the servant for this profile, if it is local ... *//** Return the GIOPVersion of this profile.  Caches the result. *//** Return the Codebase of this profile.  Caches the result. *//** IIOPProfileTemplate represents the parts of an IIOPProfile that are independent ... *//** Return the GIOP version of this profile. *//** Return the IIOP address from the IIOP profile.  This is called the ... *//** This interface represents the connection on which a request is made. *//** This exception is raised by <code>ORBSocketFactory.createSocket</code>. ... *//** LegacyServerSocketEndPointInfo is an abstraction of a port. *//** e.g.: "CLEAR_TEXT", "SSL", ... *//** Get the host name of this end point. Subcontracts must use this ... *//** The ORBD's proxy port of this end point. ... */// NAME is used while we still have a "port-exchange" ORBD// to get what used to be called "default" or "bootstrap" endpoints./** DEPRECATED.  DEPRECATED. DEPRECATED. DEPRECATED. <p> ... *//** DEPRECATED.  DEPRECATED. DEPRECATED. DEPRECATED. <p ... *//** The interface defines an extension to the standard ORBInitInfo ... *//** This interface is implemented by our implementation of ... *//** Defines constants for all of the logging domains used in the ORB. ... */// Top level log domain for CORBA/** Log domain for code directly implementing the CORBA API and ... *//** Log domain for any sort of wire encoding used in marshalling *//** Log domain for the code used to handle any kind of invocation ... *//** Log domain for low-level transport details, which are ... *//** Log domain for naming context creation and destruction. *//** Log domain for name service lookup. *//** Log domain for name service bind, rebind, destroy, and other state ... *//** Log domain for the ORBD locator function, which forwards ... *//** Log domain for the ORBD activator function, which starts ... *//** Log domain for the Implementation Repository. *//** Log domain for the servertool utilitiy used to update the ... *//** Log domain for ORB initialization, configuration, startup, ... *//** Log domain for ORB client side name resolution and supporting ... *//** Log domain for creation, destruction, and state change of ... *//** Log domain for all IOR related code. *//** Log domain for object adapter request dispatch. *//** Log domain for the RMI-IIOP implementation in the Stub, Util, and ... *//** Log domain for utility classes. */// Private method to infer the caller's class and method names// Get the stack trace.// The top of the stack should always be a method in the wrapper class,// or in this base class.// Search back to the first method not in the wrapper class or this class.// Set the class and method if we are not past the end of the stack// trace/** <p> ... *////////////////////////////////////////// operations// end LongMonitoredAttributeBase// end MonitoredAttribute/** Constructor. *//** A Package Private Constructor for internal use only. *//** A Package Private convenience method for setting MonitoredAttributeInfo ... *//** If the concrete class decides not to provide the implementation of this ... *//** This method should be implemented by the concrete class. *//** This method should be implemented by the concrete class only if the ... *//** Gets the MonitoredAttributeInfo for the attribute. *//** Gets the name of the attribute. */// end MonitoredAttributeBase// end MonitoredAttributeInfo/** A Simple Factory Method to create the Monitored Attribute Info. */// end MonitoredObject/** A Simple Factory Method to create the Monitored Object. The name ... */// Connection Monitoring// ThreadPool and WorkQueue monitoring constants// attributes// end MonitoringManager// Every StatisticMonitoredAttribute will have a StatisticAccumulator. User// will use Statisticsaccumulator to accumulate the samples associated with// this Monitored Attribute// Mutex is passed from the user class which is providing the sample values.// getValue() and clearState() is synchronized on this user provided mutex// end StatisticMonitoredAttribute/** Gets the value from the StatisticsAccumulator, the value will be a formatted ... *//** Clears the state on Statistics Accumulator, After this call all samples are ... *//** Gets the statistics accumulator associated with StatisticMonitoredAttribute. ... */// Users can extend this class to get access to current Max value// Users can extend this class to get access to current Min value// end sample/** Computes the Standard Statistic Results based on the samples collected ... *//** Users can extend StatisticsAccumulator to provide the complete ... *//** If users choose to custom format the stats. *//** We use a derived Standard Deviation formula to compute SD. This way ... *//** Clears the samples and starts fresh on new samples. *//** This is an internal API to test StatisticsAccumulator... */// We are computing Standard Deviation from two different methods// for comparison. So, the values will not be the exact same to the last// few digits. So, we are taking the difference and making sure that// the difference is not greater than 1.// end StatisticsAccumulator// end StringMonitoredAttributeBase/** NullServant is used to represent a null servant returned ... *//** Obtain the exception that is associated with this ... *//** OADefault provides methods to create the standard ObjectAdapterFactory ... *//** This exception is thrown when an operation on an ObjectAdapter ... *//** This class is a holder for the information required to implement POACurrent. ... */// This is the container object for the servant.// In the RMI-IIOP case, it is the RMI-IIOP Tie, and the servant is the// target of the Tie.// In all other cases, it is the same as the Servant.// These fields are to support standard OMG APIs.// These fields are to support the Object adapter implementation.// This is the copier to be used by javax.rmi.CORBA.Util.copyObject(s)// For the current request.// Copy constructor of sorts; used in local optimization path//getters// Create CookieHolder on demand.  This is only called by a single// thread, so no synchronization is needed.//setters// REVISIT: What should the order be?  enter/push...pop/exit?/** ObjectAdapter represents the abstract model of an object ... */// Basic methods for supporting interceptors/** Returns the ORB associated with this adapter. *//** Returns the IOR template of this adapter.  The profiles ... */// Methods needed to support ORT./** Return the ID of the AdapterManager for this object adapter. *//** Return the current state of this object adapter (see ... *//** Change the current factory.  This may only be called during the ... */// Methods required for dispatching to servants/** Get the servant corresponding to the given objectId, if this is supported. ... *//** enter must be called before each request is invoked on a servant. ... *//** exit must be called after each request has been completed.  If enter ... *//** Must be called every time getInvocationServant is called after ... *//** Create an instance of InvocationInfo that is appropriate for this ... */// Exception wrappers// Data related to the construction of object references and// supporting the Object Reference Template./* This creates the complete template. ... */// This calls acceptors which create profiles and may// add tagged components to those profiles.// This runs the IORInterceptors.// Note that all current subclasses share the same implementation of this method,// but overriding it would make sense for OAs that use a different InvocationInfo./** Initialize this object adapter factory instance. *//** Shutdown all object adapters and other state associated ... *//** Find the ObjectAdapter instance that corresponds to the ... *//** Interface for collecting all sources of ORB configuration properties ... *//** Return true iff this DataCollector was created from ... *//** Return true iff the local host and ORB initial host are the same. ... *//** Set the parser which is used to obtain property names. ... *//** Return the consolidated property information to be used ... */// XXX needs an SPI or else it does not belong here// XXX Should there be a SPI level constants ?// As much as possible, this class should be stateless.  However,// there are a few reasons why it is not:// 1. The ORB debug flags are defined here because they are accessed//    frequently, and we do not want a cast to the impl just for that.// 2. typeCodeMap and primitiveTypeCodeConstants are here because they//    are needed in both ORBImpl and ORBSingleton.// 3. Logging support is here so that we can avoid problems with//    incompletely initialized ORBs that need to perform logging.// Flag set at compile time to debug flag processing: this can't// be one of the xxxDebugFlags because it is used to debug the mechanism// that sets the xxxDebugFlags!// Currently defined debug flags.  Any additions must be called xxxDebugFlag.// All debug flags must be public boolean types.// These are set by passing the flag -ORBDebug x,y,z in the ORB init args.// Note that x,y,z must not contain spaces.// SystemException log wrappers.  Protected so that they can be used in// subclasses.// This map is needed for resolving recursive type code placeholders// based on the unique repository id.// XXX Should this be a WeakHashMap for GC?// ByteBufferPool - needed by both ORBImpl and ORBSingleton// Local testing// XXX clean this up, probably remove these// Invocation stack manipulation// wrapperMap maintains a table of LogWrapper instances used by// different classes to log exceptions.  The key is a StringPair// representing LogDomain and ExceptionGroup.// First try the configured class name, if any// Use the default. Log the error as a warning./** Returns the Presentation Manager for the current thread group, using the ThreadGroup-specific ... */// No security manager or AppContext/** Get the appropriate StubFactoryFactory.  This ... */// Initialize logging first, since it is needed nearly// everywhere (for example, in TypeCodeImpl).// Typecode support: needed in both ORBImpl and ORBSingleton// Special non-standard set_parameters method for// creating a precisely controlled ORB instance.// An ORB created by this call is affected only by// those properties passes explicitly in props, not by// the system properties and orb.properties files as// with the standard ORB.init methods.// ORB versioning// XXX This needs a better name/** Handle a bad server id for the given object key.  This should ... */// Dispatch support: in the ORB because it is needed for shutdown.// This is used by the first level server side subcontract./** Return this ORB's transient server ID.  This is needed for ... */// XXX These next 7 methods should be moved to a ResolverManager./** Set the ServerRequestDispatcher that should be used for handling INS requests. */// XXX The next 5 operations should be moved to an IORManager./** Factory finders for the various parts of the IOR: tagged components, tagged ... */// Logging SPI/** Returns the logger based on the category. */// Determine the correct ORBId.  There are 3 cases:// 1. odata is null, which happens if we are getting a logger before//    ORB initialization is complete.  In this case we cannot determine//    the ORB ID (it's not known yet), so we set the ORBId to//    _INITIALIZING_.// 2. odata is not null, so initialization is complete, but ORBId is set to//    the default "".  To avoid a ".." in//    the log domain, we simply use _DEFAULT_ in this case.// 3. odata is not null, ORBId is not "": just use the ORBId./** get the log wrapper class (its type is dependent on the exceptionGroup) for the ... */// get a reference to a ByteBufferPool, a pool of NIO ByteBuffers// NOTE: ByteBuffer pool must be unique per ORB, not per process.//       There can be more than one ORB per process.//       This method must also be inherited by both ORB and ORBSingleton./* This method is called to verify that a stringified IOR passed to ... *//** Interface used to configure an ORB instance.  The DataCollector dc has all ... *//** Get the prefered code sets for connections. Should the client send the ... */// ORB from another vendor// JDK 1.3.0 or earlier// JDK 1.3.1 FCS// JDK1_3_1_01 patch// JDK 1.4.x// PEORB in JDK 1.5, S1AS 8, J2EE 1.4/** Return the current version of this ORB *//* Throwing an exception here would cause this version to be ... *//** Update: If we treat all unknown versions as the latest version ... *//** A generic class representing a function that takes a value and returns ... *//** Apply some function to a value and return the result. *//** This is a static factory class for commonly used operations ... */// Note that this method carefully constructs an array of the type// of the first result, rather than just using Object[], which is// not convertible into the correct type.  Also note that no tokens// results in a null result.// XXX Does this correctly handle array types?  It seems// that hetereogeneous arrays work this way, while// homogeneous arrays need to use Array.newInstance tricks.// XXX This could probably be further extended by using more reflection and// a dynamic proxy that satisfies the interfaces that are inherited by the// more derived class.  Do we want to go that far?/** Override this method if there is some needed initialization ... */// Do nothing in this case: no parsing takes place// Since exc wraps the actual exception, use exc.getCause()// instead of exc.// Make sure that any extra initialization takes place after all the// fields are set from the map.// Construct a map that maps field names to test or default values,// then use setFields from the parent class.  A map is constructed// by implementing AbstractMap, which requires implementing the// entrySet() method, which requires implementing a set of// map entries, which requires implementing an iterator,// which iterates over the ParserData, extracting the// correct (key, value) pairs (nested typed lambda expression).// index of next element to return/** Return a map from field name to value. */// A null result means that the property was not set for// this action, so do not override the default value in this case./** Description goes here ... *//** Called by the state engine to perform an action ... */// end of Action.java/** An FSM is used to represent an instance of a finite state machine ... *//** Get the current state of this FSM. *//** Perform the action and transition to the next state based ... */// end of FSM.java/** This is the main class that represents an instance of a state machine ... *//** Create an instance of an FSM using the StateEngine ... *//** Return the current state. *//** Perform the transition for the given input in the current state.  This proceeds as follows: ... */// Methods for use only by StateEngineImpl// end of FSMImpl.java/** Called by the state engine to determine whether a ... *//** This interface must be implemented by any class that is used as ... */// end of Input.java/** Method that defines action that occurs whenever this state is entered. ... *//** Method that defines action that occurs whenever this state is exited. ... */// end of State.java/** A StateEngine defines the state transition function for a ... *//** Add a new transition (old,in,guard,act,new) to the state engine. ... *//** Add a transition with a guard that always evaluates to true. *//** Set the default transition and action for a state. ... *//** Equivalent to setDefault( oldState, act, newState ) where act is an ... *//** Euaivalent to setDefault( oldState, oldState ) *//** Set the default action used in this state engine.  This is the ... *//** Called after all transitions have been added to the state engine. ... *//** Create an instance of a FSM that uses this state engine. ... */// end of StateEngine.java/** Factory for creating the standard state machine implementation. ... *//** Base class for all states in a StateEngine.  This must be used ... */// Methods for use only by StateEngineImpl./** Add an invocation handler for all methods on interface interf. *//** Set the default invocation handler to use if none of the ... */// Note that the declaring class in method is the interface// in which the method was defined, not the proxy class.// handler should never be null here./* Copyright (c) 2004, 2006, Oracle and/or its affiliates. All rights reserved. ... */// This throws an IllegalArgument exception if the delegate// is not assignable from method.getDeclaring class.// Propagate the underlying exception as the// result of the invocation/** Get an InvocationHandler. *//** Get the interfaces that InvocationHandler instances ... *//** This interface is used for InvocationHandler types that are ... *//** This interface defines a thread pool execution service.  The ORB uses this ... *//** This method will return any instance of the WorkQueue. If the ThreadPool ... *//** This method will return an instance of the of the WorkQueue given a queueId. ... *//** This method will return the minimum number of threads maintained by the threadpool. *//** This method will return the maximum number of threads in the threadpool at any ... *//** This method will return the time in milliseconds when idle threads in the threadpool are ... *//** This method will return the current number of threads in the threadpool. This method ... *//** This method will return the number of available threads in the threadpool which are ... *//** This method will return the number of busy threads in the threadpool ... *//** This method returns the number of Work items processed by the threadpool *//** This method returns the average elapsed time taken to complete a Work ... *//** This method will return the name of the threadpool. *//** This method is used to return an instance of ThreadPool based on the ... *//** This method is used to return an instance of ThreadPool that is obtained ... *//** This method is a convenience method to see what threadpool-ids are being ... *//** This method denotes the actual work that is done by the work item. *//** This methods sets the time in millis in the work item, when this ... *//** This methods gets the time in millis in the work item, when this ... *//** This method will return the name of the work item. *//** This method is used to add work to the WorkQueue *//** This method will return the name of the WorkQueue. *//** Returns the total number of Work items added to the Queue. *//** Returns the total number of Work items in the Queue to be processed. *//** Returns the average time a work item is waiting in the queue before ... *//** Set the ThreadPool instance servicing this WorkQueue *//** Get the ThreadPool instance servicing this WorkQueue *//** Used to read and write arguments and results for a particular method. *//** Returns the method used to create this DynamicMethodMarshaller. *//** Copy the arguments as needed for this particular method. ... *//** Read the arguments for this method from the InputStream. ... *//** Write arguments for this method to the OutputStream. ... *//** Copy the result as needed for this particular method. ... *//** Read the result from the InputStream.  Returns null ... *//** Write the result to the OutputStream.  Does nothing if ... *//** Returns true iff thr's class is a declared exception (or a subclass of ... *//** Write the repository ID of the exception and the value of the ... *//** Reads an exception ID and the corresponding exception from ... *//** Interface used to support dynamically generated stubs. ... *//** Similar to ObjectImpl._set_delegate *//** Similar to ObjectImpl._get_delegate *//** Similar to ObjectImpl._orb() *//** Similar to ObjectImpl._ids *//** Connect this dynamic stub to an ORB. ... *//** Translates between methods on an interface and RMI-IIOP encodings ... *//** Get the interfaces that this IDLNameTranslator describes. *//** Get all methods for this remote interface. ... *//** Get the method from this IDLNameTranslator's interfaces that ... *//** Get the mangled name that corresponds to the given method ... *//** Provides access to RMI-IIOP stubs and ties. ... *//** Creates StubFactory and Tie instances. *//** Return the standard name of a stub (according to the RMI-IIOP specification ... *//** Create a stub factory for stubs for the interface whose type is given by ... *//** Return a Tie for the given class. *//** Return whether or not this StubFactoryFactory creates StubFactory ... *//** Creates the actual stub needed for RMI-IIOP remote ... *//** Create a new dynamic stub.  It has the type that was ... *//** Return the repository ID information for all Stubs ... *//** Get the class used to create this ClassData instance *//** Get the IDLNameTranslator for the class used to create ... *//** Return the array of repository IDs for all of the remote ... *//** Get the InvocationHandlerFactory that is used to create ... *//** Get the dictionary for this ClassData instance. ... *//** Get the ClassData for a particular class. ... *//** Given a particular method, return a DynamicMethodMarshaller ... *//** Return the registered StubFactoryFactory. *//** Register the StubFactoryFactory.  Note that ... *//** Equivalent to getStubFactoryFactory( true ).getTie( null ). ... *//** Returns the value of the com.sun.CORBA.ORBUseDynamicStub ... */// XXX Getting rid of this requires introducing an ObjectAdapterManager abstraction// as an interface into the OA framework./** Provide access to stub delegate and type id information ... *//** Use implicit activation to get an object reference for the servant. */// Make sure that the POAManager is activated if no other// POAManager state management has taken place./** Given any Tie, return the corresponding object refernce, activating ... *//** Any implementation of Tie should be either a Servant or an ObjectImpl, ... *//** This also gets the delegate from a Servant by ... *//** Wrapper that can take any stub (object x such that StubAdapter.isStub(x)) ... *//** Interface used to create a ClientDelegate from a ContactInfoList. */// REVIST name ForRequest?// REVISIT - not sure if the final fragment and DII stuff should// go here.// Server side// from core.ServerRequest// XXX These must all be replaced by Sun private APIs./** Server delegate adds behavior on the server-side -- specifically ... *//** Handle a locate request. *//** Thrown to signal an OBJECT_FORWARD or LOCATION_FORWARD */// This check is done early so that no attempt// may be made to do a location forward to a local// object.  Doing this lazily would allow// forwarding to locals in some restricted cases./** InitialServerRequestDispatcher is a specialized version of a ServerRequestDispatcher ... *//** Plug in the resolver that this InitialServerRequestDispatcher should ... *//** Returns a Java reference to the servant which should be used for this ... */// XXX These need to go away./** This interface defines the PI interface that is used to interface the rest of the ... *//** Complete the initialization of the PIHandler.  This will execute the methods ... *//* *************************** ... *//** Called when a new object adapter is created. ... *//** Called whenever a state change occurs in an adapter manager. ... *//** Called whenever a state change occurs in an object adapter that ... *//** Called for pseudo-ops to temporarily disable portable interceptor ... *//** Called for pseudo-ops to re-enable portable interceptor ... *//** Called when the send_request or send_poll portable interception point ... *//** Called when the appropriate client ending interception point is ... *//** Called when a retry is needed after initiateClientPIRequest but ... *//** Invoked when a request is about to be created.  Must be called before ... *//** Invoked when a request is about to be cleaned up.  Must be called ... *//** Notifies PI of additional information for client-side interceptors. ... *//** Notify PI of the MessageMediator for the request. *//** Called when the appropriate server starting interception point is ... *//** Called when the appropriate server intermediate interception point is ... *//** Called when the appropriate server ending interception point is ... *//** Notifies PI to start a new server request and set initial ... *//** Notifies PI of additional information reqired for ServerRequestInfo. ... *//** Notifies PI of additional information required for ServerRequestInfo. *//** Notifies PI of additional information for server-side interceptors. ... */// Used only in the implementation: no client of this class ever needs these/** Register a ClientRequestDispatcher for a particular subcontract ID. ... *//** Get the ClientRequestDispatcher for subcontract ID scid. *//** Register a LocalClientRequestDispatcher for a particular subcontract ID. ... *//** Get the LocalClientRequestDispatcher for subcontract ID scid. *//** Register a CorbaServerRequestDispatcher for a particular subcontract ID. ... *//** Get the CorbaServerRequestDispatcher for subcontract ID scid. *//** Register a CorbaServerRequestDispatcher for handling an explicit object key name. ... *//** Get the CorbaServerRequestDispatcher for a particular object key. *//** Register an ObjectAdapterFactory for a particular subcontract ID. ... *//** Get the ObjectAdapterFactory for a particular subcontract ID scid. *//** Return the set of all ObjectAdapterFactory instances that are registered. *//* Copyright (c) 2010, Oracle and/or its affiliates. All rights reserved. ... */// Introduce more information about WHY we are re-trying a request// so we can properly handle the two cases:// - BEFORE_RESPONSE means that the retry is caused by//   something that happened BEFORE the message was sent: either//   an exception from the SocketFactory, or one from the//   Client side send_request interceptor point.// - AFTER_RESPONSE means that the retry is a result either of the//   request sent to the server (from the response), or from the//   Client side receive_xxx interceptor point./** A LocalResolver is a Resolver that allows registration of (name, CORBA object) ... *//** Register the Closure with the given name. ... *//** Resolver defines the operations needed to support ORB operations for ... *//** Look up the name using this resolver and return the CORBA object ... *//** Return the entire collection of names that are currently bound ... *//** Utility class that provides factory methods for all of the ... *//** Return a local resolver that simply stores bindings in a map. *//** Return a resolver that relies on configured values of ORBInitRef for data. *//** Return a resolver that uses the proprietary bootstrap protocol ... *//** Return a resolver composed of the two given resolvers.  result.list() is the ... */// Required SERVICE_CONTEXT_ID and getId definitions// The singleton uses the maximum version indicated by our// ValueHandler.// pay particular attention to where the version is being read from!// is contains an encapsulation, ServiceContext reads off the// encapsulation and leaves the pointer in the variable "in",// which points to the long value.// current ORB Version/** Base class for all ServiceContext classes. ... *//** Simple default constructor used when subclass is constructed ... *//** Stream constructor used when subclass is constructed from an ... *//** Returns Service context id.  Must be overloaded in subclass. *//** Write the service context to an output stream.  This method ... *//** Writes the data used to represent the subclasses service context ... *//** in is the stream containing the service context representation. ... *//** Internal class used to hold data about a service context class. */// Find the appropriate constructor in cls// get the ID from the public static final int SERVICE_CONTEXT_ID/** Factory method used to create a ServiceContext object by ... *//** Register the ServiceContext class so that it will be recognized ... *//** Given the input stream, this fills our service ... */// Use the GIOP version of the ORB.  Should// be specified in ServiceContext.// See REVISIT below concerning giopVersion./** Read the Service contexts from the input stream. */// We need to store this so that we can have access// to the CodeBase for unmarshaling possible// RMI-IIOP valuetype data within an encapsulation.// (Known case: UnknownExceptionInfo)// Fix for bug 4904723/** Find the ServiceContextData for a given scId and unmarshal ... */// REVISIT.  GIOP version should be specified as// part of a service context's definition, so should// be accessible from ServiceContextData via// its ServiceContext implementation class.// Since we don't have that, yet, I'm using the GIOP// version of the input stream, presuming that someone// can't send a service context of a later GIOP// version than its stream version.// Note:  As of Jan 2001, no standard OMG or Sun service contexts// ship wchar data or are defined as using anything but GIOP 1.0 CDR.// Now the input stream passed to a ServiceContext// constructor is already the encapsulation input// stream with the endianness read off, so the// service context should just unmarshal its own// data.// Make service context 12 bytes longer by adding// JAVAIDL_ALIGN_SERVICE_ID service context at end.// The exact length// must be >8 (minimum service context size) and// =4 mod 8, so 12 is the minimum./** Hopefully unused scid:  This should be changed to a proper ... *//** Write the service contexts to the output stream. ... *//** Write the service contexts in scMap in a desired order. ... */// Temporarily remove this rather than check it per iteration// Write the UnknownExceptionInfo service context last// (so it will be after the CodeBase) and restore it in// the map./** Write the given entry from the scMap to the OutputStream. ... */// If it's still in byte[] form, we don't need to// unmarshal it here, just copy the bytes into// the new stream.// We actually unmarshaled it into a ServiceContext// at some point./** Add a service context to the stream, if there is not already ... */// Lazy unmarshaling on first use./** Map of all ServiceContext objects in this container. ... *//** If true, write out a special alignment service context to force the ... */// Facade to ResponseWaitingRoom.// Connection status// REVISIT: WRONG: should not expose sockets here.// REVISIT - MessageMediator parameter?/** Clean up all connection resources.  Used when shutting down an ORB. */// REVISIT - type/** Interface used to create a ContactInfoList from an IOR, as required ... *//** This will be called after the no-arg constructor before ... */// REVISIT: this is GIOP specific./** This interface is the "sticky manager" for IIOP failover.  The default ... *//** @param *//** Used to extract socket address information from an IOR. ... *//** Interface that provides operations to transorm an IOR ... */// create transport read timeouts// Endpoint types known in advance.// If you change the value of this constant then update// activation.idl accordingly.  It has a duplicate definition// Internal imports, not used in the interface to this package/** This class provices standard building blocks for the ORB, as do all Default classes ... *//* Copyright (c) 2007, Oracle and/or its affiliates. All rights reserved. ... *//* ******************************************************************** ... *//** Signals that an Image Format exception of some sort has occurred. ... *//** Constructs an <code>ImageFormatException</code> with no detail message. *//** Constructs an <code>ImageFormatException</code> with the specified ... *//** ******************************************************************** ... *//** This class is a factory for implementations of the JPEG Image ... *//** This creates an instance of a JPEGImageDecoder that can be used ... *//** This creates an instance of a JPEGImageEncoder that can be used ... *//** This is a factory method for creating JPEGEncodeParam objects. ... *//** This is a factory method for creating JPEGEncodeParam objects.  It ... *//** This is a factory method for creating a JPEGEncodeParam from a ... *//** JPEGDecodeParam encapsulates tables and options necessary to ... *//** Unknown or Undefined Color ID *//** Monochrome *//** Red, Green, and Blue *//** YCbCr *//** CMYK *//** PhotoYCC *//** RGB-Alpha *//** YCbCr-Alpha *//** RGB-Alpha with R, G, and B inverted. *//** YCbCr-Alpha with Y, Cb, and Cr inverted. *//** PhotoYCC-Alpha *//** YCbCrK *//** Number of color ids defined. *//** Number of allowed Huffman and Quantization Tables *//** The X and Y units simply indicate the aspect ratio of the pixels. *//** Pixel density is in pixels per inch. *//** Pixel density is in pixels per centemeter. *//** The max known value for DENSITY_UNIT *//** APP0 marker - JFIF info *//** APP1 marker *//** APP2 marker *//** APP3 marker *//** APP4 marker *//** APP5 marker *//** APP6 marker *//** APP7 marker *//** APP8 marker *//** APP9 marker *//** APPA marker *//** APPB marker *//** APPC marker *//** APPD marker *//** APPE marker - Adobe info *//** APPF marker *//** Adobe marker indicates presence/need for Adobe marker. *//** Get the image width ... *//** Get the image height ... *//** Return the Horizontal subsampling factor for requested ... *//** Return the Vertical subsampling factor for requested ... *//** Returns the coefficient quantization tables or NULL if not ... *//** Returns the Quantization table for the requested component. ... *//** Returns the DC Huffman coding table requested or null if ... *//** Returns the DC Huffman coding table for the requested component. ... *//** Returns the AC Huffman coding table requested or null if ... *//** Returns the AC Huffman coding table for the requested component. ... *//** Get the number of the DC Huffman table that will be used for ... *//** Get the number of the AC Huffman table that will be used for ... *//** Get the number of the quantization table that will be used for ... *//** Returns true if the image information in the ParamBlock is ... *//** Returns true if the tables in the ParamBlock are currently ... *//** Returns true if at least one instance of the marker is present ... *//** Returns a 'byte[][]' associated with the requested marker in ... *//** Returns the JPEG Encoded color id. This is generally ... *//** Returns the number of components for the current encoding ... *//** Get the MCUs per restart marker. ... *//** Get the code for pixel size units This value is copied from the ... *//** Get the horizontal pixel density This value is copied from the ... *//** Get the vertical pixel density This value is copied into the ... *//** JPEGEncodeParam encapsulates tables and options necessary to ... *//** Set the horizontal subsample factor for the given component. ... *//** Set the vertical subsample factor for the given component.  Note that ... *//** Sets the coefficient quantization tables at index ... *//** Sets the DC Huffman coding table at index to the table provided. ... *//** Sets the AC Huffman coding table at index to the table provided. ... *//** Sets the mapping between a component and it's DC Huffman Table. ... *//** Sets the mapping between a component and it's AC Huffman Table. ... *//** Sets the mapping between a component and it's Quantization Table. ... *//** Set the flag indicating the validity of the table information ... *//** Set the flag indicating the validity of the image information ... *//** Sets the marker data to be written to the output data stream. ... *//** Appends 'data' to the array of byte[] associated with ... *//** Set the MCUs per restart, or 0 for no restart markers. ... *//** Set the pixel size units This value is copied into the APP0 ... *//** Set the horizontal pixel density This value is written into the ... *//** Set the vertical pixel density.  This value is copied into ... *//** This creates new Quantization tables that replace the currently ... *//** A class to encapsulate a JPEG Huffman table. ... *//** The maximum number of symbol lengths ... *//** the maximum number of symbols *//** bits[k] = number of symbols with length k bits *//** Symbols in order of increasing length *//** Standard Huffman table ( JPEG standard section K.3 ) */// 0-base/** Private constructor used to construct the Standard Huffman tables *//** Creates a Huffman Table and initializes it. ... *//** This checks that the table they gave us isn't 'illegal' It ... *///System.out.println("NumVals: " + numVals);//System.out.println("Sum: " + sum + " Symbols: " + symbols.length);// I'll let them go if they gave us 'extra' symbols.../** Return a copy of the array containing the number of symbols ... *//** Return an array containing the Huffman symbols arranged by ... *//** JPEGImageDecoder Interface ... *//** This interface describes a JPEG data stream decoder.  This decoder ... *//** Returns the JPEGDecodeParam object that resulted from the most ... *//** Sets the JPEGDecodeParam object used to determine the features ... *//** Get the input stream that decoding will occur from. ... *//** Decode the JPEG stream that was passed as part of ... *//** Decodes the current JPEG data stream.  The result of decoding ... */// end class JPEGImageDecoder/** JPEGImageEncoder Interface ... *//** JPEGImageEncoder encodes buffers of image data into JPEG data ... *//** Return the stream the Encoder is currenlt associated with. *//** Set the JPEGEncodeParam object that is to be used for future ... *//** This returns a copy of the current JPEGEncodeParam object, if ... *//** Encode a BufferedImage as a JPEG data stream.  Note, some color ... *//** Returns the 'default' encoded COLOR_ID for a given ColorModel. ... *//** Encode a Raster as a JPEG data stream.  Note that no color ... *//** Class to encapsulate the JPEG quantization tables. ... *//** Quantization step for each coefficient in zig-zag order *//** The number of coefficients in a DCT block *//** This is the sample luminance quantization table given in the ... *//** Constructs an empty quantization table. This is used to create ... *//** Constructs an quantization table from the array that was ... *//** Returns the current quantization table as an array of ints in ... *//** Returns a new Quantization table where the values are ... */// limit to valid range// Max quantizer for 12 bits/** Signals that a truncated file was detected.  This object contains ... *//** Constructs a <code>TruncatedFileException</code> with the ... *//** Constructs an <code>TruncatedFileException</code> with the ... *//** Allows access to the raster that was in the progress of being ... *//** Allows access to the BufferedImage that was in the progress of ... *//* Copyright (c) 2013, Oracle and/or its affiliates. All rights reserved. ... */// bmp versions// Color space types// Compression Types/** This class is the Java Image IO plugin reader for BMP images. ... */// BMP Image types// BMP variables/** The input stream where reads from *//** Indicates whether the header is read. *//** The original image width. *//** The original image height. *//** The destination region. *//** The source region. *//** The metadata from the stream. *//** The destination image. *//** Indicates whether subsampled, subregion is required, and offset is ... *//** Indicates whether subband is selected. *//** The scaling factors. *//** source and destination bands. *//** Constructs <code>BMPImageReader</code> from the provided ... *//** Overrides the method defined in the superclass. */// Always works/** Process the image header. ... */// read and check the magic marker// Read file size// skip the two reserved fields// Offset to the bitmap from the beginning// End File Header// Start BitmapCoreHeader//metadata.colorPlane = planes;// As BMP always has 3 rgb bands, except for Version 5,// which is bgra// Windows 2.x and OS/2 1.x// Classify the image type// Read in the palette// Windows 3.x and Windows NT// No compression// 8-bit RLE compression// 4-bit RLE compression// 0x1F;// BitsField encoding// there is a palette// Windows 4.x BMP// rgb masks, valid only if comp is BI_BITFIELDS// Only supported for 32bpp BI_RGB argb// All the new fields are valid only for this case// bottom up image// top down image// Reset Image Layout so there's only one tile.//Define the color space// the colorModel and sampleModel will be initialzed// by the  reader of embedded image// When number of bitsPerPixel is <= 8, we use IndexColorModel.// 1 and 4 bit pixels can be stored in a packed format.// Create IndexColorModel from the palette.// The number of bands in the SampleModel is determined by// the length of the mask array passed in.// Create SampleModel// Reset to the start of bitmap; then jump to the//start of image data//read header// If the destination band is set used it// If the destination is provided, then use it.  Otherwise, create new one// Get the image data.// buffer for byte data// buffer for short data// buffer for int data// the sampleModel can be null in case of embedded image// There should only be one tile.// no compression// 1-bit images cannot be compressed.// 24-bit images are not compressed// Deal with 1 Bit images using IndexColorModels// cache the values to avoid duplicated computation//get the bit and assign to the data buffer of the raster// Method to read a 4 bit BMP image data// Padding bytes at the end of each scanline// Method to read 8 bit BMP image data// Method to read 24 bit BMP image data// width * bitsPerPixel should be divisible by 32// If imageSize field is not provided, calculate it.// If width is not 32 bit aligned, then while uncompressing each// scanline will have padding bytes, calculate the amount of padding// Read till we have the whole image// Since data is compressed, decompress it// End-of-scanline marker// End-of-RLE marker// delta or vector marker// Move to the position xoff, yoff down// Whenever end pixels can fit into odd number of bytes,// an extra padding byte will be present, so skip that.// If End-of-RLE data, then exit the while loop// If imageSize field is not specified, calculate it.// If width is not 32 byte aligned, then while uncompressing each// Decompress the RLE4 compressed data.// Absolute mode// When end is odd, the above for loop does not// increment count, so do it now.// Encoded mode/** Decodes the jpeg/png image embedded in the bitmap using any jpeg ... */// prepare input/** Verifies whether the byte array contans a unc path. ... *//* no need for the check on platforms except windows *//* normalize prefix of the path */// long path: whether unc or local// device path or short unc notation/** The Java Image IO plugin writer for encoding a binary RenderedImage into ... *//** The output stream to write into *//** Constructs <code>BMPImageWriter</code> based on the provided ... */// validates output// Default is using 24 bits per pixel.// cache the data type;// Raw data can only handle bytes, everything greater must be ASCII.// for images with BandedSampleModel we can not work//  with raster directly and must use writePixels()// we can work with raster directly only in case of// BGR component order.// In any other case we must use writePixels()// BugId 4892214: we can not work with raster directly// if image have different color order than RGB.// We should use writePixels() for such images.// we will use getPixels() to extract pixel data for writePixels()// Please note that getPixels() provides rgb bands order.//XXX: check more// Number of bytes that a scanline for the image written out will have.// ImageWriteParam.MODE_DISABLED:// we should use 32bpp images in case of BI_BITFIELD// compression to avoid color conversion artefacts// Setting this flag to false ensures that generic// writePixels() will be used to store image data/* NB: canEncodeImage() ensures we have image of ... */// it is unlikely, but if it happens, we should throw// an exception related to unsupported image format// prepare info for writePixels procedure// handle BI_RGB compression// Cannot be written as a Palette image. So write out as// 24 bit image.// Grey scale images/* NB: the actual pixel size can be smaller than ... */// actual writing of image data// Calculate padding for each scanline// FileHeader is 14 bytes, BitmapHeader is 40 bytes,// add palette size and that is where the data will begin/* According to MSDN description, the top-down image layout ... */// compression// imageSize// xPelsPerMeter// yPelsPerMeter// Colors Used// Colors Important// palette// write palette// write masks for red, green and blue components.// Writing of actual image data// Buffer for up to 8 rows of pixels// Also create a buffer to hold one line of the data// to be written to the file, so we can use array writes.// prepare embedded buffer// update the file/image Size// Get the pixels//byte[] bdata =//    ((DataBufferByte)src.getDataBuffer()).getData();//System.out.println("bdata.length="+bdata.length);//System.arraycopy(bdata, pos, bpixels, 0, scanlineBytes);// pixel data is provided here in RGB order// Write the RLE EOF marker and// Partially filled last byte, if any// Put the last pixel of odd-length lines in the 4 MSBs/* We expect that pixel data comes in RGB order. ... *//* please note that despite other cases, ... */// Since BMP needs BGR format// Case where IndexColorModel had > 256 colors.// We have two possibilities here:// 1. we are writing the indexed image with bitfields//    compression (this covers also the case of BYTE_BINARY)//    => use icm to get actual RGB color values.// 2. we are writing the gray-scaled image with BI_BITFIELDS//    compression//    => just replicate the level of gray to color components.// Write out the padding/// Check if there was an existing Absolute Run//Padding/// Absolute Encoding for less than 3/// treated as regular encoding/// Do not include the last element since it will/// be inclued in the next encoding/run/// Only 255 values permitted/// If there was an existing run// First time..//  0-254 only// padding since 255 elts is not even// EOF scanline// Write the run// write the Absolute Run/// EOF scanline//Check if there was an existing Absolute Run// we need to exclude  last 2 elts, similarity of// which caused to enter this part of the code// if # of elts is odd - read the last element// Padding to word align absolute encoding// Even runlength/// Only EOF required now// odd runlength and the run ends here// runCount wont be > 254 since 256/255 case will// be taken care of in above code.// If end of scanline// Check for existing run// first time// only 255 elements// Padding for word align// since it will fit into 127 bytes// Handle the End of scanline for the last 2 4bits// Padding// magic value// File size// reserved1 and reserved2// offset to image data// size of header// width// height// number of planes// Bits Per Pixel//param.setDestinationBands(bmpParam.getDestinationBands());/* Returns preferred compression type for given image. ... *//* Check whether we can encode image of given type using compression method in question. ... */// only 4bpp images can be encoded as BI_RLE4// only 8bpp images can be encoded as BI_RLE8/* Technically we expect that we may be able to ... */// Fields for Image Descriptor// Fields for PixelsPerMeter// Fields for BI_BITFIELDS compression(Mask)// Fields for CIE XYZ for the LCS_CALIBRATED_RGB color space// Fields for Gamma values for the LCS_CALIBRATED_RGB color space// Fields for the Palette and Entries// Fields from CommentExtension// List of byte[]// new ArrayList();// Palette// Standard tree node methods// CompressionTypeName// root -> ImageDescriptor/// Should the max value be 1.7976931348623157e+308 ?// root -> Palette// root -> Palette -> PaletteEntry// root -> CommentExtensions// root -> CommentExtensions -> CommentExtension/* Copyright (c) 2003, 2005, Oracle and/or its affiliates. All rights reserved. ... */// Node name, followed by description/* Copyright (c) 2005, Oracle and/or its affiliates. All rights reserved. ... *//* Came from GIFEncoder initially. ... */// bits left at current index that are avail./** note this also indicates gif format BITFile. * *//* @param output destination for output data ... */// gif block count// This handles the GIF block count stuff// bits contents fit in current index byte// GIF// bits overflow from current byte to next.// if bits  > space left in current byte then the lowest order bits// of code are taken and put in current byte and rest put in next.// if bits  > space left in current byte then the highest order bits// at highest order bit location !!// ok this many bits gone off the top// next index/** A dummy <code>ColorSpace</code> to enable <code>ColorModel</code> ... *//** Return the type given the number of components. ... */// Based on the constant definitions TYPE_2CLR=12 through// TYPE_FCLR=25. This will return unknown types for// numComponents > 15./** Constructs a bogus <code>ColorSpace</code>. ... */// The following methods simply copy the input array to the// output array while otherwise attempting to adhere to the// specified behavior of the methods vis-a-vis exceptions./** Class to simplify use of internationalization message strings. ... *//** Returns the message string with the specified key from the ... */// Chain the exception.//import javax.imageio.ImageTypeSpecifier;/* XXX testing only ... *//** Creates a <code>ColorModel</code> that may be used with the ... */// Check the parameter.// Get the data type.// Check the data type// Return null for other types.// The return variable.// Get the sample size.// Create a Component ColorModel.// Get the number of bands.// Determine the color space.// Load the colormap with a ramp./** For the case of binary data (<code>isBinary()</code> returns ... */// bitOffset != 0// bitOffset % 8 != 0/** Returns the binary data unpacked into an array of bytes. ... *//** Sets the supplied <code>Raster</code>'s data from an array ... */// Optimal case: simply return.// when all the bits in this BYTE will be set// into the data buffer.// All the "leftShift" high bits will be set// into the data buffer.  But not all the// "rightShift" low bits will be set.// Less than "leftShift" high bits will be set.// This BYTE is set into one SHORT// Mask the bits to be set.// This BYTE will be set into two SHORTs// This BYTE will be set into two SHORTs;// But not all the low bits will be set into SHORT// Only some of the high bits will be set into// SHORTs// This BYTE is set into one INT// All the bits of this BYTE will be set into two INTs// This BYTE will be set into two INTs;// But not all the low bits will be set into INT// Only some of the high bits will be set into INT/** Copies data into the packed array of the <code>Raster</code> ... *///dataType == DataBuffer.TYPE_SHORT ||/** Tests whether the color indices represent a gray-scale image. ... *//** Converts the provided object to <code>String</code> *//** Checks that the provided <code>ImageWriter</code> can encode ... *//** Returns whether the image has contiguous data across rows. */// Ensure image rows samples are stored contiguously// in a single bank.// Otherwise true if and only if it's a bilevel image with// a MultiPixelPackedSampleModel, 1 bit per pixel, and 1 bit// pixel stride./* Copyright (c) 2000, Oracle and/or its affiliates. All rights reserved. ... *//* Modified from original LZWCompressor to change interface to passing a ... *//** base underlying code size of data being compressed 8 for TIFF, 1 to 8 for GIF * *//** reserved clear code based on code size * *//** reserved end of data code based on code size * *//** current number bits output for each code * *//** limit at which current number of bits code size has to be increased * *//** the prefix code which represents the predecessor string to current input point * *//** output destination for bit codes * *//** general purpose LZW string table * *//** modify the limits of the code values in LZW encoding due to TIFF bug / feature * */// set flag for GIF as NOT tiff/* Indicate to compressor that no more data to go so write out ... *//** General purpose LZW String Table. ... *//** codesize + Reserved Codes */// after predecessor character// predecessor string// hash table to find  predecessor + char pairs// next code if adding new prestring + char/* each entry corresponds to a code and contains the length of data ... *//* Constructor allocate memory for string store data *//* @param index value of -1 indicates no predecessor [used in initialisation] ... */// if used up all codes// return the code and inc for next code/* @param index index to prefix string ... */// Rob fixed used to sign extend// search/* @param codesize the size of code to be preallocated for the ... */// init with no prefix/* If expanded data doesn't fit into array only what will fit is written ... */// just in case// DONE no more unpacked// how much data we are actually expanding// length of expanded code left// how much space left// only got this many to unpack// only > 0 if codeLen > bufSpace [left overs]// initialise to exclusive end address of buffer area// NOTE: data unpacks in reverse direction and we are placing the// unpacked data directly into the array in the correct location.// skip required of expanded data// to predecessor code// indicate what part of codeLen used// indicate length of dat unpacked/* Copyright (c) 2005, 2006, Oracle and/or its affiliates. All rights reserved. ... *//** This class implements the octree quantization method ... *//** maximum of tree depth *//** Creates an image representing given image ... *//** Creates an palette representing colors from given image ... *//** Returns <code>true</code> if PaletteBuilder is able to create ... */// default transparnt pixel/* from the book *//* If transparency of given image is not opaque we assume all ... */// one slot for transparent color// we need place for transparent color;// nothing to reduce// look for element with lower color count// save pointer to first reducible node// NB: current color count for node could be changed in future// we need to process it// reduce node/** The node of color tree. *//** This class contains utility methods that may be useful to ImageReader ... */// Helper for computeUpdatedPixels method// We need to satisfy the congruences:// dst = destinationOffset + (src - sourceOffset)/sourceSubsampling// src - passStart == 0 (mod passPeriod)// src - sourceOffset == 0 (mod sourceSubsampling)// subject to the inequalities:// src >= passStart// src < passStart + passExtent// src >= sourceOffset// src < sourceOffset + sourceExtent// dst >= dstMin// dst <= dstmax// where// For now we use a brute-force approach although we could// attempt to analyze the congruences.  If passPeriod and// sourceSubsamling are relatively prime, the period will be// their product.  If they share a common factor, either the// period will be equal to the larger value, or the sequences// will be completely disjoint, depending on the relationship// between passStart and sourceOffset.  Since we only have to do this// twice per image (once each for X and Y), it seems cheap enough// to do it the straightforward way.// Record smallest valid pixel// Record second smallest valid pixel// Record largest valid pixel// If we never saw a valid pixel, set width to 0// The period is given by the difference of any two adjacent pixels/** A utility method that computes the exact set of destination ... */// Utility method for nodes with a single attribute named "value"// root -> Chroma// root -> Chroma -> ColorSpaceType// root -> Chroma -> NumChannels// root -> Chroma -> Gamma// root -> Chroma -> BlackIsZero// root -> Chroma -> Palette// root -> Chroma -> PaletteEntry// root -> Chroma -> BackgroundIndex// root -> Chroma -> BackgroundColor// root -> Compression// root -> Compression -> CompressionTypeName// root -> Compression -> Lossless// root -> Compression -> NumProgressiveScans// root -> Compression -> BitRate// root -> Data// root -> Data -> PlanarConfiguration// root -> Data -> SampleFormat// root -> Data -> BitsPerSample// root -> Data -> SignificantBitsPerSample// root -> Data -> SampleMSB// root -> Dimension// root -> Dimension -> PixelAspectRatio// root -> Dimension -> ImageOrientation// root -> Dimension -> HorizontalPixelSize// root -> Dimension -> VerticalPixelSize// root -> Dimension -> HorizontalPhysicalPixelSpacing// root -> Dimension -> VerticalPhysicalPixelSpacing// root -> Dimension -> HorizontalPosition// root -> Dimension -> VerticalPosition// root -> Dimension -> HorizontalPixelOffset// root -> Dimension -> VerticalPixelOffset// root -> Dimension -> HorizontalScreenSize// root -> Dimension -> VerticalScreenSize// root -> Document// root -> Document -> FormatVersion// root -> Document -> SubimageInterpretation// root -> Document -> ImageCreationTime// second = 60 denotes leap second// root -> Document -> ImageModificationTime// root -> Text// root -> Text -> TextEntry// root -> Transparency// root -> Transparency -> Alpha// root -> Transparency -> TransparentIndex// root -> Transparency -> TransparentColor// root -> Transparency -> TileTransparencies// root -> Transparency -> TileTransparencies -> TransparentTile// root -> Transparency -> TileOpacities// root -> Transparency -> TileOpacities -> OpaqueTile// Node name, followed by description, or// Node name + "/" + AttributeName, followed by description/* Copyright (c) 2000, 2005, Oracle and/or its affiliates. All rights reserved. ... */// Local EOF// Empty finalizer (for improved performance; no need to call// super.finalize() in this case)// package scope// Fields from Image Descriptor// Fields from Graphic Control Extension// Fields from Plain Text Extension// Fields from ApplicationExtension// scratch node// Image descriptor// Local color table// Graphic control extension// Application extensions// Comment extensions// Gamma not in format// BackgroundIndex not in image// BackgroundColor not in format// BitRate not in format// PlanarConfiguration not in format// BitsPerSample not in image// SignificantBitsPerSample not in format// SampleMSB not in format// PixelAspectRatio not in image// HorizontalPixelSize not in format// VerticalPixelSize not in format// HorizontalPhysicalPixelSpacing not in format// VerticalPhysicalPixelSpacing not in format// HorizontalPosition not in format// VerticalPosition not in format// HorizontalScreenSize not in image// VerticalScreenSize not in image// Document not in image// Alpha not in format// TransparentColor not in format// TileTransparencies not in format// TileOpacities not in format// root -> LocalColorTable// root -> LocalColorTable -> ColorTableEntry// root -> GraphicControlExtension// root -> PlainTextExtension// root -> ApplicationExtensions// root -> ApplicationExtensions -> ApplicationExtension/* Copyright (c) 2001, 2005, Oracle and/or its affiliates. All rights reserved. ... */// The current ImageInputStream source.// Per-stream settings// True if the file header including stream metadata has been read.// Global metadata, read once per input setting.// The current image index// Metadata for image at 'currIndex', or null.// A List of Longs indicating the stream positions of the// start of the metadata for each image.  Entries are added// as needed.// Length of metadata for image at 'currIndex', valid only if// imageMetadata != null.// The number of images in the stream, if known, otherwise -1.// Variables used by the LZW decoding process// 32-bit lookahead buffer// Try if the end of the data blocks has been found,// and we are simply draining the 32-bit buffer// The image to be written.// The image's tile.// The image dimensions (from the stream).// The pixel currently being decoded (in the stream's coordinates).// The number of rows decoded// The current interlace pass, starting with 0.// End per-stream settings// Constants used to control interlacing.// Take input from an ImageInputStream// Clear all values based on the previous stream contents// Throw an IndexOutOfBoundsException if index < minIndex,// and bump minIndex if required.// We don't check all parameters as ImageTypeSpecifier.createIndexed do// since this method is private and we pass consistent data here// Some files erroneously have a transparent color index// of 255 even though there are fewer than 256 colors.// no color table, the spec allows to use any palette.// Normalize color table length to 2^1, 2^2, 2^4, or 2^8// Bump from 3 to 4 bits// Bump to 8 bits// Entries from length + 1 to lutLength - 1 will be 0// BEGIN LZW STUFF// Load a block (1-255 bytes) at a time, and maintain// a 32-bit lookahead buffer that is filled from the left// and extracted from the right.// When the last block is found, we continue to// No more data available// Shift in a byte of new data at a time// Check if current block is out of bytes// Get next block size// Fill in the entire table for robustness against// out-of-sequence codes.// tableIndex = numEntries + 2;// codeSize = initCodeSize + 1;// codeMask = (1 << codeSize) - 1;// Used only if IIOReadUpdateListeners are present// Clip against ImageReadParam// Update IIOReadUpdateListeners, if any// updateYStep will have been initialized if// updateListeners is non-null// Process end-of-row// Update IIOReadProgressListeners// Inform IIOReadUpdateListeners of end of pass// Determine whether pixels from this row will// be written to the destination// END LZW STUFF// Create an object to store the stream metadata// Found position of metadata for image 0// Stream must be at the beginning of an image descriptor// upon exit// Skip color table if any// EOF// Find closest known index// Seek to that position// Skip images until at desired index or last image found// Read blocks of 1-255 bytes, stop at a 0-length block// Stream must be positioned at start of metadata for 'currIndex'// Create an object to store the image metadata// Image Descriptor// Read color table if any// Record length of this metadata block// Now positioned at start of LZW-compressed pixels// Extension block// Graphics Control Extension// 4// Plain text extension// Comment extension// Application extension// read available data// Init lists if necessary// Skip over unknown extension blocks// Trailer// Initialized updateMinY and updateYStep// Inform IIOReadUpdateListeners of new pass// A null ImageReadParam means we use the default// Initialize the destination image// Get source region, taking subsampling offsets into account,// and clipping against the true source bounds// Inform IIOReadProgressListeners of start of image// Read and decode the image data, fill in theImage// Read first data block// Init 32-bit buffer// Inform IIOReadProgressListeners of end of image// code == tableIndex// warning - code out of sequence// possibly data corruption// Reverse code/** Remove all settings including global settings such as ... *//** Remove local settings based on parsing of a stream. */// No need to reinitialize 'block'// XXX false for release!/** The <code>output</code> case to an <code>ImageOutputStream</code>. *//** Whether a sequence is being written. *//** Whether the header has been written. *//** The stream metadata of a sequence. *//** The index of the image being written. *//** The number of bits represented by the value which should be a ... *//** Compute the source region and destination dimensions taking any ... */// Get source region and subsampling factors// Clip to actual image bounds// Adjust for subsampling offsets// Get subsampling factors// Compute output dimensions/** Create a color table from the image ColorModel and SampleModel. *//** The GIF image format assumes that size of image palette ... *//** fill tail of color component arrays by replica of first color ... */// create gray-scaled color table for single-banded images// We do not have enough information here// to create well-fit color table for RGB image./** According do GIF specification size of clor table (palette here) ... *//** Merges <code>inData</code> into <code>outData</code>. The supplied ... *//** Creates a default stream metadata object and merges in the ... *//** Creates a default image metadata object and merges in the ... */// Save interlace flag state.// Undo change to interlace flag if not MODE_COPY_FROM_METADATA.// Image dimensions// Interlacing// Transparency// Save the possibly converted stream metadata as an instance variable./** Resets locally defined instance variables. *//** Writes any extension blocks, the Image Descriptor, the image data, ... */// Check for ability to encode image.// Determine source region and destination dimensions.// Convert any provided image metadata.// Converted rgb image can use palette different from global.// In order to avoid color artefacts we want to be sure we use// appropriate palette. For this we initialize local color table// from current color and sample models.// At this point we can guarantee that local color table can be// build because image was already converted to indexed or// gray-scale representations// in case of indexed image we should take care of// transparent pixels/* NB: transparentColorFlag might have not beed reset for ... */// Global color table values.// Write the header (Signature+Logical Screen Descriptor+// Global Color Table).// Set the version if not set.// Set the Logical Screen Desriptor if not set.// Set the Global Color Table if not set, i.e., if not// provided in the stream metadata.// Writing a sequence and a local color table was// provided in the metadata of the first image: use it.// Create a color table.// Set the Global Color Table. At this point it should be// A) the global color table provided in stream metadata, if any;// B) the local color table of the image metadata, if any, if//    writing a sequence;// C) a table created on the basis of the first image ColorModel//    and SampleModel if no local color table is available; or// D) null if none of the foregoing conditions obtain (which//    should only be if a sequence is not being written and//    a local color table is provided in image metadata).// Write the header.// Write extension blocks, Image Descriptor, and image data.// Write the trailer./** Writes any extension blocks, the Image Descriptor, and the image data ... */// Create default metadata.// Set GraphicControlExtension flag only if there is// transparency.// Check for GraphicControlExtension element.// Should never happen.// Set GraphicControlExtension flag if element present.// If progressive mode is not MODE_COPY_FROM_METADATA, ensure// the interlacing is set per the ImageWriteParam mode setting.// Unset local color table if equal to global color table.// Override dimensions// Write Graphics Control Extension.// Write extension blocks.// Write Image Descriptor// Write image data/* At this moment we know that input image is indexed image. ... */// take into account the raster data offset// Signature// Screen Descriptor// Width// Height// Global Color Table// Packed fields// Background color index// Pixel aspect ratio/* Copyright (c) 2005, 2010, Oracle and/or its affiliates. All rights reserved. ... *//** Class which adds utility DOM element attribute access methods to ... *//** Represents an undefined value of integer attributes. */// Note: These attribute methods were shamelessly lifted from// com.sun.imageio.plugins.png.PNGMetadata and modified.// Shorthand for throwing an IIOInvalidTreeException// Get an integer-valued attribute// Get a float-valued attribute// Get a required integer-valued attribute// Get a required float-valued attribute// Get a boolean-valued attribute// Allow lower case booleans for backward compatibility, #5082756// Get a required boolean-valued attribute// Get an enumerated attribute as an index into a String array// Get a required enumerated attribute as an index into a String array// Get a String-valued attribute// Get a required String-valued attribute// TODO - document elimination of globalColorTableFlag// 87a or 89a// 1 to 8// Valid if globalColorTable != null// Set global color table flag in header to 0 if null, 1 otherwise/* NB: At the moment we use empty strings to support undefined ... */// Stored value plus one// NumChannels not in stream// backgroundColorIndex is valid iff there is a color table// NumProgressiveScans not in stream// PlanarConfiguration// SignificantBitsPerSample// SampleMSB// HorizontalPixelOffset not in stream// VerticalPixelOffset not in stream// SubimageInterpretation not in format// ImageCreationTime not in format// ImageModificationTime not in format// Not in stream// root -> Version// root -> LogicalScreenDescriptor// root -> GlobalColorTable// root -> GlobalColorTable -> ColorTableEntry/* Copyright (c) 2005, 2008, Oracle and/or its affiliates. All rights reserved. ... */// XXX The "text" attribute of the PlainTextExtension element// is not defined in the GIF image metadata format but it is// present in the GIFImageMetadata class. Consequently it is// used here but not required and with a default of "". See// bug 5082763./* The source for this class was copied verbatim from the source for ... */// XXX J2SE// initialize metadata fields by default values/* Copyright (c) 2001, Oracle and/or its affiliates. All rights reserved. ... *//** An Adobe APP14 (Application-Specific) marker segment. */// Skip the id// default transform will be changed// Only the transform is required/** Writes the data for this segment to the stream in ... *//** A Comment marker segment.  Retains an array of bytes representing the ... *//** Constructs a marker segment from the given buffer, which contains ... *//** Constructs a marker segment from a String.  This is used when ... */// Default encoding/** Constructs a marker segment from a native tree node.  If the node ... *//** Returns the array encoded as a String, using ISO-Latin-1 encoding. ... */// Won't happen/** Returns an <code>IIOMetadataNode</code> containing the data array ... *//** A DHT (Define Huffman Table) marker segment. */// We don't write DHT segments; the IJG library does./** A Huffman table within a DHT marker segment. */// 0 == DC, 1 == AC// 0 - 4// # of codes of each length// won't happen/* System.out.print("Lengths:"); ... *//** A DQT (Define Quantization Table) marker segment. */// Could be 1 to 4// We don't write DQT segments; the IJG library does./** Assuming the given table was generated by scaling the "standard" ... */// Determine if the table is all the same values// if so, use the same table// Otherwise, find the largest coefficient less than 255.  This is// the largest value that we know did not clamp on scaling.// Compute the scale factor by dividing it by the value in the// same position from the "standard" table.// If the given table was not generated by scaling the standard,// the resulting table will still be reasonable, as it will reflect// a comparable scaling of chrominance frequency response of the// eye.//    generate a new table/** A quantization table within a DQT marker segment. */// 64 elements, in natural order/** The zigzag-order position of the i'th element ... */// IJG is compiled for 8-bits, so this shouldn't happen// Read from zig-zag order to natural order/* for (int i = 0; i < 64; i++) { ... *//** A DRI (Define Restart Interval) marker segment. *//** Restart interval, or 0 if none is specified. */// We don't write DRI segments; the IJG library does./** A JFIF (JPEG File Interchange Format) APP0 (Application-Specific) ... */// If present// optional ICC/** Set to <code>true</code> when reading the chunks of an ... *//** A placeholder for an ICC profile marker segment under ... *//** Default constructor.  Used to create a default JFIF header *//** Constructs a JFIF header by reading from a stream wrapped ... */// skip the id, we already checked it/** Constructs a JFIF header from a DOM Node. *//** Returns a deep-copy clone of this object. */// Clone the list with a deep copy/** Add an JFXX extension marker segment from the stream wrapped ... *//** Adds an ICC Profile APP2 segment from the stream wrapped ... */// Just one chunk/** Add an ICC Profile APP2 segment by constructing it from ... *//** Returns a tree of DOM nodes representing this object and any ... *//** Updates the data in this object from the given DOM Node tree. ... */// none of the attributes are required// No thumbnail// Clip if necessary and get the data in thumbData/* Write out the values in the integer array as a sequence of bytes, ... */// approx. every 5%/** Write out this JFIF Marker Segment, including a thumbnail or ... */// All others write as separate JFXX segments// Just the header without any thumbnail// No thumbnails// We never write a palette image into the header// So if it's the only one, we need to write the header first// Expand to RGB// Handles clipping if needed// As part of the header// If this is the only one, write the header first// Could put reason codes in here to be parsed in writeJFXXSegment// in order to provide more meaningful warnings./** Writes out a new JFXX extension segment, without saving it. *//** Return an RGB image that is the expansion of the given grayscale ... *//** Writes out a default JFIF marker segment to the given ... *//** Prints out the contents of this object to System.out for debugging. *//** A JFIF extension APP0 marker segment. */// following constructors handle bufAvail// Now the child// Should never happen/** A superclass for the varieties of thumbnails that can ... */// Save the thumbnail pos when reading// When writing// Save the stream position for reading the thumbnail later// Now skip the thumbnail data// not used when writing/** A JFIF thumbnail stored as RGB, one byte per channel, ... */// width and height/** A JFIF thumbnail stored as an indexed palette image ... */// read the palette// Write the palette (must be 768 bytes)/** A JFIF thumbnail stored as a JPEG stream.  No JFIF or ... */// Compressed image data, for writing// Compute the final stream position// Set the stream back to the start of the thumbnail// and read its metadata (but don't decode the image)// Set the stream to the computed final position// Clear the now invalid buffer// get default metadata for the thumb// Remove the jfif segment, which should be there./* Use this if removing leaves a hole and causes trouble ... */// Now check that the size is OK/** Write out the given profile to the stream, embedded in ... */// spec says it's null-terminated// Null-terminate the string/** An APP2 marker segment containing an ICC profile.  In the stream ... */// The complete profile when it's fully read// May remain null when writing// gets whole segment or fills the buffer/* Reduce the stored length by the id size.  The stored ... */// get the chunk number// get the total number of chunks// if there are no more chunks, set up the data// reduce the stored length by the two chunk numbering bytes// If we store them away, include the chunk numbering bytes// Now reduce the stored length by the// two chunk numbering bytes// May be null// skip the tag// Get the length, but not in length// Don't include length itself// skip the id// get the number of chunks, which should match// create an array for the whole thing// copy the existing chunks, releasing them// Note that they may be out of order// Right one/** No-op.  Profiles are never written from metadata. ... */// No-op/** A class containing JPEG-related constants, definitions, and ... */// List of all the JPEG markers (pre-JPEG2000)/** For temporary use in arithmetic coding */// Codes 0x02 - 0xBF are reserved// SOF markers for Nondifferential Huffman coding/** Baseline DCT *//** Extended Sequential DCT *//** Progressive DCT *//** Lossless Sequential *//** Define Huffman Tables */// SOF markers for Differential Huffman coding/** Differential Sequential DCT *//** Differential Progressive DCT *//** Differential Lossless *//** Reserved for JPEG extensions */// SOF markers for Nondifferential arithmetic coding/** Extended Sequential DCT, Arithmetic coding *//** Progressive DCT, Arithmetic coding *//** Lossless Sequential, Arithmetic coding *//** Define Arithmetic conditioning tables */// SOF markers for Differential arithmetic coding/** Differential Sequential DCT, Arithmetic coding *//** Differential Progressive DCT, Arithmetic coding *//** Differential Lossless, Arithmetic coding */// Restart Markers/** Number of restart markers *//** Start of Image *//** End of Image *//** Start of Scan *//** Define Quantisation Tables *//** Define Number of lines *//** Define Restart Interval *//** Define Heirarchical progression *//** Expand reference image(s) */// Application markers/** APP0 used by JFIF *//** APP14 used by Adobe */// codes 0xF0 to 0xFD are reserved/** Comment marker */// JFIF Resolution units// Adobe transform values// Spi initialization stuff// Names of the formats we can read or write// IJG Color codes.// error/unspecified// monochrome// red/green/blue// Y/Cb/Cr (also known as YUV)// C/M/Y/K// PhotoYCC// RGB-Alpha// Y/Cb/Cr/Alpha// 8 and 9 were old "Legacy" codes which the old code never identified// on reading anyway.  Support for writing them is being dropped, too.// PhotoYCC-Alpha// Y/Cb/Cr/K/** IJG can handle up to 4-channel JPEGs *//* These are kept in the inner class to avoid static initialization ... */// PYCC.pf may not always be installed// Default value for ImageWriteParam/** Returns <code>true</code> if the given <code>ColorSpace</code> ... *//** Returns <code>true</code> if the given imageType can be used ... */// Can't have alpha// Gray is OK, always// If it isn't gray, it must have 3 channels// Must be RGB// Must be YCbCr/** Given an image type, return the Adobe transform corresponding to ... *//** Converts an ImageWriteParam (i.e. IJG) non-linear quality value ... */// The following is converted from the IJG code./** Return an array of default, visually lossless quantization tables. *//** Return an array of default Huffman tables. *//** A class wrapping a buffer and its state.  For efficiency, ... *//** The size of the buffer.  This is large enough to hold all ... *//** The actual buffer. *//** The number of bytes available for reading from the buffer. ... *//** A pointer to the next available byte in the buffer.  This is ... *//** The ImageInputStream buffered. *//** Ensures that there are at least <code>count</code> bytes available ... */// have enough// already full// First copy any remaining bytes down to the beginning// Now fill the rest of the buffer/** Fills the data array from the stream, starting with ... */// First see what's left in the buffer.// It's enough// Some there, but not enough// Now read the rest directly from the stream/** Skips <code>count</code> bytes, leaving the buffer ... *//** Push back the remaining contents of the buffer by ... *//** Return the stream position corresponding to the next ... *//** Scan the buffer until the next 0xff byte, reloading ... */// out of inner while// Reload the buffer and keep going// Skip any remaining pad bytes// Only if it still is 0xff// Premature EOF// send out a warning, but treat it as EOI//reader.warningOccurred(JPEGImageReader.WARNING_NO_EOI);/** Prints the contents of the buffer, in hex. ... */// Hex 10// Hex 11// Hex 13// All images can have these// If it is an element in the app0jfif subtree, just check// that the image type is JFIF compliant.// return a copy of the combined commonContents and imageContents;// in theory we want a deep clone of the combined arrays,// but since it only contains (immutable) Strings, this shallow// copy is sufficient/* Copyright (c) 2000, 2019, Oracle and/or its affiliates. All rights reserved. ... *//** The following variable contains a pointer to the IJG library ... *//** The input stream we read from *//** List of stream positions for images, reinitialized every time ... *//** The number of images in the stream, or 0. */// The following warnings are converted to strings when used// as keys to get localized resources from JPEGImageReaderResources// and its children./** Warning code to be passed to warningOccurred to indicate ... *//** Image index of image for which header information ... */// The following is copied out from C after reading the header.// Unlike metadata, which may never be retrieved, we need this// if we are to read an image at all./** Set by setImageData native code callback *//** Set by setImageData native code callback.  A modified ... *//** If we need to post-convert in Java, convert with this op *//** The image we are going to fill *//** An intermediate Raster to hold decoded data *//** A view of our target Raster that we can setRect to *//** The databuffer for the above Raster *//** The region in the destination where we will write pixels *//** The list of destination bands, if any *//** Stream metadata, cached, even when the stream is changed. *//** Image metadata, valid for the imageMetadataIndex only. *//** Set to true every time we seek in the stream; used to ... *//** Tables that have been read from a tables-only image at the ... *//** Variables used by progress monitoring. */// Number of passes// IJG default/** Set to true once stream has been checked for stream metadata *//** The referent to be registered with the Disposer. *//** The DisposerRecord that handles the actual disposal of this reader. *//** Sets up static C structures. *//** Sets up per-reader C structure and returns a pointer to it. *//** Called by the native code or other classes to signal a warning. ... *//** The library has it's own error facility that emits warning messages. ... *//** This method is called from native code in order to fill ... *//** This method is called from the native code in order to ... */// Read the first header// This reads the tables-only image twice, once from C// and once from Java, but only if ignoreMetadata is false// Now we are at the first image if there are any, so add it// to the list// Not tables only, so add original pos to the list// And set current image since we've read it now// If the image positions list is empty as in the case of a tables-only// stream, then attempting to access the element at index// imagePositions.size() - 1 will cause an IndexOutOfBoundsException.// locked thread// Otherwise we have to read the entire stream// FALL THROUGH to decrement buffer vars// This first set doesn't have a length// not a marker, just a data 0xff// All the others have a length// length includes itself// Search is necessary for JPEG/** Sets the input stream to the start of the requested image. ... */// stream, then no image data can be read.// read to start of image, saving positions// First seek to the last position we already have, and skip the// entire image// Now add all intervening positions, skipping images// Is there an image?// Otherwise we are where we want to be// No way is native buffer still valid/** Skip over a complete image in the stream, leaving the stream ... *//** Returns <code>true</code> if there is an image beyond ... */// We hit the end of the stream before we hit an SOI, so no image/** Push back the given number of bytes to the input stream. ... */// The buffer is clear after this, so no need to set haveSeeked./** Reads header information for the given image, if possible. */// Ignore return/** Read in the header information starting from the current ... *//* Called by the native code whenever an image header has been ... *//* Color profile data seems to be invalid. ... *//* At the moment we can't rely on the ColorSpace.equals() ... */// verify new color space/* Embedded profile seems to be corrupted. ... *//////////// Color Conversion and Image Types/** Return an ImageTypeSpecifier corresponding to the given ... */// Returns null if it can't be represented// We return an iterator containing the default, any// conversions that the library provides, and// all the other default types with the same number// of components, as we can do these as a post-process.// As we convert Rasters rather than images, images// with alpha cannot be converted in a post-process.// If this image can't be interpreted, this method// returns an empty Iterator.// Get the raw ITS, if there is one.  Note that this// won't always be the same as the default.// Given the encoded colorspace, build a list of ITS's// representing outputs you could handle starting// with the default.// Might be null if PYCC.pf not installed// As there is no YCbCr ColorSpace, we can't support// the raw type.// due to 4705399, use RGB as default in order to avoid// slowing down of drawing operations with result image.// Assume it's for RGB// Default is to convert to RGBA/** Checks the implied color conversion between the stream and ... */// If we are rearranging channels at all, the default// conversions remain in place.  If the user wants// raw channels then he should do this while reading// a Raster.// Accept default conversions out of decoder, silently// XXX - We do not currently support any indexed color models,// though we could, as IJG will quantize for us.// This is a performance and memory-use issue, as// users can read RGB and then convert to indexed in Java.// Now check the ColorSpace type against outColorSpaceCode// We may want to tweak the default// Its gray in the file// We want RGB// IJG can do this for us more efficiently// Update java state according to changes// in the native part of decoder.// IJG wants to go to RGB// We want gray// If the jpeg space is YCbCr, IJG can do it// We have an ICC profile but it isn't used in the dest// image.  So convert from the profile cs to the target cs// Leave IJG conversion in place; we still need it// Target isn't sRGB, so convert from sRGB to the target// No conversions available; image must be RGBA// We can't do YCC at all// No conversions available; image must be YCCA// Anything else we can't handle at all/** Set the IJG output space to the given value.  The library will ... *//////// End of Color Conversion & Image Types// imageMetadataIndex will always be either a valid index or// -1, in which case imageMetadata will not be null.// So we can leave checking imageIndex for gotoImage.// don't keep a reference here// Can we read this image?// The destination may still be incompatible.// Check whether we can handle any implied color conversion// Throws IIOException if the stream and the image are// incompatible, and sets convert if a java conversion// is necessary// Check the source and destination bands in the param// Set the output color space equal to the input colorspace// This disables all conversions// Create an intermediate 1-line Raster that will hold the decoded,// subsampled, clipped, band-selected image data in a single// byte-interleaved buffer.  The above transformations// will occur in C for performance.  Every time this Raster// is filled we will call back to acceptPixels below to copy// this to whatever kind of buffer our image has.// ignore dest bands for Raster// Now that we have the Raster we'll decode to, get a view of the// target Raster that will permit a simple setRect for each scanline/* If the process is sequential, and we have restart markers, ... */// Check for update listeners (don't call back if none)// Set up progression data// if we have a metadata object, we can count the scans// and set knownPassCount// We have metadata// Finally, we are ready to read// Note that getData disables acceleration on buffer, but it is// just a 1-line intermediate data transfer buffer that will not// affect the acceleration of the resulting image./** This method is called back from C when the intermediate Raster ... */// Use the range of allowed progressive passes// Assume there are a minimum of MIN_ESTIMATED_PASSES// and that there is always one more pass// Compute the percentage as the percentage at the end// of the previous pass, plus the percentage of this// pass scaled to be the percentage of the total remaining,// assuming a minimum of MIN_ESTIMATED_PASSES passes and// that there is always one more pass.  This is monotonic// and asymptotic to 1.0, which is what we need.// including this one// Provide access to protected superclass method/** Returns <code>true</code> if the read was aborted. *//** NB: we do not check the call back lock here, ... *//** Set the C level abort flag. Keep it atomic for thread safety. *//** Resets library state when an exception occurred during a read. *//* This could be further optimized by not resetting the dest. ... */// For Rasters, destination offset is logical, not physical, so// set it to 0 before calling computeRegions, so that the destination// region is not clipped.// Apply the destination offset, if any, as a logical offset// checks iis state for us// Now check the jfif segments// Now we know that there is a jfif segment// Now we know that there is a jfif segment and that iis is good// reset C structures// reset local Java structures// it looks like that this reader instance is used// by multiple threads./** An internal helper class that wraps producer's iterator ... *//** An internal helper class that provides means for deferred creation ... */// undefined// If the first two bytes are a JPEG SOI marker, it's probably// a JPEG file.  If they aren't, it definitely isn't a JPEG file./* Copyright (c) 2000, 2015, Oracle and/or its affiliates. All rights reserved. ... *////////// Private variables/** The output stream we write to *//** The Raster we will write from *//** An intermediate Raster holding compressor-friendly data *//** Set to true if we are writing an image with an ... */// Used by PhotoYCC only/** If there are thumbnails to be written, this is the list. *//** If metadata should include an icc profile, store it here. *//** Used when calling listeners */// Parameters for writing metadata// If it's there, use it// Add one for the thumbnails// Change if needed/** The DisposerRecord that handles the actual disposal of this writer. *////////// End of Private variables///////// Protected variables///////// End of Protected variables///////// static initializer//////// Public API// so this will always work// Set the native destination// There isn't much we can do.  If it's one of ours, then// return it.  Otherwise just return null.  We use it only// for tables, so we can't get a default and modify it,// as this will usually not be what is intended.// If it's one of ours, just return it// Can't convert stream metadata to image metadata// XXX Maybe this should put out a warning?// If it's not one of ours, create a default and set it from// the standard tree from the input, if it exists.// Other plug-in generates bogus standard tree// If the image type and metadata are JFIF compatible, return true// metadata must have a jfif node// if streamMetadata is not null, issue a warning// Obtain the raster and image, if there is one// Use the Raster directly.// Get the unique tile.// Ensure the Raster has dimensions of the image,// as the tile dimensions might differ.// Image is tiled so get a contiguous raster by copying.// Now determine if we are using a band subset// By default, we are using all source bands// Consult the param to determine if we're writing a subset// If this is a subset, we must adjust bandSizes// All the same// 4450894 part 1: The IJG libraries are compiled so they only// handle <= 8-bit samples.  We now check the band sizes and throw// an exception for images, such as USHORT_GRAY, with > 8 bits// per sample.// 4450894 part 2: We expand IndexColorModel images to full 24-// or 32-bit in grabPixels() for each scanline.  For indexed// images such as BYTE_BINARY, we need to ensure that we update// bandSizes to account for the scaling from 1-bit band sizes// to 8-bit.// Destination type, if there is one// Ignore dest type if we are writing a complete image// Examine the param// We'll handle the metadata case later// Now examine the metadata// First set a default state// By default we'll do no conversion:// By default don't write one// PhotoYCC does this// Check the metadata against the destination type// Do we want to write an ICC profile?// no metadata, but there is a dest type// If we can add a JFIF or an Adobe marker segment, do so// re-create the metadata// no destination type// no dest, no metadata, full image// Use default metadata matching the image and param// else no dest, no metadata, not an image,// so no special headers, no color conversion// no dest type, but there is metadata// no dest, metadata, image// Check that the metadata and the image match// out colorspace remains unknown// consult the ids// if they don't resolve it,// consult the sampling factors// RGBA// PhotoYCCA// else no dest, metadata, not an image.  Defaults ok// Might still be null// determine if thumbnails can be written// If we are going to add a default JFIF marker segment,// then thumbnails can be written// If there is no metadata, then we can't write thumbnails// There is metadata// If we are writing a raster or subbands,// then the user must specify JFIF on the metadata// Or we can't include thumbnails// It is a full image, and there is metadata// Not JFIF// Can it have JFIF?// Nope, not JFIF-compatible// Set up a boolean to indicate whether we need to call back to// write metadata// Now that we have dealt with metadata, finalize our tables set up// Are we going to write tables?  By default, yes.// But if the metadata has no tables, no.// Ignored if optimizeHuffman is true// Whether we write tables or not, we need to figure out which ones// to use// Get them from metadata, or use defaults// If we are optimizing, we don't want any tables.// If they were for progressive scans, we can't use them.// By default, ids are 1 - N, no subsampling// JFIF compatible// Now override them with the contents of sof, if there is one,// else use JFIF-compatible default// Create an appropriate 1-line databuffer for writing// Create a raster from that// Call the writer, who will call back for every scanline// just a 1-line intermediate data transfer buffer that does not// affect the acceleration of the source image.// After a successful write/* from jpeg_metadata.html: ... */// write a complete tables-only image at the beginning of// Check that we are// at the beginning of the stream, or can go there, and haven't// written out the metadata already.// Set the tables// If the metadata has no tables, use default tables.// Now write them out// In the case of JPEG this does nothing different from write/** NB: we do not check the call back lock here, we allow to abort ... */// reset the native destination////////// End of public API///////// Package-access API///////// End of Package-access API///////// Private methods///////// Metadata handling// Does the metadata frame header, if any, match numBandsUsed?// type overrides metadata/** Collect all the scan info from the given metadata, and ... */// num comps// out of for over sof comps/** Finds all DQT marker segments and returns all the q ... *//** Finds all DHT marker segments and returns all the q ... *//////////// End of metadata handling////////////// ColorSpace conversion////////////// End of ColorSpace conversion////////////// Native methods and callbacks/** Sets up static native structures. *//** Sets up per-writer native structure and returns a pointer to it. *//** Sets up native structures for output stream *//** Returns <code>true</code> if the write was aborted. *//** Writes the metadata out when called by the native code, ... *//** Write out a tables-only image to the stream. *//** Put the scanline y of the source ROI view Raster into the ... */// If the image has BITMASK transparency, we need to make sure// it gets converted to 32-bit ARGB, because the JPEG encoder// relies upon the full 8-bit alpha channel.// The first time through, converted is null, so// a new raster is allocated.  It is then reused// on subsequent lines.// Every 8 scanlines/** Aborts the current write in the native code *//** Resets native structures *//** Releases native structures *//** This method is called from native code in order to write encoder ... */// Find the maximum bit depth across all channels// 4450894: Ensure bitDepth is between 1 and 8/** Metadata for the JPEG plug-in. *///////// Private variables/** A copy of <code>markerSequence</code>, created the first time the ... *//** Set to <code>true</code> when reading a thumbnail stored as ... *//** Set by the chroma node construction method to signal the ... *///////// end of private variables/////// Package-access variables/** All data is a list of <code>MarkerSegment</code> objects. ... *//** Indicates whether this object represents stream or image ... *//////// End of package-access variables/////// Constructors/** Constructor containing code shared by other constructors. */// Supports standard format// and a native format// No other formats// But if we are stream metadata, adjust the variables/* Constructs a <code>JPEGMetadata</code> object by reading the ... */// The first three bytes should be FF, SOI, FF// Next byte should be the ff before a marker// Either JFIF, JFXX, or unknown APP0// tag, length, id// Leave newGuy null// Read a dummy to skip the segment// newGuy remains null// Either an ICC profile or unknown APP2// Either Adobe or unknown APP14// Just skip it// Now that we've read up to the EOI, we need to push back// whatever is left in the buffer, so that the next read// in the native code will work./** Constructs a default stream <code>JPEGMetadata</code> object appropriate ... */// default tables.// Defensive programming/** Constructs a default image <code>JPEGMetadata</code> object appropriate ... */// Ignore the destination type.// The only progressive mode that makes sense here is MODE_DEFAULT// the param may not be one of ours, so it may return false.// If so, the following would throw an exception// If the param has them, metadata shouldn't// Progressive forces optimized, regardless of param setting// so consult the param re optimized only if not progressive// compression quality should determine the q tables.  Note that this// will be ignored if we already decided not to create any.// Again, the param may not be one of ours, so we must check that it// supports compression settings// We are done with the param, now for the image types// e.g. alpha// e.g. K or alpha// Not alpha, so must be K// with or without alpha// Everything else is not subsampled, gets no special marker,// and component ids are 1 - N// without alpha we just accept the JFIF defaults// then it must be K// and component ids are 0 - N// do we want an ICC profile?// Now step through the markers, consulting our variables.// Can't happen here// Adobe// dqt// dht// sof// sos// Default progression scans are done in the writer////// End of constructors// Utilities for dealing with the marker sequence.// The first ones have package access for access from the writer./** Returns the first MarkerSegment object in the list ... *//** Returns the first or last MarkerSegment object in the list ... *//** Returns the index of the first or last MarkerSegment in the list ... */// Implement Cloneable, but restrict access/** Returns a deep copy of the current marker sequence. */// Tree methods// JFIF must be first, so this skips it// Unless we find otherwise// Colorspace type - follow the rules in the spec// First get the SOF marker segment, if there is one// No image, so no chroma// get the number of channels// is there a JFIF marker segment?// How about an Adobe marker segment?// Neither marker.  Check components// Check against the letters// Finally, 3-channel subsampled are YCbCr, unsubsampled are RGB// 4-channel subsampled are YCbCrA, unsubsampled are CMYK// Not subsampled.  numChannels < 3 is taken care of above// Lossless - false// NumProgressiveScans - count sos segments// If we have a JFIF marker segment, we know a little// otherwise all we know is the orientation, which is always normal// Aspect Ratio is width of pixel / height of pixel// In this case they just encode aspect ratio directly// They are true densities (e.g. dpi) and must be inverted// Pixel size// 1 == dpi, 2 == dpc// Add a text entry for each COM Marker Segment// Always assume// Editing// Deep copy// Avoid cloning twice// JPEGvariety and markerSequence/** Merge a JFIF subtree into the marker sequence, if the subtree ... */// is there already a jfif marker segment?// Add it as the first element in the list./** Merge the given DQT node into the marker sequence.  If there already ... */// First collect any existing DQT nodes into a local list/** Merge the given DHT node into the marker sequence.  If there already ... *//** Merge the given DRI node into the marker sequence. ... *//** Merge the given COM node into the marker sequence. ... *//** Insert a new COM marker segment into an appropriate place in the ... */// JFIF is always 0/** Merge the given Adobe APP14 node into the marker sequence. ... *//** Insert the given AdobeMarkerSegment into the marker sequence, as ... *//** Merge the given Unknown node into the marker sequence. ... *//** Merge the given SOF node into the marker sequence. ... *//** Merge the given SOS node into the marker sequence. ... *//* In general, it could be possible to convert all non-pixel data to some ... */// ColorSpaceType can change the target colorspace for compression// This must take any transparency node into account as well, as// that affects the number of channels (if alpha is present).  If// a transparency node is dealt with here, set a flag to indicate// this to the transparency processor below.  If we discover that// the nodes are not in order, throw an exception as the tree is// invalid.// If there is no ColorSpaceType node, we have nothing to do// We can't handle them, so don't modify any metadata// out of for// If the metadata specifies progressive, then the number of channels// must match, so that we can modify all the existing SOS marker segments.// If they don't match, we don't know what to do with SOS so we can't do// the merge.  We then just return silently.// An exception would not be appropriate.  A warning might, but we have// nowhere to send it to.// Progressive// JFIF header might be removed// Now add a JFIF if we do want one, but only if it isn't stream metadata// Adobe header might be removed or the transform modified, if it isn't// stream metadata// Keep the old componentSpecs array// SOF might be modified// Now replace the SOF with a new one; it might be the same, but// this is easier.// we never need extended// Now suss out if subsampling changed and set the boolean for// updating the q tables// if the old componentSpec q table selectors don't match// the new ones, update the qtables.  The new selectors are already// in place in the new SOF segment above.// if the component ids are different, update all the existing scans// ignore Huffman tables// update the ids in each SOS marker segment// Find the position in the old componentSpecs array// of the old component with the old selector// and replace the component selector with the// new id at the same position, as these match// the new component specs array in the SOF created// above.// htables - if the old htable selectors don't match the new ones,// update the tables.// Might be the same as the old one, but this is easier.// should be stream metadata if there isn't an SOF, but check it anyway// update tables - routines below check if it's really necessary// If there are no tables, don't add them, as the metadata encodes an// abbreviated stream.// If we are not subsampling, we just need one, so don't do anything// Is it really necessary?  There should be at least 2 tables.// If there is only one, assume it's a scaled "standard"// luminance table, extract the scaling factor, and generate a// scaled "standard" chrominance table.// Find the table with selector 1.//    find the table with selector 0.  There should be one.// Assuming that the table with id 0 is a luminance table,// compute a new chrominance table of the same quality and// add it to the last DQT segment// Is it really necessary?  There should be at least 2 dc and 2 ac// tables.  If there is only one, add a// "standard " chrominance table.// find a table with selector 1. AC/DC is irrelevant// Create new standard dc and ac chrominance tables and add them// to the last DHT segment// Alpha must be first if present// NumProgressiveScans is ignored.  Progression must be enabled on the// ImageWriteParam.// Pixel Aspect Ratio or pixel size can be incorporated if there is,// or can be, a JFIF segment// Can there be one?// Criteria:// SOF must be present with 1 or 3 channels, (stream metadata fails this)//     Component ids must be JFIF compatible.// remaining tests are negative// if Adobe present, transform = ADOBE_UNKNOWN for 1-channel,//     ADOBE_YCC for 3-channel.// If so, create one and insert it into the sequence.  Note that// default is just pixel ratio at 1:1// Convert from mm/dot to dots/cm/* Return a pair of integers whose ratio (x/y) approximates the given ... */// Normalize// Deal with min case// Deal with max case// Remember if we invert// First approximation// not close enough// Increment y and compute a new x// Convert to comments.  For the moment ignore the encoding issue.// Ignore keywords, language, and encoding (for the moment).// If compression tag is present, use only entries with "none".// This might indicate that an alpha channel is being added or removed.// The nodes must appear in order, and a Chroma node will process any// transparency, so process it here only if there was no Chroma node// Do nothing for stream metadata// do we have alpha already?  If the number of channels is 2 or 4,// we do, as we don't support CMYK, nor can we add alpha to it// The number of channels can be determined from the SOF// We can do nothing for progressive, as we don't know how to// modify the scans.// Do we already have alpha?  We can tell by the number of channels// We must have an sof, or we can't do anything further// proceed only if the old state and the new state differ// Adding alpha// If an adobe marker is present, transform must be UNKNOWN// Add a component spec with appropriate parameters to SOF// Add a component spec with appropriate parameters to SOS// Removing alpha// Remove a component spec from SOF// Remove a component spec from SOS// In this case a reset followed by a merge is correct// Build a whole new marker sequence from the tree// for all the children, add a marker segment/** Check that this metadata object is in a consistent state and ... */// SOF numBands = total scan bands// No SOS is OK// If JFIF is present, component ids are 1-3, bands are 1 or 3// If both JFIF and Adobe are present,// Adobe transform == unknown for gray,// YCC for 3-chan.// stream can't have jfif, adobe, sof, or sos/** Returns the total number of bands referenced in all SOS marker ... *////// Writer support// Write a default JFIF segment, including thumbnails// This won't be duplicated below because forceJFIF will be// set only if there is no JFIF present already.// Not compatible, so ignore Adobe.// Iterate over each MarkerSegment// Otherwise ignore it, as requested// If adobe isn't JFIF compatible, ignore it//// End of writer support// Otherwise no need to reset// 2-byte length reduces max to 65533// Format shared between image and stream formats// Just check if it appears in the format/** Returns <code>true</code> if the named element occurs in the ... */// return a copy of commonContents; in theory we want a deep clone// of commonContents, but since it only contains (immutable) Strings,// this shallow copy is sufficient/** All metadata is stored in MarkerSegments.  Marker segments ... */// length is 2 bytes// See JPEG.java/* Sometimes needed by subclasses; doesn't include ... */// Raw segment data, used for unrecognized segments// Set to true if the tag is not recognized/** Constructor for creating <code>MarkerSegment</code>s by reading ... */// tag plus length// JPEG length includes itself, we don't// Now that we know the true length, ensure that we've got it,// or at least a bufferful if length is too big./** Constructor used when creating segments other than by ... *//** Construct a MarkerSegment from an "unknown" DOM Node. */// The type of node should have been verified already.// get the attribute and assign it to the tag// get the user object and clone it to the data/** Deep copy of data array. *//** We have determined that we don't know the type, so load ... *//** Writes the marker, tag, and length.  Note that length ... *///import javax.imageio.IIOException;/** An SOF (Start Of Frame)  marker segment. */// Array size is num components// All attributes are optional, so setup defaults first// If samplePrecision is present, it must be 8.// This just checks.  We don't bother to assign the value.// We don't write SOF segments; the IJG library does./** A component spec within an SOF marker segment. */// Parent already did a loadBuf/** An SOS (Start Of Scan) marker segment. */// Array size is numScanComponents// Now the children// We don't write SOS segments; the IJG library does./** A scan component spec within an SOS marker segment. */// Parent already loaded the buffer// skip chunk type/* Note: The following chunk type constants are autogenerated.  Each ... */// Critical chunks// Ancillary chunks// The number of bands by PNG color type// gray// unused// rgb// gray + alpha// rgb + alpha// The number of source pixels processed// The total number of pixels in the source image// Re-use signature array to bulk-read these unsigned byte values// Skip IHDR CRC// Round array sizes up to 2^2^n// RGB or RGB_ALPHA/* According to PNG specification length of ... */// Decompress the text// Alpha table may have fewer entries than RGB palette/* Optimization: We can skip the remaining metadata if the ... */// We've reached the image data// Skip the chunk plus the 4 CRC bytes that follow// verify the chunk length// If chunk type is 'IDAT', we've reached the image data.// Read an unknown chunk// double check whether all chunk data were consumed// Data filtering methods// G// GA in GA order// RGB in RGB order// RGBA in RGBA order// Read the image row-by-row// Skip filter byte and the remaining row bytes// If read has been aborted, just return// processReadAborted will be called later// Determine which pixels will be updated in this pass// If no pixels need updating, just skip the input data// Update count of pixels read// Backwards map from destination pixels// (dstX = updateMinX + k*updateXStep)// to source pixels (sourceX), and then// to offset and skip in passRow (srcX and srcXStep)// Compute the step factor in the source// Create a 1-row tall Raster to hold the data// Create an array suitable for holding one pixel// Handle source and destination bands// Determine if all of the relevant output bands have the// same bit depth as the source data// If the bit depths differ, create a lookup table per band to perform// the conversion// Limit passRow to relevant area for the case where we// will can setRect to copy a contiguous span// Decode the (sub)image row-by-row// Read the filter type byte and a row of data// Swap curr and prior// TODO - throw a more meaningful exception// Copy data into passRow byte by byte// True Y position in source// Init default values// If an ImageReadParam is available, get values from it/* InflaterInputStream uses an Inflater instance which consumes ... *//* NB: the PNG spec declares that valid range for width ... */// At this point the header has been read and we know// how many bands are in the image, so perform checking// of the read param.// Packed grayscale// some standard types of buffered images// which can be used as destination// Component R, G, B// Need tRNS chunk/* The PLTE chunk spec says: ... */// Alpha from tRNS chunk may have fewer entries than// the RGB LUTs from the PLTE chunk; if so, pad with// 255.// Component G, A// wich can be used as destination// Component R, G, B, A (non-premultiplied)/* Super class implementation uses first element ... */// Initialize CRC table// length, will backpatch// Write CRC// Write length// Return to end of chunk and flush to minimize buffering// Compress output and write as a series of 'IDAT' chunks of// fixed length.// Factors from the ImageWriteParam// Per-band scaling tables// After the first call to initializeScaleTables, either scale and scale0// will be valid, or scaleh and scalel will be valid, but not both.// The tables will be designed for use with a set of input but depths// given by sampleSize, and an output bit depth given by scalingBitDepth.// Sample size per band, in bits// Output bit depth of the scaling tables// Tables for 1, 2, 4, or 8 bit output// 8 bit table// equivalent to scale[0]// Tables for 16 bit output// High bytes of output// Low bytes of output// Total number of pixels to be written by write_IDAT// Running count of pixels written by write_IDAT// TODO - deal with imageType// Write signature// Write IHDR chunk// null terminator// PLTE cannot occur in a gray image// Special case: image is RGB and chunk is Gray// Promote chunk contents to RGB// Special case: image is RGB(A) and chunk is Gray// Make a gray bKGD chunk look like RGB// Ignore status of alpha in colorType// colorType == PNGImageReader.PNG_COLOR_RGB ||// colorType == PNGImageReader.PNG_COLOR_RGB_ALPHA// sampleDepth == 16// Adjust offsets and skips based on source subsampling factors// Early exit if no data for this pass// Convert X offset and skip from pixels to samples// Create row buffers// reserve space for alpha samples// will be used to calculate alpha value for the pixel// Reorder palette data if necessary// leave first 'bpp' bytes zero// Image can only have a single band// Left shift the last byte// Perform filtering// Swap current and previous rows// If write has been aborted, just return;// processWriteAborted will be called later// Use sourceXOffset, etc.// Check two int arrays for value equality, always returns false// if either array is null// Initialize the scale/scale0 or scaleh/scalel arrays to// hold the results of scaling an input value to the desired// output bit depth// If the existing tables are still valid, just return// Compute new tables// bitDepth == 16// Divide scaling table into high and low bytes// Set source region and subsampling to default values// Compute total number of pixels for progress notification// Create metadata// Use Adam7 interlacing if set in write param// MODE_COPY_FROM_METADATA should alreay be taken care of// MODE_EXPLICIT is not allowed// Initialize bitDepth and colorType// Overwrite IHDR width and height values with values from image// Initialize scaling tables for this image// Finish up and inform the listeners we are done// Ensure bitDepth is between 1 and 16// Check number of bands, alpha// Fix 4464413: PNGTransparency reg-test was failing// because for IndexColorModels that have alpha,// numBands == 1 && hasAlpha == true, thus causing// the check below to fail and return false.// Color types for IHDR chunk// Bit depths for IHDR chunk// Compression methods for IHDR chunk// Filter methods for IHDR chunk// Interlace methods for IHDR chunk// Compression methods for iCCP chunk// Compression methods for zTXt chunk// "Unknown" unit for pHYs chunk// "Meter" unit for pHYs chunk// Unit specifiers for pHYs chunk// Rendering intents for sRGB chunk// 0// 1// 2// 3// Color space types for Chroma->ColorSpaceType node// IHDR chunk// 0 == none, 1 == adam7// PLTE chunk// If non-null, used to reorder palette entries during encoding in// order to minimize the size of the tRNS chunk.  Thus an index of// 'i' in the source should be encoded as index 'PLTE_order[i]'.// PLTE_order will be null unless 'initialize' is called with an// IndexColorModel image type.// bKGD chunk// If external (non-PNG sourced) data has red = green = blue,// always store it as gray and promote when writing// PNG_COLOR_GRAY, _RGB, or _PALETTE// cHRM chunk// gAMA chunk// hIST chunk// iCCP chunk// iTXt chunk// pHYs chunk// 0 == unknown, 1 == meter// sBIT chunk// PNG_COLOR_GRAY, _GRAY_ALPHA, _RGB, _RGB_ALPHA// sPLT chunk// 1-79 characters// 8 or 16// sRGB chunk// tEXt chunk// tIME chunk// tRNS chunk// May have fewer entries than PLTE_red, etc.// zTXt chunk// Unknown chunks// TODO -- implement/** Sets the IHDR_bitDepth and IHDR_colorType variables. ... */// Initialize IHDR_bitDepth// Choose max bit depth over all channels// Fixes bug 4413109// Multi-channel images must have a bit depth of 8 or 16// Round bit depth up to a power of 2// Initialize IHDR_colorType// Determine whether the color tables are actually a gray ramp// if the color type has not been set previously// Determine whether transparency exists/* NB: PNG_COLOR_GRAY_ALPHA color type may be not optimal for images ... */// Reorder the palette so that non-opaque entries// come first.  Since the tRNS chunk does not have// to store trailing 255's, this can save a// considerable amount of space when encoding// images with only one transparent pixel value,// e.g., images from GIF sources.// Scan for non-opaque entries and assign them// positions starting at 0.// Scan for opaque entries and assign them// positions following the non-opaque entries.// Reorder the palettes// All have the same length// Copy only the transparent entries into tRNS_alpha// Deep clone// unknownChunkData needs deep clone// IHDR// IHDR_compressionMethod must be 0 in PNG 1.1// IHDR_filterMethod must be 0 in PNG 1.1// PLTE// bKGD// cHRM// gAMA// hIST// iCCP// iTXt// pHYs// sBIT// sPLT// sRGB// tEXt// tIME// tRNS// zTXt// Determine number of channels// Be careful about palette color with transparency// sBIT_colorType == PNGImageReader.PNG_COLOR_RGB ||// sBIT_colorType == PNGImageReader.PNG_COLOR_RGB_ALPHA// Guard against partial overwrite// silently skip invalid text entry/* Accrding to PNG spec, keywords are restricted to 1 to 79 bytes ... *//* According to PNG spec, keyword shall contain only printable ... */// not printable. Check whether this is an allowed// control char//                  } else if (childName.equals("ColorSpaceType")) {//                  } else if (childName.equals("NumChannels")) {// Use Adam7 if NumProgressiveScans > 1//                  } else if (childName.equals("CompressionTypeName")) {//                  } else if (childName.equals("Lossless")) {//                  } else if (childName.equals("BitRate")) {//                      } else if (childName.equals("PlanarConfiguration")) {//                      } else if (childName.equals("SampleFormat")) {//                      } else if (childName.equals("SampleMSB")) {//                  } else if (childName.equals("ImageOrientation")) {//                  } else if//                      (childName.equals("HorizontalPhysicalPixelSpacing")) {//                      (childName.equals("VerticalPhysicalPixelSpacing")) {//                  } else if (childName.equals("HorizontalPosition")) {//                  } else if (childName.equals("VerticalPosition")) {//                  } else if (childName.equals("HorizontalPixelOffset")) {//                  } else if (childName.equals("VerticalPixelOffset")) {// Find a reasonable rational approximation//                  } else if (childName.equals("SubimageInterpretation")) {//                  } else if (childName.equals("ImageCreationTime")) {// Just ignore this node, PNG requires keywords// Use a zTXt node// Use a tEXt node// Use an iTXt node// fake it//          } else if (name.equals("Transparency")) {//              Node child = node.getFirstChild();//              while (child != null) {//                  String childName = child.getNodeName();//                  if (childName.equals("Alpha")) {//                  } else if (childName.equals("TransparentIndex")) {//                  } else if (childName.equals("TransparentColor")) {//                  } else if (childName.equals("TileTransparencies")) {//                  } else if (childName.equals("TileOpacities")) {//                  }//                  child = child.getNextSibling();//              }//          } else {//              // fatal(node, "Unknown child of root node!");// Reset all instance variables to their initial state// 2^16 - 1// 2^32 - 1// root -> IHDR// root -> PLTE// root -> PLTE -> PLTEEntry// root -> bKGD// root -> bKGD -> bKGD_Grayscale// root -> bKGD -> bKGD_RGB// root -> bKGD -> bKGD_Palette// root -> cHRM// root -> gAMA// root -> hIST// root -> hISTEntry// root -> iCCP// root -> iTXt// root -> iTXt -> iTXtEntry// root -> pHYS// root -> sBIT// root -> sBIT -> sBIT_Grayscale// root -> sBIT -> sBIT_GrayAlpha// root -> sBIT -> sBIT_RGB// root -> sBIT -> sBIT_RGBAlpha// root -> sBIT -> sBIT_Palette// root -> sPLT// root -> sPLT -> sPLTEntry// root -> sRGB// root -> tEXt// root -> tEXt -> tEXtEntry// root -> tIME// root -> tRNS// root -> tRNS -> tRNS_Grayscale// root -> tRNS -> tRNS_RGB// root -> tRNS -> tRNS_Palette// root -> zTXt// root -> zTXt -> zTXtEntry// root -> UnknownChunks// root -> UnknownChunks -> UnknownChunk// Returns the sum of absolute differences// Use type 0 for palette images/** This class is the Java Image IO plugin reader for WBMP images. ... *//** Constructs <code>WBMPImageReader</code> from the provided ... */// TypeField// check for valid wbmp image// Read image width// Read image height// Get the SampleModel.// If noTransform is necessary, read the data./* This method verifies that given byte is valid wbmp type marker. ... */// check WBMP "header"// while WBMP reader does not support ext WBMP headers// check image dimension// We can't verify that amount of data in the stream// corresponds to image dimension because we do not know// the length of the data stream.// Assuming that wbmp image are used for mobile devices,// let's introduce an upper limit for image dimension.// In case if exact amount of raster data is unknown,// let's reject images with dimension above the limit.// Get the number of bits required to represent an int.// Convert an int value to WBMP multi-byte format./** Constructs <code>WBMPImageWriter</code> based on the provided ... */// default wbmp level// If the data are not formatted nominally then reformat.// Check whether the image is white-is-zero.// Get the line stride, bytes per row, and data array.// Write WBMP header.// FixHeaderField// Write the data.// Write the entire image.// Write the image row-by-row.// Black-is-zero// White-is-zero: need to invert data./** Convenience class that closes a given resource (e.g. RandomAccessFile), ... *//** This class provide means to properly close hanging ... */// Make a copy of the set in order to avoid// concurrent modification (the is.close()// will in turn call removeFromQueue())/* The thread must be a member of a thread group ... *//* Set context class loader to null in order to avoid ... *//** Small class to assist in properly closing an ImageInputStream instance ... *//* Copyright (c) 2005, 2013, Oracle and/or its affiliates. All rights reserved. ... *//** This class is preserved for backward compatibility with JDK 6. ... *//** A collection of utility methods for Swing. ... *//** The {@code clientProperty} key for delegate {@code RepaintManager} *//** Registers delegate RepaintManager for {@code JComponent}. *//* setting up flag in AppContext to speed up lookups in case ... *//** Sets vsyncRequested state for the {@code rootContainer}.  If ... *//** Checks if vsync painting is requested for {@code rootContainer} ... *//** Returns delegate {@code RepaintManager} for {@code component} hierarchy. *//* We use maps to avoid reflection. Hopefully it should perform better ... *//** A color chooser panel mimicking that of GTK's: a color wheel showing ... */// The colors are mirrored to avoid creep in adjusting an individual/** Convenience method to transfer focus to the next child of component. */// PENDING: remove this when a variant of this is added to awt./** Returns a user presentable description of this GTKColorChooserPane. *//** Returns the mnemonic to use with <code>getDisplayName</code>. *//** Character to underline that represents the mnemonic. *//** Builds and configures the widgets for the GTKColorChooserPanel. */// PENDING: when we straighten out user setting opacity, this should// be changed./** Configures the spinner. *//** Adds the widget creating a JLabel with the specified name. *//** Refreshes the display from the model. *//** Resets the red component of the selected color. *//** Resets the green component of the selected color. *//** Resets the blue component of the selected color. *//** Sets the hue of the selected color and updates the display if ... *//** Returns the current amount of hue. *//** Resets the saturation. *//** Returns the saturation. *//** Sets the brightness. *//** Returns the brightness. *//** Sets the saturation and brightness and updates the display if ... *//** Resets the rgb values. *//** Resets the hsb values. *//** Rests the color. ... */// Force Integer to pad the string with 0's by adding 0x1000000 and// then removing the first character./** ChangeListener method, updates the necessary display widgets. *//** Flag indicating the angle, or hue, has changed and the triangle ... *//** Indicates the wheel is being dragged. *//** Indicates the triangle is being dragged. *//** Indicates a color is being set and we should ignore setColor *//** Indicates the wheel has focus. *//** Indicates the triangle has focus. *//** Class responsible for rendering a color wheel and color triangle. *//** Cached image of the wheel. *//** Cached image of the triangle. *//** Angle triangle is rotated by. *//** Boolean bitmask. *//** X location of selected color indicator. *//** Y location of selected color indicator. */// We want to handle tab ourself.// PENDING: this should come from the style./** Returns the GTKColorChooserPanel. *//** Gives focus to the wheel. *//** Gives focus to the triangle. *//** Returns true if the wheel currently has focus. *//** Resets the selected color. *//** Returns the selected color. *//** Returns the x location of the selected color indicator. *//** Returns the y location of the selected color indicator. */// Assign focus to either the wheel or triangle and attempt// to drag either the wheel or triangle.// Stopped dragging// Reset the flags to indicate no one has focus// Gained focus, reassign focus to the wheel if no one// currently has focus.// Draw the wheel and triangle// Draw the focus indicator for the wheel// Draw a line on the wheel indicating the selected hue.// Draw the focus indicator on the triangle// Draw the selected color indicator./** Returns an image representing the triangle and wheel. *//** Returns a color wheel image for the specified size. ... *//** Adjusts the saturation and brightness. <code>x</code> and ... */// Invert the axis.// Rotate to origin and and verify x is valid.// Verify y location is valid.// Rotate again to determine value and scale/** Sets the saturation and brightness. *//** Adjusts the hue based on the passed in location. ... */// Map the location to an angle and reset hue/** Rotates the triangle to accommodate the passed in hue. *//** Sets the angle representing the hue. *//** Returns the size of the color indicator. *//** Returns the circumscribed radius of the triangle. *//** Returns the x origin of the wheel and triangle. *//** Returns y origin of the wheel and triangle. *//** Returns the width of the wheel. *//** Sets the focus to one of: 0 no one, 1 the wheel or 2 the triangle. *//** Returns the radius of the wheel. */// As far as I can tell, GTK doesn't allow stretching this// widget/** Updates the flags bitmask. *//** Returns true if a particular flag has been set. *//** Returns the RGB color to use for the specified location. The ... */// FFFF00 - FF0000// FF0000 - FF00FF// 00FF00 - FFFF00// FF00FF - 0000FF// 00FFFF - 00FF00// 0000FF - 00FFFF/** Increments the hue. *//** Action class used for colors. */// up// down// left// right// GTK allows you to specify the foreground and background in a// gtkrc, the rest (dark, mid, light) are calculated from these// values./** Converts from RGB color space to HLS colorspace. *//* calculate lightness *//** Creates and returns a new color derived from the passed in color. ... *//* Copyright (c) 2002, 2005, Oracle and/or its affiliates. All rights reserved. ... *//** Used to indicate a constant is not defined. *//** Java representation of native GtkIconSize enum *//** Java representation of native GtkTextDirection enum *//** Java representation of native GtkShadowType enum *//** Java representation of native GtkStateType enum *//** Java representation of native GtkExpanderStyle enum *//** Java representation of native GtkPositionType enum *//** Java representation of native GtkArrowType enum *//** Java representation of native GtkOrientation enum *//* Copyright (c) 2005, 2018, Oracle and/or its affiliates. All rights reserved. ... *//** GTKEngine delegates all painting job to native GTK libraries. ... *//** Size of the image cache *//** This enum mirrors that in gtk2_interface.h *//** Representation of GtkSettings properties. ... *//* Custom regions are needed for representing regions that don't exist ... *//* TITLED_BORDER Region is mapped to GtkFrame class which can draw ... */// Make sure the awt toolkit is loaded so we have access to native// Initialize regionToWidgetTypeMap/** Translate Region and JComponent into WidgetType ordinals *//* We should return correrct WidgetType if the seperator is inserted ... *//* For all ListCellRenderers we will use COMBO_BOX_TEXT_FIELD widget ... */// Transparency.OPAQUE// Transparency.BITMASK// Transparency.TRANSLUCENT// OPAQUE// BITMASK// TRANSLUCENT/** Paint a cached image identified by its size and a set of additional ... */// look for cached image/* Allocate a native offscreen buffer of the specified size. *//** Convenience method that delegates to finishPainting() with ... *//** Called to indicate that painting is finished. We create a new ... */// Note that stealData() requires a markDirty() afterwards// since we modify the data in it./** Notify native layer of theme change, and flush cache *//* GtkSettings enum mirrors that in gtk2_interface.h *//** Sets up the GtkAdjustment values for the native GtkRange widget ... *//** GTK FileChooserUI. ... */// The accessoryPanel is a container to place the JFileChooser accessory component// From Motif// we return all selected file names// plus the file name typed into the text field, if not already there// construct the resulting string//     public String getDirectoryName() {//      return pathField.getText();// PENDING// ***********************// * FileView operations *// Ancestor was added, set initial focus// ********************************************// ************ Create Listeners **************// Strip trailing ".."// That's ok, we'll use f as is// ComponentUI Interface Implementation methods// Top row of buttons// CurrentDir ComboBox// CENTER: left, right, accessory// SPLIT PANEL: left, right// left panel - Filter & directoryList// Add the Directory List// Create a label that looks like button (should be a table header)// create files list// add the fileName field// Add the filter combo box// Add buttons// PENDING - this is inefficient - should sent out// incremental adjustment values instead of saying that the// whole list has changed.// PENDING - fire the correct interval changed - currently sending// out that everything has changed// PENDING - fire the interval changed// DataModel for DirectoryComboxbox/** Data model for a type-face selection combo-box. */// Add the current directory to the model, and make it the// selectedDirectory/** Adds the directory to the model and sets it to be selected, ... */// Get the canonical (full) path. This has the side// benefit of removing extraneous chars from the path,// for example /foo/bar/ becomes /foo/bar// Maybe drive is not ready. Can't abort here.// create File instances of each directory leading up to the top/** Acts when DirectoryComboBox has changed the selected item. *//** Creates a new folder. */// Ok, use f as is/** Renames file */// Renderer for Filter ComboBox/** Render different filters */// As SynthComboBoxRenderer's are asked for a size BEFORE they// are parented getName is overriden to force the name to be// ComboBox.renderer if it isn't set. If we didn't do this the// wrong style could be used for size calculations.// DataModel for Filter Combobox/** Data model for filter combo-box. */// Ensure that the current filter is in the list.// NOTE: we shouldnt' have to do this, since JFileChooser adds// the filter to the choosable filters list when the filter// is set. Lets be paranoid just in case someone overrides// setFileFilter in JFileChooser.// This shouldn't happen. Try to recover gracefully./* Copyright (c) 2002, 2018, Oracle and/or its affiliates. All rights reserved. ... */// We don't need to paint empty strings// Metacity handles painting of text on internal frame title,// ignore this./** Paints text at the specified location. This will not attempt to ... */// The "bounds" parameter encompasses only the actual text;// when drawing the focus, we need to expand that bounding// box by "focus-line-width" plus "focus-padding".  Note that// the layout process for these components will have already// taken these values into account, so there should always// be enough space allocated for drawing the focus indicator.// For pre-gtk2.4// Sort arrow// Radio button// CheckBox// Menus// ToolBar Handle// GTK has a separate widget for the handle box, to mirror this// we create a unique icon per ToolBar and lookup the style for the// HandleBox./** Whether or not text is drawn antialiased.  This keys off the ... *//** Solaris, or Linux with Sun JDS in a CJK Locale. ... *//* Used to override if system (desktop) text anti-aliasing settings should ... *//** Font to use in places where there is no widget. *//** If true, GTKLookAndFeel is inside the <code>initialize</code> ... *//** If true, PropertyChangeListeners have been installed for the ... *//** StyleFactory needs to be created only the first time. *//** Cached theme name. Used by GTKGraphicsUtils *//** Returns true if running on system containing at least 2.2. */// NOTE: We're currently hard coding to use 2.2.// If we want to support both GTK 2.0 and 2.2, we'll// need to get the major/minor/micro version from the .so.// Refer to bug 4912613 for details./** Maps a swing constant to a GTK constant. *//** Maps from Synth state to native GTK state using typesafe enumeration ... *//** Maps from a Synth state to the corresponding GTK state. ... */// If the button is SELECTED and is PRELIGHT we need to// make the state MOUSE_OVER otherwise we don't paint the// PRELIGHT.// These Regions treat FOREGROUND as TEXT.// We need to call super for basic's properties file.// SynthTabbedPaneUI supports rollover on tabs, GTK does not// Prevents Synth from setting text AA by itself// For compatibility with apps expecting certain defaults we'll// populate the table with the values from basic.// The following progress bar size calculations come from// gtkprogressbar.c (version 2.8.20), see MIN_* constants and// the gtk_progress_bar_size_request() method./* DefaultEditorKit.unselectAction *//* DefaultEditorKit.toggleComponentOrientation */// These bindings are only enabled when there is a default// button set on the rootpane.// colors specific only for GTK// It is impossible to create a simple GtkWidget without specifying the// type. So for GtkWidget we can use any appropriate concrete type of// wigdet. LABEL in this case./** Creates the GTK look and feel class for the passed in Component. *//** Returns the cached gtkThemeName *//* We need to call loadGTK() to ensure that the native GTK ... *//* Check if system AA font settings should be used. ... */// The property was GC'ed, we're no longer interested in// PropertyChanges, remove the listener.// We are using invokeLater here because we are getting called// on the AWT-Motif thread which can cause a deadlock./* We are listening for GTK desktop text AA settings: ... */// Subclassed to pass in false to the superclass, we don't want to try// and load the system colors.// If we are in initialize initializations will be// called later, don't do it now.// Desktop property appears to have preference over rc font./** Returns whether or not the UIs should update their ... *//** {@inheritDoc} *//** Gnome layout style.  From: ... */// Checks args// Indent group members 12 pixels to denote hierarchy and// association.// Fall through to related// As a basic rule of thumb, leave space between user// interface components in increments of 6 pixels, going up as// the relationship between related elements becomes more// distant. For example, between icon labels and associated// graphics within an icon, 6 pixels are adequate. Between// labels and associated components, leave 12 horizontal// pixels. For vertical spacing between groups of components,// 18 pixels is adequate.// The first part of this is handled automatically by Icon (which// won't give you 6 pixels).// A general padding of 12 pixels is// recommended between the contents of a dialog window and the// window borders.// Need to support:// default_outside_border: Insets when default.// interior_focus: Indicates if focus should appear inside border, or//                       outside border.// focus-line-width: Integer giving size of focus border// focus-padding: Integer giving padding between border and focus//        indicator.// focus-line-pattern:// FORMATTED_TEXT_FIELD// TOOL_BAR_DRAG_WINDOW// TOOL_BAR// PASSWORD_FIELD// TEXT_FIELD// RADIO_BUTTON// NOTE: this is called for JCheckBox too// RADIO_BUTTON_MENU_ITEM// NOTE: this is called for JCheckBoxMenuItem too// LABEL/* If the label is a ListCellRenderer and it's in a container ... */// INTERNAL_FRAME// DESKTOP_PANE// Does not call into ENGINE for better performance// DESKTOP_ICON// Paint the default indicator// Render the box.// Toolbar buttons should only have their background painted// in the PRESSED, SELECTED, or MOUSE_OVER states.// Otherwise, always paint the button's background, unless// the user has overridden it and we're in the ENABLED state.// focus// ARROW_BUTTON/* The ubuntulooks engine (and presumably others) expect us to ... */// LIST// MENU// This is called for both MENU and MENU_ITEM// fix no menu borders in Adwaita theme// Note that we don't call paintCachedImage() here.  Since the// progress bar foreground is painted differently for each value// it would be wasteful to try to cache an image for each state,// so instead we simply avoid caching in this case.// don't bother caching the image/* Note: In theory, the style's x/y thickness values would determine ... *//* GTK renders toolbar separators differently in that an ... */// For regular/menu separators, we simply subtract out the insets.// For focused sliders, we paint focus rect outside the bounds passed.// Need to adjust for that.// The ubuntulooks engine paints slider troughs differently depending// on the current slider value and its component orientation.// not used for sliders; any value will work// Note that we don't call paintCachedImage() here.  Since some// engines (e.g. ubuntulooks) paint the slider background// differently for any given slider value, it would be wasteful// to try to cache an image for each state, so instead we simply// avoid caching in this case.// SPINNER// This is handled in paintTextFieldBackground// SPLIT_PANE_DIVIDER// TEXT_PANE// EDITOR_PANE// TEXT_AREA// NOTE: Combobox and Label, Password and FormattedTextField calls this// too.// Text is odd in that it uses the TEXT_BACKGROUND vs BACKGROUND.// ROOT_PANE// TOGGLE_BUTTON// SCROLL_BAR// Note: the scrollbar insets already include the "trough-border",// which is needed to position the scrollbar buttons properly.// But when we render, we need to take the trough border out// of the equation so that we paint the entire area covered by// the trough border and the scrollbar content itself.// SCROLL_BAR_THUMB// The clearlooks engine paints scrollbar thumbs differently// depending on the current scroll value (specifically, it will avoid// rendering a certain line when the thumb is at the starting or// ending position).  Therefore, we normalize the current value to// the range [0,100] here and then pass it down to setRangeValue()// so that the native widget is configured appropriately.  Note that// there are really only four values that matter (min, middle, max,// or fill) so we restrict to one of those four values to avoid// blowing out the image cache.// In this case, the thumb fills the entire track, so it is// touching both ends at the same time// At minimum// At maximum// Somewhere in between// TOOL_TIP// TREE_CELL// the string arg should alternate based on row being painted,// but we currently don't pass that in.// TREE// As far as I can tell, these don't call into the ENGINE.// VIEWPORT// Also note that you don't want this to call into the ENGINE// as if it where to paint a background JViewport wouldn't scroll// All icon painting methods are called from under GTK_LOCK// The orientation parameter passed down by Synth refers to the// orientation of the toolbar, but the one we pass to GTK refers// to the orientation of the handle.  Therefore, we need to swap// the value here: horizontal toolbars have vertical handles, and// vice versa./* Fill an area with color determined from this context's Style using the ... */// Refer to GTKLookAndFeel for details on this.// TitledBorder implementation for GTK L&F/** A typesafe enumeration of the distinct rendering portions specific ... *//** Maps from a key that is passed to Style.get to the equivalent class ... *//** Backing style properties that are used if the style does not ... *//** The font used for this particular style, as determined at ... *//** Widget type used when looking up class specific values. *//** The x/y thickness values for this particular style. *//** Returns a <code>SynthPainter</code> that will route the appropriate ... *//** Returns color specific to the current style. This method is ... *//** Returns the color for the specified state. ... */// For the enabled state, prefer the widget's colors// If getForeground returns a non-UIResource it means the// developer has explicitly set the foreground, use it over// that of TEXT_FOREGROUND as that is typically the expected// behavior.// if font property got a value then return it/** Returns the X thickness to use for this GTKStyle. ... *//** Returns the Y thickness to use for this GTKStyle. ... *//** Returns the Insets. If <code>insets</code> is non-null the resulting ... */// The following calculations are derived from gtkbutton.c// (GTK+ version 2.8.20), gtk_button_size_allocate() method.// Include the default border insets, but only for JButtons// that are default capable.  Note that// JButton.getDefaultCapable() returns true by default, but// GtkToolButtons are never default capable, so we skip this// step if the button is contained in a toolbar./* This is used for both RADIO_BUTTON and CHECK_BOX. */// The following calculations are derived from gtkcheckbutton.c// (GTK+ version 2.8.20), gtk_check_button_size_allocate() method.// Note: GTKIconFactory.DelegateIcon will have already included the// "indicator-spacing" value in the size of the indicator icon,// which explains why we use zero as the left inset (or right inset// in the RTL case); see 6489585 for more details.// The following calculations are derived from gtkmenubar.c// (GTK+ version 2.8.20), gtk_menu_bar_size_allocate() method.// The following calculations are derived from gtkmenuitem.c// (GTK+ version 2.8.20), gtk_menu_item_size_allocate() method.// NOTE: this is called for ComboBox, and FormattedTextField also// This scrollbar is part of a scrollpane; use only the// "scrollbar-spacing" style property to determine the padding// between the scrollbar and its parent scrollpane.// This is a standalone scrollbar; leave enough room for the// focus line in addition to the trough border./** Returns the value for a class specific property for a particular ... *//** Convenience method to get a class specific integer value for ... *//** Returns the value for a class specific property. A class specific value ... *//** Convenience method to get a class specific integer value. ... *//** Convenience method to get a class specific Insets value. ... *//** Convenience method to get a class specific Boolean value. ... *//** Returns the value to initialize the opacity property of the Component ... */// See if this is a class specific value.//This is a workaround as the "slider-length" property has been//deprecated for GtkScale from gtk 3.20, so default value of 31//is used and makes redering of slider wrong. Value 14 is being//used as default value for Slider.thumbHeight is 14 and making//width 14 as well makes slider thumb render in proper shape// Is it a specific value ?//This is a workaround as the "min-slider-length" property has been//deprecated for GtkScrollBar from gtk 3.20, so default value of 21//is used and makes ScrollBar thumb very small. Value 40 is being//used as this is the value mentioned in css files// Believe it or not, the size of a spinner arrow button is// dependent upon the size of the spinner's font.  These// calculations come from gtkspinbutton.c (version 2.8.20),// spin_button_get_arrow_size() method.// For all other kinds of arrow buttons (e.g. combobox arrow// buttons), we will simply fall back on the value of// ArrowButton.size as defined in the UIDefaults for// GTKLookAndFeel when we call UIManager.get() below...// The iconTextGap value needs to include "indicator-spacing"// and it also needs to leave enough space for the focus line,// which falls between the indicator icon and the text.// See getRadioInsets() and 6489585 for more details.// Is it a stock icon ?// Is it another kind of value ?// For backward compatibility we'll fallback to the UIManager.// We don't go to the UIManager for engine as the engine is GTK// specific.// Don't call super, we don't want to pick up defaults from// SynthStyle.// First try loading a theme-specific icon using the native// GTK libraries (native GTK handles the resizing for us).// In a failure case where native GTK (unexpectedly) returns a// null icon, we can try loading a default icon as a fallback.// In an extreme failure situation, just return null (callers are// already prepared to handle a null icon, so the worst that can// happen is that an icon won't be included in the button/dialog).// GTK_ICON_SIZE_INVALID// GTK_ICON_SIZE_MENU// GTK_ICON_SIZE_SMALL_TOOLBAR// GTK_ICON_SIZE_LARGE_TOOLBAR// GTK_ICON_SIZE_BUTTON// GTK_ICON_SIZE_DND// GTK_ICON_SIZE_DIALOG/** Return the size of a particular icon type (logical size) ... *//** Change icon size in a type to size mapping. This is called by code ... *//** Return icon type (GtkIconSize value) given a symbolic name which can ... *//** An Icon that is fetched using getStockIcon. *//** GTKLazyValue is a slimmed down version of <code>ProxyLaxyValue</code>. ... *//** Name of the class to create. *///check whether the gtk version is >= 3.10 as the Icon names were//changed from this version/** Saves all styles that have been accessed.  In most common cases, ... *//** Returns the <code>GTKStyle</code> to use based on the ... */// The style/insets of a scrollbar can depend on a number of// factors (see GTKStyle.getScrollBarInsets()) so use a// complex key here.// The style/insets of a checkbox or radiobutton can depend// on the component orientation, so use a complex key here.// The style/insets of a button can depend on whether it is// default capable or in a toolbar, so use a complex key here.// Otherwise, just use the WidgetType as the key./** Represents a hash key used for fetching GTKStyle objects from the ... */// Tutorial:// http://developer.gnome.org/doc/tutorials/metacity/metacity-themes.html// Themes:// http://art.gnome.org/theme_list.php?category=metacity// Reusable clip shape object// Initialize constants// Ignore bad value// Cache frame geometries// These don't seem to apply here, but the Galaxy theme uses them. Not sure why.// Debian/Redhat/Solaris// SuSE// System property may not be set so skip null directories.// Set userHome here because we need the privilege// Note: this is a small file (< 1024 bytes) so it's not worth// starting an XML parser or even to use a buffered reader.// Pending: verify character encoding spec for gconf// OK to just ignore. We'll use a fallback theme.//log("Bad image url: "+ themeDir + "/" + key);// Assume all rgb values are shades of gray// Calculate width.// Leave room for three characters in the title.// Calculate height.// end TitlePaneLayout// Get colors from child nodes// XML Parsing// ElementNode// skip right paren// Not called// For each array://     4 values for each point {v0, v1, v2, v3}://         point = (x + v0 * w + v1 * arcWidth,//                  y + v2 * h + v3 * arcHeight);/* BOTTOM LEFT corner *//* BOTTOM LEFT arc start *//* BOTTOM LEFT arc curve *//* BOTTOM RIGHT corner *//* BOTTOM RIGHT arc start *//* BOTTOM RIGHT arc curve *//* TOP RIGHT corner *//* TOP RIGHT arc start *//* TOP RIGHT arc curve *//* TOP LEFT corner *//* TOP LEFT arc start *//* TOP LEFT arc curve *//* Closing path element */// Don't draw anything...// 4xCORNER_POINT, CLOSE// Add one for each corner that has a curve/** Calculate a default scale factor for fonts in this L&F to match ... *//** Parses a String containing a pango font description and returns ... *//* Java 2D font point sizes are in a user-space scale of 72dpi. ... *//* 50 dpi is the minimum value gnome allows *//* The Java rasteriser assumes pts are in a user space of ... *//* If there's no property, GTK scales for the resolution ... *//* Round size to nearest integer pt size *//* family is a Fc/Pango logical font which we need to expand. *//* It's a physical font which we will create with a fallback *//* a roundabout way to set the font size in floating points *//* Copyright (c) 1997, 2010, Oracle and/or its affiliates. All rights reserved. ... *//** Factory object that can vend Icons appropriate for the basic L & F. ... */// top// bottom// this draws the MenuBar border// The width of the border/** Constructs an FrameBorder for the JComponent <b>comp</b>. *//** Sets the FrameBorder's JComponent. *//** Returns the FrameBorder's JComponent. ... *//** Draws the FrameBorder's top border. */// Draw frame// Draw highlights// Draw shadows/** Draws the FrameBorder's left border. *//** Draws the FrameBorder's right border. *//** Draws the FrameBorder's bottom border. */// Returns true if the associated component has focus./** Draws the FrameBorder in the given Rect.  Calls ... */// The size of the bounding box for Motif frame corners./** Constructs an InternalFrameBorder for the InternalFrame ... *//** Sets the InternalFrameBorder's InternalFrame. *//** Returns the InternalFrameBorder's InternalFrame. ... *//** Returns the width of the InternalFrameBorder's resize controls, ... *//** Draws the InternalFrameBorder's top border. *//** Draws the InternalFrameBorder's left border. *//** Draws the InternalFrameBorder's right border. *//** Draws the InternalFrameBorder's bottom border. */// Returns true if the associated internal frame has focus.// inner border// inner 3D border// black drop shadow  __|// Space between the border and text// Space for the separator under the title/** Creates a MotifPopupMenuBorder instance *//** Paints the border for the specified component with the ... *//** Reinitialize the insets parameter with this Border's current Insets. ... *//* Copyright (c) 1997, 2001, Oracle and/or its affiliates. All rights reserved. ... *//** Button Listener ... *//** MotifButton implementation ... */// ********************************//          Create PLAF//         Create Listeners//          Install Defaults//          Default Accessors//          Paint Methods// Overridden to ensure we don't paint icon over button borders.// focus painting is handled by the border/* Copyright (c) 1997, 2006, Oracle and/or its affiliates. All rights reserved. ... *//** MotifCheckboxMenuItem implementation ... *//* Copyright (c) 1997, 1998, Oracle and/or its affiliates. All rights reserved. ... *//** MotifCheckBox implementation ... *///         Create PLAF//          Defaults/** ComboBox motif look and feel ... *//** Overriden to empty the MouseMotionListener. *//** Motif combo popup should not track the mouse in the list. */// Draw the separation/** This inner class is marked &quot;public&quot; due to a compiler bug. ... *//** {@inheritDoc} ... *//** This class should be made &quot;protected&quot; in future releases. *//* Copyright (c) 1997, 2005, Oracle and/or its affiliates. All rights reserved. ... *//** Motif rendition of the component. ... */// This is only used for its system menu, but we need a reference to it so// we can remove its listeners.// padding between icon and label// An underhanded way of creating a system popup menu./** Returns the default desktop icon. *//** Sets the icon used as the default desktop icon. */// Forward mouse events to titlebar for moves.// touch-up frame// fill background// draw text -- clipping to truncate text like CDE/Motif// if we drag or move we should deengage the popup/* the mouse release will not get reported correctly, ... *//// DesktopPaneUI methods///////////////////////////////////////////////////////////////////////////////////////  DragPane class///  MotifDesktopManager class// PENDING(klobad) this should be optimized/** Change positions of icons in the desktop pane so that ... */// We need to know Motif icon size/** Change positions of icon so that it doesn't overlap ... *//* Fix for disappearing icons. If the y value is maxy then this ... *//* Compute the offset for the cell we are trying to go in. *//* How far are we into the cell we dropped the icon in. *//* Set coordinates for the icon. *//* Cancel the move if the x value was moved off screen. *//// END of MotifDesktopManager/** Provides the look and feel for an pluggable content-type text editor. ... *//** Creates a UI for the JTextPane. ... *//** Creates the object to use for a caret.  By default an ... *//* Copyright (c) 1997, 2015, Oracle and/or its affiliates. All rights reserved. ... *//** Motif FileChooserUI. ... */// PENDING(jeff)// PENDING(jeff) - I18N// Change to folder on return// CENTER: left, right accessory// left panel - Filter & folderList// add the filter PENDING(jeff) - I18N// leftPanel.add(Box.createRigidArea(vstrut10));// Add the Folder List PENDING(jeff) - I18N// add the filename field PENDING(jeff) - I18N// Since motif doesn't have button icons, leave this empty// which overrides the supertype icon loading// PENDING(jeff) - this is inefficient - should sent out// PENDING(jeff) - fire the correct interval changed - currently sending// PENDING(jeff) - fire the interval changed// DataModel for Types Comboxbox// Renderer for Types ComboBox/** Render different type sizes and styles. *//* Copyright (c) 1997, 2008, Oracle and/or its affiliates. All rights reserved. ... *//* @author Jeff Dinkins ... *//* Client Property keys for text and accelerator text widths *//** Draws the point (<b>x</b>, <b>y</b>) in the current color. *//* Convenience method for drawing a grooved line */// Make no net change to g/** Draws <b>aString</b> in the rectangle defined by ... *///            throw new InconsistencyException("No font set");//            throw new InconsistencyException("No metrics for Font " + font());/** This method is not being used to paint menu item since ... */// get Accelerator text// layout the text and icon// Paint the Check// Paint the Icon// Use default icon// Draw the Text// Once BasicHTML becomes public, use BasicHTML.propertyKey// instead of the hardcoded string below!// *** paint the text disabled// *** paint the text normally// Draw the Accelerator Text//Get the maxAccWidth from the parent to calculate the offset.//Calculate the offset, with which the accelerator texts will be drawn with.// *** paint the acceleratorText disabled// *** paint the acceleratorText normally// Paint the Arrow/** Compute and return the location of the icons origin, the ... *//* Initialize the acceelratorText bounds rectangle textR.  If a null ... *//* Initialize the checkIcon bounds rectangle checkIconR. *//* Initialize the arrowIcon bounds rectangle arrowIconR. */// Position the Accelerator text rect// Position the Check and Arrow Icons// Align the accelertor text and the check and arrow icons vertically// with the center of the label rect./* System.out.println("Layout: v=" +viewR+"  c="+checkIconR+" i="+ ... */// shadowed button region/* Convenience function for determining ComponentOrientation.  Helps us ... *//** Icon factory for the CDE/Motif Look and Feel ... */// There are 4 "looks" to the Motif CheckBox://  drawCheckBezelOut  -  default unchecked state//  drawBezel          -  when we uncheck in toggled state//  drawCheckBezel     -  when we check in toggle state//  drawCheckBezelIn   -  selected, mouseReleased// toggled from unchecked to checked// MotifBorderFactory.drawBezel(g,x,y,csize,csize,false,false);// show checked, unpressed state//  show unchecked state//bottom//right//left//top// draw check// end class CheckBoxIcon// fill interior// end class RadioButtonIcon// end class MenuItemCheckIcon// end class MenuItemArrowIcon// These variables are kind of pointless as the following code// assumes the icon will be 10 x 10 regardless of their value.// End class MenuArrowIcon/** Class that manages a Motif title bar ... */// The width and height of a title pane button// 17 + 1 pixel border// Get around protected method in superclass// ignore request.// draw background// draw border/** A Motif L&F implementation of InternalFrame. ... *//** As of Java 2 platform v1.3 this previously undocumented field is no ... */// We replace the// we use JPopup in our TitlePane so need escape support// BasicInternalFrameUI creates an action with the same name, we override// it as MotifInternalFrameTitlePane has a titlePane ivar that shadows the// titlePane ivar in BasicInternalFrameUI, making supers action throw// an NPE for us.// Set up the bindings for the DesktopIcon, it is odd that// we install them, and not the desktop icon./** This method is called when the frame becomes selected. *//** This method is called when the frame is no longer selected. *//** A Motif L&F implementation of LabelUI. ... *//** Implements the Motif Look and Feel. ... *//** Load the SystemColors into the defaults table.  The keys ... *//* Color of the desktop background *//* Color for captions (title bars) when they are active. *//* Text color for text in captions (title bars). *//* Border color for caption (title bar) window borders. *//* Color for captions (title bars) when not active. *//* Text color for text in inactive captions (title bars). *//* Border color for inactive caption (title bar) window borders. *//* Default color for the interior of windows *//* ??? *//* Text background color *//* Text foreground color *//* Text background color when selected *//* Text color when selected *//* Text color when disabled *//* Default color for controls (buttons, sliders, etc) *//* Default color for text in controls *//* Highlight color for controls *//* Light highlight color for controls *//* Shadow color for controls *//* Dark shadow color for controls *//* Scrollbar ??? color. PENDING(jeff) foreground? background? ? *//** Initialize the defaults table with the name of the ResourceBundle ... */// slate blue// *** Text// *** Tree// ** for tabbedpane// ** for optionpane// Buttons// DEPRECATED - DO NOT USE!// These are a little odd, MotifInternalFrameUI isntalls em!// Spinner// default: dark slate blue// default: black// default: white// default: maroon//      "Table.background", white,  // cell background color// ToolBar.// These window InputMap bindings are used when the Menu is// selected.//REMIND/** A Windows L&F implementation of MenuBarUI.  This implementation ... */// end class/** MotifMenuItem implementation ... *//** A default MouseListener for menu elements ... *//** A Motif L&F implementation of MenuUI. ... */// These should not be necessary because BasicMenuUI does this,// and this class overrides createChangeListener.//    protected void installListeners() {//      super.installListeners();//        changeListener = createChangeListener(menuItem);//        menuItem.addChangeListener(changeListener);//    protected void uninstallListeners() {//      super.uninstallListeners();//      menuItem.removeChangeListener(changeListener);// c.repaint();/** Provides the CDE/Motif look and feel for a JOptionPane. ... *//** Creates a new MotifOptionPaneUI instance. *//** Creates and returns a Container containin the buttons. The buttons ... *//** Returns null, CDE/Motif does not impose a minimum size. *//** Creates and adds a JLabel representing the icon returned from ... *//* Create the icon. *//** Provides the Motif look and feel for a password field. ... *//** Creates a UI for a JPasswordField. ... *//* Copyright (c) 1998, Oracle and/or its affiliates. All rights reserved. ... *//** A Motif L&F implementation of PopupMenuSeparatorUI.  This implementation ... *//** A Motif L&F implementation of PopupMenuUI. ... *//* This has to deal with the fact that the title may be wider than ... *//** A Motif ProgressBarUI. ... *//** Creates the ProgressBar's UI *//** MotifRadioButtonMenuItem implementation ... *//** RadioButtonUI implementation for MotifRadioButtonUI ... *///         Paint Methods/** Motif scroll bar button. ... *//* Copyright (c) 1997, 2014, Oracle and/or its affiliates. All rights reserved. ... *//** Implementation of ScrollBarUI for the Motif Look and Feel ... *//** A CDE/Motif L&F implementation of ScrollPaneUI. ... */// The Border on the verticall scrollbar matches// what we installed, reset it./** A Motif L&F implementation of SeparatorUI.  This implementation ... *//** Motif Slider ... *//** MotifSliderUI Constructor *//** create a MotifSliderUI object */// PENDING(jeff) - the thumb should be dithered when disabled// fill// highlight// center// shadow/* Copyright (c) 1997, 1999, Oracle and/or its affiliates. All rights reserved. ... *//** Divider used for Motif split pane. ... *//** Default cursor, supers is package private, so we have to have one ... *//** Creates a new Motif SplitPaneDivider *//** overrides to hardcode the size of the divider ... *//** Paints the divider. */// PENDING(jeff) - the thumb's location and size is currently hard coded.// It should be dynamic.// split line// draw thumb/** The minimums size is the same as the preferredSize *//** Sets the SplitPaneUI that is using the receiver. This is completely ... *//** Returns true if the point at <code>x</code>, <code>y</code> ... */// Two methods are exposed so that MotifMouseHandler can see the// superclass protected ivars/** MouseHandler is subclassed to only pass off to super if the mouse ... */// Constrain the mouse pressed to the thumb./** Motif rendition of a split pane. ... *//** Creates a new MotifSplitPaneUI instance *//** Creates the default divider. *//** A Motif L&F implementation of TabbedPaneUI. ... */// Instance variables initialized at installation// UI creation// UI Installation/De-installation// UI Rendering// Draw unbroken line if tabs are not on TOP, OR// selected tab is not visible (SCROLL_TAB_LAYOUT)// Break line to show visual connection to selected tab// Draw unbroken line if tabs are not on BOTTOM, OR// Draw unbroken line if tabs are not on RIGHT, OR// Ensure that runover lay is not more than insets// 2 pixel offset is set from insets to each run/** Provides the look and feel for a plain text editor.  In this ... *//** Creates a UI for a JTextArea. ... *//** Provides the Motif look and feel for a text field. ... *//** Creates a UI for a JTextField. ... *//** Provides the look and feel for a styled text editor. ... *//** Provides the look and feel features that are common across ... *//** Creates the object to use for a caret for all of the Motif ... *//** The motif caret is rendered as an I beam. ... *//** Called when the component containing the caret gains ... *//** Called when the component containing the caret loses ... *//** Damages the area surrounding the caret to cause ... *//** Renders the caret as a vertical line.  If this is reimplemented ... */// can't render I guess//System.err.println("Can't render caret");/** Default bindings all keymaps implementing the Motif feel. *//** BasicToggleButton implementation ... *//** Motif rendered to display a tree cell. ... *//** Icon for a node with no children. ... *//** Motif rendition of the tree component. ... *//** creates a UI object to represent a Motif Tree widget */// BasicTreeUI overrides/** The minus sign button icon. ... *//** The plus sign button icon. ... *//** Returns the default cell renderer that is used to do the ... *//* Copyright (c) 2006, 2014, Oracle and/or its affiliates. All rights reserved. ... *//** A class to help mimic Vista theme animations.  The only kind of ... *///this timer is used to cause repaint on animated components//30 repaints per second should give smooth animation affect//we need to dispose the controller on l&f change//idk: we can not handle tabs animation because//the same (component,part) is used to handle all the tabs//and we can not track the states//Vista theme might have transition duration for toolbar buttons//but native application does not seem to animate them// it seems for DEFAULTED button state Vista does animation from// HOT//Only button might have DEFAULTED state//idk: do not know how to get the value from Vista//one second seems plausible value// for scrollbar up, down, left and right button pictures are// defined by states.  It seems that theme has duration defined// only for up button states thus we doing this translation here./* falls through *///animation is done for the component//animation duration in nanoseconds//animatin start time in nanoseconds//direction the alpha value is changing//forward  - from 0 to 1//!forward - from 1 to 0//if isForwardAndReverse the animation continually goes//forward and reverse. alpha value is changing from 0 to 1 then//from 1 to 0 and so forth//in case time was reset/* Copyright (c) 2001, 2009, Oracle and/or its affiliates. All rights reserved. ... *//** Wrapper for a value from the desktop. The value is lazily looked up, and ... */// NOTE: Don't rely on this class staying in this location. It is likely// to move to a different package in the future./** Indicates if an updateUI call is pending. *//** ReferenceQueue of unreferenced WeakPCLs. *//** PropertyChangeListener attached to the Toolkit. *//** Key used to lookup value from desktop. *//** Value to return. *//** Fallback value in case we get null from desktop. *//** Cleans up any lingering state held by unrefeernced ... *//** Sets whether or not an updateUI call is pending. *//** Returns true if a UI update is pending. *//** Updates the UIs of all the known Frames. */// Check if the current UI is WindowsLookAndfeel and flush the XP style map.// Note: Change the package test if this class is moved to a different package./** Updates the UI of the passed in window and all its children. *//** Creates a DesktopProperty. ... */// The only sure fire way to clear our references is to create a// Thread and wait for a reference to be added to the queue.// Because it is so rare that you will actually change the look// and feel, this stepped is forgoed and a middle ground of// flushing references from the constructor is instead done.// The implication is that once one DesktopProperty is created// there will most likely be n (number of DesktopProperties created// by the LookAndFeel) WeakPCLs around, but this number will not// grow past n./** UIManager.LazyValue method, returns the value from the desktop ... *//** Returns the value from the desktop. *//** Returns the value to use if the desktop property is null. *//** Invalidates the current value. ... *//** Invalides the current value so that the next invocation of ... *//** Requests that all components in the GUI hierarchy be updated ... *//** Configures the value as appropriate for a defaults property in ... *//** Returns the key used to lookup the desktop properties value. *//** As there is typically only one Toolkit, the PropertyChangeListener ... *//* <p>These classes are designed to be used while the ... *//** Implements Windows Parts and their States and Properties for the Windows Look and Feel. ... *//** An enumeration of the various Windows controls (also known as ... *//** An enumeration of the Windows compoent parts */// Special case, not in native/** An enumeration of the possible component states */// See note 1/** A map of allowed states for each Part */// Note 1: The INACTIVE frame button states apply when the frame//         is inactive. They are not defined in tmschema.h// Fix for 6316538: Vista has five frame button states// States for Slider (trackbar)// States for Tabs/** An enumeration of the possible component attributes and the ... */// only draw the border area of the image// the number of state images in an imagefile// the size of the border line for bgtype=BorderFill// size of progress control chunks// size of progress control spaces// where char shadows are drawn, relative to orig. chars// size of dest rect that exactly source// margins used for 9-grid sizing// margins that define where content can be placed// margins that define where caption text can be placed// color of borders for BorderFill// color of bg fill// color text is drawn in// color of text shadow// basic drawing type for each part// type of shadow to draw with text/** An enumeration of attribute values for some Props *//* Copyright (c) 1998, 2010, Oracle and/or its affiliates. All rights reserved. ... *//** Factory object that can vend Borders appropriate for the Windows 95 L & F. ... *//** Returns a  border instance for a Windows Progress Bar ... *//** Returns a border instance for a Windows ToolBar ... *//** Returns an new instance of a border used to indicate which cell item ... */// draw top// draw left// draw bottom// draw right/** A border for the ToolBar. If the ToolBar is floatable then the handle grip is drawn ... */// Vertical/** This class is an implementation of a dashed border. ... *//** A dashed border that paints itself in the complementary color ... *//** This class is an implementation of the InternalFrameLine border. ... */// Set the line color so the line border gets the correct// color./* Copyright (c) 1998, 2006, Oracle and/or its affiliates. All rights reserved. ... *//* This class is currently not used, but exists in case customers ... *//** Windows button. ... *///            Defaults/** Overridden method to render the text without the mnemonic */// focus painted same color as text on Basic??//          Layout Methods/* Ensure that the width and height of the button is odd, ... *//* These rectangles/insets are allocated once for all ... */// Note: The border may be compound, containing an outer// opaque border (supplied by the application), plus an// inner transparent margin border. We want to size the// background to fill the transparent part, but stay// inside the opaque part./** returns - b.getBorderInsets(c) if border is opaque ... */// Outside border is opaque, keep looking// Inside is non-opaque, use outside insets// Found non-opaque somewhere in the inside (which is// also compound).// Outside is either all non-opaque or has non-opaque// border inside another compound border/** Windows check box menu item. ... *//** Method which renders the text of the current menu item. ... */// Uses protected field./** Windows check box. ... */// NOTE: MetalCheckBoxUI inherts from MetalRadioButtonUI instead// of BasicCheckBoxUI because we want to pick up all the// painting changes made in MetalRadioButtonUI./** Implements the Windows95/98/ME/NT/2000 Look and Feel. ... *//** Windows combo box. ... *///mouse over editable ComboBox does not switch rollover//for the arrow button//we can not do it in installListeners because arrowButton//is initialized after installListeners is invoked//button glyph for LTR and RTL combobox might differ/** If necessary paints the currently selected item. ... */// On vista for READNLY ComboBox// color for currentValue is the same as for any other item// mostly copied from javax.swing.plaf.basic.BasicComboBoxUI.paintCurrentValue/** Creates a layout manager for managing the components which make up the ... *//** Creates the default editor that will be used in editable combo boxes. ... *//** Creates an button which will be used as the control to show or hide ... *//* for non editable ComboBoxes Vista seems to have the ... *//** Subclassed to add Windows specific Key Bindings. ... *//** Subclassed to highlight selected item in an editable combo box. *//** Subclassed to set opacity {@code false} on the renderer ... *///store current border in client property if needed/** Windows icon for a minimized window on the desktop. ... */// Uninstall the listeners added by the WindowsInternalFrameTitlePane// Windows desktop icons can not be resized.  Therefore, we should// always return the minimum size of the desktop icon. See// getMinimumSize(JComponent c)./** Windows desktop icons are restricted to a width of 160 pixels by ... *//* Copyright (c) 1998, 2008, Oracle and/or its affiliates. All rights reserved. ... *//** This class implements a DesktopManager which more closely follows ... *//* The frame which is currently selected/activated. ... */// If the current frame is maximized, transfer that// attribute to the frame being activated.//Special case.  If key binding was used to select next//frame instead of minimizing the icon via the minimize//icon./** Windows desktop pane. ... */// Request focus if it isn't set./** Windows rendition of the component. ... *//** Creates a UI for a JEditorPane. ... *//** Windows L&F implementation of a FileChooser. ... */// The following are private because the implementation of the// Windows FileChooser L&F is not complete yet.// Preferred and Minimum sizes for the dialog box// Labels, mnemonics, and tooltips (oh my!)// ********************************* //// **** Construct the top panel **** //// Directory manipulation buttons// Add the top panel to the fileChooser// ComboBox Label// Must be small enough to not affect total width.// Up Button// New Directory Button// View button group// Popup Menu// Create icon for viewMenuButton// Details Button// Forbid keyboard actions if the button is not in rollover state// ************************************** //// ******* Add the directory pane ******* //// ********************************** //// **** Construct the bottom panel ** //// Add the bottom panel to file chooser// labels// file entry and filters// buttons// Decide whether to use the ShellFolder class to populate shortcut// panel and combobox./** Creates a selection listener for the list of files and directories. ... */// Obsolete class, not used in this version.// Remove listeners/** Returns the preferred size of the specified ... *//** Returns the minimum size of the <code>JFileChooser</code>. ... *//** Returns the maximum size of the <code>JFileChooser</code>. ... *//* The following methods are used by the PropertyChange Listener *//* Listen for filechooser property changes, such as ... *//** Property to remember whether a directory is currently selected in the UI. ... */// PENDING(jeff) - get the name from the directory combobox// PENDING(jeff) - set the name in the directory combobox// Reset other buttons// Renderer for DirectoryComboBox// Insert chain at appropriate place in vector/* FileView type descriptions *//** A collection of static utility methods used for rendering the Windows look ... *//** Renders a text String in Windows without the mnemonic. ... */// W2K Feature: Check to see if the Underscore should be rendered./* Draw the Text *//** * paint the text normally *//* We shall not set foreground color for selected menu or ... *//** * paint the text disabled ** */// to work around an apparent bug in Windows, use the pushbutton// color for disabled toolbar buttons if the disabled color is the// same as the enabled color// only draw shadow if developer hasn't changed the foreground color// and if the current style has text shadows./* Repaints all the components with the mnemonics in the given window and ... *//* Repaints all the components with the mnemonics in container. ... *//** Factory object that can vend Icons appropriate for the Windows L & F. ... */// Find out if frame is inactive// Fix for XP bug where sometimes these sizes aren't updated properly// Assume for now that height is correct and derive width using the// ratio from the uxtheme part// outer bevel// Outer top/left// Outer bottom/right// Inner top.left// Inner bottom/right// inside box// paint check// outter left arc// outter right arc// inner left arc// inner right arc// indicate whether selected or not// End class CheckBoxMenuItemIcon// End class RadioButtonMenuItemIcon/* For debugging: ... */// End class MenuItemCheckIcon// End class MenuItemArrowIcon// this should never happen/** CheckIcon for JMenuItem, JMenu, JCheckBoxMenuItem and ... *//** Check if developer changed icon in the UI table. ... */// use icon from the UI table if it does not match this one.// remove package name, dot and the first character// End class VistaMenuItemCheckIconFactory// JDK-8039383: initialize these colors because getXP() may return null when theme is changed// Center text vertically.// There are no icons// Note: Don't know how to calculate height on XP,// the captionbarheight is 25 but native caption is 30 (maximized 26)// Create scratch graphics// Set drawing scale to make icon scale to our desired size// Center icon vertically// Center icon horizontally// System button// Note: this icon is square, but the buttons aren't always.// Right hand buttons// XP seems to ignore margins and offset here// end WindowsTitlePaneLayout// Update the internal frame icon for the system menu./** A versatile Icon implementation which can take an array of Icon ... */// We can use an arbitrary size here because we scale to it in paintIcon()/** @params ... */// Calculate how big our drawing area is in pixels// Assume we are square// Set drawing scale to make icon act true to our reported size/** Implements the Windows95/98/NT/2000 Look and Feel. ... *//** A client property that can be used with any JComponent that will end up ... */// These properties are not used directly, but are kept as// private members to avoid being GC'd./** Base dialog units along the horizontal axis. *//** Base dialog units along the vertical axis. */// Set the flag which determines which version of Windows should// be rendered. This flag only need to be set once.// if version <= 4.0 then the classic LAF should be loaded.// Using the fonts set by the user can potentially cause// performance and compatibility issues, so allow this feature// to be switched off either at runtime or programmatically/** Initialize the uiClassID to BasicComponentUI mapping. ... *//* Background color for menus *//* LightShadow of menubutton highlight *//* Default color for foreground "text" in menu item *//* Text color for menus *//* "controlHighlight", "#E0E0E0", *//* Specular highlight (opposite of the shadow) *//* Scrollbar background (usually the "track") */// XXX - there are probably a lot of redundant values that could be removed.// ie. Take a look at RadioButtonBorder, etc...// *** Shared Fonts// *** Colors// XXX - some of these doens't seem to be used//The following four lines were commented out as part of bug 4991597//This code *is* correct, however it differs from WindowsXP and is, apparently//a Windows XP bug. Until Windows fixes this bug, we shall also exhibit the same//behavior//Object ReadOnlyTextBackground = new XPColorValue(Part.EP_EDITTEXT, State.READONLY, Prop.FILLCOLOR,//                                                 ControlBackgroundColor);//Object DisabledTextBackground = new XPColorValue(Part.EP_EDITTEXT, State.DISABLED, Prop.FILLCOLOR,/* Put the desktop AA settings in the defaults. ... */// These desktop properties are not used directly, but are needed to// trigger realoading of UI's.// *** Auditory Feedback// this key defines which of the various cues to render// Overridden from BasicL&F. This L&F should play all sounds// all the time. The infrastructure decides what to play.// This is disabled until sound bugs can be resolved.// table.get("AuditoryCues.cueList"),// Button.foreground, Button.shadow, Button.darkShadow,// Button.disabledForground, and Button.disabledShadow are only// used for Windows Classic. Windows XP will use colors// from the current visual style.// W2K keyboard navigation hidding.// margin is 2 all the way around, BasicBorders.RadioButtonBorder// (checkbox uses RadioButtonBorder) is 2 all the way around too.// DeskTop.// DesktopIcon// The constructor takes one arg: an array of UIDefaults.LazyValue// representing the icons// Internal Frame Auditory Cue Mappings// Label// List.// PopupMenu// MenuBar.// Menu Item Auditory Cue Mapping// indicates that keyboard navigation won't skip disabled menu items// is 2 all the way around too.// OptionPane.// Option Pane Auditory Cue Mappings// Error// Info Plain// Question// Warning// *** Panel// *** PasswordField// for disabled// for readonly// *** ProgressBar// *** RootPane.// *** ScrollBar.// *** ScrollPane.// *** Separator// *** Slider.// *** SplitPane// *** TabbedPane// *** Table// cell text color// cell background color// grid line color// header text color// header background// use default bg from XP styles// or white bg otherwise// *** TextArea// *** TextField// *** TextPane// *** TitledBorder// *** ToggleButton// *** ToolBar// *** ToolTip// *** ToolTipManager// *** Viewport/* START handling menus for Vista *//* all the menus need to be non opaque. *//* acceleratorSelectionForeground color is the same as ... *//* they have the same MenuItemCheckIconFactory *//* height can be even *//* no margins *//* set checkIcon offset *//* set width of the gap after check icon *//* text is started after this position *//* JPopupMenu has a bit of free space around menu items *//* END handling menus for Vista *//* START table handling for Vista *//* END table handling for Vista *//** If we support loading of fonts from the desktop this will return ... */// When a desktop property change is detected, these classes must be// reinitialized in the defaults table to ensure the classes reference// the updated desktop property values (colors mostly)// For focus rectangle for cells and trees.// *** ToolTips// Toggle flag for drawing the mnemonic state// Flag which indicates that the Win98/Win2k/WinME features// should be disabled./** Sets the state of the hide mnemonic flag. This flag is used by the ... */// Do not hide mnemonics if the UI defaults do not support this/** Gets the state of the hide mnemonic flag. This only has meaning ... *//** Gets the state of the flag which indicates if the old Windows ... */// ********* Auditory Cue support methods and objects *********/** Returns an <code>Action</code>. ... *//** Pass the name String to the super constructor. This is used ... *//** We use the String as the name of the Action and as a pointer to ... */// Runnable appears to block until completed playing, hence// start up another thread to handle playing./** Gets an <code>Icon</code> from the native libraries if available, ... *//** Gets an <code>Icon</code> from the native libraries if available. ... */// This desktop property is needed to trigger reloading the icon.// It is kept in member variable to avoid GC./** Icon backed-up by XP Skin. *//** Draw the icon at the specified location.  Icon implementations ... *//** Returns the icon's width. ... *//** Returns the icon's height. ... *//** DesktopProperty for fonts. If a font with the name 'MS Sans Serif' ... */// 4950968: Workaround to mimic the way Windows maps the default// font size of 6 pts to the smallest available bitmap font size.// This happens mostly on Win 98/Me & NT./** DesktopProperty for fonts that only gets sizes from the desktop, ... *//** A value wrapper that actively retrieves values from xp or falls back ... */// A constant that lets you specify null when using XP styles.// This call adds a property change listener for the property,// which triggers a call to updateUI(). The value returned// is not interesting here.// Make sure property change listener is readded each time// Windows LayoutStyle.  From:// http://msdn.microsoft.com/library/default.asp?url=/library/en-us/dnwue/html/ch14e.asp// Windows doesn't spec this// Fall through to related.// Between text labels and their associated controls (for// example, text boxes and list boxes): 3// NOTE: We're not honoring:// 'Text label beside a button 3 down from the top of// the button,' but I suspect that is an attempt to// enforce a baseline layout which will be handled// separately.  In order to enforce this we would need// this API to return a more complicated type (Insets,// or something else).// Between related controls: 4// Between unrelated controls: 7/** Converts the dialog unit argument to pixels along the specified ... *//** Calculates the dialog unit mapping. */// This calculation comes from:// http://support.microsoft.com/default.aspx?scid=kb;EN-US;125681// The -1 comes from experimentation.// if the component has a HI_RES_DISABLED_ICON_CLIENT_KEY// client property set to Boolean.TRUE, then use the new// hi res algorithm for creating the disabled icon (used// in particular by the WindowsFileChooserUI class)// find the average of red, green, and blue// pull out the alpha channel// calc the average// turn back into rgb// Fallback value is never used because of the configureValue method doesn't return null/* to be accessed on the EDT only *//** Action that activates the menu (e.g. when F10 is pressed). ... */// show mnemonics/** Checks if component belongs to an active window. ... *//* part of it copied from WindowsGraphicsUtils.java *//* TODO idk can we use XPStyle.isVista? ... *//** Accessor interface for WindowsMenuItemUI to allow for "multiple implementation ... *//* Copyright (c) 1997, 2007, Oracle and/or its affiliates. All rights reserved. ... *//* Only paint rollover if no other menu on menubar is ... *///non top level menus have HOT state instead of PUSHED/* on Vista top level menu for non active frame looks disabled *//** Draws the background of the menu. ... */// Use superclass method for the old Windows LAF,// for submenus, and for XP toplevel if selected or pressed// Draw a lowered bevel border// Only paint rollover if no other menu on menubar is selected// Draw a raised bevel border/** This class implements a mouse handler that sets the rollover flag to ... */// Note: When toolbar containers (rebars) are implemented, only do// this if the JMenuBar is not in a rebar (i.e. ignore the desktop// property win.menu.height if in a rebar.)/* Copyright (c) 1997, 2000, Oracle and/or its affiliates. All rights reserved. ... *//** Creates a UI for a JPasswordField ... *//* Copyright (c) 2004, 2014, Oracle and/or its affiliates. All rights reserved. ... *//** Windows L&F implementation of PopupMenuSeparatorUI. ... *//* gutter offset is in parent's coordinates. ... *//** Returns the <code>Popup</code> that will be responsible for ... */// menu was canceled -- hide mnemonics/** Returns offset for the text. ... *//* this is in JMenuItem coordinates. ... *//** Returns span before gutter. ... *//** Returns span after gutter. ... *//** Returns gutter width. ... *//** Checks if PopupMenu is leftToRight ... *//* paint gutter only for leftToRight case *//** A class which tags a window with a particular semantic usage, ... *//** We need to call removeNotify() here because hide() does ... *//** Returns the baseline. ... */// amount of progress to draw// Paint progress// Do not paint the standard stripes from the skin, because they obscure// the text// See if we can squeeze in an extra chunk without spacing after// get the full repaint area and add it the// previous one so we can erase it// an apparently hard coded value in Windows// this code adjusts the chunk size to properly account for the// size and gap specified in the XP style. It also does it's own// box placement for the chunk animation. This is required because// the inherited algorithm from BasicProgressBarUI goes back and// forth whereas XP only goes in one direction. XP also has ghosted// trailing chunks to create the illusion of speed. This code// adjusts the pixel length of the animation to account for the// trails.// add 2x for the trails// Paint the bouncing box.// create a new graphics to keep drawing surface state// calculate the chunk offsets// Calculate the area of the chunks combined// save this box for the next time// this is the entire progress bar minus the track and borders// only paint where the chunks overlap with the progress bar drawing area// adjust the cliprect to chop the chunks when they go off the end// get the skin// do the drawing// get rid of our clip and composite changes// Paint background//           Defaults/** Windows implementation of RootPaneUI, there is one shared between all ... */// We are in ComboBox// if no menu is active, we try activating the menubar// It might happen that the altRelease event is processed// with a reasonable delay since it has been generated.// Here we check the last deactivation time of the containing// window. If this time appears to be greater than the altRelease// event time the event is skipped to avoid unexpected menu// activation. See 7121442.// Also we must ensure that original source of key event belongs// to the same window object as winAncestor. See 8001633.// mnemonic combination, it's consumed, but we need// set altKeyPressed to false, otherwise after selection// component by mnemonic combination a menu will be open/** Creates a UI for a JScrollBar. ... */// we need to repaint the entire scrollbar because state change for each// button causes a state change for the thumb and other button on Vista// Pending: Implement rollover (hot) and pressed// Paint thumb// Paint gripper// we need to repaint the entire scrollbar because state change for thumb// causes state change for incr and decr buttons on Vista/** WindowsArrowButton is used for the buttons to position the ... */// normal, rollover, pressed, disabled/** This should be pulled out into its own class if more classes need to ... *//** Paints the grid into the specified Graphics at the specified ... *//** Actually renders the grid into the Graphics <code>g</code>. *//** Windows Separator. ... *//** Overrides to return a private track listener subclass which handles ... */// You can't press a disabled slider// You can't have a rollover on a disabled slider/** Divider used for Windows split pane. ... *//** Creates a new Windows SplitPaneDivider *//** Creates a new WindowsSplitPaneUI instance *//** Keys to use for forward focus traversal when the JComponent is ... *//** Keys to use for backward focus traversal when the JComponent is ... */// focus forward traversal key// focus backward traversal key// sets the focus forward and backward traversal keys to null// to restore the defaults// Rollover is only supported on XP// Note: don't call getTabAreaInsets(), because it causes rotation.// Make sure "TabbedPane.tabsOverlapBorder" is set to true in WindowsLookAndFeel// Expand area by tabAreaInsets.bottom to allow tabs to overlap onto the border.// Align with right edge/* idk: ... *//* On Vista sortIcon is painted above the header's text. ... *//* on Vista there are more states for sorted columns *//* do nothing *//** A border with an Icon at the middle of the top side. ... *//** Creates this border; ... *//** Provides the Windows look and feel for a text field.  This ... *//** Paints a background for the view.  This will only be ... *//** Creates the caret for a field. ... *//** WindowsFieldCaret has different scrolling behavior than ... *//** Adjusts the visibility of the caret according to ... *//** Gets the painter for the Highlighter. ... */// PENDING: We need to expose the bias in DefaultCaret.// If we scroll, our visual location will have changed,// but we won't have updated our internal location as// the model hasn't changed. This checks for the change,// and if necessary, resets the internal location./** Creates a UI for a JTextPane. ... *//** Windows text rendering. ... *//* public */// --- HighlightPainter methods ---------------------------------------/** Paints a highlight. ... */// --- determine locations ---// --- render ---// same line, render a rectangle// different lines// can't render// --- LayerPainter methods ----------------------------/** Paints a portion of a highlight. ... */// Contained in view, can just use bounds.// Should only render part of View.// Only if exception/** A Windows toggle button. ... *//** Draws Windows toolbar separators. ... *//** A Windows tree. ... *//** Ensures that the rows identified by beginRow through endRow are ... *//** The minus sign button icon ... *//** The plus sign button icon ... *//** Configures the renderer based on the passed in components. ... */// Windows displays the open icon when the tree item selected./* Copyright (c) 2002, 2007, Oracle and/or its affiliates. All rights reserved. ... *//** Implements Windows XP Styles for the Windows Look and Feel. ... */// Singleton instance of this class// Singleton instance of SkinPainter/** Static method for clearing the hashmap and loading the ... *//** Get the singleton instance of this class ... *//** Get a named <code>String</code> value from the current style ... *//** Get a named <code>int</code> value from the current style ... *//** Get a named <code>Dimension</code> value from the current style ... *//** Get a named <code>Point</code> (e.g. a location or an offset) value ... *//** Get a named <code>Insets</code> value from the current style ... *//** Get a named <code>Color</code> value from the current style ... *//** Get a named <code>Border</code> value from the current style ... */// Special case because XP has no skin for menus// TODO: The classic border uses this color, but we should// create a new UI property called "PopupMenu.borderColor"// instead.// Will cause L&F to use classic border// Ideally we'd have an interface defined for classes which// support margins (to avoid this hackery), but we've// decided against it for simplicity// special casing for comboboxes.// there may be more special cases in the future// note. in the future this should be replaced with a call// to BasicLookAndFeel.getUIOfType()// if this is a toolbar button then ignore getMargin()// and subtract the padding added by the constructor/** Get a <code>Skin</code> object from the current style ... *//** A class which encapsulates attributes for a given part ... *//* idk: it seems margins are the same for all 'big enough' ... *//** Paint a skin at x, y. ... *//** Paint a skin in an area defined by a rectangle. ... *//** Paint a skin at a defined position and size ... *//** Paint a skin at a defined position and size. This method ... */// Private constructor// Note: All further access to the maps must be synchronized// We can use any widget name here, I guess./* Copyright (c) 2003, 2019, Oracle and/or its affiliates. All rights reserved. ... *//** Defines the Scanner interface, which CUP uses in the default ... *//* ************************************************* ... *//** Defines the Symbol class, which is used to represent all terminals ... *//* **************************************************************** ... *//** ***************************** ... *//** *************************** ... *//** ********************************* ... *//* . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . *//** The symbol number of the terminal or non terminal being represented *//** The parse state to be recorded on the parse stack with this symbol. ... *//** This allows us to catch some errors caused by scanners recycling ... *//** This class implements a skeleton table driven LR parser.  In general, ... *//* ----------------------------------------------------------- *//* --- Constructor(s) ---------------------------------------- *//** Simple constructor. *//* nothing to do here *//** Constructor that sets the default scanner. [CSA/davidm] *//* in case default constructor someday does something *//* --- (Access to) Static (Class) Variables ------------------ *//** The default number of Symbols after an error we much match to consider ... *//** The number of Symbols after an error we much match to consider it ... *//* --- (Access to) Instance Variables ------------------------ *//** Table of production information (supplied by generated subclass). ... *//** The action table (supplied by generated subclass).  This table is ... *//** The reduce-goto table (supplied by generated subclass).  This ... *//** The index of the start state (supplied by generated subclass). *//** The index of the start production (supplied by generated subclass). *//** The index of the end of file terminal Symbol (supplied by generated ... *//** The index of the special error Symbol (supplied by generated subclass). *//** Internal flag to indicate when parser should quit. *//** This method is called to indicate that the parser should quit.  This is ... *//* Global parse state shared by parse(), error recovery, and ... *//** Indication of the index for top of stack (for use by actions). *//** The current lookahead Symbol. *//** The parse stack itself. *//** Direct reference to the production table. *//** Direct reference to the action table. *//** Direct reference to the reduce-goto table. *//** This is the scanner object used by the default implementation ... *//** Simple accessor method to set the default scanner. *//** Simple accessor method to get the default scanner. *//* --- General Methods --------------------------------------- *//** Perform a bit of user supplied action code (supplied by generated ... *//** User code for initialization inside the parser.  Typically this ... *//** Initialize the action object.  This is called before the parser does ... *//** Get the next Symbol from the input (supplied by generated subclass). ... *//** Report a fatal error.  This method takes a  message string and an ... *//* stop parsing (not really necessary since we throw an exception, but) *//* use the normal error message reporting to put out the message *//* throw an exception *//** Report a non fatal error (or warning).  This method takes a message ... *//** This method is called when a syntax error has been detected and recovery ... *//** This method is called if it is determined that syntax error recovery ... *//** Fetch an action from the action table.  The table is broken up into ... *//* linear search if we are < 10 entries *//* is this entry labeled with our Symbol or the default? *//* return the next entry *//* otherwise binary search *//* leave out trailing default entry *//* not found, use the default at the end *//* shouldn't happened, but if we run off the end we return the ... *//** Fetch a state from the reduce-goto table.  The table is broken up into ... *//* if we have a null row we go with the default *//* if we run off the end we return the default (error == -1) *//** This method provides the main parsing routine.  It returns only when ... *//* the current action code *//* the Symbol/stack element returned by a reduce *//* information about production being reduced with *//* set up direct reference to tables to drive the parser *//* initialize the action encapsulation object *//* do user initialization *//* get the first token *//* push dummy Symbol with start state to get us underway *//* continue until we are told to stop *//* Check current token for freshness. *//* current state is always on the top of the stack *//* look up action out of the current state with the current input *//* decode the action -- > 0 encodes shift *//* shift to the encoded state by pushing it on the stack *//* advance to the next Symbol *//* if its less than zero, then it encodes a reduce action *//* perform the action for the reduce *//* look up information about the production *//* pop the handle off the stack *//* look up the state to go to from the one popped back to *//* shift to that state *//* finally if the entry is zero, we have an error *//* call user syntax error reporting routine *//* try to error recover *//* if that fails give up with a fatal syntax error *//* just in case that wasn't fatal enough, end parse *//** Write a debugging message to System.err for the debugging version ... *//** Dump the parse stack for debugging purposes. *//* dump the stack *//** Do debug output for a reduce. ... *//** Do debug output for shift. ... *//** Do debug output for stack state. [CSA] *//** Perform a parse with debugging output.  This does exactly the ... *//* the current Symbol *///debug_stack();/* Error recovery code *//** Attempt to recover from a syntax error.  This returns false if recovery ... *//* first pop the stack back into a state that can shift on error and ... *//* read ahead to create lookahead we can parse multiple times *//* repeatedly try to parse forward until we make it the required dist *//* try to parse forward, if it makes it, bail out of loop *//* if we are now at EOF, we have failed *//* otherwise, we consume another Symbol and try again *//* we have consumed to a point where we can parse forward *//* do the real parse (including actions) across the lookahead *//* we have success *//** Determine if we can shift under the special error Symbol out of the ... *//* is there a shift under error Symbol *//** Put the (real) parse stack into error recovery configuration by ... *//* Remember the right-position of the top symbol on the stack *//* pop down until we can shift under error Symbol *//* pop the stack *//* if we have hit bottom, we fail *//* state on top of the stack can shift under error, find the shift *//* build and shift a special error Symbol *//** Lookahead Symbols used for attempting error recovery "parse aheads". *//** Position in lookahead input buffer used for "parse ahead". *//** Read from input to establish our buffer of "parse ahead" lookahead ... *//* create the lookahead array *//* fill in the array *//* start at the beginning *//** Return the current lookahead in our error "parse ahead" buffer. *//** Advance to next "parse ahead" input Symbol. Return true if we have ... *//* advance the input location *//* return true if we didn't go off the end *//** Reset the parse ahead input to one Symbol past where we started error ... *//* move all the existing input over *//* read a new Symbol into the last spot *//* reset our internal position marker *//** Do a simulated parse forward (a "parse ahead") from the current ... *//* create a virtual stack from the real parse stack *//* parse until we fail or get past the lookahead input *//* look up the action from the current state (on top of stack) *//* if its an error, we fail *//* > 0 encodes a shift *//* push the new state on the stack *//* advance simulated input, if we run off the end, we are done *//* < 0 encodes a reduce *//* if this is a reduce with the start production we are done *//* get the lhs Symbol and the rhs size *//* pop handle off the stack *//* look up goto and push it onto the stack *//** Parse forward using stored lookahead Symbols.  In this case we have ... *//* restart the saved input at the beginning *//* continue until we accept or have read all lookahead input *//* advance to the next Symbol, if there is none, we are done *//* scan next Symbol so we can continue parse */// BUGFIX by Chris Harris <ckharris@ucsd.edu>://   correct a one-off error by commenting out//   this next line./* cur_token = scan(); *//* go back to normal parser *//* finally if the entry is zero, we have an error ... *//** Utility function: unpacks parse tables from strings */// Concatanate initialization strings.// location in initialization string/** This class implements a temporary or "virtual" parse stack that ... *//** Constructor to build a virtual stack out of a real stack. *//* sanity check *//* set up our internals *//* get one element onto the virtual portion of the stack *//** The real stack that we shadow.  This is accessed when we move off ... *//** Top of stack indicator for where we leave off in the real stack. ... *//** The virtual top portion of the stack.  This stack contains Integer ... *//** Transfer an element from the real to the virtual stack.  This assumes ... *//* don't transfer if the real stack is empty *//* get a copy of the first Symbol we have not transfered *//* record the transfer *//* put the state number from the Symbol onto the virtual stack *//** Indicate whether the stack is empty. *//* if vstack is empty then we were unable to transfer onto it and ... *//** Return value on the top of the stack (without popping it). *//** Pop the stack. *//* pop it *//* if we are now empty transfer an element (if there is one) *//** Push a state number onto the stack. *//** Represents an annotated type. ... *//** Represents an annotation. ... *//** Returns the annotation type of this annotation. ... *//** Returns this annotation's elements and their values. ... *//** Check for the synthesized bit on the annotation. ... *//** Represents an association between an annotation type element ... *//** Returns the annotation type element. ... *//** Returns the value associated with the annotation type element. ... *//** Represents an annotation type. ... *//** Returns the elements of this annotation type. ... *//** Represents an element of an annotation type. ... *//** Returns the default value of this element. ... *//** Represents a value of an annotation type element. ... *//** Returns the value. ... *//** Returns a string representation of the value. ... *//** Represents a java class or interface and provides access to ... *//** Return true if this class is abstract.  Return true ... *//** Return true if this class implements or interface extends ... *//** Return the serialization methods for this class or ... *//** Return the Serializable fields of this class or interface. ... *//** Return true if Serializable fields are explicitly defined with ... *//** Return the superclass of this class.  Return null if this is an ... *//** Test whether this class is a subclass of the specified class. ... *//** Return interfaces implemented by this class or interfaces extended ... *//** Return the formal type parameters of this class or interface. ... *//** Return the type parameter tags of this class or interface. ... *//** Return ... *//** Return fields in this class or interface, filtered to the specified ... *//** Return the enum constants if this is an enum type. ... *//** Return methods in this class or interface, filtered to the specified ... *//** Return constructors in this class, filtered to the specified ... *//** Return nested classes and interfaces within this class or interface ... *//** Find the specified class or interface within the context of this class doc. ... *//** Get the list of classes and interfaces declared as imported. ... *//** Get the list of packages declared as imported. ... *//** Represents a constructor of a java class. ... *//** Represents Java language constructs (package, class, constructor, ... *//** Return the text of the comment for this doc item. ... *//** Return all tags in this Doc item. ... *//** Return tags of the specified {@linkplain Tag#kind() kind} in ... *//** Return the see also tags in this Doc item. ... *//** Return comment as an array of tags. Includes inline tags ... *//** Return the first sentence of the comment as an array of tags. ... *//** Return the full unprocessed text of the comment.  Tags ... *//** Set the full unprocessed text of the comment.  Tags ... *//** Returns the non-qualified name of this Doc item. ... *//** Compares this doc object with the specified object for order.  Returns a ... *//** Is this Doc item a field (but not an enum constant)? ... *//** Is this Doc item an enum constant? ... *//** Is this Doc item a constructor? ... *//** Is this Doc item a method (but not a constructor or annotation ... *//** Is this Doc item an annotation type element? ... *//** Is this Doc item an interface (but not an annotation type)? ... *//** Is this Doc item an exception class? ... *//** Is this Doc item an error class? ... *//** Is this Doc item an enum type? ... *//** Is this Doc item an annotation type? ... *//** Is this Doc item an ... *//** Is this Doc item a ... *//** Return true if this Doc item is ... *//** Return the source position of the first line of the ... *//** This interface provides error, warning and notice printing. ... *//** Print error message and increment error count. ... *//** Print an error message and increment error count. ... *//** Print warning message and increment warning count. ... *//** Print a message. ... *//** This is an example of a starting class for a doclet, ... *//** Generate documentation here. ... *//** Check for doclet-added options.  Returns the number of ... */// default is option unknown/** Check that options have the correct arguments. ... */// default is options are valid/** Return the version of the Java Programming Language supported ... *//** Represents a method or constructor of a java class. ... *//** Return exceptions this method or constructor throws. ... *//** Return true if this method is native *//** Return true if this method is synchronized *//** Return true if this method was declared to take a variable number ... *//** Get argument information. ... *//** Get the receiver type of this executable element. ... *//** Return the throws tags in this method. ... *//** Return the param tags in this method, excluding the type ... *//** Return the type parameter tags in this method. ... *//** Get the signature. It is the parameter list, type is qualified. ... *//** get flat signature.  all types are not qualified. ... *//** Return the formal type parameters of this method or constructor. ... *//** Represents a field in a java class. ... *//** Get type of this field. *//** Return true if this field is transient *//** Return true if this field is volatile *//** Return the serialField tags in this FieldDoc item. ... *//** Get the value of a constant field. ... *//** Java Programming Language version.  The constants of this enum ... *//** 1.1 added nested classes and interfaces. *//** 1.5 added generic types, annotations, enums, and varArgs. *//** Represents a member of a java class: field, constructor, or method. ... *//** Returns true if this member was synthesized by the compiler. *//** Represents a method of a java class. ... *//** Return true if this method is abstract *//** Return true if this method is default *//** Get return type. ... *//** Return the class containing the method that this method overrides. ... *//** Return the type containing the method that this method overrides. ... *//** Return the method that this method overrides. ... *//** Tests whether this method overrides another. ... *//** Represents a java package.  Provides access to information ... *//** Get all classes and interfaces in the package, filtered to the specified ... *//** Get all ... *//** Get included ... *//** Get included Exception classes in this package. ... *//** Get included Error classes in this package. ... *//** Get included enum types in this package. ... *//** Get included interfaces in this package, omitting annotation types. ... *//** Get included annotation types in this package. ... *//** Get the annotations of this package. ... *//** Lookup a class or interface within this package. ... *//** Represents an @param documentation tag. ... *//** Return the name of the parameter or type parameter ... *//** Return the parameter comment ... *//** Return true if this <code>ParamTag</code> corresponds to a type ... *//** Parameter information. ... *//** Get the type of this parameter. *//** Get local name of this parameter. ... *//** Get type name of this parameter. ... *//** Returns a string representation of the parameter. ... *//** Get the annotations of this parameter. ... *//** Represents an invocation of a generic class or interface.  For example, ... *//** Return the generic class or interface that declared this type. ... *//** Return the actual type arguments of this type. ... *//** Return the class type that is a direct supertype of this one. ... *//** Return the interface types directly implemented by or extended by this ... *//** Return the type that contains this type as a member. ... *//** Represents a java program element: class, interface, field, ... *//** Get the containing class or interface of this program element. ... *//** Get the package that this program element is contained in. ... *//** Get the fully qualified name of this program element. ... *//** Get the modifier specifier integer. ... *//** Get modifiers string. ... *//** Get the annotations of this program element. ... *//** Return true if this program element is public. *//** Return true if this program element is protected. *//** Return true if this program element is private. *//** Return true if this program element is package private. *//** Return true if this program element is static. *//** Return true if this program element is final. *//** Represents the root of the program structure information ... *//** Command line options. ... *//** Return the packages ... *//** Return the classes and interfaces ... *//** Return the ... *//** Return a PackageDoc for the specified package name. ... *//** Return a ClassDoc for the specified class or interface name. ... *//** Represents a user-defined cross-reference to related documentation. ... *//** Get the label of the <code>@see</code> tag. ... *//** Get the package doc when <code>@see</code> references only a package. ... *//** Get the class or interface name of the <code>@see</code> reference. ... *//** Get the class doc referenced by the class name part of @see. ... *//** Get the field, constructor or method substring of the <code>@see</code> ... *//** Get the member doc for the field, constructor or method ... *//** Documents a Serializable field defined by an ObjectStreamField. ... *//** Return the serializable field name. *//** Return the field type string. *//** Return the ClassDoc for field type. ... *//** Return the field comment. If there is no serialField comment, return ... *//** Compares this Object with the specified Object for order.  Returns a ... *//** This interface describes a source position: filename, line number, ... *//** The source file. Returns null if no file information is ... *//** The line in the source file. The first line is numbered 1; ... *//** The column in the source file. The first column is ... *//** Convert the source position to the form "Filename:line". *//** Represents a simple documentation tag, such as @since, @author, @version. ... *//** Return the name of this tag.  The name is the string ... *//** Return the containing {@link Doc} of this Tag element. ... *//** Return the kind of this tag. ... *//** Return the text of this tag, that is, the portion beyond tag name. ... *//** Convert this object to a string. *//** For a documentation comment with embedded <code>{&#064;link}</code> ... *//** Return the source position of this tag. ... *//** Represents a @throws or @exception documentation tag. ... *//** Return the name of the exception ... *//** Return the exception comment ... *//** Return a <code>ClassDoc</code> that represents the exception. ... *//** Return the type of the exception ... *//** Represents a type.  A type can be a class or interface, an ... *//** Return unqualified name of type excluding any dimension information. ... *//** Return qualified name of type excluding any dimension information. ... *//** Return the simple name of this type excluding any dimension information. ... *//** Return the type's dimension information, as a string. ... *//** Return a string representation of the type. ... *//** Return true if this type represents a primitive type. ... *//** Return this type as a <code>ClassDoc</code> if it represents a class ... *//** Return this type as a <code>ParameterizedType</code> if it represents ... *//** Return this type as a <code>TypeVariable</code> if it represents ... *//** Return this type as a <code>WildcardType</code> if it represents ... *//** Returns this type as a <code>AnnotatedType</code> if it represents ... *//** Return this type as an <code>AnnotationTypeDoc</code> if it represents ... *//** If this type is an array type, return the element type of the ... *//** Represents a type variable. ... *//** Return the bounds of this type variable. ... *//** Return the class, interface, method, or constructor within ... *//** Represents a wildcard type argument. ... *//** Return the upper bounds of this wildcard type argument ... *//** Return the lower bounds of this wildcard type argument ... *//** The Doclet API (also called the Javadoc API) provides a mechanism ... *//* Copyright (c) 1999, 2007, Oracle and/or its affiliates. All rights reserved. ... *//** This contains the property list defined for this ... */// private constructor defined to "hide" the default public constructor// PUBLIC STATIC CONSTANTS//------------------------/** References the property that specifies the directory where ... *//** References the property that specifies the full name of the JMX ... *//** References the property that specifies the version of the JMX ... *//** References the property that specifies the vendor of the JMX ... *//** References the property that specifies the full name of this product ... *//** References the property that specifies the name of the vendor of this ... *//** References the property that specifies the version of this product ... *//** Logger name for MBean Server information. *//** Logger for MBean Server information. *//** Logger name for MLet service information. *//** Logger for MLet service information. *//** Logger name for Monitor information. *//** Logger for Monitor information. *//** Logger name for Timer information. *//** Logger for Timer information. *//** Logger name for Event Management information. *//** Logger for Event Management information. *//** Logger name for Relation Service. *//** Logger for Relation Service. *//** Logger name for Model MBean. *//** Logger for Model MBean. *//** Logger name for all other JMX classes. *//** Logger for all other JMX classes. *//** Logger name for SNMP. *//** Logger for SNMP. *//** Logger name for SNMP Adaptor. *//** Logger for SNMP Adaptor. *//* Copyright (c) 1999, 2008, Oracle and/or its affiliates. All rights reserved. ... *//** Used for storing default values used by JMX services. ... *//** The object name of the MBeanServer delegate object ... *//** The default key properties for registering the class loader of the ... *//** The default domain. ... *//** The name of the JMX specification implemented by this product. ... *//** The version of the JMX specification implemented by this product. ... *//** The vendor of the JMX specification implemented by this product. ... *//** The name of this product implementing the  JMX specification. ... *//** The name of the vendor of this product implementing the ... */// JMX RI// JMX import/** This is the default class for MBean manipulation on the agent side. It ... *//** The MBeanInstantiator object used by the ... *//** The MBean server object that is associated to the ... *//** The MBean server delegate object that is associated to the ... *//** The Repository object used by the DefaultMBeanServerInterceptor *//** Wrappers for client listeners. *//* See the comment before addNotificationListener below. *//** The default domain of the object names *//** The sequence number identifying the notifications sent */// Now sequence number is handled by MBeanServerDelegate.// private int sequenceNumber=0;/** Creates a DefaultMBeanServerInterceptor with the specified ... *//* Can only happen if loaderName doesn't exist, but we just ... *//* Load the appropriate class. */// Check that the MBean can be instantiated by the MBeanServer.// Check the JMX MBean compliance of the class// ------------------------------// Includes case where getMBeanInfo() returns null/* The semantics of preDeregister are tricky.  If it throws an ... */// pretend the exception came from preDeregister;// in another execution sequence it could have// may throw InstanceNotFoundException// Unregisters the MBean from the repository.// Returns the resource context that was used.// The returned context does nothing for regular MBeans.// For ClassLoader MBeans and JMXNamespace (and JMXDomain)// MBeans - the context makes it possible to unregister these// objects from the appropriate framework artifacts, such as// the CLR or the dispatcher, from within the repository lock.// In case of success, we also need to call context.done() at the// Check if the caller has the right to invoke 'queryMBeans'// Perform query without "query".// on each specific classname/objectname in the list.// OK: Do not add this ObjectInstance to the list// Apply query to allowed MBeans only.// Perform query.// Query the MBeans on the repository// Check if the caller has the right to invoke 'queryNames'/* No Permission check */// isRegistered is always unchecked as per JMX spec.// Check if the caller has the right to invoke 'getDomains'// Return domains// on each specific domain in the list.// OK: Do not add this domain to the list// Make an array from result.// not reached// Check if the caller has the right to invoke 'getAttribute'// on each specific attribute// OK: Do not add this attribute to the list// Check if the caller has the right to invoke 'setAttribute'/* Centralize some of the tedious exception wrapping demanded by the JMX ... */// should not happen/** Register <code>object</code> in the repository, with the ... */// preRegister returned successfully, so from this point on we// must call postRegister(false) if there is any problem.// until we succeed// Register the MBean with the repository.// For ClassLoader MBeans the context makes it possible to register these// objects with the appropriate framework artifacts, such as// the CLR, from within the repository lock.// neither Error nor Exception??/** Gets a specific MBean controlled by the DefaultMBeanServerInterceptor. ... *//* The ObjectName looks like ":a=b", and that's what its ... *//* Notification handling. ... */// ------------------// Check listener// ----------------// Get listener object// Add a listener on an MBean/* We could simplify the code by assigning broadcaster after ... *//* Could be SecurityException or ClassNotFoundException *//** <p>Return the {@link java.lang.ClassLoader} that was used for ... *//** <p>Return the named {@link java.lang.ClassLoader}. ... *//* Check if the given MBean is a ClassLoader *//** Sends an MBeanServerNotifications with the specified type for the ... */// ---------------------// Create notification/** Applies the specified queries to the set of NamedObjects. */// No query ...// Access the filter/* query.setMBeanServer is probably ... *//** Applies the specified queries to the set of ObjectInstances. */// Null query.// Access the filter./* Get the existing wrapper for this listener, name, and mbean, if ... *//* Listeners are not supposed to throw exceptions.  If ... *//* We compare all three, in case the same MBean object ... *//* We do not include name.hashCode() in the hash because ... */// SECURITY CHECKS//----------------// ------------------------------------------------------------------// Dealing with registration of special MBeans in the repository./** A RegistrationContext that makes it possible to perform additional ... *//** An empty ResourceContext which does nothing * *//** Adds a MBean in the repository, ... */// Creates a registration context, if needed.// May throw InstanceAlreadyExistsException// Send create event/** Removes a MBean in the repository, ... */// Send deletion event/** Registers a ClassLoader with the CLR. ... *//** Called when the newly registered MBean is a ClassLoader ... *//** Unregisters a ClassLoader from the CLR. ... *//** Removes the  MBean from the default loader repository. *//** Creates a ResourceContext for a ClassLoader MBean. ... *//** Creates a ResourceContext for the given resource. ... *//* Copyright (c) 2002, 2008, Oracle and/or its affiliates. All rights reserved. ... *//** <p>This interface specifies the behavior to be implemented by an ... *//** This method should never be called. ... *//** This class keeps the list of Class Loaders registered in the MBean Server. ... *//* We associate an optional ObjectName with each entry so that ... */// can be null/** List of class loaders ... *//** Same behavior as add(Object o) in {@link java.util.List}. ... *//** Same behavior as remove(Object o) in {@link java.util.List}. ... *//** List of valid search *//** List of named class loaders. */// from javax.management.loading.DefaultLoaderRepository// without is null => just behave as loadClass// We must try to load the class without the given loader.// bootstrap class loader/* We used to have a special case for "instanceof ... */// OK: continue with next class// Check if we have such a current search// Add an entry// Retrieve the search./* Check that this method will be callable when we are going from ... */// probably can't happen/** <p>A converter between Java types and the limited set of classes ... *//** <p>True if and only if this MXBeanMapping's toOpenValue and ... *//** Following List simply serves to keep a reference to predefined ... *//* Set up the mappings for Java types that map to SimpleType. */// the classes that these predefined types declare must exist!// OK: must not be a primitive wrapper// Should not reach here/** Get the converter for the given Java type, creating it if necessary. *//* It's not yet worth formalizing these tests by having for example ... */// Huge hack to avoid compiler warnings here.  The ElementType// parameter is ignored but allows us to obtain a type variable// T that matches <T extends Enum<T>>./* Make the converter for an array type, or a collection such as ... *//* We know how to translate List<E>, Set<E>, SortedSet<E>, ... */// For historical reasons GcInfo implements CompositeData but we// shouldn't count its CompositeData.getCompositeType() field as// an item in the computed CompositeType./* Select public methods that look like "T getX()" or "boolean ... */// field names// field descriptions/* Converter for classes where the open data is identical to the ... *//** DefaultMXBeanMappingFactory for the elements of this array.  If this is an ... *//* Determine the concrete class to be used when converting ... *//** Determine how to convert back from the CompositeData into ... *//* In this 2D array, each subarray is a set of builders where ... *//* We try to make a meaningful exception message by ... */// skip other builders in this group/** Converts from a CompositeData to an instance of the targetClass. *//** If the subclass is appropriate for targetClass, then the ... *//** If the subclass returns an explanation of why it is not applicable, ... *//** Builder for when the target class has a method "public static ... */// See if it has a method "T from(CompositeData)"// as is conventional for a CompositeDataView// success!// OK: it doesn't have the method/** This builder never actually returns success.  It simply serves ... *//** Builder for when the target class has a setter for every getter. *//** Builder for when the target class has a constructor that is ... */// java.beans not present// should not reach here// Applicable if and only if there are any annotated constructors// Now check that all the annotated constructors are valid// and throw an exception if not.// First link the itemNames to their getter indexes.// Run through the constructors making the checks in the spec.// For each constructor, remember the correspondence between its// parameters and the items.  The int[] for a constructor says// what parameter index should get what item.  For example,// if element 0 is 2 then that means that item 0 in the// CompositeData goes to parameter 2 of the constructor.  If an// element is -1, that item isn't given to the constructor.// Also remember the set of properties in that constructor// so we can test unambiguity./* Check that no possible set of items could lead to an ambiguous ... */// The CompositeData might come from an earlier version where// not all the items were present.  We look for a constructor// that accepts just the items that are present.  Because of// the ambiguity check in applicable(), we know there must be// at most one maximally applicable constructor./** Builder for when the target class is an interface and contains ... *//* If the interface has any methods left over, they better be ... *//* We don't catch SecurityException since it shouldn't ... *//** Utility method to take a string and convert it to normal Java variable ... */// Should be name.offsetByCodePoints but 6242664 makes this fail/** Reverse operation for java.beans.Introspector.decapitalize.  For any s, ... */// really an IdentityHashSet but that doesn't exist/** A dynamic MBean that wraps an underlying resource.  A version of this ... *//** The resource corresponding to this MBean.  This is the object whose ... *//** The name of this MBean's class, as used by permission checks. ... *//** Additional registration hook.  This method is called after ... *//** Additional registration hook.  This method is called if preRegister ... *//** Utility class to be used by the method <tt>AccessControler.doPrivileged</tt> ... *//** This class contains the methods for performing all the tests needed to verify ... *//* ------------------------------------------ ... *//** Tell whether a MBean of the given class is a Dynamic MBean. ... */// Check if the MBean implements the DynamicMBean interface/** Basic method for testing that a MBean of a given class can be ... */// Check if the class is a concrete class// Check if the MBean has a public constructor// Is DynamicMBean?// Is Standard MBean?// Is MXBean?// Ignore exception - we need to check whether// mbean is an MXBean first.// Ignore exception - we cannot decide whether mbean was supposed// to be an MBean or an MXBean. We will call checkCompliance()// to generate the appropriate exception./** Basic method for testing if a given class is a JMX compliant MBean. ... */// Check if the MBean implements the MBean or the Dynamic// MBean interface/** Tests the given interface class for being a compliant MXBean interface. ... *//** Tests the given interface class for being a compliant MBean interface. ... *//** Basic method for testing if a given class is a JMX compliant ... *//** Get the MBean interface implemented by a JMX Standard ... */// Check if the given class implements the MBean interface// or the Dynamic MBean interface/** Get the MBean interface implemented by a JMX Standard MBean class. ... *//** Get the MXBean interface implemented by a JMX MXBean class. ... *//** Try to find the MBean interface corresponding to the class aName ... */// Avoid checking access more than once per annotation// we don't expect this - except for possibly// security exceptions?// RuntimeExceptions shouldn't be "UndeclaredThrowable".// anyway...// we don't expect this/** Throws a NotCompliantMBeanException or a SecurityException. ... */// Convert a value from an annotation element to a descriptor field value// E.g. with @interface Foo {class value()} an annotation @Foo(String.class)// will produce a Descriptor field value "java.lang.String"// An annotation element cannot have a null value but never mind// Remaining possibilities: array of primitive (e.g. int[]),// enum, class, array of enum or class.// The only other possibility is that the value is another// annotation, or that the language has evolved since this code// was written.  We don't allow for either of those currently.// If it is indeed another annotation, then x will be a proxy// with an unhelpful name like $Proxy2.  So we extract the// proxy's interface to use that in the exception message.// array "can't be empty"// This must be consistent with the check for duplicate field values in// ImmutableDescriptor.union.  But we don't expect to be called very// often so this inefficient check should be enough./** Returns the XXMBean interface or null if no such interface exists ... */// Java Beans introspection// Java Beans not available so use simple introspection// to locate method/** A simple introspector that uses reflection to analyze a class and ... */// cache to avoid repeated lookups/** Returns the list of methods cached for the given class, or {@code null} ... */// return cached methods if possible/** Returns {@code true} if the given method is a "getter" method (where ... */// ignore static methods// boolean isXXX()// getXXX()/** Returns the list of "getter" methods for the given class. The list ... */// return cached result if available// get list of public methods, filtering out methods that have// been overridden to return a more specific type.// filter out the non-getter methods// favor isXXX over getXXX// add result to cache/** Returns the "getter" to read the given property from the given class or ... */// first character in uppercase (compatibility with JavaBeans)/** A class that provides access to the JavaBeans Introspector and ... *//** Returns {@code true} if java.beans is available. *//** Invokes java.beans.Introspector.getBeanInfo(Class) *//** Invokes java.beans.BeanInfo.getPropertyDescriptors() *//** Invokes java.beans.PropertyDescriptor.getName() *//** Invokes java.beans.PropertyDescriptor.getReadMethod() *//** This is the base class for MBean manipulation on the agent side. It ... *//** Control the default locking policy of the repository. ... *//** true if interceptors are enabled * *//** The MBeanServerDelegate object representing the MBean Server *//** <b>Package:</b> Creates an MBeanServer with the ... *//** <b>Package:</b> Creates an MBeanServer. ... *//** Tell whether {@link MBeanServerInterceptor}s are enabled on this ... *//** Return the MBeanInstantiator associated to this MBeanServer. ... *//** Instantiates and registers an MBean in the MBean server. ... *//** Registers a pre-existing object as an MBean with the MBean server. ... *//** De-registers an MBean from the MBean server. The MBean is identified by ... *//** Gets the <CODE>ObjectInstance</CODE> for a given MBean registered ... *//** Gets MBeans controlled by the MBean server. This method allows any ... *//** Gets the names of MBeans controlled by the MBean server. This method ... *//** Checks whether an MBean, identified by its object name, is already ... *//** Returns the number of MBeans registered in the MBean server. *//** Gets the value of a specific attribute of a named MBean. The MBean ... *//** Enables the values of several attributes of a named MBean. The MBean ... *//** Sets the value of a specific attribute of a named MBean. The MBean ... *//** Sets the values of several attributes of a named MBean. The MBean is ... *//** Invokes an operation on an MBean. ... *//** Returns the default domain used for naming the MBean. ... */// From MBeanServer/** Adds a listener to a registered MBean. ... *//** This method discovers the attributes and operations that an MBean exposes ... *//** Instantiates an object using the list of all class loaders registered ... *//* Permission check *//** Instantiates an object using the class Loader specified by its ... *//** Instantiates an object. The class loader to be used is identified ... *//** Returns true if the MBean specified is an instance of the specified ... *//** De-serializes a byte array in the context of the class loader ... */// This call requires MBeanPermission 'getClassLoaderFor'/** De-serializes a byte array in the context of a given MBean class loader. ... */// This call requires MBeanPermission 'getClassLoaderRepository'// Clone ObjectName// Make this call just to force the 'getClassLoader'// permission check/** Initializes this MBeanServer, registering the MBeanServerDelegate. ... */// Registers the MBeanServer identification MBean/* Add my class loader to the repository ... *//* Add the system class loader, so that if the MBean server is ... *//** Return the MBeanServerInterceptor. ... *//** Set the MBeanServerInterceptor. ... *//** <p>Return the ClassLoaderRepository for that MBeanServer. ... */// These methods are called by the JMX MBeanServerBuilder./** This method creates a new MBeanServerDelegate for a new MBeanServer. ... *//** This method creates a new MBeanServer implementation object. ... */// Determine whether to use fair locking for the repository.// This constructor happens to disregard the value of the interceptors// flag - that is, it always uses the default value - false.// This is admitedly a bug, but we chose not to fix it for now// since we would rather not have anybody depending on the Sun private// interceptor APIs - which is most probably going to be removed and// replaced by a public (javax) feature in the future.// JMX OBJECT CLONING//-------------------/** Clone object name. *//** Clone attribute. *//** Clone attribute list. */// Create new attribute list// Iterate through list and replace non JMX attributes/** This class represents a builder that creates ... *//** <p>An analyzer for a given MBean interface.  The analyzer can ... */// visit attributes// visit operations/* Map op name to method *//* Map attr name to getter and/or setter *//** <p>Return an MBeanAnalyzer for the given MBean interface and ... */// Currently it's two different but equivalent objects.  This only// really impacts proxy generation.  For MBean creation, the// cached PerInterface object for an MBean interface means that// an analyzer will not be recreated for a second MBean using the// same interface.// Introspect the mbeanInterface and initialize this object's maps./* Run through the methods to detect inconsistencies and to enable ... */// It's a getter// Check we don't have both isX and getX// It's a setter// It's an operation/* Check that getters and setters are consistent. *//** A comparator that defines a total order so that methods have the ... */// Super type comes first: Object, Number, Integer// could assert bret.isAssignableFrom(aret)/* Eliminate methods that are overridden with a covariant return type. ... */// We are assuming that you never have very many methods with the// same name, so it is OK to use algorithms that are quadratic// in the number of methods with the same name.// Methods that don't have the same name can't override each other// Methods that have the same name and same signature override// each other. In that case, the second method overrides the first,// due to the way we have sorted them in MethodOrder./** Implements the MBeanInstantiator interface. Provides methods for ... *///    private MetaData meta = null;/** This methods tests if the MBean class makes it possible to ... *//** Loads the class with the specified name using this object's ... *//** Gets the class for the specified class name using the MBean ... *//** Gets the class for the specified class name using the specified ... */// Retrieve the class loader from the repository/** Return an array of Class corresponding to the given signature, using ... */// Start handling primitive types (int. boolean and so// forth)// Ok we do not have a primitive type ! We need to build// the signature of the method// We need to load the class through the class// loader of the target object.// Load through the default class loader/** Instantiates an object given its class, using its empty constructor. ... */// Instantiate the new object// Wrap the exception./** Instantiates an object given its class, the parameters and ... */// Build the signature of the method// Exception IllegalArgumentException raised in Jdk1.1.8// Query the metadata service to get the right constructor/** De-serializes a byte array in the context of a classloader. ... */// Check parameter validity// Object deserialization// Load the class using the agent class loader// Get the class loader MBean/** Instantiates an object. The class loader to be used is identified by its ... *//** Return the Default Loader Repository used by this instantiator object. *//** Load a class with the specified loader, or with this object ... *//** Load the classes specified in the signature with the given loader, ... */// Restrict to getClassLoader permission only/** An introspector for MBeans of a certain type.  There is one instance ... *//* Using a type parameter <M> allows us to deal with the fact that ... *//** The map from interface to PerInterface for this type of MBean. *//** The map from concrete implementation class and interface to ... *//** Make an interface analyzer for this type of MBean. *//** True if MBeans with this kind of introspector are MXBeans. *//** Find the M corresponding to the given Method. *//** Get the name of this method. *//** Get the return type of this method.  This is the return type ... *//** Get the parameter types of this method in the Java interface ... *//** Get the signature of this method as a caller would have to supply ... *//** Check that this method is valid.  For example, a method in an ... *//** Invoke the method with the given target and arguments. ... *//* It would be cleaner if the type of the cookie were a ... *//** Test whether the given value is valid for the given parameter of this ... *//** Construct an MBeanAttributeInfo for the given attribute based on the ... *//** Construct an MBeanOperationInfo for the given operation based on ... *//** Get a Descriptor containing fields that MBeans of this kind will ... *//** Get a Descriptor containing additional fields beyond the ones ... *//** Get the methods to be analyzed to build the MBean interface. *//** Make the MBeanInfo skeleton for the given MBean interface using ... *//** True if the given getter and setter are consistent. *//** Invoke the given M on the given target with the given args and cookie. ... *//* We do not catch and wrap RuntimeException or Error, ... *//** Invoke the given setter on the given target with the given argument ... *//* If the value is of the wrong type for the method we are about to ... */// Following is expensive but we only call this method to determine// if an exception is due to an incompatible parameter type.// Plain old c.isInstance doesn't work for primitive types./** A visitor that constructs the per-interface MBeanInfo. *//** Make an MBeanInfo based on the attributes and operations ... *//* Looking up the MBeanInfo for a given base class (implementation class) ... *//** Return the MBeanInfo for the given resource, based on the given ... *//** Return the basic MBeanInfo for resources of the given class and ... *//** This class is the MBean implementation of the MBeanServerDelegate. ... *//** Obtains the value of a specific attribute of the MBeanServerDelegate. ... */// attribute must not be null// Extract the requested attribute from file// Unknown attribute/** This method always fail since all MBeanServerDelegateMBean attributes ... */// Now we will always fail:// Either because the attribute is null or because it is not// accessible (or does not exist).// This is a hack: we call getAttribute in order to generate an// AttributeNotFoundException if the attribute does not exist.// If we reach this point, we know that the requested attribute// exists. However, since all attributes are read-only, we throw// an AttributeNotFoundException./** Makes it possible to get the values of several attributes of ... */// If attributes is null, the get all attributes.// Prepare the result list.// Get each requested attribute.// Skip the attribute that couldn't be obtained.// Finally return the result./** This method always return an empty list since all ... *//** Always fails since the MBeanServerDelegate MBean has no operation. ... */// Check that operation name is not null./** Provides the MBeanInfo describing the MBeanServerDelegate. ... *//** Base class for MBeans.  There is one instance of this class for ... *//* We maintain a couple of caches to increase sharing between ... *//** Return the appropriate introspector for this type of MBean. *//** Return a cookie for this MBean.  This cookie will be passed to ... */// Methods that javax.management.StandardMBean should call from its// preRegister and postRegister, given that it is not supposed to// call the contained object's preRegister etc methods even if it has them// Undo any work from registration.  We do this in postDeregister// not preDeregister, because if the user preDeregister throws an// exception then the MBean is not unregistered.// OK: attribute is not included in returned list, per spec// XXX: log the exception// We can't use AttributeList.asList because it has side-effects// Overridden by StandardMBeanSupport/** Introspector for MXBeans.  There is exactly one instance of this class. ... */// Null is a valid value for all OpenTypes, even though// OpenType.isValue(null) will return false.  It can always be// matched to the corresponding Java type, except when that// type is primitive.// Ignore the exception and let MBeanIntrospector.invokeSetter()// throw the initial exception.// could also consult annotations for defaultValue,// minValue, maxValue, legalValues/* Ideally this would be an empty string, but ... *//* If the return value and all the parameters can be faithfully ... *//* We already have immutableInfo=true in the Descriptor ... *//** <p>True if this type can be faithfully represented in an ... *//** @since *//* This class handles the mapping between MXBean references and ... */// Message will be strange if mxbean is null but it is not// supposed to be./* removeReference can be called when the above condition fails, ... *//* Copyright (c) 2007, 2012, Oracle and/or its affiliates. All rights reserved. ... *//** <p>A custom mapping between Java types and Open types for use in MXBeans. ... *//** <p>Construct a mapping between the given Java type and the given ... *//** <p>The Java type that was supplied to the constructor.</p> ... *//** <p>The Open Type that was supplied to the constructor.</p> ... *//** <p>The Java class that corresponds to instances of the ... *//** <p>Convert an instance of the Open Type into the Java type. ... *//** <p>Convert an instance of the Java type into the Open Type. ... *//** <p>Throw an appropriate InvalidObjectException if we will not ... *//* Copyright (c) 2007, 2008, Oracle and/or its affiliates. All rights reserved. ... *//** <p>Defines how types are mapped for a given MXBean or set of MXBeans. ... *//** <p>Construct an instance of this class.</p> *//** <p>Mapping factory that applies the default rules for MXBean ... *//** <p>Return the mapping for the given Java type.  Typically, a ... *//** <p>Helper class for an {@link InvocationHandler} that forwards methods from an ... */// return type is void, no need for checkCallToOpen/** Base class for MXBeans. ... *//** <p>Construct an MXBean that wraps the given resource using the ... *//* Return all interfaces inherited by this class, directly or ... *//* The sequence of events for tracking inter-MXBean references is ... */// eventually we could have some logic to supply a default name// for mxbeanLookup and objectName/** This interface keeps the list of Class Loaders registered in the ... *//** Add an anonymous ClassLoader to the repository. *//** Remove the specified ClassLoader to the repository. ... *//** Add a named ClassLoader to the repository. *//** Remove a named ClassLoader from the repository. *//** Get a named ClassLoader from the repository. *//** This class is used for storing a pair (name, object) where name is ... *//** Object name. *//** Object reference. *//** Allows a named object to be created. ... *//** Compares the current object name with another object name. ... *//** Returns a hash code for this named object. *//** Get the object name. *//** Get the object */// Java import/** This class deserializes an object in the context of a specific class loader. ... *//** @exception ... */// Query the class loader .../** Per-MBean-interface behavior.  A single instance of this class can be shared ... */// helpful exception message/* This method is called when invoke doesn't find the named method. ... */// Construct the exception that we will probably throw// No compatibility requirement here// Is the compatibility property set?// We don't expect an exception here but if we get one then// we'll simply assume that the property is not set./** Visitor that sets up the method maps (operations, getters, setters). *//** This repository does not support persistency. ... *//** An interface that allows the caller to get some control ... *//** Called by {@link #addMBean}. ... *//** Called by {@link #remove}. ... */// Private fields -------------------------------------------->/** The structure for storing the objects is very basic. ... *//** Number of elements contained in the Repository *//** Domain name of the server the repository is attached to. ... *//** We use a global reentrant read write lock to protect the repository. ... */// Private fields <=============================================// Private methods --------------------------------------------->/* This class is used to match an ObjectName against a pattern. *//** The ObjectName pattern against which ObjectNames are matched. *//** Builds a new ObjectNamePattern object from an ObjectName pattern. ... *//** Builds a new ObjectNamePattern object from an ObjectName pattern ... *//** Return true if the given ObjectName matches the ObjectName pattern ... */// If key property value pattern but not key property list// pattern, then the number of key properties must be equal// If key property value pattern or key property list pattern,// then every property inside pattern should exist in name// Find value in given object name for key at current// index in receiver// Did we find a value for this key ?// If this property is ok (same key, same value), go to next// wildmatch key property values// values[i] is the pattern;// v is the string// If no pattern, then canonical names must be equal/** Add all the matching objects from the given hashtable in the ... */// if all couples (property, value) are contained// shouldn't come here.../** Retrieves the named object contained in repository ... */// No patterns inside reposit// Extract the domain name.// Default domain case// No domain containing registered object names// Private methods <=============================================// Protected methods --------------------------------------------->// Protected methods <=============================================// Public methods --------------------------------------------->/** Construct a new repository with the given default domain. */// we use == domain later on...// Creates a new hashtable for the default domain/** Returns the list of domains in which any MBean is currently ... */// Temporary list// Skip domains that are in the table but have no// MBean registered in them// in particular the default domain may be like this/** Stores an MBean associated with its object name in the repository. ... */// Set domain to default if domain is empty and not already set// Do we have default domain ?// ES: OK (dom & domain are interned)// Validate name for an object// Domain cannot be JMImplementation if entry does not exist// If domain does not already exist, add it to the hash table// Add instance if not already present/** Checks whether an MBean of the name specified is already stored in ... *//** Retrieves the MBean of the name specified from the repository. The ... */// Calls internal retrieve method to get the named object/** Selects and retrieves the list of MBeans whose names match the specified ... */// The following filter cases are considered:// null, "", "*:*" : names in all domains// ":*", ":[key=value],*" : names in defaultDomain// "domain:*", "domain:[key=value],*" : names in the specified domain// Surely one of the most frequent cases ... query on the whole world// If pattern is not a pattern, retrieve this mbean !// All names in all domains// All names in default domain// Pattern matching in the domain name (*, ?)/** Removes an MBean from the repository. ... */// Debugging stuff// Extract domain name.// Find the domain subtable// Remove the corresponding element// We removed it !// No more object for this domain, we remove this domain hashtable// set a new default domain table (always present)// need to reinstantiate a hashtable because of possible// big buckets array size inside table, never cleared,// thus the new !// ES: OK dom and domain are interned./** Gets the number of MBeans stored in the repository. ... *//** Gets the name of the domain currently used by default in the ... */// Public methods <=============================================/** Fix security hole in ClassLoaderRepository. This class wraps ... *//** Creates a new secure ClassLoaderRepository wrapping an ... *//* We don't bother saying mxbean=false, and we can't know whether ... *//* Return true if and only if we can be sure that the given MBean implementation ... */// Too bad, we'll say no for now./** Base class for Standard MBeans. ... *//** <p>Construct a Standard MBean that wraps the given resource using the ... *//* Standard MBeans that are NotificationBroadcasters can return a different ... *//* Copyright (c) 2000, 2008, Oracle and/or its affiliates. All rights reserved. ... *//** Extends the MBeanServer interface to ... *//** <p>Return the MBeanServerDelegate representing the MBeanServer. ... *//* This method can be used by code that is deliberately violating the ... *//** Computes a descriptor hashcode from its names and values. ... */// hashcode of a list containing just v is// v.hashCode() + 31, see List.hashCode()/** Match a part of a string against a shell-style pattern. ... *//* The algorithm is a classical one.  We advance pointers in ... */// System.out.println("matching "+pat.substring(pati,patend)+//        " against "+str.substring(stri, strend));// index for backtrack if "*" attempt fails// index for backtrack if "*" attempt fails, +1/* On each pass through this loop, we either advance pati, ... */// Mismatched, can we backtrack to a "*"?// Retry the match one position later in str/** Match a string against a shell-style pattern.  The only pattern ... *//** <p>A map where keys are compared using identity comparison (like ... *//* The approach ... *//** WeakReference where equals and hashCode are based on the ... *//** A circular buffer of notifications received from an MBean server. *//* There is one instance of ArrayNotificationBuffer for every ... */// FACTORY STUFF, INCLUDING SHARING//Find out queue size/* We avoid holding any locks while calling createListeners. ... *//* Ensure that this buffer is no longer the one that will be returned by ... */// Notify potential waiting fetchNotification call// ARRAYNOTIFICATIONBUFFER IMPLEMENTATION// We no longer support calling this method from outside.// The JDK doesn't contain any such calls and users are not// supposed to be accessing this class./** <p>Fetch notifications that match the given listeners.</p> ... */// Check arg validity/* Determine the end time corresponding to the timeout value. ... */// overflow/* We set earliestSeq the first time through the loop.  If we ... *//* On exit from this loop, notifs, earliestSeq, and nextSeq must ... *//* Get the next available notification regardless of filters, ... *//* First time through.  The current earliestSequenceNumber ... *//* If many notifications have been dropped since the ... */// Skip security check if NotificationBufferFilter is not overloaded/* nextSeq is the largest sequence number.  If we ... *//* dispose called *//* We have a candidate notification.  See if it matches ... *//* We only check the max size now, so that our ... */// end while/* Construct and return the result. *//* Add our listener to every NotificationBroadcaster MBean ... *//* Spec doesn't say whether Set returned by QueryNames can be modified ... *//* This can happen if the MBean was unregistered just ... *//* This method must not be synchronized.  See the comment on the ... *//** Iterate until we extract the real exception ... */// we did add something// Can't use % here because it's not mod: -3 % 2 is -1, not +1./** Called by a client to inform of getting an IOException. *//** Called by this class to check a client connection. *//** Tells a client to re-start again. *//** Tells a client to stop because failing to call checkConnection. *//** Terminates this object. */// check state// already failed to re-start by another thread// restart process has been called by another thread// we need to wait// be asked to give up// restarted is failed by another thread// re-starting// OK.// We know there is a problem.// --------------------------------------------------------------// private varaibles// We will check the state at the following steps// XXX stop checking?// private variables// state/** <p>An identified listener.  A listener has an Integer id that is ... *//* Copyright (c) 2002, 2015, Oracle and/or its affiliates. All rights reserved. ... *//* An Executor that allows at most one executing and one pending ... *//* You can supply an Executor in which the remote call to ... *//** Called to to fetch notifications from a server. *//** Used to send out a notification about lost notifs *//* Called when a connector is doing reconnection. Like <code>postReconnection</code>, ... */// should never/** Called after reconnection is finished. ... */// doing or waiting reconnection// only update mbeanRemovedNotifID// old listeners are re-added// not update clientSequenceNumber// only new listeners added during reconnection// need update clientSequenceNumber// -------------------------------------------------// private classes// Log only once.// Set new context class loader, returns previous one.// if ctxt is null, log a config message and throw a// SecurityException.// get context class loader - may throw// SecurityException - though unlikely.// if nothing needs to be done, break here...// reset context class loader - may throw// SecurityException// nr == null means got exception// check sequence number.// check if an mbean unregistration notif// forward// tell that the thread is REALLY stopped// no more fetching/* Fetch one notification when we suspect that it might be a ... */// 0 notifs to update startSequenceNumber// 1 notif to skip possible missing class// Even if result.getEarliestSequenceNumber() is now greater than// it was initially, meaning some notifs have been dropped// from the buffer, we don't want the caller to see that// because it is then likely to renotify about the lost notifs.// So we put back the first value of earliestSequenceNumber// that we saw.// no more listener, stop fetching// private methods/* Called to decide whether need to start a thread for fetching notifs. ... */// wait for another thread to do, which is doing reconnection// make sure only one fetching thread.// re-call this method to check the state again,// the state can be other value like TERMINATED.// init the clientSequenceNumber if not reconnected.// JDK-8038940// reconnection must happen during// fetchNotifs(-1, 0, 0), and a new// thread takes over the fetching job// for cleaning// start fetching// should not/** Import: should not remove a listener during reconnection, the reconnection ... */// notif stuff/** This state means that a thread is being created for fetching and forwarding notifications. *//** This state tells that a thread has been started for fetching and forwarding notifications. *//** This state means that the fetching thread is informed to stop. *//** This state means that the fetching thread is already stopped. *//** This state means that this object is terminated and no more thread will be created ... *//** This variable is used to tell whether a connector (RMIConnector or ClientIntermediary) ... *//* Copyright (c) 2009, 2012, Oracle and/or its affiliates. All rights reserved. ... *//** A helper class for RMI-IIOP and CORBA APIs. */// loads IIOPProxy implementation class if available/** Returns true if RMI-IIOP and CORBA is available. *//** Returns true if the given object is a Stub. *//** Returns the Delegate to which the given Stub delegates. *//** Sets the Delegate for a given Stub. *//** Returns the ORB associated with the given stub ... *//** Connects the Stub to the given ORB. *//** Returns true if the given object is an ORB. *//** Creates, and returns, a new ORB instance. *//** Converts a string, produced by the object_to_string method, back ... *//** Converts the given CORBA object reference to a string. *//** Checks to ensure that an object of a remote or abstract interface ... *//** Makes a server object ready to receive remote calls *//** Deregisters a server object from the runtime. *//** Returns a stub for the given server object. *//* Copyright (c) 2009, Oracle and/or its affiliates. All rights reserved. ... *//** An interface to a subset of the RMI-IIOP and CORBA APIs to avoid a ... *//** A buffer of notifications received from an MBean server. *//** <p>Discard this buffer.</p> *//** Add the given notification coming from the given MBean to the list ... *//* Copyright (c) 2003, 2008, Oracle and/or its affiliates. All rights reserved. ... *//** <p>Unpublished interface controlling how the RMI Connector Server ... */// If you change this name you will need to change a unit test// (NoServerTimeoutTest)/** Tells that a new request message is received. ... *//** Tells that a response is sent out for a received request. ... */// tells the adminor to restart waiting with timeout/** Called by this class to tell an implementation to do stop. *//** Terminates this object. ... */// tell Timeout to terminate// wait until there is no more job// stopping// state issue// Explicitly check MBeanPermission for addNotificationListener// 6238731: set the default domain if no domain is set.// impossible, but...// Tread carefully because if set.size() == 1 it may be the// Collections.singleton we make here, which is unmodifiable.// Explicitly check MBeanPermission for removeNotificationListener// Give back the first exception// Tread carefully because if set.size() == 1 it may be a// Collections.singleton, which is unmodifiable./* This is the object that will apply our filtering to candidate ... */// We proceed in two stages here, to avoid holding the listenerMap// lock while invoking the filters (which are user code).// We don't synchronize on targetedNotifs, because it is a local// variable of our caller and no other thread can see it.// The standard RMI connector client will register a listener on the MBeanServerDelegate// in order to be told when MBeans are unregistered.  We snoop on fetched notifications// so that we can know too, and remove the corresponding entry from the listenerMap.// See 6957378.// This is a notification from the MBeanServerDelegate.// PRIVATE METHODS/** Explicitly check the MBeanPermission for ... *//** Check if the caller has the right to get the following notifications. *///------------------// PRIVATE VARIABLES/* Copyright (c) 2009,2013, Oracle and/or its affiliates. All rights reserved. ... *//** An implementation of IIOPProxy that simply delegates to the appropriate ... */// special ACC used to initialize the IIOP stub// the only allowed privilege is SerializablePermission("enableSubclassImplementation")/* Copyright (c) 2004, 2008, Oracle and/or its affiliates. All rights reserved. ... *//** This {@link LoginModule} performs file-based authentication. ... */// Location of the default password file// Key to retrieve the stored username// Key to retrieve the stored password// Log messages// Configurable options// Authentication status// Supplied username and password// Initial state/** Initialize this <code>LoginModule</code>. ... */// initialize any configured options// set the location of the password file/** Begin user authentication (Authentication Phase 1). ... */// attempt the authentication// attempt the authentication by getting the// username and password from shared state// authentication succeeded// authentication failed -- try again below by prompting// authentication failed// attempt the authentication using the supplied username and password/** Complete user authentication (Authentication Phase 2). ... */// add Principals to the Subject// in any case, clean out state/** Abort user authentication (Authentication Phase 2). ... */// Clean out state// overall authentication succeeded and commit succeeded,// but someone else's commit failed/** Logout a user. ... */// clean out state/** Attempt authentication ... */// sharedState used as Map<String,Object>// get the username and password// userCredentials is initialized in login()// username not found or passwords do not match// Save the username and password in the shared state// only if authentication succeeded// Create a new user principal/* Read the password file. *//** Get the username and password. ... */// use the password saved by the first module in the stack// acquire username and password/** Clean out state because of a failed authentication attempt *//** <p>This class represents a ... *//** Creates an instance of <code>JMXPluggableAuthenticator</code> ... */// use the supplied JAAS login configuration// use the default JAAS login configuration (file-based)/** Authenticate the <code>MBeanServerConnection</code> client ... */// Verify that credentials is of type String[].// Special case for null so we get a more informative message// Verify that the array contains two elements.// Verify that username exists and the associated// password matches the one supplied by the client.// Perform authentication/** This callback handler supplies the username and password (which was ... *//** Sets the username and password in the appropriate Callback object. *//** This class defines the JAAS configuration for file-based authentication. ... */// The JAAS configuration for file-based authentication// The classname of the login module for file-based authentication// The option that identifies the password file to use/** Creates an instance of <code>FileLoginConfig</code> ... *//** Gets the JAAS configuration for file-based authentication *//** Refreshes the configuration. */// the configuration is fixed/** <p>This class represents an extension to the {@link SubjectDomainCombiner} ... */// Add a new ProtectionDomain with the null codesource/signers, and// the empty permission set, to the end of the array containing the// 'current' protections domains, i.e. the ones that will be augmented// with the permissions granted to the set of principals present in// the supplied subject./** A null CodeSource. *//** A ProtectionDomain with a null CodeSource and an empty permission set. *//** Get the current AccessControlContext combined with the supplied subject. *//** Get the AccessControlContext of the domain combiner created with ... *//** <p>An object of this class implements the MBeanServer interface ... *//** Check if the caller can do read operations. This method does ... *//** Check if the caller can do write operations.  This method does ... *//** Check if the caller can create the named class.  The default ... *//** Check if the caller can unregister the named MBean.  The default ... *///--------------------------------------------// Implementation of the MBeanServer interface/** Call <code>checkRead()</code>, then forward this method to the ... *//** Call <code>checkCreate(className)</code>, then forward this method to the ... *//** Call <code>checkWrite()</code>, then forward this method to the ... *//** Call <code>checkUnregister()</code>, then forward this method to the ... */// Check if security manager installed// Check for addURL and getMBeansFromURL methods// Check if MBean is instance of MLet// Throw security exception// addURL// getMBeansFromURL// Whether or not calling getMBeansFromURL is allowed is controlled// by the value of the "jmx.remote.x.mlet.allow.getMBeansFromURL"// system property. If the value of this property is true, calling// the MLet's getMBeansFromURL method is allowed. The default value// for this property is false./** <p>An object of this class implements the MBeanServerAccessController ... *//** <p>Create a new MBeanServerAccessController that forwards all the ... *//** Check if the caller can create MBeans or instances of the given class. ... *//** Check if the caller can do unregister operations.  This method does ... *//** <p>Refresh the set of username/access level entries.</p> ... *//* security has not been enabled */// all access entries imply read// Add some more information to help people with deployments that// worked before we required explicit create clauses. We're not giving// any information to the bad guys, other than that the access control// is based on a file, which they could have worked out from the stack// trace anyway.// We studiously avoided regexes when parsing the properties file,// because that is done whenever the VM is started with the// appropriate -Dcom.sun.management options, even if nobody ever// creates an MBean.  We don't want to incur the overhead of loading// all the regex code whenever those options are specified, but if we// get as far as here then the VM is already running and somebody is// doing the very unusual operation of remotely creating an MBean.// Because that operation is so unusual, we don't try to optimize// by hand-matching or by caching compiled Pattern objects.// pseudo-codepoint "end of string"// just for better error messages// the string we're parsing// s.length()// At any point, either c is s.codePointAt(i), or i == len and// c is EOS.  We use int rather than char because it is conceivable// (if unlikely) that a classname in a create clause might contain// "supplementary characters", the ones that don't fit in the original// 16 bits for Unicode.// We don't check that classname components begin with suitable// characters (so we accept 1.2.3 for example).  This means that// there are only two states, which we can call dotOK and !dotOK// according as a dot (.) is legal or not.  Initially we're in// !dotOK since a classname can't start with a dot; after a dot// we're in !dotOK again; and after any other characters we're in// dotOK.  The classname is only accepted if we end in dotOK,// so we reject an empty name or a name that ends with a dot.// Advance c and i to the next character, unless already at EOS./** <p>This interface allows to control remote access to the ... *//** This method is called when a remote ... *//** This method is called before the ... *//* Copyright (c) 2003, 2014, Oracle and/or its affiliates. All rights reserved. ... *//* Return the AccessControlContext appropriate to execute an ... */// Check if the subject delegation permission allows the// authenticated subject to assume the identity of each// principal in the delegated subject/** Check if the connector server creator can assume the identity of each ... *//** Retrieves the {@linkplain Subject} principals ... *//* We attempt to work even if we are running in J2SE 1.3, where ... */// java.util.logger package is not available in this jvm./* Copyright (c) 2003, 2016, Oracle and/or its affiliates. All rights reserved. ... *//** Name of the attribute that specifies a list of class names acceptable ... *//** <p>Name of the attribute that specifies a default class loader ... *//** Get the Connector Server default class loader. ... *//** Get the Connector Client default class loader. ... *//** Initialize the cause field of a {@code Throwable} object. ... *//** Returns the cause field of a {@code Throwable} object. ... */// it must be older than 1.4./** <p>Name of the attribute that specifies the size of a notification ... *//** Returns the size of a notification buffer for a connector server. ... */// default value// keep it for the compability for the fix:// 6174229: Environment parameter should be notification.buffer.size// instead of buffer.size// the default value re-specified in the system// try the old one/** <p>Name of the attribute that specifies the maximum number of ... *//** Returns the maximum notification number which a client will ... *//** <p>Name of the attribute that specifies the timeout for a ... *//** Returns the timeout for a client to fetch notifications. *//** <p>Name of the attribute that specifies an object that will check ... *//** Get an integer-valued attribute with name <code>name</code> ... *//* May throw a NumberFormatException, which is an ... *//* Check that all attributes have a key that is a String. ... *//* Return a writable map containing only those attributes that are ... *//** Remove from the given Collection any element that is not a ... */// ObjectOutputStream invalid after exception/** The value of this attribute, if present, is a string specifying ... *//** Default list of attributes not to show. ... *//* This list is copied directly from the spec, plus ... *//* Construct a string that is greater than any key in the map. ... *//* Read each key in sorted order and, if it matches a string ... *//* Continue through string-match values until we find one ... *//* Continue through the prefix values until we find one ... *//** <p>Name of the attribute that specifies the timeout to keep a ... *//** Returns the server side connection timeout. *//** <p>Name of the attribute that specifies the period in ... *//** Returns the client connection check period. *//** Computes a boolean value from a string value retrieved from a ... */// returns a default value of 'false' if no property is found.../** Converts a map into a valid hash table, i.e. ... *//** <p>Name of the attribute that specifies whether a connector server ... *//** Returns true if {@value SERVER_DAEMON} is specified in the {@code env} ... *//** The <CODE>BerDecoder</CODE> class is used for decoding ... *//** Constructs a new decoder and attaches it to the specified byte string. ... *//** Fetch an integer. ... *//** Fetch an integer with the specified tag. ... *//** Fetch an integer and return a long value. ... *//** Fetch an integer with the specified tag and return a long value. ... *//** Fetch an octet string. ... *//** Fetch an octet string with a specified tag. ... *//** Fetch an object identifier. ... *//** Fetch an object identifier with a specified tag. ... *//** Fetch a <CODE>NULL</CODE> value. ... *//** Fetch a <CODE>NULL</CODE> value with a specified tag. ... *//** Fetch an <CODE>ANY</CODE> value. In fact, this method does not decode anything ... */// for (int i = 0 ; i < tlvLength ; i++) {//  data[i] = bytes[backup + i] ;// catch(Error e) {//    debug("fetchAny: Error decoding BER: " + e);//    throw e;/** Fetch an <CODE>ANY</CODE> value with a specific tag. ... *//** Fetch a sequence header. ... *//** Fetch a sequence header with a specific tag. ... *//** Close a sequence. ... *//** Return <CODE>true</CODE> if the end of the current sequence is not reached. ... *//** Get the tag of the data at the current position. ... */// Some standard tags////////////////////////// PRIVATE ////////////////////////////////** Fetch a tag and move the current position forward. ... *//** Fetch a length and move the current position forward. ... *//** Fetch an integer value and move the current position forward. ... *//** Fetch an integer value and return a long value. ... *//** Fetch a byte string and move the current position forward. ... *///      int i = 0 ;//      while (i < length) {//          result[i++] = bytes[next++] ;//  debug("fetchStringValue: Error decoding BER: " + e);//  throw e;/** Fetch an oid and move the current position forward. ... */// Count how many bytes have their 8th bit to 0// -> this gives the number of components in the oid// bugId 4641746// The 8th bit of the first byte should always be set to 0// The first sub Id cannot be greater than 2// bugId 4654674//  debug("fetchOidValue: Error decoding BER: " + e);// private static final void debug(String str) {//   System.out.println(str);// This is the byte array containing the encoding.// This is the current location. It is the next byte// to be decoded. It's an index in bytes[].// This is the stack where end of sequences are kept.// A value is computed and pushed in it each time openSequence()// is invoked.// A value is pulled and checked each time closeSequence() is called./** The <CODE>BerEncoder</CODE> class is used for encoding data using BER. ... *//** Constructs a new encoder and attaches it to the specified byte string. ... *//** Trim the encoding data and returns the length of the encoding. ... */// for (int i = start ; i < bytes.length ; i++) {//  bytes[i-start] = bytes[i] ;/** Put an integer. ... *//** Put an integer with the specified tag. ... *//** Put an integer expressed as a long. ... *//** Put an integer expressed as a long with the specified tag. ... *//** Put an octet string. ... *//** Put an octet string with a specified tag. ... *//** Put an object identifier. ... *//** Put an object identifier with a specified tag. ... *//** Put a <CODE>NULL</CODE> value. *//** Put a <CODE>NULL</CODE> value with a specified tag. ... *//** Put an <CODE>ANY</CODE> value. In fact, this method does not encode anything. ... *//** Put an <CODE>ANY</CODE> value. Only the first <CODE>byteCount</CODE> are considered. ... *///    for (int i = byteCount - 1 ; i >= 0 ; i--) {//      bytes[--start] = s[i] ;/** Open a sequence. ... *//** Close a sequence with the specified tag. */////////////////////////// PROTECTED ////////////////////////////////** Put a tag and move the current position backward. ... *//** Put a length and move the current position backward. ... *//** Put an integer value and move the current position backward. ... *//** Put an integer value expressed as a long. ... *//** Put a byte string and move the current position backward. ... */// for (int i = s.length - 1 ; i >= 0 ; i--) {//   bytes[--start] = s[i] ;/** Put an oid and move the current position backward. ... */// bugId 4641746: 0, 1, and 2 are legal values.// This is the index of the first byte of the encoding.// It is initialized to <CODE>bytes.length</CODE> and decrease each time// an value is put in the encoder.// A value is computed and pushed in it each time the <CODE>openSequence</CODE> method// A value is pulled and checked each time the <CODE>closeSequence</CODE> method is called./** Exception thrown when a BER encoding/decoding error occurs. ... *//** This class is an internal class which is used to represent RowStatus ... *//** This value is SNMP Runtime implementation specific, and is used to identify ... *//** This value corresponds to the <i>active</i> RowStatus, as defined in ... *//** This value corresponds to the <i>notInService</i> RowStatus, as ... *//** This value corresponds to the <i>notReady</i> RowStatus, as defined ... *//** This value corresponds to the <i>createAndGo</i> RowStatus, ... *//** This value corresponds to the <i>createAndWait</i> RowStatus, ... *//** This value corresponds to the <i>destroy</i> RowStatus, as defined in ... *//** Build an <code>EnumRowStatus</code> from an <code>int</code>. ... *//** Build an <code>EnumRowStatus</code> from an <code>Enumerated</code>. ... *//** Build an <code>EnumRowStatus</code> from a <code>long</code>. ... *//** Build an <code>EnumRowStatus</code> from an <code>Integer</code>. ... *//** Build an <code>EnumRowStatus</code> from a <code>Long</code>. ... *//** Build an <code>EnumRowStatus</code> with <i>unspecified</i> value. *//** Build an <code>EnumRowStatus</code> from a <code>String</code>. ... *//** Build an <code>EnumRowStatus</code> from an <code>SnmpInt</code>. ... *//** Build an SnmpValue from this object. ... *//** Check that the given <code>value</code> is valid. ... */// Documented in Enumerated// Initialize the mapping tables./* Copyright (c) 1999, 2012, Oracle and/or its affiliates. All rights reserved. ... *//** This class is used for implementing enumerated values. ... *//** Construct an enumerated with a default value. ... *//** Construct an enumerated from its integer form. ... *//** Construct an enumerated from its Integer form. ... *//** Construct an enumerated from its string form. ... *//** Return the integer form of the enumerated. ... *//** Returns an Java enumeration of the permitted integers. ... *//** Returns an Java enumeration of the permitted strings. ... *//** Compares this enumerated to the specified enumerated. ... *//** Returns the hash code for this enumerated. ... *//** Returns the string form of this enumerated. ... *//** Returns the hashtable of the integer forms. ... *//** Returns the hashtable of the string forms. ... *//** This variable keeps the integer form of the enumerated. ... *//* Generated By:JavaCC: Do not edit this line. ASCII_CharStream.java Version 0.7pre6 *//** An implementation of interface CharStream, where the stream is assumed to ... *//** @deprecated ... *//** Method to adjust line and column numbers for the start of a token. *//** Represent one entry in the Access Control List (ACL). ... *//** Contructs an empty ACL entry. *//** Constructs an ACL entry with a specified principal. ... *//** Clones this ACL entry. ... *//** Returns true if this is a negative ACL entry (one denying the associated principal ... *//** Adds the specified permission to this ACL entry. Note: An entry can ... *//** Removes the specified permission from this ACL entry. ... *//** Checks if the specified permission is part of the permission set in ... *//** Returns an enumeration of the permissions in this ACL entry. ... *//** Sets this ACL entry to be a negative one. That is, the associated principal ... *//** Returns the principal for which permissions are granted or denied by this ACL ... *//** Specifies the principal for which permissions are granted or denied by ... *//** Returns a string representation of the contents of this ACL entry. ... *//** Returns an enumeration of the communities in this ACL entry. ... *//** Adds the specified community to this ACL entry. Note: An entry can ... *//** Removes the specified community from this ACL entry. ... *//** Checks if the specified community is part of the community set in this ... *//** Represent an Access Control List (ACL) which is used to guard access to http adaptor. ... *//** Constructs the ACL with a specified owner ... *//** Sets the name of this ACL. ... *//** Returns the name of this ACL. ... *//** Adds an ACL entry to this ACL. An entry associates a principal (e.g., an individual or a group) ... *//* for (Enumeration e = entryList.elements();e.hasMoreElements();){ ... *//** Removes an ACL entry from this ACL. ... *//** Removes all ACL entries from this ACL. ... *//** Returns an enumeration for the set of allowed permissions for ... *//** Returns an enumeration of the entries in this ACL. Each element in the ... *//** Checks whether or not the specified principal has the specified ... *//** Checks whether or not the specified community string is defined. ... *//** Returns a string representation of the ACL contents. ... *//** This class is used to represent a subnet mask (a group of hosts ... *//** Constructs an empty group. ... *//** Constructs a group using the specified subnet mask. ... *//** Adds the specified member to the group. ... */// we don't need to add members because the ip address is a// subnet mask/** Compares this group to the specified object. Returns true if the object ... *//** Returns true if the passed principal is a member of the group. ... *//** Returns an enumeration which contains the subnet mask. ... *//** Removes the specified member from the group. (Not implemented) ... *//** Prints a string representation of this group. ... */// java import/** The class defines an abstract representation of a host. */// Create a principal// Create an AclEntry// Add permission/* Generated By:JJTree: Do not edit this line. JDMAccess.java */// We have a read-only access.// We have a read-write access./* Generated By:JJTree: Do not edit this line. JDMAclBlock.java *//** Do no need to go through this part of the tree for ... *//* Generated By:JJTree: Do not edit this line. JDMAclItem.java *//* Generated By:JJTree: Do not edit this line. JDMCommunities.java *//* Generated By:JJTree: Do not edit this line. JDMCommunity.java *//* Generated By:JJTree: Do not edit this line. JDMEnterprise.java *//* Generated By:JJTree: Do not edit this line. JDMHost.java *//* Generated By:JJTree: Do not edit this line. JDMHostInform.java *//* Generated By:JJTree: Do not edit this line. JDMHostName.java *//* Generated By:JJTree: Do not edit this line. JDMHostTrap.java *//* Generated By:JJTree: Do not edit this line. JDMInformBlock.java *//* Generated By:JJTree: Do not edit this line. JDMInformCommunity.java *//* Generated By:JJTree: Do not edit this line. JDMInformInterestedHost.java *//* Generated By:JJTree: Do not edit this line. JDMInformItem.java *//* Generated By:JJTree: Do not edit this line. JDMIpAddress.java *//* Generated By:JJTree: Do not edit this line. JDMIpMask.java *//* Generated By:JJTree: Do not edit this line. JDMIpV6Address.java *//* Generated By:JJTree: Do not edit this line. JDMManagers.java *//* Generated By:JJTree: Do not edit this line. JDMNetMask.java *//* Generated By:JJTree: Do not edit this line. JDMNetMaskV6.java *//* Generated By:JJTree: Do not edit this line. JDMSecurityDefs.java *//* Generated By:JJTree: Do not edit this line. JDMTrapBlock.java *//* Generated By:JJTree: Do not edit this line. JDMTrapCommunity.java *//* Generated By:JJTree: Do not edit this line. JDMTrapInterestedHost.java *//* Generated By:JJTree: Do not edit this line. JDMTrapItem.java *//* Generated By:JJTree: Do not edit this line. JDMTrapNum.java *//* Generated By:JJTree: Do not edit this line. JJTParserState.java */// number of nodes on stack// current mark/* Determines whether the current node was actually closed and ... *//* Call this to reinitialize the node stack.  It is called ... *//* Returns the root node of the AST.  It only makes sense to call ... *//* Pushes a node on to the stack. *//* Returns the node on the top of the stack, and remove it from the ... *//* Returns the node currently on the top of the stack. *//* Returns the number of children on the stack in the current node ... *//* A definite node is constructed from a specified number of ... *//* A conditional node is constructed if its condition is true.  All ... *//** This class is used to represent a subnet mask (a group of hosts matching the same ... */// 8 is a byte size. Common to any InetAddress (V4 or V6).// we don't need to add members because the ip address is a subnet mask/* Generated By:JJTree: Do not edit this line. Node.java *//* All AST nodes must implement this interface.  It provides basic ... *//** This method is called after the node has been made the current ... *//** This method is called after all the child nodes have been ... *//** This pair of methods are used to inform the node of its ... *//** This method tells the node to add its argument to the node's ... *//** This method returns a child node.  The children are numbered ... *//** Return the number of children the node has. *//** Owner of Access Control Lists (ACLs). ... *//** Constructs an empty list of owner. *//** Constructs a list of owner with the specified principal as first element. ... *//** Adds an owner. Only owners can modify ACL contents. The caller principal ... *//** Deletes an owner. If this is the last owner in the ACL, an exception is raised. ... *//** Returns true if the given principal is an owner of the ACL. ... *//* Generated By:JavaCC: Do not edit this line. ParseError.java Version 0.7pre1 *//* Generated By:JavaCC: Do not edit this line. ParseException.java Version 0.7pre6 *//** This exception is thrown when parse errors are encountered. ... *//** This constructor is used by the method "generateParseException" ... *//** The following constructors are for use by you for whatever ... *//** This variable determines which constructor was used to create ... *//** This is the last token that has been consumed successfully.  If ... *//** Each entry in this array is an array of integers.  Each array ... *//** This is a reference to the "tokenImage" array of the generated ... *//** This method has the standard behavior when this object has been ... *//** The end of line string for this machine. *//** Used to convert raw characters to their escaped version ... *//* Generated By:JJTree&JavaCC: Do not edit this line. Parser.java */// generated code, not worth fixing/* @bgen(jjtree) */// A file can contain several acl definitions/* @bgen(jjtree) SecurityDefs *//* @bgen(jjtree) AclBlock *//* @bgen(jjtree) AclItem *//* @bgen(jjtree) Communities *//* @bgen(jjtree) Community *//* @bgen(jjtree) Access *//* @bgen(jjtree) Managers *//* @bgen(jjtree) Host *//* @bgen(jjtree) HostName *//* @bgen(jjtree) IpAddress *//* @bgen(jjtree) IpV6Address *//* @bgen(jjtree) IpMask *//* @bgen(jjtree) NetMask *//* @bgen(jjtree) NetMaskV6 *//* @bgen(jjtree) TrapBlock *//* @bgen(jjtree) TrapItem *//* @bgen(jjtree) TrapCommunity *//* @bgen(jjtree) TrapInterestedHost *//* @bgen(jjtree) HostTrap *//* @bgen(jjtree) Enterprise *//* @bgen(jjtree) TrapNum *//* @bgen(jjtree) InformBlock *//* @bgen(jjtree) InformItem *//* @bgen(jjtree) InformCommunity *//* @bgen(jjtree) InformInterestedHost *//* @bgen(jjtree) HostInform *//* Generated By:JJTree&JavaCC: Do not edit this line. ParserConstants.java *//* Generated By:JJTree&JavaCC: Do not edit this line. ParserTokenManager.java *//* Generated By:JJTree: Do not edit this line. ParserTreeConstants.java *//** Permission is represented as a String. ... *//** Constructs a permission. ... *//** Returns true if the object passed matches the permission represented in. ... *//** Prints a string representation of this permission. ... *//** Prints the permission. ... *//** Principal represents a host. *//** Constructs a principal with the local host. *//** Construct a principal using the specified host. ... *//** Constructs a principal using an Internet Protocol (IP) address. ... *//** Returns the name of this principal. ... *//** Compares this principal to the specified object. Returns true if the ... *//** Returns a hashcode for this principal. ... *//** Returns a string representation of this principal. In case of multiple address, the first one is returned. ... *//** Returns the Internet Protocol (IP) address for this principal. In case of multiple address, the first one is returned. ... *//* Generated By:JJTree: Do not edit this line. SimpleNode.java *//* SR. Extend the SimpleNode definition *//** Build the Trap entries from the syntactic tree. *//* end of loop *//** Build the Inform entries from the syntactic tree. *//** Build the Acl entries from the syntactic tree. *//* END SR *//* You can override these two methods in subclasses of SimpleNode to ... *//* Override this method if you want to customize how the node dumps ... */// SNMP Runtime import/** Defines an implementation of the {@link com.sun.jmx.snmp.InetAddressAcl InetAddressAcl} interface. ... *//** Constructs the Java Dynamic Management(TM) Access Control List ... */// PrincipalImpl() take the current host as entry/** Returns ann enumeration of community strings. Community strings are returned as String. ... *//** Returns the name of the ACL. ... *//** Returns the read permission instance used. ... *//** Returns the write permission instance used. ... *//** Get the default name for the ACL file. ... *//** Sets the full path of the file containing the ACL information. ... *//** Resets this ACL to the values contained in the configuration file. ... *//** Returns the full path of the file used to get ACL information. ... *//** Checks whether or not the specified host has <CODE>READ</CODE> access. ... *//** Checks whether or not the specified host and community have <CODE>READ</CODE> access. ... *//** Checks whether or not a community string is defined. ... *//** Checks whether or not the specified host has <CODE>WRITE</CODE> access. ... *//** Checks whether or not the specified host and community have <CODE>WRITE</CODE> access. ... *//** Returns an enumeration of trap destinations. ... *//** Returns an enumeration of trap communities for a given host. ... *//** Returns an enumeration of inform destinations. ... *//** Returns an enumeration of inform communities for a given host. ... *//** Converts the input configuration file into ACL. */// Read the file content/** Set the default full path for "snmp.acl" input file. ... */// OK.../** Represents the Access Control List. *//** Flag indicating whether the access is always authorized. ... *//** Represents the Access Control List flat file. *//** Contains the hosts list for trap destination. *//** Contains the hosts list for inform destination. *//* Generated By:JavaCC: Do not edit this line. Token.java Version 0.7pre3 *//** Describes the input token stream. *//** An integer that describes the kind of this token.  This numbering ... *//** beginLine and beginColumn describe the position of the first character ... *//** The string image of the token. *//** A reference to the next regular (non-special) token from the input ... *//** This field is used to access special tokens that occur prior to this ... *//** Returns the image. *//** Returns a new Token object, by default. However, if you want, you ... *//* Generated By:JavaCC: Do not edit this line. TokenMgrError.java Version 0.7pre2 *//* Ordinals for various reasons why an Error of this type can be thrown. *//** Lexical error occurred. *//** An attempt wass made to create a second instance of a static token manager. *//** Tried to change to an invalid lexical state. *//** Detected (and bailed out of) an infinite loop in the token manager. *//** Indicates the reason why the exception is thrown. It will have ... *//** Replaces unprintable characters by their espaced (or unicode escaped) ... *//** Returns a detailed message for the Error when it is thrown by the ... *//** You can also modify the body of this method to customize your error messages. ... *//* Constructors of various flavors follow. *//** Defines the IP address based ACL used by the SNMP protocol adaptor. ... *//** Used for storing default values used by SNMP Runtime services. ... *//** The default key properties for registering the class loader of the MLet service. ... *//** The default port for the RMI connector. ... *//** The default key properties for the RMI connector. ... *//** The default port for the SNMP adaptor. ... *//** The default key properties for the SNMP protocol adaptor. ... *//** The default port for the HTTP connector. ... *//** The default key properties for the HTTP connector. ... *//** The default port for the HTTPS connector. ... *//** The default key properties for the HTTPS connector. ... *//** The default port for the HTML adaptor. ... *//** The default key properties for the HTML protocol adaptor. ... *//** The name of the vendor of this product implementing the  JMX specification. ... *//** The build number of the current product version, of the form <CODE>rXX</CODE>. *//** The version of this product implementing the  JMX specification. ... *//** Interface to be implemented by PDUs that are acknowledged (eg: ... *//** Returns the PDU to use for the response. ... *//* Copyright (c) 2001, 2006, Oracle and/or its affiliates. All rights reserved. ... *//** This exception is thrown when an incorrect security level is handled. ... *//** Represents an SNMP counter. ... */// CONSTRUCTORS//-------------/** Constructs a new <CODE>SnmpCounter</CODE> from the specified integer value. ... *//** Constructs a new <CODE>SnmpCounter</CODE> from the specified <CODE>Integer</CODE> value. ... *//** Constructs a new <CODE>SnmpCounter</CODE> from the specified long value. ... *//** Constructs a new <CODE>SnmpCounter</CODE> from the specified <CODE>Long</CODE> value. ... */// PUBLIC METHODS//---------------/** Returns a textual description of the type object. ... */// VARIABLES//----------/** Name of the type. *//* Copyright (c) 1997, 2011, Oracle and/or its affiliates. All rights reserved. ... *//** Represents an SNMP 64bits counter. ... *//** Constructs a new <CODE>SnmpCounter64</CODE> from the specified long value. ... */// The max value for a counter64 variable is 2^64 - 1.// The max value for a Long is 2^63 - 1.// All the allowed values for a conuter64 variable cannot be covered !!!/** Constructs a new <CODE>SnmpCounter64</CODE> from the specified <CODE>Long</CODE> value. ... *//** Returns the counter value of this <CODE>SnmpCounter64</CODE>. ... *//** Converts the counter value to its <CODE>Long</CODE> form. ... *//** Converts the counter value to its integer form. ... *//** Converts the counter value to its <CODE>Integer</CODE> form. ... *//** Converts the counter value to its <CODE>String</CODE> form. ... *//** Converts the counter value to its <CODE>SnmpOid</CODE> form. ... *//** Extracts the counter from an index OID and returns its ... *//** Scans an index OID, skips the counter value and returns the position ... *//** Appends an <CODE>SnmpOid</CODE> representing an <CODE>SnmpCounter64</CODE> to another OID. ... *//** Performs a clone action. This provides a workaround for the ... *//** Clones the <CODE>SnmpCounter64</CODE> object, making a copy of its data. ... */// vm bug./** This is where the value is stored. This long is positive. ... */// Copyright (c) 1995-96 by Cisco Systems, Inc./** Contains SNMP data type constants. ... */// ASN1 Type definitions.//-----------------------/** ASN.1 tag for representing the boolean type. *//** ASN.1 tag for representing the integer type. *//** ASN.1 tag for representing the bit string type. *//** ASN.1 tag for representing the octet string type. *//** ASN.1 tag for representing the null type. *//** ASN.1 tag for representing the Object Identifier type. *//** Represents a unknown syntax type. No meaning in an ASN.1 context. *//** ASN.1 tag for a <CODE>SEQUENCE</CODE> or <CODE>SEQUENCE OF</CODE>. *//** Represents an SNMP table. No meaning in an ASN.1 context. */// SNMP definitions./** ASN.1 Tag for application context. *//** ASN.1 tag for implicit context. *//** ASN.1 tag for representing an IP address as defined in RFC 1155. *//** ASN.1 tag for representing a <CODE>Counter32</CODE> as defined in RFC 1155. *//** ASN.1 tag for representing a <CODE>Gauge32</CODE> as defined in RFC 1155. *//** ASN.1 tag for representing a <CODE>Timeticks</CODE> as defined in RFC 1155. *//** ASN.1 tag for representing an <CODE>Opaque</CODE> type as defined in RFC 1155. *//** ASN.1 tag for representing a <CODE>Counter64</CODE> as defined in RFC 1155. *//** ASN.1 tag for representing an <CODE>Nsap</CODE> as defined in RFC 1902. *//** ASN.1 tag for representing an <CODE>Unsigned32</CODE> integer as defined in RFC 1902. *//** ASN.1 tag for representing a <CODE>NoSuchObject</CODE> as defined in RFC 1902. *//** ASN.1 tag for representing a <CODE>NoSuchInstance</CODE> as defined in RFC 1902. *//** ASN.1 tag for representing an <CODE>EndOfMibView</CODE> as defined in RFC 1902. *//** Contains SNMP constants related to command and response codes. ... *//** Security level. No authentication, no privacy. Value is 0, as ... *//** Security level. Authentication, no privacy. Value is 1, as ... *//** Security level. Authentication, privacy. Value is 3, as defined ... *//** Flag that indicates that a report is to be sent. Value is 4, as ... *//** Mask used to isolate authentication information within a message flag. ... *//** Mask used to isolate privacy information within a message flag. *//** Mask used to isolate authentication and privacy information within a message flag. ... *//** ASN.1 prefix for encoding PDU types. *//** Represents the SNMP protocol version: <CODE>SnmpV1</CODE>. *//** Represents the SNMP protocol version: <CODE>SnmpV2</CODE>. *//** Represents the SNMP protocol version: <CODE>SnmpV3</CODE>. ... *//** Represents a <CODE>GetRequest</CODE> PDU type (V1 or V2). *//** Represents a <CODE>GetNextRequest</CODE> PDU type (V1 or V2). *//** Represents a <CODE>GetResponse</CODE> PDU type (V1 or V2). *//** Represents a <CODE>SetRequest</CODE> PDU type (V1 or V2). *//** Represents a <CODE>GetBulkRequest</CODE> PDU type (V2 only). *//** Represents a <CODE>Walk</CODE> request. ... *//** Represents a <CODE>V1Trap</CODE> PDU type (V1 only). *//** Represents a <CODE>V2Trap</CODE> PDU type (V2 only). *//** Represents an <CODE>InformRequest</CODE> PDU type (V2 only). *//** Represents a <CODE>Report</CODE> PDU type (V2 only). */// SNMPv1 values for generic trap info in Trap-PDU.//-------------------------------------------------/** Code as defined in RFC 1157 for generic trap info in Trap-PDU: <CODE>coldStart</CODE>. *//** Code as defined in RFC 1157 for generic trap info in Trap-PDU: <CODE>warmStart</CODE>. *//** Code as defined in RFC 1157 for generic trap info in Trap-PDU: <CODE>linkDown</CODE>. *//** Code as defined in RFC 1157 for generic trap info in Trap-PDU: <CODE>linkUp</CODE>. *//** Code as defined in RFC 1157 for generic trap info in Trap-PDU: <CODE>authenticationFailure</CODE>. *//** Code as defined in RFC 1157 for generic trap info in Trap-PDU: <CODE>egpNeighborLoss</CODE>. *//** Code as defined in RFC 1157 for generic trap info in Trap-PDU: <CODE>enterpriseSpecific</CODE>. */// PDU error status enumeration.//------------------------------/** Error code as defined in RFC 1448 for: <CODE>noError</CODE>. *//** Error code as defined in RFC 1448 for: <CODE>tooBig</CODE>. *//** Error code as defined in RFC 1448 for: <CODE>noSuchName</CODE>. *//** Error code as defined in RFC 1448 for: <CODE>badValue</CODE>. *//** Error code as defined in RFC 1448 for: <CODE>readOnly</CODE>. *//** Error code as defined in RFC 1448 for: <CODE>genErr</CODE>. *//** Error code as defined in RFC 1448 for: <CODE>noAccess</CODE>. *//** Error code as defined in RFC 1448 for: <CODE>wrongType</CODE>. *//** Error code as defined in RFC 1448 for: <CODE>wrongLength</CODE>. *//** Error code as defined in RFC 1448 for: <CODE>wrongEncoding</CODE>. *//** Error code as defined in RFC 1448 for: <CODE>wrongValue</CODE>. *//** Error code as defined in RFC 1448 for: <CODE>noCreation</CODE>. *//** Error code as defined in RFC 1448 for: <CODE>inconsistentValue</CODE>. *//** Error code as defined in RFC 1448 for: <CODE>resourceUnavailable</CODE>. *//** Error code as defined in RFC 1448 for: <CODE>commitFailed</CODE>. *//** Error code as defined in RFC 1448 for: <CODE>undoFailed</CODE>. *//** Error code as defined in RFC 1448 for: <CODE>authorizationError</CODE>. *//** Error code as defined in RFC 1448 for: <CODE>notWritable</CODE>. *//** Error code as defined in RFC 1448 for: <CODE>inconsistentName</CODE>. *//** Error that is returned by VACM. ... */// API error status enumeration./** Error code specific to the API. ... *//** SNMP V3 Error code specific to the API. ... *//** SNMP Usm V3 Error code specific to the API. ... *//** Snmp V1 security model id (1). ... *//** Snmp V2 security model id (2). ... *//** Snmp V3 security model id (3). ... *//** Snmp V1 msg processing model id (0). ... *//** Snmp V2 msg processing model id (1). ... *//** Snmp V3 msg processing model id (3). ... *//** Snmp V1 access control model id (0). ... *//** Snmp V2 access control model id (1). ... *//** Snmp V3 access control model id (3). ... *//** This engine is conformant with the RFC 2571. It is the main object within an SNMP entity (agent, manager...). ... *//** Gets the engine time in seconds. This is the time from the last reboot. ... *//** Gets the engine Id. This is unique for each engine. ... *//** Gets the engine boot number. This is the number of time this engine has rebooted. Each time an <CODE>SnmpEngine</CODE> is instantiated, it will read this value in its Lcd, and store back the value incremented by one. ... *//** Gets the Usm key handler. ... *//** This <CODE>SnmpEngineFactory</CODE> is instantiating an <CODE>SnmpEngine</CODE> containing : ... *//** The engine instantiation method. ... *//** This class is handling an <CODE>SnmpEngineId</CODE> data. It copes with binary as well as <CODE>String</CODE> representation of an engine Id. A string format engine is an hex string starting with 0x. ... *//** New <CODE>SnmpEngineId</CODE> with an hex string value. Can handle engine Id format &lt;host&gt:&lt;port&gt. ... *//** New <CODE>SnmpEngineId</CODE> with a binary value. You can use <CODE> SnmpTools </CODE> to convert from hex string to binary format. ... *//** If a string of the format &lt;address&gt;:&lt;port&gt;:&lt;IANA number&gt; has been provided at creation time, this string is returned. ... *//** Returns a string format engine Id. ... *//** Returns a binary engine Id. ... *//** In order to store the string used to create the engineId. *///octet strings with very first bit = 0 and length != 12 octets/** Generates an engine Id based on the passed array. ... *//** Generates an engine Id that is unique to the host the agent is running on. The engine Id unicity is system time based. The creation algorithm uses the SUN Microsystems IANA number (42). ... *//** Translates an engine Id in an SnmpOid format. This is useful when dealing with USM MIB indexes. ... *//** <P>Generates a unique engine Id. Hexadecimal strings as well as a textual description are supported. The textual format is as follow: ... *//** Idem { @link ... *///Deal with address//No need to go further, no port.//Deal with port//No need to go further, no iana.//Deal with iana/** Generates a unique engine Id. The engine Id unicity is based on ... *//** Generates a unique engine Id. The engine Id unicity is based on the host IP address and port. The IP address is the passed one, it handles IPv4 and IPv6 hosts. The creation algorithm uses the passed IANA number. ... *//** Generates an engine Id based on an InetAddress. Handles IPv4 and IPv6 addresses. The creation algorithm uses the passed IANA number. ... *//** Generates an engine Id based on an InetAddress. Handles IPv4 and IPv6 ... *//** Tests <CODE>SnmpEngineId</CODE> instance equality. Two <CODE>SnmpEngineId</CODE> are equal if they have the same value. ... *//** This class is used to pass some specific parameters to an <CODE> ... *//** Sets the file to use for SNMP Runtime Lcd. If no file is provided, the default location will be checked. *//** Gets the file to use for SNMP Runtime Lcd. ... *//** Sets a customized user ACL. User Acl is used in order to check ... *//** Gets the customized user ACL. ... *//** Activate SNMP V3 encryption. By default the encryption is not activated. Be sure that the security provider classes needed for DES are in your classpath (eg:JCE classes) *//** Deactivate SNMP V3 encryption. By default the encryption is not activated. Be sure that the security provider classes needed for DES are in your classpath (eg:JCE classes) *//** Check if encryption is activated. By default the encryption is not activated. ... *//** Set the engine Id. ... *//** Get the engine Id. ... *//** Represents an SNMP gauge. ... *//** Constructs a new <CODE>SnmpGauge</CODE> from the specified integer value. ... *//** Constructs a new <CODE>SnmpGauge</CODE> from the specified <CODE>Integer</CODE> value. ... *//** Constructs a new <CODE>SnmpGauge</CODE> from the specified long value. ... *//** Constructs a new <CODE>SnmpGauge</CODE> from the specified <CODE>Long</CODE> value. ... *//** Represents an SNMP integer. ... *//** Constructs a new <CODE>SnmpInt</CODE> from the specified integer value. ... *//** Constructs a new <CODE>SnmpInt</CODE> from the specified <CODE>Integer</CODE> value. ... *//** Constructs a new <CODE>SnmpInt</CODE> from the specified long value. ... *//** Constructs a new <CODE>SnmpInt</CODE> from the specified <CODE>Long</CODE> value. ... *//** Constructs a new <CODE>SnmpInt</CODE> from the specified <CODE>Enumerated</CODE> value. ... *//** Constructs a new <CODE>SnmpInt</CODE> from the specified boolean value. ... *//** Returns the long value of this <CODE>SnmpInt</CODE>. ... *//** Converts the integer value to its <CODE>Long</CODE> form. ... *//** Converts the integer value to its integer form. ... *//** Converts the integer value to its <CODE>Integer</CODE> form. ... *//** Converts the integer value to its <CODE>String</CODE> form. ... *//** Converts the integer value to its <CODE>SnmpOid</CODE> form. ... *//** Extracts the integer from an index OID and returns its ... *//** Scans an index OID, skips the integer value and returns the position ... *//** Appends an <CODE>SnmpOid</CODE> representing an <CODE>SnmpInt</CODE> to another OID. ... *//** Clones the <CODE>SnmpInt</CODE> object, making a copy of its data. ... *//** This method has been defined to allow the sub-classes ... *//** This is where the value is stored. This long is signed. ... *//** Represents an SNMP IpAddress. ... *//** Constructs a new <CODE>SnmpIpAddress</CODE> from the specified bytes array. ... *//** Constructs a new <CODE>SnmpIpAddress</CODE> from the specified long value. ... *//** Constructs a new <CODE>SnmpIpAddress</CODE> from a dot-formatted <CODE>String</CODE>. ... *//** Constructs a new <CODE>SnmpIpAddress</CODE> from four long values. ... *//** Converts the address value to its byte array form. ... *//** Converts the address to its <CODE>String</CODE> form. ... *//** Extracts the ip address from an index OID and returns its ... *//** Scans an index OID, skips the address value and returns the position ... *//** Appends an <CODE>SnmpOid</CODE> representing an <CODE>SnmpIpAddress</CODE> to another OID. ... *//** Build Ip address from byte array. *//* Copyright (c) 1998, 2007, Oracle and/or its affiliates. All rights reserved. ... */// java imports/** Is a partially decoded representation of an SNMP packet. ... *//** Community name. *//** Encodes this message and puts the result in the specified byte array. ... */// Reminder: BerEncoder does backward encoding !/** Returns the associated request ID. ... *//** Decodes the specified bytes and initializes this message. ... *//* , byteCount */// FIXME/** Initializes this message with the specified <CODE>pdu</CODE>. ... */// The easy work// Allocate the array to receive the encoding.// Encode the pdupacket/** Gets the PDU encoded in this message. ... */// Decode the pdu// bug id 4654066/** Dumps this message in a string. ... *//** A partially decoded representation of an SNMP packet. It contains ... *//** The protocol version. ... *//** Encoding of the PDU. ... *//** Number of useful bytes in the <CODE>data</CODE> field. *//** Source or destination address. ... *//** Source or destination port. ... *//** Security parameters. Contain informations according to Security Model (Usm, community string based, ...). *//** Returns the encoded SNMP version present in the passed byte array. ... *//** Dumps the content of a byte buffer using hexadecimal form. ... *//** For SNMP Runtime private use only. */// Remember: the encoder does backward encoding// bugId 4641696 : RuntimeExceptions must be transformed in//                 BerException.// Simple syntax// BerException("Can't build SnmpInt from decoded value.");// BerException("Can't build SnmpString from decoded value.");// BerException("Can't build SnmpOid from decoded value.");// BerException("Can't build SnmpNull from decoded value.");// Application syntax// BerException("Can't build SnmpIpAddress from decoded value.");// BerException("Can't build SnmpCounter from decoded value.");// BerException("Can't build SnmpGauge from decoded value.");// BerException("Can't build SnmpTimeticks from decoded value.");// BerException("Can't build SnmpOpaque from decoded value.");// V2 syntaxes// BerException("Can't build SnmpCounter64 from decoded value.");/** Represents an SNMP null value. ... *//** Constructs a new <CODE>SnmpNull</CODE>. *//** Constructs a new <CODE>SnmpNull</CODE>. ... *//** Constructs a new <CODE>SnmpNull</CODE> from the specified tag value. ... *//** Returns the tag value of this <CODE>SnmpNull</CODE>. ... *//** Converts the <CODE>NULL</CODE> value to its ASN.1 <CODE>String</CODE> form. ... *//** Converts the <CODE>NULL</CODE> value to its <CODE>SnmpOid</CODE> form. ... *//** Clones the <CODE>SnmpNull</CODE> object, making a copy of its data. ... *//** Checks if this <CODE>SnmpNull</CODE> object corresponds to a <CODE>noSuchObject</CODE> value. ... *//** Checks if this <CODE>SnmpNull</CODE> object corresponds to a <CODE>noSuchInstance</CODE> value. ... *//** Checks if this <CODE>SnmpNull</CODE> object corresponds to an <CODE>endOfMibView</CODE> value. ... *//** This is the tag of the NULL value. By default, it is the universal tag value. *//** Represents an SNMP Object Identifier (OID). ... *//** Constructs a new <CODE>SnmpOid</CODE> with no components. *//** Constructs a new <CODE>SnmpOid</CODE> from the specified component array. ... *//** Constructs a new <CODE>SnmpOid</CODE> containing one component with the ... *//** Constructs a new <CODE>SnmpOid</CODE> containing four components ... *//** Constructs a new <CODE>SnmpOid</CODE> from a dot-formatted <CODE>String</CODE> or a MIB variable ... */// Now extract the ids/** Gets the number of components in this OID. ... *//** Returns a copy of the components array of this <CODE>SnmpOid</CODE>. ... *//** Returns the components array of this <CODE>SnmpOid</CODE>. ... *//** Returns the value of the OID arc found at the requested position ... *//** Converts the OID value to its <CODE>Long</CODE> form. ... *//** Converts the OID value to its <CODE>Integer</CODE> form. ... *//** Converts the OID value to its <CODE>String</CODE> form. ... *//** Converts the OID value to its <CODE>Boolean</CODE> form. ... *//** Converts the OID value to its array of <CODE>Bytes</CODE> form. ... *//** Converts the OID value to its <CODE>SnmpOid</CODE> form. ... *//** Extracts the OID from an index OID and returns its ... *//** Scans an index OID, skips the OID value and returns the position ... *//** Appends an <CODE>SnmpOid</CODE> representing an <CODE>SnmpOid</CODE> to another OID. ... *//** Clones the <CODE>SnmpOid</CODE> object, making a copy of its data. ... */// should never happen. VM bug./** Inserts a subid at the beginning of this <CODE>SnmpOid</CODE>. ... *//** Appends the specified <CODE>SnmpOid</CODE> to the end of this <CODE>SnmpOid</CODE>. ... *//** Appends the specified long to the end of this <CODE>SnmpOid</CODE>. ... *//** Adds the specified dot-formatted OID <CODE>String</CODE> to the end of this <CODE>SnmpOid</CODE>. ... *//** Adds the specified array of longs to the end of this <CODE>SnmpOid</CODE>. ... *//** Checks the validity of the OID. ... *//** Checks whether the specified <CODE>Object</CODE> is equal to this <CODE>SnmpOid</CODE>. ... *//** The hashCode is computed from the OID components. ... *//** Compares two OIDs lexicographically. ... *//** Resolves a MIB variable <CODE>String</CODE> with the MIB database. ... */// First handle the case where oid is expressed as 1.2.3.4// if we are here, it means we have something to resolve..// Ok assume there is a variable name to resolve .../** Returns the MIB table used for resolving MIB variable names. ... *//** Sets the MIB table to use for resolving MIB variable names. ... *//** Converts an OID index converted string back to a DisplayString *//** convert the components array into a byte array *//** Checks if there is enough space in the components ... */// just parse the element./** The components' array. ... *//** The length of the components' array. ... *//** The name of the type. *//** Reference to a mib table. If no mib table is available, ... *//** Ensure serialization compatibility with version 4.1 FCS */// jmx import/** Defines the minimal functionality that should be provided by ... *//** Adds an <CODE>SnmpOidTable</CODE> object in this <CODE>SnmpOidDatabase</CODE>. ... *//** Removes an <CODE>SnmpOidTable</CODE> object from this <CODE>SnmpOidDatabase</CODE>. ... *//** Removes all the <CODE>SnmpOidTable</CODE> objects from this <CODE>SnmpOidDatabase</CODE>. *//** Searches for a MIB variable given its logical name and returns an <CODE>SnmpOidRecord</CODE> ... *//** Searches for a MIB variable given its OID and returns an <CODE>SnmpOidRecord</CODE> object containing ... *//** Returns a list that can be used to traverse all the entries of the <CODE>SnmpOidTable</CODE> objects ... */// We can't specify Vector<SnmpOidTable> because the subinterface SnmpOidTable// overrides this method to return Vector<SnmpOidRecord>/** Defines a set of <CODE>SnmpOidTable</CODE> objects containing metadata definitions for MIB variables. ... *//** Creates an empty <CODE>SnmpOidDatabaseSupport</CODE>. *//** Creates an <CODE>SnmpOidDatabaseSupport</CODE> containing the specified <CODE>SnmpOidTable</CODE> object. ... *//** Adds a <CODE>SnmpOidTable</CODE> object in this <CODE>SnmpOidDatabase</CODE>. ... *//** Removes a <CODE>SnmpOidTable</CODE> object from this <CODE>SnmpOidDatabase</CODE>. ... *///      res.addAll(((SnmpOidTable)tables.elementAt(i)).getAllEntries());/** Removes all <CODE>SnmpOidTable</CODE> objects from this <CODE>SnmpOidDatabase</CODE>. *//** Represents an entry of an {@link com.sun.jmx.snmp.SnmpOidTable SnmpOidTable}. It contains the name of the MIB variable, ... *//** Creates an <CODE>SnmpOidRecord</CODE> with the specified MIB variable ... *//** Gets the logical name of the MIB variable. ... *//** Gets the OID of the MIB variable. ... *//** Gets the type of the MIB variable. ... *//** The MIB variable name. *//** The MIB variable OID. *//** The MIB variable type. *//** Defines the minimum functionality that should be provided by ... *//** Searches for a MIB variable given its logical name and returns an {@link com.sun.jmx.snmp.SnmpOidRecord} object ... *//** Searches for a MIB variable given its OID and returns an {@link com.sun.jmx.snmp.SnmpOidRecord} object ... *//** Returns a list that can be used to traverse all the entries this <CODE>SnmpOidTable</CODE>. ... *///RI import/** Contains metadata definitions for MIB variables. ... *//** Creates an <CODE>SnmpOidTableSupport</CODE> with the specified name. ... */// Try to see if the variable name is actually an OID to resolve.// The oid starts with a '.' ala CMU.// Go through the oidStore ... Good luck !/** Returns a list that can be used to traverse all the entries in this <CODE>SnmpOidTable</CODE>. ... */// get the locally defined elements .../** Loads a list of variables into the storage area, ... *//** Checks if the specified <CODE>Object</CODE> is equal to this <CODE>SnmpOidTableSupport</CODE>. ... *//** Returns the name identifying this <CODE>SnmpOidTableSupport</CODE> object. ... *//** Is used to represent an SNMP value. ... *//** Constructs a new <CODE>SnmpOpaque</CODE> from the specified bytes array. ... *//** Constructs a new <CODE>SnmpOpaque</CODE> with the specified <CODE>Bytes</CODE> array. ... *//** Constructs a new <CODE>SnmpOpaque</CODE> from the specified <CODE>String</CODE> value. ... *//** Converts the opaque to its <CODE>String</CODE> form, that is, a string of ... *//** Contains a set of resources that are used by while sending or receiving ... *//** Creates an <CODE>SnmpParameters</CODE> object with defaults set up. ... *//** Creates an <CODE>SnmpParameters</CODE> object. ... *//** Gets the community to be used when issuing <CODE>get</CODE> operations. ... *//** Sets the community string to use when performing <CODE>get</CODE> operations. ... *//** Gets the community to be used when issuing <CODE>set</CODE> operations. ... *//** Sets the community to be used when issuing <CODE>set</CODE> operations. ... *//** Gets the community to be used when issuing <CODE>inform</CODE> requests. ... *//** Sets the community string to use when performing <CODE>inform</CODE> requests. ... *//** Checks whether parameters are in place for an SNMP <CODE>set</CODE> operation. ... *//** Compares two objects. ... *//** Clones the object and its content. ... *///par._retryPolicy = _retryPolicy ;// VM bug./** For SNMP Runtime internal use only. */// Returns the community string associated to the specified command./** Specify the default community string to use for <CODE>get</CODE> operations. ... *//** The community to be used when issuing <CODE>get</CODE> operations. ... *//** The community to be used when issuing <CODE>set</CODE> operations. ... *//** The community to be used when issuing <CODE>inform</CODE> requests. ... *///private int               _retryPolicy ;  // not implemented as yet./** This class is the base class of all parameters that are used when making SNMP requests to an <CODE>SnmpPeer</CODE>. ... *//** Returns the version of the protocol to use. ... *//** Sets the version of the protocol to be used. ... *//** Is the fully decoded representation of an SNMP packet. ... *//** PDU type. Types are defined in ... *//** Protocol version. Versions are defined in ... *//** List of variables. ... *//** Request identifier. ... *//** Returns the <CODE>String</CODE> representation of a PDU type. ... *//** Represents a <CODE>get-bulk</CODE> PDU as defined in RFC 1448. ... *//** The <CODE>non-repeaters</CODE> value. ... *//** The <CODE>max-repetitions</CODE> value. ... *//** Builds a new <CODE>get-bulk</CODE> PDU. ... *//** Implements the <CODE>SnmpPduBulkType</CODE> interface. ... *//** Implements the <CODE>SnmpAckPdu</CODE> interface. ... *//** Interface implemented by classes modelizing bulk pdu. ... *//** The <CODE>max-repetitions</CODE> setter. ... *//** The <CODE>non-repeaters</CODE> setter. ... *//** The <CODE>max-repetitions</CODE> getter. ... *//** The <CODE>non-repeaters</CODE> getter. ... *//** Defines the interface of the object in charge of encoding and decoding SNMP packets. ... *//** Decodes the specified <CODE>SnmpMsg</CODE> and returns the ... *//** Encodes the specified <CODE>SnmpPdu</CODE> and ... *//** Default implementation of the {@link com.sun.jmx.snmp.SnmpPduFactory SnmpPduFactory} interface. ... *//** Calls {@link com.sun.jmx.snmp.SnmpMsg#decodeSnmpPdu SnmpMsg.decodeSnmpPdu} ... *//** The pdu community string. *//** Is used to represent <CODE>get</CODE>, <CODE>get-next</CODE>, <CODE>set</CODE>, <CODE>response</CODE> and <CODE>SNMPv2-trap</CODE> PDUs. ... *//** Error status. Statuses are defined in ... *//** Error index. Remember that SNMP indices start from 1. ... *//** Implements <CODE>SnmpPduRequestType</CODE> interface. ... *//** Implements <CODE>SnmpAckPdu</CODE> interface. ... *//** Interface implemented by classes modelizing request pdu. ... *//** Error index setter. Remember that SNMP indices start from 1. ... *//** Error status setter. Statuses are defined in ... *//** Error index getter. Remember that SNMP indices start from 1. ... *//** Error status getter. Statuses are defined in ... *//** Represents an SNMPv1-trap PDU. ... *//** Enterprise object identifier. ... *//** Agent address. If the agent address source was not an IPv4 one (eg : IPv6), this field is null. ... *//** Generic trap number. ... *//** Specific trap number. ... *//** Time-stamp. ... *//** Builds a new trap PDU. ... *//** Holds information about an SNMP agent. This information is used to communicate with the agent. ... */// PUBLIC VARIABLES//-----------------/** The default SNMP packet size of an SNMP request (2 * 1024). ... *//** The default SNMP packet size of an SNMP response (8 * 1024). ... *//** The maximum number of variable bindings that can be packed into a request. ... *//** Port number of the destination host. ... *//** Number of times to try before giving up. ... *//** The amount of time to wait for a response from the peer. ... *//** The PDU factory. The default factory is an instance of <CODE>SnmpPduFactoryBER</CODE>. *//** The maximum round trip time for a packet with the peer. *//** The minimum round trip time for a packet with the peer. *//** The average round trip time for a packet with the peer. *//** SNMP parameters for this peer are valid for all requests using this peer. ... *//** Internet address of the peer to be used when communicating with the peer. *//** Maximum packet size of the request PDU.  This can be set by the user. ... *//** List of alternate addresses. *//** The index of address currently being used. *//** Creates an SNMP peer object for a device. The default port is 161. ... *//** Creates an SNMP peer object for a device with the specified port. ... *//** Sets a specific IP address to which the peer will communicate. ... *//** Returns the dot-formatted IP address string (for example 171.69.220.224). ... *//** Specifies the list of addresses to be used.  When a host is not responding ... *//** Causes all subsequent requests to go to the new address ... *//* NPCTE fix for bug 4486059, esc 0 MR 03-August-2001 *//* if (_addrIndex > _devAddrList.length) *//* end of NPCTE fix for bugid 4486059 *//** Determines whether an SNMP <CODE>set</CODE> operation is allowed with this ... *//** Gets the list of alternate <CODE>InetAddress</CODE> configured for this peer. ... *//** Gets the <CODE>InetAddress</CODE> object for this peer. ... *//** Gets the destination port number of the peer to which SNMP requests are to be sent. ... *//** Changes the port address of the destination for the request. ... *//** Gets the timeout to wait for a response from the peer. ... *//** Changes the timeout to wait for a response from the peer. ... *//** Gets the number of times to try before giving up. ... *//** Changes the maximun number of times to try before giving up. ... *//** Gets the name specified in the constructor while creating this object. ... *//** Returns the <CODE>String</CODE> representation for this <CODE>SnmpPeer</CODE>. ... */// For security and performance reasons we don't call getHostName here// Use getDevName() explicitly when necessary./** Gets the maximum number of variable bindings that can be sent to a peer. ... *//** Configures the maximum number of variable bindings that can be sent to a peer. ... *//** Sets the <CODE>SnmpParams</CODE> object associated with the peer. ... *//** Gets the <CODE>SnmpParams</CODE> object associated with the peer. ... *//** Gets the maximum request packet size that is currently used. ... *//** Configures the maximum packet size that can be used when generating an SNMP request. ... *//** Finalizer of the <CODE>SnmpPeer</CODE> objects. ... *//** Gets the minimum round trip time for a packet with the peer. ... *//** Gets the maximum round trip time for a packet with the peer. ... *//** Gets the average round trip time for a packet with the peer. ... */// to do later./** SNMP Permission ... *//** Constructs a SnmpPermission with the specified name. ... *//** Constructs a new SnmpPermission object. ... *//** Generates the pdu to use for response. ... *//** Is the fully decoded representation of an SNMP V3 packet. ... *//** Message max size the pdu sender can deal with. *//** Message identifier. *//** Message flags. Reportable flag  and security level.</P> ... *//** The security model the security sub system MUST use in order to deal with this pdu (eg: User based Security Model Id = 3). *//** The context engine Id in which the pdu must be handled (Generaly the local engine Id). *//** The context name in which the OID have to be interpreted. *//** The security parameters. This is an opaque member that is ... *//** Constructor. Is only called by a son. Set the version to <CODE>SnmpDefinitions.snmpVersionThree</CODE>. *//** Is used to represent <CODE>get</CODE>, <CODE>get-next</CODE>, <CODE>set</CODE>, <CODE>response</CODE> SNMP V3 scoped PDUs. ... *//** This exception is thrown when an error occurs in an <CODE> SnmpSecurityModel </CODE>. ... *//** The current request varbind list. *//** The status of the exception. See {@link com.sun.jmx.snmp.SnmpDefinitions} for possible values. *//** The current security model related security parameters. *//** The current context engine Id. *//** The current context name. *//** The current flags. *//** Constructor. ... *//** Security parameters are security model dependent. Every security parameters class wishing to be passed to a security model must implement this marker interface. ... *//** BER encoding of security parameters. ... *//** BER decoding of security parameters. ... *//** Principal coded inside the security parameters. ... *//** Reports an error which occurred during a get/set operation on a mib node. ... *//** Error code for reporting a no such instance error. *//** Error code for reporting a no such object error. *//** Constructs a new <CODE>SnmpStatusException</CODE> with the specified status error. ... *//** Constructs a new <CODE>SnmpStatusException</CODE> with the specified status error and status index. ... *//** Constructs a new <CODE>SnmpStatusException</CODE> with an error message. ... *//** Constructs a new <CODE>SnmpStatusException</CODE> with an error index. ... *//** Return the error status. ... *//** Returns the index of the error. ... *///--------------------/** Status of the error. ... *//** Index of the error. ... *//** Represents an SNMP string. ... *//** Constructs a new empty <CODE>SnmpString</CODE>. *//** Constructs a new <CODE>SnmpString</CODE> from the specified bytes array. ... *//** Constructs a new <CODE>SnmpString</CODE> from the specified <CODE>Bytes</CODE> array. ... *//** Constructs a new <CODE>SnmpString</CODE> from the specified <CODE>String</CODE> value. ... *//** Constructs a new <CODE>SnmpString</CODE> from the specified <CODE> InetAddress </Code>. ... *//** Converts the string value to its <CODE> InetAddress </CODE> form. ... *//** Converts the specified binary string into a character string. ... *//** Converts the specified hexadecimal string into a character string. ... *//** Returns the bytes array of this <CODE>SnmpString</CODE>. ... *//** Converts the string value to its array of <CODE>Bytes</CODE> form. ... *//** Converts the string value to its <CODE>String</CODE> form. ... *//** Converts the string value to its <CODE>SnmpOid</CODE> form. ... *//** Extracts the string from an index OID and returns its ... *//** Scans an index OID, skips the string value and returns the position ... *//** Appends an <CODE>SnmpOid</CODE> representing an <CODE>SnmpString</CODE> to another OID. ... *//** Clones the <CODE>SnmpString</CODE> object, making a copy of its data. ... *//** This is the bytes array of the string value. ... *//** Represents an SNMP String defined with a fixed length. ... *//** Constructs a new <CODE>SnmpStringFixed</CODE> from the specified bytes array. ... *//** Constructs a new <CODE>SnmpStringFixed</CODE> with the specified <CODE>Bytes</CODE> array. ... *//** Constructs a new <CODE>SnmpStringFixed</CODE> from the specified <CODE>String</CODE> value. ... *//** Constructs a new <CODE>SnmpStringFixed</CODE> from the specified <CODE>bytes</CODE> array ... *//** Constructs a new <CODE>SnmpStringFixed</CODE> from the specified <CODE>Bytes</CODE> array ... *//** Constructs a new <CODE>SnmpStringFixed</CODE> from the specified <CODE>String</CODE> ... *//** Extracts the fixed-string from an index OID and returns its ... *//** Scans an index OID, skip the string value and returns the position ... *//** Appends an <CODE>SnmpOid</CODE> representing an <CODE>SnmpStringFixed</CODE> to another OID. ... *//** Contains an <CODE>SnmpTimeTick</CODE> value which ... *//** Constructs a new <CODE>SnmpTimeticks</CODE> from the specified ... *//** Constructs a new <CODE>SnmpTimeticks</CODE> from the specified long ... *//** Parses the specified long value with time units and ... *//** Converts the timeticks value to its <CODE>String</CODE> form. ... *//** Is used internally to signal that the size of a PDU exceeds the packet size limitation. ... *//** Builds an <CODE>SnmpTooBigException</CODE> with ... *//** Returns the number of <CODE>SnmpVarBind</CODE> successfully ... *//** The <CODE>varBindCount</CODE>. ... *//** This exception is thrown when an ... *//** This exception is thrown when a needed model is not present in the engine. ... *//** This exception is thrown when an <CODE>SnmpLcd</CODE> has no ModelLcd associated to the model. ... *//** This exception is thrown when an <CODE>SnmpMsgProcessingSubSystem</CODE> doesn't know the passed ID. ... *//** This exception is thrown when an <CODE>SnmpSecuritySubSystem</CODE> doesn't know the passed ID. ... *//** This exception is thrown when the handled <CODE> SnmpSubSystem </CODE> is unknown. ... *//** Is the base for all SNMP syntaxes based on unsigned integers. ... *//** The largest value of the type <code>unsigned int</code> (2^32 - 1). *//** Constructs a new <CODE>SnmpUnsignedInt</CODE> from the specified integer value. ... *//** Constructs a new <CODE>SnmpUnsignedInt</CODE> from the specified <CODE>Integer</CODE> value. ... *//** Constructs a new <CODE>SnmpUnsignedInt</CODE> from the specified long value. ... *//** Constructs a new <CODE>SnmpUnsignedInt</CODE> from the specified <CODE>Long</CODE> value. ... *//** This interface allows you to compute key localization and delta generation. It is useful when adding user in USM MIB. An instance of <CODE> SnmpUsmKeyHandler </CODE> is associated to each <CODE> SnmpEngine </CODE> object. ... *//** DES privacy algorithm key size. To be used when localizing privacy key *//** DES privacy algorithm delta size. To be used when calculing privacy key delta. *//** Translate a password to a key. It MUST be compliant to RFC 2574 description. ... *//** Localize the passed key using the passed <CODE>SnmpEngineId</CODE>. It MUST be compliant to RFC 2574 description. ... *//** Localize the passed privacy key using the passed <CODE>SnmpEngineId</CODE>. It MUST be compliant to RFC 2574 description. ... *//** Calculate the delta parameter needed when processing key change. This computation is done by the key change initiator. It MUST be compliant to RFC 2574 description. ... *//** Calculate the delta parameter needed when processing key change for a privacy algorithm. This computation is done by the key change initiator. It MUST be compliant to RFC 2574 description. ... */// import debug stuff/** Is a partially decoded representation of an SNMP V3 packet. ... *//** The unmarshalled security parameters. *//** The context name in which the OID has to be interpreted. *//** The encrypted form of the scoped pdu (Only relevant when dealing with privacy). *//** Returns the associated request Id. ... */// Encode the pdu// The easy work./** Is an abstract representation of an SNMP Value. ... *//** Returns a <CODE>String</CODE> form containing ASN.1 tagging information. ... *//** Returns the value encoded as an OID. ... *//** Returns a textual description of the object. ... *//** Same as clone, but you cannot perform cloning using this object because ... *//** This method returns <CODE>false</CODE> by default and is redefined ... *//** This class holds information for a MIB variable contained in an {@link com.sun.jmx.snmp.SnmpVarBindList}. ... *//** Keeps the legend for the value part of the <CODE>SnmpVarBind</CODE>. *//** Useful constant indicating that the status of the <CODE>SnmpVarBind</CODE> object is not initialized. *//** Useful constant indicating that the status of the <CODE>SnmpVarBind</CODE> object is valid. *//** Useful constant indicating that the status of the <CODE>SnmpVarBind</CODE> object is <CODE>noSuchObject</CODE>. ... *//** Useful constant indicating that the status of the <CODE>SnmpVarBind</CODE> object is ... *//** Useful constant indicating that the status of the <CODE>SnmpVarBind</CODE> object is <CODE>endOfMibView</CODE>. ... */// These are predefined values for SNMP V2 variables/** Error code value as defined in RFC 1448 for: <CODE>noSuchObject</CODE>. *//** Error code value as defined in RFC 1448 for: <CODE>noSuchInstance</CODE>. *//** Error code value as defined in RFC 1448 for: <CODE>endOfMibView</CODE>. *//** The OID of the <CODE>SnmpVarBind</CODE>. ... *//** The value of the <CODE>SnmpVarBind</CODE>. ... *//** Indicates the status of the value in this <CODE>SnmpVarBind</CODE>. ... *//** Default constructor. *//** Constructs a new <CODE>SnmpVarBind</CODE> object from the specified <CODE>SnmpOid</CODE> value. ... *//** Constructs a new <CODE>SnmpVarBind</CODE> object from the specified <CODE>SnmpOid</CODE> and ... *//** Constructs a new <CODE>SnmpVarBind</CODE> object from the specified <CODE>String</CODE> value. ... */// GETTER/SETTER//--------------/** Returns the complete OID part associated with this <CODE>SnmpVarBind</CODE>. ... *//** Sets the <CODE>SnmpOid</CODE> part associated with this <CODE>SnmpVarBind</CODE> with the specified OID. ... *//** Returns the value part associated with this <CODE>SnmpVarBind</CODE>. ... *//** Sets the <CODE>SnmpValue</CODE> part associated with this <CODE>SnmpVarBind</CODE> with the specified value. ... *//** Sets the <CODE>SnmpCounter64</CODE> value part associated with this <CODE>SnmpVarBind</CODE> ... *//** Sets the <CODE>SnmpInt</CODE> value part associated with this <CODE>SnmpVarBind</CODE> ... *//** Sets the <CODE>SnmpCounter</CODE> value part associated with this <CODE>SnmpVarBind</CODE> ... *//** Sets the <CODE>SnmpGauge</CODE> value part associated with this <CODE>SnmpVarBind</CODE> ... *//** Sets the <CODE>SnmpTimeticks</CODE> value part associated with this <CODE>SnmpVarBind</CODE> ... *//** Sets the <CODE>SnmpOid</CODE> value part associated with this <CODE>SnmpVarBind</CODE> ... *//** Sets the <CODE>SnmpIpAddress</CODE> value part associated with this <CODE>SnmpVarBind</CODE> ... *//** Sets the <CODE>SnmpString</CODE> value part associated with this <CODE>SnmpVarBind</CODE> ... *//** Sets the <CODE>SnmpOpaque</CODE> value part associated with this <CODE>SnmpVarBind</CODE> ... *//** Sets the <CODE>SnmpStringFixed</CODE> value part associated with this <CODE>SnmpVarBind</CODE> ... *//** Consults the MIB table storage to resolve the name to its OID type structure. ... *//** Returns the status of the value associated with this <CODE>SnmpVarBind</CODE> as an integer. ... *//** Returns the status of the value associated with this <CODE>SnmpVarBind</CODE> as a <CODE>String</CODE>. ... *//** Checks whether the object contains a valid accessible value. ... *//** Checks whether the value associated with this <CODE>SnmpVarBind</CODE> is unspecified. ... *//** Clears the value associated with this <CODE>SnmpVarBind</CODE> and sets the status to ... *//** Checks whether the OID for this variable completely matches the OID part of the specified ... *//** Adds an instance part to the OID in the <CODE>SnmpOid</CODE> object. ... *//** Inserts a sub-id at the beginning of the OID of this <CODE>SnmpVarBind</CODE>. ... *//** Appends the specified <CODE>SnmpOid</CODE> to the end of the OID of this <CODE>SnmpVarBind</CODE>. ... *//** Determines whether the <CODE>SnmpVarBind</CODE> has an SNMP exception ... *//** Clones and copies the OID and value part from another <CODE>SnmpVarBind</CODE> object. ... *//** Clones and copies only the value part from another <CODE>SnmpVarBind</CODE> object. ... *//** Clones the SNMP variable. It does not clone the value portion. ... *//** Clones the SNMP variable (including value). ... */// FindBugs will issue a warning here, because super.clone()// is not called. But this is actually OK because we construct// a brand new object./** Returns the printable ASCII representation for the corresponding variable value. ... *//** Set the value to {@link #noSuchObject}. This is equivalent to ... *//** Set the value to {@link #noSuchInstance}. This is equivalent to ... *//** Set the value to {@link #endOfMibView}. This is equivalent to ... *//** Returns the printable ASCII representation of this <CODE>SnmpVarBind</CODE>. ... *//** Sets the status to indicate that the value for this <CODE>SnmpVarBind</CODE> is valid. *//** Contains a list of <CODE>SnmpVarBind</CODE> objects. ... *//** A name given to the <CODE>SnmpVarBindList</CODE>. Useful for debugging. ... */// name identifying this list./** Timestamp when this <CODE>SnmpVarBindList</CODE> was updated. ... *//** Prepares an empty list. ... *//** Prepares an empty list with a <CODE>String</CODE> to print while debugging. ... *//** Similar to the copy constructor. Does a shallow copy of the elements. ... *//** Creates a new <CODE>SnmpVarBindList</CODE> object from a plain vector of <CODE>SnmpVarBind</CODE> objects. ... *//** Gets the <CODE>timestamp</CODE> associated with this <CODE>SnmpVarBindList</CODE>. ... *//** Records the <CODE>sysUpTime</CODE> and the actual time when this <CODE>SnmpVarBindList</CODE> ... *//** Gets an <CODE>SnmpVarBind</CODE> object. ... *//** Gets the number of elements in this list. ... *//** This is a convenience function that returns an enumeration. This can be used to traverse the list. ... *//** Replaces the current variable binding list of <CODE>SnmpVarBind</CODE> with the new specified variable binding ... *//** Replaces the current variable binding list of <CODE>SnmpVarBind</CODE> objects with the new variable binding ... */// do deepcopy of all vars./** Appends an <CODE>SnmpVarBindList</CODE> at the end of the current <CODE>SnmpVarBindList</CODE> object. ... *//** Removes all the <CODE>SnmpVarBind</CODE> objects of the given <CODE>SnmpVarBindList</CODE> from the existing ... *//** Replaces an element at a specified location with the new element. ... *//** Prepares a vector of <CODE>SnmpVarBindList</CODE> from an array of SNMP MIB variables and instances. ... *//** Removes the array of SNMP MIB variables and instances from the existing <CODE>SnmpVarBindList</CODE>. ... *//** Adds an array of MIB variable names to the list. For example: ... *//** Removes the array of SNMP MIB variables from the existing <CODE>SnmpVarBindList</CODE>. ... *//** Creates an <CODE>SnmpVarBind</CODE> object from the given MIB variable and appends it to the existing ... *//** Removes the <CODE>SnmpVarBind</CODE> object corresponding to the given MIB variable from the existing ... *//** Appends the given <CODE>SnmpVarBind</CODE> object to the existing <CODE>SnmpVarBindList</CODE>. ... *//** Removes the given <CODE>SnmpVarBind</CODE> object from the existing <CODE>SnmpVarBindList</CODE>. ... *//** Adds the string as an instance part to all OIDs in this list. ... *//** Adds elements in the specified <CODE>SnmpVarBindList</CODE> to this list. ... *//** Returns <CODE>false</CODE> if any of the variables does not contain a valid value. ... *//** Returns <CODE>true</CODE> if there is a value that is not specified. ... *//** Splits the <CODE>SnmpVarBindList</CODE>. ... */// size() - atPosition) ;/** Gives the index of an OID in the <CODE>SnmpVarBindList</CODE>. ... *//** Clones the <CODE>SnmpVarBindList</CODE>. A new copy of the <CODE>SnmpVarBindList</CODE> is created. ... *//** Clones the <CODE>SnmpVarBindList</CODE>. It does not clone the value part of the variable. ... *//** Copies the <CODE>SnmpVarBindList</CODE> into a plain vector of <CODE>SnmpVarBind</CODE> objects. ... *//** Returns a <CODE>String</CODE> containing the ASCII representation of all OIDs in the list. ... *//** Constructs a <CODE>String</CODE> containing details of each <CODE>SnmpVarBindList</CODE> (oid+value). ... *//** Finalizer of the <CODE>SnmpVarBindList</CODE> objects. ... *//* Copyright (c) 2000, 2007, Oracle and/or its affiliates. All rights reserved. ... *//** <p><b>Warning: The interface of this class is subject to change. ... *//* The context of a thread is stored as a linked list.  At the ... *//* We have to comment out "final" here because of a bug in the JDK1.1 ... *//* final *//** <p>Get the Object that was most recently pushed with the given key.</p> ... *//** <p>Check whether a value with the given key exists in the stack. ... *//** <p>Find the ThreadContext in the stack that contains the given key, ... *//* Note that "context.key" may be null if "context" is the ... *///  /**//   * Change the value that was most recently associated with the given key//   * in a <code>push</code> operation not cancelled by a subsequent//   * <code>restore</code>.  If there is no such association, nothing happens//   * and the return value is null.//   *//   * @param key the key of interest.//   * @param value the new value to associate with that key.//   * @return the value that was previously associated with the key, or null//   * if the key does not exist in the stack.//   * @exception IllegalArgumentException if <code>key</code> is null.//   *///  public static Object set(String key, Object value)//          throws IllegalArgumentException {//      ThreadContext context = contextContaining(key);//      if (context == null)//          return null;//      Object old = context.value;//      context.value = value;//      return old;//  }/** <p>Push an object on the context stack with the given key. ... */// make sentinel/** <p>Return an object that can later be supplied to <code>restore</code> ... *//** <p>Restore the context stack to an earlier state.  This typically ... *//* The following test is not strictly necessary in the code as it ... *//* Check that the restored context is in the stack. *//* Discard the sentinel if the stack is empty.  This means that it ... *//** <p>Set the initial context of the calling thread to a context obtained ... *//* We rely on the fact that ThreadContext objects are immutable. ... *//* The following test assumes that we discard sentinels when the ... *//** This class is used by the {@link com.sun.jmx.snmp.SnmpVarBindList SnmpVarBindList} object. ... *//** The time (in hundreds of a second) since the network management portion of the system ... *//** A <CODE>long</CODE> representing the current date. *//** The <CODE>SnmpTimeticks</CODE> object corresponding to the <CODE>TimeStamp</CODE> object. *//** The default constructor. <CODE>Sysuptime</CODE> is 0. ... *//** Creates a <CODE>TimeStamp</CODE> object using the user parameters. ... *//** Gets the <CODE>SnmpTimeticks</CODE> object corresponding to the <CODE>TimeStamp</CODE> object. ... *//** Gets the time (in hundredths of a second) since the network management portion of the system ... *//** Gets the current date. ... *//** Returns a <CODE>String</CODE> representation of the <CODE>TimeStamp</CODE> object. ... *//** Defines the user based ACL used by the SNMP protocol adaptor. ... *//** Checks whether or not the specified user has <CODE>READ</CODE> access. ... *//** Checks whether or not the specified user and context name have <CODE>READ</CODE> access. ... *//** Checks whether or not a context name is defined. ... *//** Checks whether or not the specified user has <CODE>WRITE</CODE> access. ... *//** Checks whether or not the specified user and context name have <CODE>WRITE</CODE> access. ... *//** Oid Checker makes use of ACM to check each OID during the getnext process. *///We are in V3 architecture, ACM is in the picture./** This list is used in order to construct the OID during the getnext. ... *//** The list content. Any access to this variable must be protected ... *//** Same behaviour than size() in {@link java.util.List}. *//** Same behaviour than add(long o) in {@link java.util.List}. ... *//** Same behaviour than add(int index, long o) in ... *//** Adds <var>count</var> elements to the list. ... *//** Any access to this method should be protected in a synchronized ... *//** Same behaviour than remove(int index) in {@link java.util.List}. ... *//** Same behaviour than the toArray(long[] a) method in ... *//** Same behaviour than the toArray() method in ... *//** Resize the list. Increase its capacity by DELTA elements. ... *//** Resize the list. Insure that the new length will be at ... *//** Allocate a new array of object of specified length. *//* Copyright (c) 2000, 2006, Oracle and/or its affiliates. All rights reserved. ... *//** This class only adds a new constructor to SnmpOid... *//** Constructs a new <CODE>SnmpOid</CODE> from the specified ... *//** A simple MIB agent that implements SNMP calls (get, set, getnext and getbulk) in a way that only errors or exceptions are returned. Every call done on this agent fails. Error handling is done according to the manager's SNMP protocol version. ... *//** Initializes the MIB (with no registration of the MBeans into the ... *//** Initializes the MIB but each single MBean representing the MIB ... *//** Gets the root object identifier of the MIB. ... *//** Processes a <CODE>get</CODE> operation. It will throw an exception for V1 requests or it will set exceptions within the list for V2 requests. ... *//** Checks if a <CODE>set</CODE> operation can be performed. ... *//** Processes a <CODE>set</CODE> operation. Should never be called (check previously called having failed). ... *//** Processes a <CODE>getNext</CODE> operation. It will throw an exception for V1 requests or it will set exceptions within the list for V2 requests.. ... *//** Processes a <CODE>getBulk</CODE> operation. It will throw an exception if the request is a V1 one or it will set exceptions within the list for V2 ones. ... */// jmx imports/** Construct an attribute value (as returned by Attribute::getValue()) ... *//** Construct an SnmpValue from an Attribute value as returned by ... *//** Return the name of the attribute corresponding to the ... *//** Check the access rights for a SET operation. ... *//** Check the access rights for a GET operation. ... */// ----------------------------------------------------------------------//    Protected variables/** The MBean server through which the MBeans will be accessed. *//** Builds a new SnmpGenericObjectServer. Usually there will be a single ... *//** Execute an SNMP GET request. ... */// java.lang.System.out.println(">>>>>>>>> GET " + name);// Check the access rights according to the MIB.// The MBean might be less restrictive (have a getter// while the MIB defines the variable as AFN)//java.lang.System.out.println(nameList[i] + " added.");//java.lang.System.out.println("exception for " + nameList[i]);//x.printStackTrace();//java.lang.System.out.println(name + ": instance not found.");//f.printStackTrace();//java.lang.System.out.println(name + ": reflexion error.");//r.printStackTrace();//java.lang.System.out.println(name + "variable[" + j +//                           "] absent");//java.lang.System.out.println(name + "variable[" +j +//                           "] not found");//java.lang.System.out.println(att.getName() + " retrieved.");//java.lang.System.out.println(">>>>>>>>> END GET");/** Get the value of an SNMP variable. ... *//** Execute an SNMP SET request. ... *//** Set the value of an SNMP variable. ... *//** Checks whether an SNMP SET request can be successfully performed. ... */// call meta.check() here, and meta.check will call check()/** Checks whether a SET operation can be performed on a given SNMP ... */// XXX xxx ZZZ zzz Maybe we should go through the MBeanInfo here?// checkXXXX() not defined => do nothing/** Represents a SNMP index. ... *//** Initializes an <CODE>SnmpIndex</CODE> using a vector of object identifiers. ... */// The order is important .../** Initializes an <CODE>SnmpIndex</CODE> using the specified Object Identifier. ... *//** Gets the number of Object Identifiers the index is made of. ... *//** Gets the index as a vector of Object Identifiers. ... *//** Compares two indexes for equality. ... */// The two vectors have the same length.// Compare each single element .../** Compares two indexes. ... */// There is no more element in the index// Access the element .../** Returns a <CODE>String</CODE> representation of the index. ... *//** The list of OIDs. ... *//** The number of elements in the index. ... *//** Abstract class for representing an SNMP MIB. ... *//** Default constructor. ... */// --------------------------------------------------------------------// POLYMORHIC METHODS/** Returns a registered SNMP Table metadata node. ... *//** Processes a <CODE>get</CODE> operation. */// Implements the method defined in SnmpMibAgent. See SnmpMibAgent// for java-doc// Builds the request tree: creation is not allowed, operation// is not atomic.// For each sub-request stored in the request-tree, invoke the// get() method.// Gets the Meta node. It can be either a Group Meta or a// Table Meta.// Gets the depth of the Meta node in the OID tree// Invoke the get() operation./** Processes a <CODE>set</CODE> operation. */// Optimization: we're going to get the whole SnmpRequestTree// built in the "check" method, so that we don't have to rebuild// it here.// Optimization didn't work: we have to rebuild the tree.// is atomic.// Invoke the set() operation// Builds the request tree: creation is allowed, operation// check() method.// Invoke the check() operation// Optimization: we're going to pass the whole SnmpRequestTree// to the "set" method, so that we don't have to rebuild it there./** Processes a <CODE>getNext</CODE> operation. */// Build the request tree for the operation// The subrequest stored in the request tree are valid GET requests// Now invoke get() for each subrequest of the request tree.// Invoke the get() operation/** Processes a <CODE>getBulk</CODE> operation. ... */// Ask the tree to do the job !// Now format the result//---------------------------------------------------------------------/** This method builds the temporary request-tree that will be used to ... */// Build an empty request tree// For each varbind in the list finds its handling node.// Find the handling node for this varbind.// If the operation is atomic (Check/Set) or the version// is V1 we must generate an exception.// The index in the exception must correspond to the// SNMP index ...// Should never come here...// Creates an empty request tree, no entry creation is allowed (false)// Sets the getNext flag: if version=V2, status exception are// transformed in  endOfMibView// For each varbind, finds the handling node.// This function has the side effect of transforming a GET-NEXT// request into a valid GET request, replacing the OIDs in the// original GET-NEXT request with the OID of the first leaf that// follows.// Find the node handling the OID that follows the varbind// OID. `result' contains this next leaf OID.//ACM loop.// We replace the varbind original OID with the OID of the// leaf object we have to return.// if (isDebugOn())//    debug("getGetNextHandlers",//        "Couldn't find a handling node for "//        + var.oid.toString());// PROTECTED VARIABLES/** The top element in the Mib tree. ... *//** The root object identifier of the MIB. *//** Abstract class for representing an SNMP agent. ... */// ---------------------------------------------------------------------//----------------------------------------------------------------------/** Not used in this context. *//** Processes a <CODE>get</CODE> operation. ... *//** Processes a <CODE>getNext</CODE> operation. ... *//** Processes a <CODE>set</CODE> operation. ... */// GETTERS AND SETTERS/** Gets the reference to the MBean server in which the SNMP MIB is ... *//** Gets the reference to the SNMP protocol adaptor to which the MIB is ... *//** Sets the reference to the SNMP protocol adaptor through which the MIB ... *//** Gets the object name of the SNMP protocol adaptor to which the MIB ... */// First remove the reference on the old adaptor server.// Then update the reference to the new adaptor server.// Should never occur.../** Indicates whether or not the MIB module is bound to a SNMP protocol ... *//** Gets the MIB name. ... *//** This is a factory method for creating new SnmpMibRequest objects. ... */// PACKAGE METHODS/** Processes a <CODE>getBulk</CODE> operation using call to ... */// RFC 1905, Section 4.2.3, p14// Let's build the varBindList for the response pdu// int errorStatus = SnmpDefinitions.snmpRspNoError ;// int errorIndex = 0 ;// Non-repeaters and first row of repeaters// Now the remaining repeaters/** This method creates a new Vector which does not contain the first ... */// Ok the loop looks a bit strange. But in order to improve the// perf, we try to avoid reference to the limit variable from// within the loop ...// We need to duplicate the SnmpVarBind otherwise it is going// to be overloaded by the next get Next .../** The object name of the MIB. ... *//** The reference to the MBean server. ... *//** The object name of the SNMP protocol adaptor. ... *//** The reference to the SNMP stack. *//** Exposes the remote management interface of the <CODE>SnmpMibAgent</CODE> MBean. ... *//** Sets the reference to the SNMP protocol adaptor through which the ... *//** Gets the object name of the SNMP protocol adaptor to which the MIB is ... *//** Represents a node in an SNMP MIB which corresponds to a table entry ... *//** Tells whether the given arc identifies a variable (scalar object) in ... *//** Tells whether the given arc identifies a readable scalar object in ... *//** Get the next OID arc corresponding to a readable scalar variable. *//** Checks whether the given OID arc identifies a variable (columnar ... *//** Generic handling of the <CODE>get</CODE> operation. ... *//** Generic handling of the <CODE>set</CODE> operation. ... *//** Generic handling of the <CODE>check</CODE> operation. ... *//** Represents a node in an SNMP MIB which corresponds to a group. ... */// We will register the OID arcs leading to subgroups in this hashtable.// So for each arc in varList, if the arc is also in subgroups, it leads// to a subgroup, if it is not in subgroup, it leads either to a table// or to a variable./** Tells whether the given arc identifies a table in this group. ... *//** Gets the table identified by the given `arc'. ... *//** Checks whether the given OID arc identifies a variable (scalar ... */// -------------------------------------------------------------------// We use a hashtable (subgroup) in order to determine whether an// OID arc leads to a subgroup. This implementation can be changed if// needed...// For instance, the subclass could provide a generated isNestedArc()// method in which the subgroup OID arcs would be hardcoded.// However, the generic approach was preferred because at this time// groups and subgroups are dynamically registered in the MIB./** Tell whether the given OID arc identifies a sub-tree ... */// if the arc is registered in the hashtable,// it leads to a subgroup.// If we reach this node, we are below the root OID, so we just// return.// This method can also be overriden in a subclass to provide a// different implementation of the isNestedArc() method.// => if isNestedArc() is hardcoded, then registerSubArc() becomes//    useless and can become empty./** Register an OID arc that identifies a sub-tree ... */// registers the arc in the hashtable.// The SnmpMibOid algorithm relies on the fact that for every arc// registered in varList, there is a corresponding node at the same// position in children.// So the trick is to register a null node in children for each variable// in varList, so that the real subgroup nodes can be inserted at the// correct location.// registerObject() should be called for each scalar object and each// table arc by the generated subclass./** Register an OID arc that identifies a scalar object or a table. ... */// this will register the variable in both varList and children// The node registered in children will be null, so that the parent// algorithm will behave as if no node were registered. This is a// trick that makes the parent algorithm behave as if only subgroups// were registered in varList and children.// registerNode() will be called at runtime when nested groups are// registered in the MIB. So we do know that this method will only// be called to register nested-groups.// We trap registerNode() in order to call registerSubArc()/** Register a child node of this node in the OID tree. ... */// if we get here, then it means we are registering a subgroup.// We will thus register the sub arc in the subgroups hashtable.// see comments in SnmpMibNode// Nothing is left... the oid is not valid// This arc leads to a subgroup: delegates the search to the// method defined in SnmpMibOid// This arc leads to a table: forward the search to the table.// Gets the table// Forward the search to the table// If it's not a variable, throws an exception// The trailing .0 is missing in the OID// There are too many arcs left in the OID (there should remain// a single trailing .0)// The last trailing arc is not .0// It's one of our variable, register this node.// See comments in SnmpMibNode.// This should be considered as a genErr, but we do not want to// abort the whole request, so we're going to throw// a noSuchObject...// The generic case where the end of the OID has been reached is// handled in the superclass// XXX Revisit: this works but it is somewhat convoluted. Just setting//              arc to -1 would work too.// Ok, we've got the arc.// We have a recursive logic. Should we have a loop instead?// If the arc identifies a table, then we need to forward// the search to the table.// Gets the table identified by `arc'// Forward to the table// Build up the leaf OID// If the arc identifies a readable variable, then two cases:// The end of the OID is reached, so we return the leaf// corresponding to the variable identified by `arc'// Build up the OID// result = new SnmpOid(0);// result.insert((int)arc);// Registers this node// The end of the OID is not yet reached, so we must return// the next leaf following the variable identified by `arc'.// We cannot return the variable because whatever follows in// the OID will be greater or equals to 0, and 0 identifies// the variable itself - so we have indeed to return the// next object.// So we do nothing, because this case is handled at the// end of the if ... else if ... else ... block.// Now if the arc leads to a subgroup, we delegate the// search to the child, just as done in SnmpMibNode.// get the child ( = nested arc node).// The oid is not valid, we will throw an exception in order// to try with the next valid identifier...// We didn't find anything at the given arc, so we're going// to try with the next valid arc/** The logical link between an SNMP MIB and the SNMP communication stack. ... *//** Adds a new MIB in the SNMP MIB handler. ... *//** Adds a new contextualized MIB in the SNMP MIB handler. ... *//** Removes the specified MIB from the SNMP protocol adaptor. ... *//** The <CODE>SnmpMibNode</CODE> class represents a node in an SNMP MIB. ... *//** Get the next OID arc corresponding to a readable scalar variable, ... *//** Hook for subclasses. ... *//** Find the node which handles a varbind, and register it in the ... *//** Find the node which handles the leaf that immediately follows the ... *//** Sorts the specified integer array. ... *//** Computes the root OID of the MIB. *//** This is a generic version of C.A.R Hoare's Quick Sort ... *//* Arbitrarily establishing partition element as the midpoint of ... */// loop through the array until indices cross/* find the first element that is greater than or equal to ... *//* find an element that is smaller than or equal to ... */// if the indexes have not crossed, swap/* If the right index has not reached the left side of array ... *//* If the left index has not reached the right side of array ... */// PROTECTED METHODS/** This will give the first element greater than <CODE>value</CODE> ... */// Basic check// We ned to get the next index .../** Contains the list of variable identifiers. *//** Represents a node in an SNMP MIB which is neither a group nor a variable. ... */// Implements the method defined in SnmpMibNode.// The oid is not complete...// Some children variable or subobject is being querried// getChild() will raise an exception if no child is found.// XXXX zzzz : what about null children?//             (variables for nested groups)// if child==null, then we're dealing with a variable or// a table: we register this node.// This behaviour should be overriden in subclasses,// in particular in group meta classes: the group// meta classes that hold tables should take care// of forwarding this call to all the tables involved.// search the element specified in the oid// SnmpOid result = null;// shouldn't happen// validateVarId(index);// handlers.add(this,varbind,depth);// If there is no such element go one level up ...// There is no need to carry the original oid ...// If a node has several children, let assume that we are one step to// far in order to get the MIB root.// Now query our child./** Registers a specific node in the tree. */// Check if the node is already defined//System.out.println("entering registration for val="// + String.valueOf(var) + " position= " + cursor);// That 's the end of the trip.// Do not forward the registration//System.out.println("End of trip for val="//      + String.valueOf(var) + " position= " + cursor);//System.out.println("Create node for val="//       + String.valueOf(var) + " position= " + cursor);// The node is not yet registered//     + String.valueOf(var) + " position= " + cursor);// System.out.println("Create node for val=" +//     String.valueOf(var) + " position= " + cursor);// The node is already registered//System.out.println("Node already registered val=" +//          String.valueOf(var) + " position= " + cursor);// Now we're going to patch the tree the following way://   if a subgroup has been registered before its father,//   we're going to replace the father OID node with//   the actual group-node and export the children from//   the temporary OID node to the actual group node.// `node' is a group => replace `child' with `node'// export the child's subtree to `node'.// `node' is a temporary node, and `child' is a//  group => keep child and export the node's//  subtree to `child'.// `node' and `child' are both temporary OID nodes// => replace `child' with `node' and export child's// subtree to `node'./** Export this node's children to a brother node that will replace ... */// first we need to retrieve the identifier in the list of children// Access the node// We need to get the next index ...//final int[] v = varList;//if (index > a[max])//return max +1;// never know ...we might find something .../** Contains the list of sub nodes. *//** The number of sub nodes. */// All the methods of the Vector class are synchronized.// Synchronization is a very expensive operation. In our case it is// not always required...// We will never serialize this// cast to E/** This interface models the part of a SNMP request that involves ... *//** Returns the list of varbind to be handled by the SNMP mib node. ... *//** Returns the vector of varbind to be handled by the SNMP mib node. ... *//** Returns the SNMP protocol version of the original request. If SNMP V1 request are received, the version is upgraded to SNMP V2. ... *//** Returns the SNMP protocol version of the original request. No translation is done on the version. The actual received request SNMP version is returned. ... *//** Returns the local engine. This parameter is returned only if <CODE> SnmpV3AdaptorServer </CODE> is the adaptor receiving this request. Otherwise null is returned. ... *//** Gets the incoming request principal. This parameter is returned only if <CODE> SnmpV3AdaptorServer </CODE> is the adaptor receiving this request. Otherwise null is returned. ... *//** Gets the incoming request security level. This level is defined in {@link com.sun.jmx.snmp.SnmpEngine SnmpEngine}. This parameter is returned only if <CODE> SnmpV3AdaptorServer </CODE> is the adaptor receiving this request. Otherwise -1 is returned. ... *//** Gets the incoming request security model. This parameter is returned only if <CODE> SnmpV3AdaptorServer </CODE> is the adaptor receiving this request. Otherwise -1 is returned. ... *//** Gets the incoming request context name. This parameter is returned only if <CODE> SnmpV3AdaptorServer </CODE> is the adaptor receiving this request. Otherwise null is returned. ... *//** Gets the incoming request context name used by Access Control Model in order to allow or deny the access to OIDs. This parameter is returned only if <CODE> SnmpV3AdaptorServer </CODE> is the adaptor receiving this request. Otherwise null is returned. ... *//** Returns a handle on a user allocated contextual object. ... *//** Returns the varbind index that should be embedded in an ... *//** Adds a varbind to this request sublist. This method is used for ... *//** Returns the number of elements (varbinds) in this request sublist. ... *//** Returns the SNMP PDU attached to the request. ... *//** This class implements the SnmpMibRequest interface. ... */// PUBLIC METHODS from SnmpMibRequest// Implements the method defined in SnmpMibRequest interface.// See SnmpMibRequest for the java doc.// Allow to pass the request tree built during the check() phase// to the set() method. Note: the if the tree is `null', then the// set() method will rebuild a new tree identical to the tree built// in the check() method.// Passing this tree in the SnmpMibRequestImpl object allows to// optimize the SET requests.// Returns the SnmpRequestTree object built in the first operation// phase for two-phase SNMP requests (like SET).// Returns the underlying vector of SNMP varbinds (used for algorithm// optimization).// Private variables// Ideally these variables should be declared final but it makes// the jdk1.1.x compiler complain (seems to be a compiler bug, jdk1.2// is OK).// Non final variable.// import com.sun.jmx.snmp.SnmpIndex;/** This interface models an SNMP sub request to be performed on a specific ... *//** Return the list of varbind to be handled by the SNMP MIB node. ... *//** Return the part of the OID identifying the table entry involved. ... *//** Indicate whether the entry involved is a new entry. ... *//** Return the varbind that holds the RowStatus variable. ... *//** This method should be called when a status exception needs to ... *//** This class is the base class for SNMP table metadata. ... *//** Create a new <CODE>SnmpMibTable</CODE> metadata node. ... *//** This method is invoked when the creation of a new entry is requested ... *//** Tell whether the specific version of this metadata generated ... *//** Tell whether a new entry should be created when a SET operation ... *//** This method lets you dynamically switch the creation policy. ... *//** Return <code>true</code> if the conceptual row contains a columnar ... */// each varbind involved (nb: should not happen, the error// should have been registered earlier)// SnmpIndex   index  = buildSnmpIndex(oid.longValue(false), 0);// get(req,index,depth+1);/** Add a new entry in this <CODE>SnmpMibTable</CODE>. ... */// public void addEntry(SnmpIndex index, Object entry)// protected synchronized void addEntry(SnmpIndex index, ObjectName name,//                                      Object entry)//            indexes.addElement(index);// XX oids.addElement(oid);// triggers callbacks on the entry factory// sends the notifications// Get the insertion position ...// bug jaw.00356.B : use oid rather than index to get the// insertion point.// Add a new element in the vectors ...// Insert new element ...//                indexes.insertElementAt(index, pos);// XX oids.insertElementAt(oid, pos);/** Remove the specified entry from the table. ... *//** Get the entry corresponding to the specified rowOid. ... *//** Get the ObjectName of the entry corresponding to the ... *//** Return the entries stored in this table <CODE>SnmpMibTable</CODE>. ... *//** Get the size of the table. ... */// EVENT STUFF//------------/** Enable to add an SNMP entry listener to this ... */// looking for listener in handbackTable// Add the handback and the filter/** Enable to remove an SNMP entry listener from this ... */// If handback is null, remove the listener entry/** Return a <CODE>NotificationInfo</CODE> object containing the ... *//** Register the factory through which table entries should ... */// PROTECTED METHODS - RowStatus/** Return true if the columnar object identified by <code>var</code> ... *//** Return the RowStatus code value specified in this request. ... *//** Map the value of the <code>vbstatus</code> varbind to the ... *//** Set the control variable to the specified <code>newStatus</code> ... *//** Tell whether the specified row is ready and can be put in the ... *//** Check whether the control variable of the given row can be ... *//** Check whether the specified row can be removed from the table. ... *//** Remove a table row upon a remote manager request. ... *//** This method takes care of initial RowStatus handling during the ... *//** This method takes care of final RowStatus handling during the ... */// PROTECTED METHODS - get next/** Return the next OID arc corresponding to a readable columnar ... *//** Get the <CODE>SnmpOid</CODE> index of the row that follows ... */// Just a simple check to speed up retrieval of last element ...// XX SnmpOid last= (SnmpOid) oids.lastElement();// Last element of the table ...// First find the oid. This will allow to speed up retrieval process// during smart discovery of table (using the getNext) as the// management station will use the valid index returned during a// previous getNext ...// Returns the position following the position at which resOid// is found, or the position at which resOid should be inserted.// If the position returned is not out of bound, we will find// the next element in the array.// XX last = (SnmpOid) oids.elementAt(newPos);// We are dealing with the last element of the table ../** Return the first entry OID registered in the table. ... */// XX return (SnmpOid) oids.firstElement();// Abstract Protected Methods/** This method is used internally and is implemented by the ... *//** Get the <CODE>SnmpOid</CODE> index of the row that follows the ... */// Construct the sub-oid starting at pos.// This sub-oid correspond to the oid part just after the entry// variable oid.// Register an exception when checking the RowStatus variable// Checks that the oid is valid// validateOid(oid,depth);// Gets the part of the OID that identifies the entry// Finds the entry: false means that the entry does not exists// Fails if the entry is not found and the table does not// not support creation.// We know that the entry does not exists if (isentry == false).// we're not doing a set// we're doing a set but creation is disabled.// Validate the entry id// The entry already exists - validate the id// Registers this node for the identified entry.// We only try to identify the RowStatus for SET operations// Implements the method defined in SnmpMibNode. The algorithm is very// largely inspired from the original getNext() method.// If the querried oid contains less arcs than the OID of the// xxxEntry object, we must return the first leaf under the// first columnar object: the best way to do that is to reset// the queried oid://   oid[0] = nodeId (arc of the xxxEntry object)//   pos    = 0 (points to the arc of the xxxEntry object)// then we just have to proceed...// this will have the side effect to set//    oid[pos] = nodeId// and//    (pos+1) = length// so we won't fall into the "else if" cases below -// so using "else if" rather than "if ..." is guaranteed// to be safe.// oid[pos] is expected to be the id of the xxxEntry ...// The id requested is greater than the id of the xxxEntry,// so we won't find the next element in this table... (any// element in this table will have a smaller OID)// we must return the first leaf under the first columnar// object, so we are back to our first case where pos was// out of bounds... => reset the oid to contain only the// arc of the xxxEntry object.// The arc at the position "pos+1" is the id of the columnar// object (ie: the id of the variable in the table entry)// Now that we've got everything right we can begin.// pos points to the last arc in the oid, and this arc is// guaranteed to be the xxxEntry id (we have handled all// the other possibilities before)// We must therefore return the first leaf below the first// columnar object in the table.// Get the first index. If an exception is raised,// then it means that the table is empty. We thus do not// have to catch the exception - we let it propagate to// the caller.// In that case we have (pos+1) = (length-1), so pos// points to the arc of the querried variable (columnar object).// Since the requested oid stops there, it means we have// to return the first leaf under this columnar object.// So we first get the first index:// Note: if this raises an exception, this means that the table// is empty, so we can let the exception propagate to the caller.// XXX revisit: not exactly perfect://     a specific row could be empty.. But we don't know//     how to make the difference! => tradeoff holes//     in tables can't be properly supported (all rows//     must have the same holes)// So now there remain one last case, namely: some part of the// index is provided by the oid...// We build a possibly incomplete and invalid index from// the OID.// The piece of index provided should begin at pos+2//   oid[pos]   = id of the xxxEntry object,//   oid[pos+1] = id of the columnar object,//   oid[pos+2] ... oid[length-1] = piece of index.// We get the next index following the provided index.// If this raises an exception, then it means that we have// reached the last index in the table, and we must then// try with the next columnar object.// Bug fix 4269251// The SnmpIndex is defined to contain a valid oid:// this is not an SNMP requirement for the getNext request.// So we no more use the SnmpIndex but directly the SnmpOid.// If the variable must ne skipped, fall through...// Loop on each var (column)// This should not happen. If it happens, (bug, or customized// methods returning garbage instead of raising an exception),// it probably means that there is nothing to return anyway.// So we throw the exception.// => will skip to next node in the MIB tree.// So here we know both the row (entryoid) and the column (var)// Raising an exception here will make the catch() clause// switch to the next variable. If `var' is not readable// for this specific entry, it is not readable for any// other entry => skip to next column.// Prepare the result and the ACM checker.// Bug detector!// Copy the entryOid at the end of `result'// Set the node Id and var Id in result.// Append nodeId.varId.<rowOid> to ACM checker.// No we're going to ACM check our OID.// No exception thrown by checker => this is all OK!// we have it: register the handler and return the// result.// Skip to the next entry. If an exception is// thrown, will be catch by enclosing catch// and a skip is done to the next var.// Clean the checker.// Catching an exception here means we have to skip to the// next column.// Back to the first row.// Find out the next column.// No need to continue, we throw an exception./** Validate the specified OID. ... */// Control the length of the oid// Check that the entry identifier is specified/** Enable this <CODE>SnmpMibTable</CODE> to send a notification. ... */// loop on listener// Get the associated handback list and the associated filter list// loop on handback/** This method is used by the SnmpMibTable to create and send a table ... *//** Return true if the entry identified by the given OID index ... *//** Look for the given oid in the OID table (tableoids) and returns ... *///System.out.println("Try to retrieve: " + oid.toString());// XX pos = (SnmpOid) oids.elementAt(curr);//System.out.println("Compare with" + pos.toString());/** Search the position at which the given oid should be inserted ... */// XX pos= (SnmpOid) oids.elementAt(curr);/** Remove the OID located at the given position. ... *//** Insert an OID at the given position. ... */// Vector must be enlarged// Save old vector// Allocate larger vectors// Check pos validity// Copy original vector up to `pos'// Copy original vector from `pos' to end, leaving// an empty room at `pos' in the new vector.// Vector is large enough to accommodate one additional// entry.// Shift vector, making an empty room at `pos'// Fill the gap at `pos'/** The id of the contained entry object. ... *//** The MIB to which the metadata is linked. ... *//** <CODE>true</CODE> if remote creation of entries via SET operations ... *//** The entry factory *//** The number of elements in the table. ... *//** The list of indexes. ... *///    private Vector indexes= new Vector();// private Vector oids= new Vector();/** The list of entries. ... *//** The list of object names. ... *//** Callback handlers */// final Vector callbacks = new Vector();/** Listener hashtable containing the hand-back objects. *//** Listener hashtable containing the filter objects. */// PACKAGE VARIABLES/** SNMP table sequence number. ... *///  XXX: things to do: use SnmpOid rather than `instance' for future//       evolutions.//  XXX: Maybe use hashlists rather than vectors for entries?//       => in that case, the key should be SnmpOid.toString()/** This class is used to register varbinds from a SNMP varbind list with ... */// Constructor:// @param  req The SnmpMibRequest that will be segmented in this//         tree. It holds the original varbind vector passed//         by the SnmpSubRequestHandler to this MIB. This//         varbind vector is used to retrieve the "real"//         position of a varbind in the vector. There is no other easy//         way to do this - since as a result of the segmentation the//         original positions will be lost.// @param  creationflag indicates whether the operation involved//         allows for entry creation (ie: it is a SET request).// @param  pdutype indicates the type of the request PDU as defined//         in SnmpDefinitions// Now take care of V2 errorCodes that can be stored// in the varbind itself:// noSuchObject => notWritable// noSuchInstance => notWritable// noSuchObject => noSuchObject// noSuchInstance => noSuchInstance// Now we're going to try to transform every other// global code in either noSuchInstance or noSuchObject,// so that the get can return a partial result.// Only noSuchInstance or noSuchObject can be stored// in the varbind itself.// According to RFC 1905: noAccess is emitted when the// the access is denied because it is not in the MIB view...// noAccess => noSuchInstance// According to RFC 1905: (my interpretation because it is not// really clear) The specified variable name exists - but the// variable does not exists and cannot be created under the// present circumstances (probably because the request specifies// another variable/value which is incompatible, or because the// value of some other variable in the MIB prevents the creation)// Note that this error should never be raised in a GET context// but who knows?// inconsistentName => noSuchInstance// All the errors comprised between snmpRspWrongType and// snmpRspInconsistentValue concern values: so we're going// to assume the OID was correct, and reply with noSuchInstance.// We're going to assume the OID was correct, and reply// with noSuchInstance.// For all other errors but genErr, we're going to reply with// noSuchObject// Only genErr will abort the GET and be returned as global//-------------------------------------------------------------------// This class is a package implementation of the enumeration of// SnmSubRequest associated with an Handler node.// This class is a package implementation of the SnmpMibSubRequest// interface. It can only be instantiated by SnmpRequestTree.// -------------------------------------------------------------// XXX not sure we must also add the varbind in the global//     request? or whether we should raise an exception://     in principle, this method should not be called!// Implements the method defined in SnmpMibSubRequest interface.// See SnmpMibSubRequest for the java doc.// The index in the exception must correspond to// the SNMP index ...// If we're doing a getnext ==> endOfMibView// Although the first pass of check() did not fail,// the set() phase could not be carried out correctly.// Since we don't know how to make an "undo", and some// assignation may already have been performed, we're going// to throw an snmpRspUndoFailed.// We throw the exception in order to abort the SET operation// in an atomic way.// This class implements a node in the SnmpRequestTree.// It stores://    o The SnmpMibNode involved (key)//    o The sublist of varbind directly handled by this node//    o A vector of sublists concerning the entries (existing or not)//      of the SnmpMIbNode (when it is a table).// The meta  which handles the sublist.// The depth of the meta node.// The sublist of varbinds to be handled.// List        entryoids;  // Sorted array of entry oids// List        entrylists; // Sorted array of entry lists// List        isentrynew; // Sorted array of booleans// Sorted array of entry oids// Sorted array of entry lists// Sorted array of booleans// RowStatus varbind, if any// request PDU type as defined in SnmpDefinitions/** Adds a varbind in this node sublist. *//** register an entry for the given oid at the given position with ... */// We need this because of new Vector[n] instead of// new Vector<SnmpVarBind>[n], which is illegal.// Vectors are null: Allocate new vectors// Vectors must be enlarged// Save old vectors// Copy original vectors up to `pos'// Copy original vectors from `pos' to end, leaving// an empty room at `pos' in the new vectors.// Vectors are large enough to accommodate one additional// Shift vectors, making an empty room at `pos'//              entryoids = new ArrayList();//              entrylists = new ArrayList();//              isentrynew = new ArrayList();//              entryoids.add(entryoid);//              entrylists.add(v);//              isentrynew.add(new Boolean(isnew));// int pos = findOid(entryoids,entryoid);// int pos = findOid(entryoids,entrycount,entryoid);// if (pos == -1 || pos >= entryoids.size() ) {// if (pos == -1 || pos >= entrycount ) {// pos = getInsertionPoint(entryoids,entryoid);// pos = getInsertionPoint(entryoids,entrycount,entryoid);//                  entryoids.add(pos,entryoid);//                  entrylists.add(pos,v);//                  isentrynew.add(pos,new Boolean(isnew));//              } else v = (Vector) entrylists.get(pos);// } else v = entrylists[pos];// We do not include the status variable in the varbind,// because we're going to set it separately...//          if (entryoids != null) count += entryoids.size();// return findOid(entryoids,entryoid);// if (pos == -1 || pos >= entryoids.size() ) return null;// return (SnmpOid) entryoids.get(pos);// if (pos == -1 || pos >= entryoids.size() ) return false;// return ((Boolean)isentrynew.get(pos)).booleanValue();// if (pos == -1 || pos >= entrylists.size() ) return null;// return (Vector) entrylists.get(pos);// return entryoids.iterator();// return entryoids.size();// Public interface// Returns the contextual object containing user-data allocated// through the SnmpUserDataFactory for this request.// Tells whether creation of new entries is allowed with respect// to the operation involved (GET=>false/SET=>true)// Tells whether we are currently processing a SET request (check/set)// Returns the protocol version in which the original request is// evaluated.// Returns the actual protocol version of the request PDU.// Returns the SnmpMibNode associated with the given handler// Indicates the depth of the arc in the OID that identifies the// SnmpMibNode associated with the given handler// returns an enumeration of the SnmpMibSubRequest's to be invoked on// the SnmpMibNode associated with a given Handler node.// If this node is a group, there will be a single subrequest.// If it is a table, there will be one subrequest per entry involved.// returns an enumeration of the Handlers stored in the Hashtable.// adds a varbind to a handler node sublist// adds an entry varbind to a handler node sublist// adds an entry varbind to a handler node sublist - specifying the// varbind which holds the row status// Protected interface// Type of the request (see SnmpDefinitions)// We deal with a GET-NEXT request// Tell whether creation is allowed.// Returns the subrequest handled by the SnmpMibNode itself// (in principle, only for Groups)// Returns the subrequest associated with the entry identified by// the given entry (only for tables)// the given entry (only for tables). The `entry' parameter is an// index relative to the position of the entry in the handler sublist.// Private section// stores a handler node in the Hashtable// finds a handler node in the Hashtable// Search for the given oid in `oids'. If none is found, returns -1// otherwise, returns the index at which the oid is located.// Return the index at which the given oid should be inserted in the// `oids' array.// In the calling method we will have to check for this case...//    if (comp == 0)//       return -1;// Returning curr instead of -1 avoids having to call// findOid() first and getInsertionPoint() afterwards.// We can simply call getInsertionPoint() and then checks whether// there's an OID at the returned position which equals the// given OID.// adds a varbind in a handler node sublist// retrieve the handler node associated with the given meta,// If no handler node was found for that meta, create one.//    debug("registerNode", "adding node for " +//          varbind.oid.toString());// else {//   if (isDebugOn())//      debug("registerNode","found node for " +//            varbind.oid.toString());// Adds the varbind in the handler node's sublist.// Hashtable of Handler objects// The original list of varbinds// The protocol version// Does the operation allow// creation of entries// Request PDU type as defined// in SnmpDefinitions// True if we're processing a// SET request (check/set)./** Returns the value of the scalar object identified by the given ... *//** Sets the value of the scalar object identified by the given ... *//** Checks that the new desired value of the scalar object identified ... */// SNMP Runtime imports/** This interface ensures the synchronization between Metadata table objects ... *//** This method is called by the SNMP runtime after a new entry ... *//** This interface is implemented by mibgen generated table objects ... *//** This method is called by the SNMP runtime whenever a new entry ... *//** Represents a notification emitted when an ... *//** Creates and initializes a table entry notification object. ... *//** Gets the entry object. ... *//** Gets the ObjectName of the entry. ... *//** Notification type denoting that a new entry has been added to the ... *//** Notification type denoting that an entry has been removed from the ... *//** The entry object. ... *//** The entry name. ... */// Ensure compatibility/** This class is an abstraction for an SNMP table. ... */// NPCTE fix for bugId 4499265, esc 0, MR 04 sept 2001//  SnmpTableCallbackHandler {// end of NPCTE fix for bugId 4499265//-----------------------------------------------------------------//  Protected Variables/** The list of entries *//** The associated metadata object *//** The MIB to which this table belongs *///  Private Variables/** This variable is initialized while binding this object to its ... *///  Constructor/** Initializes the table. ... *///  Implementation of the SnmpTableEntryFactory interface/** Creates a new entry in the table. ... *///  Public methods/** Returns the entry located at the given position in the table. ... */// XXXX xxxx zzz ZZZZ => public? or protected?/** Returns the number of entries registered in the table. ... *//** Tells whether a new entry should be created when a SET operation ... *//** Tells whether the metadata object to which this table is linked ... *//** Builds an entry SnmpIndex from its row OID. ... *//** Builds an SnmpOid from an SnmpIndex object. ... *//** Builds the default ObjectName of an entry from the SnmpIndex ... *//** This callback is called by  the associated metadata object ... *//** Enables to add an SNMP entry listener to this ... *//** Enables to remove an SNMP entry listener from this ... *//** Returns a <CODE>NotificationInfo</CODE> object containing the ... *///  Protected Abstract methods/** Builds an SnmpIndex object from the index part of an OID. ... *//** Returns the metadata object associated with this table. ... *///  Protected methods/** Allocates an ArrayList for storing table entries. ... *//** Add an entry in this table. ... *//** Remove an entry from this table. ... */// protected void removeEntry(ObjectName name, Object entry)//  throws SnmpStatusException {//  meta.removeEntry(name,entry);/** Returns the entries in the table. ... *//** Binds this table with its associated metadata, registering itself ... *//** This interface is provided to enable fine customization of the SNMP ... *//** Called by the <CODE>SnmpAdaptorServer</CODE> adaptor. ... *//* Copyright (c) 1999, 2006, Oracle and/or its affiliates. All rights reserved. ... */// jmx RI import/** The <CODE>ClientHandler</CODE> class is the base class of each ... *///if (mbs == null ){//thread = new Thread (this) ;//} else {//thread = mbs.getThreadAllocatorSrvIf().obtainThread(objectName,this) ;// Note: the thread will be started by the subclass.// thread service// Notify the server we are now active// Call protocol specific sequence// Now notify the adaptor server that the handler is terminating.// This is important because the server may be blocked waiting for// a handler to terminate.// The protocol-dependent part of the request/** Represents exceptions raised due to communications problems, ... *//* Serial version *//** Constructs a CommunicationException with a target exception. *//** Constructs a CommunicationException with a target exception ... *//** Constructs a CommunicationException with a detail message. *//** Get the thrown target exception. */// JSR 160 import// XXX Revisit://   used to import com.sun.jmx.snmp.MBeanServerForwarder// Now using JSR 160 instead. => this is an additional// dependency to JSR 160./** Defines generic behavior for the server part of a connector or an adaptor. ... */// States of a CommunicatorServer/** Represents an <CODE>ONLINE</CODE> state. *//** Represents an <CODE>OFFLINE</CODE> state. *//** Represents a <CODE>STOPPING</CODE> state. *//** Represents a <CODE>STARTING</CODE> state. */// Types of connectors./** Indicates that it is an RMI connector type. *///public static final int RMI_TYPE = 1 ;/** Indicates that it is an HTTP connector type. *///public static final int HTTP_TYPE = 2 ;/** Indicates that it is an HTML connector type. *///public static final int HTML_TYPE = 3 ;/** Indicates that it is an SNMP connector type. *//** Indicates that it is an HTTPS connector type. *///public static final int HTTPS_TYPE = 5 ;// Package variables/** The state of the connector server. *//** The object name of the connector server. ... *//** The maximum number of clients that the CommunicatorServer can ... *//** The host name used by this CommunicatorServer. ... *//** The port number used by this CommunicatorServer. ... */// Private fields/* This object controls access to the "state" and "interrupted" variables. ... */// Notifs count, broadcaster and info/** Instantiates a <CODE>CommunicatorServer</CODE>. ... *///No op. int Type deciding debugging removed./** Starts this <CODE>CommunicatorServer</CODE>. ... */// Fix for bug 4352451://     "java.net.BindException: Address in use".// cannot happen because of `0'/** Stops this <CODE>CommunicatorServer</CODE>. ... */// Stop the connector thread// Call terminate on each active client handler// ----------------------// changeState/** Tests whether the <CODE>CommunicatorServer</CODE> is active. ... *//** <p>Waits until either the State attribute of this MBean equals the ... */// timeOut == 0/** <p>Waits until the communicator is started or timeout expires. ... */// Time elapsed since startTime...// wait for timeout - elapsed.// A timeout of Long.MAX_VALUE is equivalent to something// like 292271023 years - which is pretty close to// forever as far as we are concerned ;-)// If remainingTime is negative, the timeout has elapsed.// We're going to wait until someone notifies on the// the stateLock object, or until the timeout expires,// or until the thread is interrupted.// If we are now ONLINE, then no need to rethrow the// exception... we're simply going to exit the while// loop. Otherwise, throw the InterruptedException.// We're no longer in STARTING state// OK, we're started, everything went fine, just return// There was some exception during the starting phase.// Cast and throw...// Wrap and throw...// We're not ONLINE, and there's no exception...// Something went wrong but we don't know what.../** Gets the state of this <CODE>CommunicatorServer</CODE> as an integer. ... *//** Gets the state of this <CODE>CommunicatorServer</CODE> as a string. ... *//** Gets the host name used by this <CODE>CommunicatorServer</CODE>. ... *//** Gets the port number used by this <CODE>CommunicatorServer</CODE>. ... *//** Sets the port number used by this <CODE>CommunicatorServer</CODE>. ... *//** Gets the protocol being used by this <CODE>CommunicatorServer</CODE>. ... *//** Gets the number of clients that have been processed by this ... *//** Gets the number of clients currently being processed by this ... *//** Gets the maximum number of clients that this ... *//** Sets the maximum number of clients this ... *//** The number of times the communicator server will attempt ... *//** The delay, in ms, during which the communicator server will sleep before ... *//** For SNMP Runtime internal use only. ... */// Fix jaw.00667.B// It seems that the init of "i" and "success"// need to be done outside the "try" clause...// A bug in Java 2 production release ?// Bind// Fix for bug 4352451: "java.net.BindException: Address in use".// Try socket connection.// Retry last time to get correct exception.// State change// unBind// To be defined by the subclass.// Each method below is called by run() and must be subclassed.// If the method sends an exception (Communication or Interrupt), this// will end up the run() method and switch the connector offline.// If it is a CommunicationException, run() will call//       Debug.printException().// All these methods should propagate the InterruptedException to inform// run() that the connector must be switch OFFLINE.// doBind() should do all what is needed before calling doReceive().// If doBind() throws an exception, doUnbind() is not to be called// and run() ends up./** <CODE>doReceive()</CODE> should block until a client is available. ... *//** <CODE>doProcess()</CODE> is called after <CODE>doReceive()</CODE>: ... *//** <CODE>doUnbind()</CODE> is called whenever the connector goes ... *//** Get the <code>MBeanServer</code> object to which incoming requests are ... *//** Set the <code>MBeanServer</code> object to which incoming ... */// To be called by the subclass if needed/** For internal use only. *//** Returns the string used in debug traces. *//** Returns the string used to name the connector thread. *//** This method blocks if there are too many active clients. ... *//** This method blocks until there is no more active client. */// The ClientHandler will remove themselves from the// clientHandlerVector at the end of their run() method, by// calling notifyClientHandlerDeleted().// Since the clientHandlerVector is modified by the ClientHandler// threads we must avoid using Enumeration or Iterator to loop// over this array. We must also take care of NoSuchElementException// which could be thrown if the last ClientHandler removes itself// between the call to clientHandlerVector.isEmpty() and the call// to clientHandlerVector.firstElement().// What we *MUST NOT DO* is locking the clientHandlerVector, because// this would most probably cause a deadlock./** Call <CODE>interrupt()</CODE> on each pending client. */// over this array.// We cannot use the same logic here than in waitClientTermination()// because there is no guarantee that calling interrupt() on the// ClientHandler will actually terminate the ClientHandler.// Since we do not want to wait for the actual ClientHandler// termination, we cannot simply loop over the array until it is// empty (this might result in calling interrupt() endlessly on// the same client handler. So what we do is simply take a snapshot// copy of the vector and loop over the copy./** Controls the way the CommunicatorServer service is deserialized. */// Call the default deserialization of the object.// Call the specific initialization for the CommunicatorServer service.// This is for transient structures to be initialized to specific// default values.// NotificationBroadcaster/** Adds a listener for the notifications emitted by this ... *//** Removes the specified listener from this CommunicatorServer. ... *//** Returns an array of MBeanNotificationInfo objects describing ... */// Initialize notifInfos on first call to getNotificationInfo()// source// sequence number// time stamp// message// attribute name// attribute type// old value// new value// MBeanRegistration/** Preregister method of connector. ... *//** Stop the connector. ... *//** Do nothing. *//** Defines generic behaviour for the server ... *//** Tests if the <CODE>CommunicatorServer</CODE> is active. ... *//** Waits untill either the State attribute of this MBean equals the specified <VAR>state</VAR> parameter, ... *//** Implements an adaptor on top of the SNMP protocol. ... *//** Port number for sending SNMP traps. ... *//** Port number for sending SNMP inform requests. ... *//** The <CODE>InetAddress</CODE> used when creating the datagram socket. ... *//** The IP address based ACL used by this SNMP protocol adaptor. *//** The factory object. *//** The user-data factory object. *//** Indicates if the SNMP protocol adaptor sends a response in case ... *//** Indicates if authentication traps are enabled. *//** The enterprise OID. ... *//** The buffer size of the SNMP protocol adaptor. ... *//** Whether ACL must be used. */// SENDING SNMP INFORMS STUFF//---------------------------/** Number of times to try an inform request before giving up. ... *//** The amount of time to wait for an inform response from the manager. ... */// VARIABLES REQUIRED FOR IMPLEMENTING SNMP GROUP (MIBII)//-------------------------------------------------------/** The <CODE>snmpOutTraps</CODE> value defined in MIB-II. *//** The <CODE>snmpOutGetResponses</CODE> value defined in MIB-II. *//** The <CODE>snmpOutGenErrs</CODE> value defined in MIB-II. *//** The <CODE>snmpOutBadValues</CODE> value defined in MIB-II. *//** The <CODE>snmpOutNoSuchNames</CODE> value defined in MIB-II. *//** The <CODE>snmpOutTooBigs</CODE> value defined in MIB-II. *//** The <CODE>snmpOutPkts</CODE> value defined in MIB-II. *//** The <CODE>snmpInASNParseErrs</CODE> value defined in MIB-II. *//** The <CODE>snmpInBadCommunityUses</CODE> value defined in MIB-II. *//** The <CODE>snmpInBadCommunityNames</CODE> value defined in MIB-II. *//** The <CODE>snmpInBadVersions</CODE> value defined in MIB-II. *//** The <CODE>snmpInGetRequests</CODE> value defined in MIB-II. *//** The <CODE>snmpInGetNexts</CODE> value defined in MIB-II. *//** The <CODE>snmpInSetRequests</CODE> value defined in MIB-II. *//** The <CODE>snmpInPkts</CODE> value defined in MIB-II. *//** The <CODE>snmpInTotalReqVars</CODE> value defined in MIB-II. *//** The <CODE>snmpInTotalSetVars</CODE> value defined in MIB-II. *//** The <CODE>snmpInTotalSetVars</CODE> value defined in rfc 1907 MIB-II. */// PUBLIC CONSTRUCTORS/** Initializes this SNMP protocol adaptor using the default port (161). ... *//** Initializes this SNMP protocol adaptor using the specified port. ... *//** Initializes this SNMP protocol adaptor using the default port (161) ... *//** Initializes this SNMP protocol adaptor using the specified port and the ... *//** Initializes this SNMP protocol adaptor using the specified IP ... *//** Initializes this SNMP protocol adaptor using the specified port, the ... */// If forceAcl is `true' and InetAddressAcl is null, then a default// SnmpAcl object is created.// Initialize the ACL implementation./** Gets the number of managers that have been processed by this ... *//** Gets the number of managers currently being processed by this ... *//** Gets the maximum number of managers that this SNMP protocol adaptor can ... *//** Sets the maximum number of managers this SNMP protocol adaptor can ... *//** Returns the Ip address based ACL used by this SNMP protocol adaptor. ... *//** Returns the port used by this SNMP protocol adaptor for sending traps. ... *//** Sets the port used by this SNMP protocol adaptor for sending traps. ... *//** Returns the port used by this SNMP protocol adaptor for sending ... *//** Sets the port used by this SNMP protocol adaptor for sending ... *//** Returns the protocol of this SNMP protocol adaptor. ... *//** Returns the buffer size of this SNMP protocol adaptor. ... *//** Sets the buffer size of this SNMP protocol adaptor. ... *//** Gets the number of times to try sending an inform request before ... *//** Changes the maximun number of times to try sending an inform ... *//** Gets the timeout to wait for an inform response from the manager. ... *//** Changes the timeout to wait for an inform response from the manager. ... *//** Returns the message factory of this SNMP protocol adaptor. ... *//** Sets the message factory of this SNMP protocol adaptor. ... *//** Set the user-data factory of this SNMP protocol adaptor. ... *//** Get the user-data factory associated with this SNMP protocol adaptor. ... *//** Returns <CODE>true</CODE> if authentication traps are enabled. ... *//** Sets the flag indicating if traps need to be sent in case of ... *//** Returns <code>true</code> if this SNMP protocol adaptor sends a ... *//** Sets the flag indicating if responses need to be sent in case of ... *//** Returns the enterprise OID. It is used by ... *//** Sets the enterprise OID. ... *//** Returns the names of the MIBs available in this SNMP protocol adaptor. ... */// GETTERS FOR SNMP GROUP (MIBII)//-------------------------------/** Returns the <CODE>snmpOutTraps</CODE> value defined in MIB-II. ... *//** Returns the <CODE>snmpOutGetResponses</CODE> value defined in MIB-II. ... *//** Returns the <CODE>snmpOutGenErrs</CODE> value defined in MIB-II. ... *//** Returns the <CODE>snmpOutBadValues</CODE> value defined in MIB-II. ... *//** Returns the <CODE>snmpOutNoSuchNames</CODE> value defined in MIB-II. ... *//** Returns the <CODE>snmpOutTooBigs</CODE> value defined in MIB-II. ... *//** Returns the <CODE>snmpInASNParseErrs</CODE> value defined in MIB-II. ... *//** Returns the <CODE>snmpInBadCommunityUses</CODE> value defined in MIB-II. ... *//** Returns the <CODE>snmpInBadCommunityNames</CODE> value defined in ... *//** Returns the <CODE>snmpInBadVersions</CODE> value defined in MIB-II. ... *//** Returns the <CODE>snmpOutPkts</CODE> value defined in MIB-II. ... *//** Returns the <CODE>snmpInPkts</CODE> value defined in MIB-II. ... *//** Returns the <CODE>snmpInGetRequests</CODE> value defined in MIB-II. ... *//** Returns the <CODE>snmpInGetNexts</CODE> value defined in MIB-II. ... *//** Returns the <CODE>snmpInSetRequests</CODE> value defined in MIB-II. ... *//** Returns the <CODE>snmpInTotalSetVars</CODE> value defined in MIB-II. ... *//** Returns the <CODE>snmpInTotalReqVars</CODE> value defined in MIB-II. ... *//** Returns the <CODE>snmpSilentDrops</CODE> value defined in RFC ... *//** Returns the <CODE>snmpProxyDrops</CODE> value defined in RFC ... *//** Allows the MBean to perform any operations it needs before being ... *///If null oid array, just add it to the mib./** Adds a new MIB in the SNMP MIB handler. In SNMP V1 and V2 the ... */// SUBCLASSING OF COMMUNICATOR SERVER//-----------------------------------/** Creates the datagram socket. *//** Return the actual port to which the adaptor is bound. ... *//** Closes the datagram socket. */// Important to inform finalize() that the socket is closed.../** Reads a packet from the datagram socket and creates a request ... */// Let's wait for something to be received.// Let's check if we have been interrupted by stop()./** Stops this SNMP protocol adaptor. ... */// SENDING SNMP TRAPS STUFF//-------------------------/** Sends a trap using SNMP V1 trap format. ... */// First, make an SNMP V1 trap pdu// If the local host cannot be determined, we put 0.0.0.0 in agentAddr// Next, send the pdu to all destinations defined in ACL// Next, send the pdu to the specified destination//Diff start//Diff end// Diff start// If the local host cannot be determined,// we put 0.0.0.0 in agentAddr//End diff/** Sends a trap using SNMP V2 trap format. ... */// First, make an SNMP V2 trap pdu// We clone varBindList and insert sysUpTime and snmpTrapOid// Only difference with other//End of diff/** Send the specified trap PDU to the passed <CODE>InetAddress</CODE>. ... *//** Send the specified trap PDU to the passed <CODE>SnmpPeer</CODE>. ... *//** Send the specified trap PDU to every destinations from the ACL file. */// Make an SNMP message from the pdu// FIXME: is the right exception to throw ?// We could simply forward SnmpTooBigException ?// Now send the SNMP message to each destination// If there is no destination defined or if everything has failed// we tried to send the trap to the local host (as suggested by// mister Olivier Reisacher)./** Send the specified trap PDU to the specified destination. */// Now send the SNMP message to specified destination/** Send the specified message on trapSocket. *//** Open trapSocket if it's not already done. *//** Close trapSocket if the SNMP protocol adaptor is not ONLINE. *//** Sends an inform using SNMP V2 inform request format. ... */// First, make an SNMP inform pdu:// We clone varBindList and insert sysUpTime and snmpTrapOid variables./** Method that maps an SNMP error status in the passed protocolVersion ... *//** Open informSocket if it's not already done. *//** Close informSocket if the SNMP protocol adaptor is not ONLINE. *//** Gets the IP address to bind. ... *//** Finalizer of the SNMP protocol adaptor objects. ... *//** Returns the time (in hundreths of second) elapsed since the SNMP ... *//** Control the way the SnmpAdaptorServer service is deserialized. */// Call the specific initialization for the SnmpAdaptorServer service./** Common initializations. */// The default Agent is initialized with a SnmpErrorHandlerAgent agent.// For the trap time, use the time the agent started ...// Create the default message factory/** Exposes the remote management interface of the {@link SnmpAdaptorServer} MBean. ... *//** Returns the port used by this SNMP protocol adaptor for sending inform requests. ... *//** Sets the port used by this SNMP protocol adaptor for sending inform requests. ... *//** Gets the number of managers that have been processed by this SNMP protocol adaptor ... *//** Gets the number of times to try sending an inform request before giving up. ... *//** Changes the maximun number of times to try sending an inform request before giving up. ... *//** Sets the flag indicating if traps need to be sent in case of authentication failure. ... *//** Returns <code>true</code> if this SNMP protocol adaptor sends a response in case ... *//** Sets the flag indicating if responses need to be sent in case of authentication failure. ... *//** Returns the enterprise OID. It is used by {@link #snmpV1Trap snmpV1Trap} to fill ... *//** Returns the <CODE>snmpInBadCommunityNames</CODE> value defined in MIB-II. ... *//** Returns the <CODE>snmpSilentDrops</CODE> value defined in rfc 1907 NMPv2-MIB . ... *//** Returns the <CODE>snmpProxyDrops</CODE> value defined in rfc 1907 NMPv2-MIB . ... */// JMX imports/** Provides the callback methods that are required to be implemented by the application ... *//** This callback is invoked when a manager responds to an SNMP inform request. ... *//** This callback is invoked when a manager does not respond within the ... *//** This callback is invoked when any form of internal error occurs. ... */// JAVA imports/** This class is used by the {@link com.sun.jmx.snmp.daemon.SnmpAdaptorServer SNMP adaptor server} to send inform requests ... *//** This object maintains a global counter for the inform request ID. *//** This contains a list of <CODE>SnmpVarBind</CODE> objects for making the SNMP inform requests. *//** The error status associated with the inform response packet. *//** The index in <CODE>SnmpVarBindList</CODE> that caused the exception. *///private SnmpVarBind internalVarBind[] = null;//private String reason = null;/** The SNMP adaptor associated with this inform request. *//** The session object associated with this inform request. *//** The user implementation of the callback interface for this request. *//** The inform request PDU. *///private SnmpPduPacket requestPdu;/** The inform response PDU. *///private SnmpPduRequest responsePdu;/** Base status of an inform request. *//** Status of an inform request: in progress. *//** Status of an inform request: waiting to be sent. *//** Status of an inform request: waiting for reply. *//** Status of an inform request: reply received. *//** Status of an inform request: request aborted. *//** Status of an inform request: timeout. *//** Status of an inform request: internal error occured. *//** Status of an inform request: result available for the request. *//** Status of an inform request: request never used. *//** Number of tries performed for the current polling operation. *//** Timeout. ... */// 3 seconds.// Polling control parameters.// value of 0 means poll never happened./** The request ID for an active inform request. */// add to adaptor queue./** Gets the request id (invoke identifier) of the current inform request. ... *//** Gets the destination address of the current inform request. ... *//** Gets the current status of the inform request. ... *//** Indicates whether or not the inform request was aborted. ... *//** Indicates whether or not the inform request is in progress. ... *//** Indicates whether or not the inform request result is available. ... *//** Gets the status associated with the <CODE>SnmpVarBindList</CODE>. ... *//** Gets the index. ... *//** Gets the maximum number of tries before declaring that the manager is not responding. ... *//** Gets the number of tries performed for the current inform request. ... *//** Gets absolute time in milliseconds (based on epoch time) when the next ... *//** Gets absolute time in milliseconds (based on epoch time) before which an inform ... */// should never happen./** Gets the <CODE>SnmpVarBindList</CODE> of the inform response. ... *//** Used in synchronous mode only. ... */// check if request is in progress.// We can manipulate callback safely as we are in session thread.// This is being done from a different thread. So notifyClient will do the notification.// true if request completed./** Cancels the active inform request and removes itself from the polling list. *//** Notifies the registered client about the completion of an operation. *//** Finalizer of the <CODE>SnmpInformRequest</CODE> objects. ... *//** Returns the <CODE>String</CODE> representation of an error code. ... */// PRIVATE AND PACKAGE METHODS//----------------------------/** This method submits the inform request for polling and marks the request ... *//** This method creates a new request ID. The ID is submitted to the poll server for scheduling. *//** This method determines whether the inform request is to be retried. This is used if the ... */// Consider it as a try !/** Constructs an inform request PDU. */// This exception will caught hereafter and reported as an snmpReqUnknownError// FIXME: may be it's not the best behaviour ?/** Sends the prepared PDU packet to the manager and updates the data structure ... */// check if this request is still alive.// the request may have  cancelled.//responsePdu = null;// At this point the errorIndex is rationalized to start with 0.// Refire request after fixing varbindlist./** Parses the inform response packet. If the agent responds with error set, ... */// rationalize for index to start with 0./** Calls the user implementation of the <CODE>SnmpInformHandler</CODE> interface. */// delete only non-poll request.// catch all user exception which may happen in callback.// catch any exception a user might not handle./** This method cancels an active inform request and removes it from the polling list. */// Remove the clause synchronized of the stopRequest method.// Synchronization is isolated as possible to avoid thread lock.// Note: the method removeRequest from SendQ is synchronized.// fix bug jaw.00392.B/** Initializes the request id from the request counter. *//** Returns the string state corresponding to the specified integer state. ... *//** Sets the request status to the specified value. ... *//** Gives a status report of the request. ... *//** The class is used for building a tree representation of the different ... *//* public void unregister(SnmpMibAgent agent) { ... */// A SnmpMibTree object is a tree of TreeNode// In this case, the node does not have any children. So no point to// continue the search ...// In this case, the oid does not have any more element. So the search// is over.//If the returned node got a null agent, we have to replace it by//the current one (in case it is not null)// PRIVATE STUFF/** Only the treeNode class can create an instance of treeNode. ... *///That's it !// Create a child and register it !// We have to set the agent attribute// end of class TreeNode/** This class implements a server queue manager. ... */// TIME BOMB HERE/** This vector manages the inform requests to be sent to the manager. */// no serialVersionUID but never serialized// This boolean is used to stop handling requests while the corresponding SnmpQManager// is being destroyed./** This vector manages the inform requests to be retried to the manager. */// no serialVersionUID, but never serialized/** A static instance of this class is usually created.  It contains a ... *//** A counter with value between 1...2^31-1. *//** Returns the next request identifier. ... */// RI imports// SNMP runtime import//import com.sun.jmx.snmp.IPAcl.IPAcl;/** Contains the list of sub-requests associated to the current request. *//** Reference on the MIBS *//** Full constructor */// Need a reference on SnmpAdaptorServer for getNext & getBulk,// in case of oid equality (mib overlapping).//thread.start();/** Treat the request available in 'packet' and send the result ... */// Trace the input packet// Let's build the response packet// Trace the output packet// Send the response packet if any/** Here we make a response packet from a request packet. ... */// Transform the request packet into a request SnmpMessage// Make the response SnmpMessage if any// Try to transform the response SnmpMessage into response packet.// NOTE: we overwrite the request packet./** Here we make a response message from a request message. ... */// Transform the request message into a request pdu// Make the response pdu if any// Try to transform the response pdu into a response message if any// if the PDU is too small, why should we try to do// recovery ?// we can not go any further in trying to// reduce the message !// end of loop/** Here we make a response pdu from a request pdu. ... */// reqPdu is accepted by ACLs// reqPdu is rejected by ACLs// respPdu contains the error response to be sent.// We send this response only if authResEnabled is true.// No response should be sent// A trap must be sent// Generates a response packet, filling the values in the// varbindlist with one of endOfMibView, noSuchObject, noSuchInstance// according to the value of <code>status</code>// @param statusTag should be one of://        <li>SnmpDataTypeEnums.errEndOfMibViewTag</li>//        <li>SnmpDataTypeEnums.errNoSuchObjectTag</li>//        <li>SnmpDataTypeEnums.errNoSuchInstanceTag</li>// Generates an appropriate response when no mib is registered in// the adaptor.// <li>If the version is V1:</li>// <ul><li>Generates a NoSuchName error V1 response PDU</li></ul>// <li>If the version is V2:</li>// <ul><li>If the request is a GET, fills the varbind list with//         NoSuchObject's</li>//     <li>If the request is a GET-NEXT/GET-BULK, fills the varbind//         list with EndOfMibView's</li>//     <li>If the request is a SET, generates a NoAccess error V2//          response PDU</li>// </ul>// There is no agent registered// Version 1: => NoSuchName// Version 2: => depends on PDU type// SET request => NoAccess// GET request => NoSuchObject// GET-NEXT or GET-BULK => EndOfMibView// Something wrong here: => snmpRspGenErr/** Here we make the response pdu from a get/set request pdu. ... */// Create the trhead group specific for handling sub-requests// associated to the current request. Use the invoke id// Nice idea to use a thread group on a request basis.// However the impact on performance is terrible !// theGroup= new ThreadGroup(thread.getThreadGroup(),//                "request " + String.valueOf(req.requestId));// Good ! Let's make a full response pdu.// First we need to split the request into subrequests// Execute all the subrequests resulting from the split of the// varbind list.// It means that an error occurred. The error is already// formatted by the executeSubRequest// So far so good. So we need to concatenate all the answers./** The method runs all the sub-requests associated to the current ... */// If it's a set request, we must first check any varBind// Indicate to the sub request that a check must be invoked ...// OK we should have defined out own tag for that !// No point to go any further.// end processing check operation for a set PDU.// Let's start the sub-requests./* NPCTE fix for bugId 4492741, esc 0, 16-August 2001 *//* end of NPCTE fix for bugId 4492741 */// everything is ok/** Optimize when there is only one sub request */// Check the error status.// process the operation/** Here we make the response pdu for a bulk request. ... */// Split the request into subrequests.// Now we remove useless trailing endOfMibView.// respVarBindList[m2] item and next are going to be removed// Trivial, of course.../** Check the type of the pdu: only the get/set/bulk request ... *//** Check if the specified pdu is conform to the ACL. ... */// We check the pdu type and create an error response if// the check failed.// If the response is not null, this means the pdu is rejected.// So let's update the statistics./** Make a response pdu with the specified error status and index. ... */// This should not occur because decodeIncomingRequest has normally// been successfully called before.// Reduction can be attempted only on bulk response// We're going to reduce the varbind list.// First determine which items should be removed.// Next duplicate and replace the existing list by the reduced one.// acceptedVbCount is the number of varbind which have been// successfully encoded before reaching bufferSize://   * when it is >= 2, we split the varbindlist at this//     position (-1 to be safe),//   * when it is 1, we only put one (big?) item in the varbindlist//   * when it is 0 (in fact, acceptedVbCount is not available),//     we split the varbindlist by 2.// acceptedCount == 0 ie it is unknown/** The method takes the incoming requests and split it into subrequests. */// Take all the oids contained in the request and// For the get next operation we are going to send the varbind list// to all agents// We need to create the sub request handler and update// the hashtable// Update the translation table within the subrequest/** The method takes the incoming get bulk requests and split it into ... */// Send the getBulk to all agents// Go through the list of subrequests and concatenate.// Hopefully, by now all the sub-requests should be finished// In v1 make sure there is no endOfMibView ...// So far so good ...// Let's allocate the array for storing the result/** This class is used to handle received inform request responses. ... */// Retreive the PDU factory of the SNMP adaptor to decode the received inform response./** This class starts a thread which picks up a session from the queue ... */// Wait until the thread die.// Ignore...// This is not good but Netscape does kill all threads when// the pagecontext changes.// wait to be signaled by the an active request.// Fire all requests as independent requests./** This will fire the specified request. *//** This class is used for sending INFORM REQUESTS from an agent to a manager. ... *//** The SNMP adaptor associated with this SnmpSession. *//** The SnmpSocket to be used to communicate with the manager ... *//** This table maintains the list of inform requests. *//** This table maintains the list of inform responses. ... *//** The dispatcher that will service all inform responses to inform requests generated ... *//** Request being synchronized from session thread. This happens when ... *//** Constructor for creating a new session. ... *//** Constructor for creating a new session. Allows subclassing. */// OTHER METHODS/** Initializes the SnmpSession. ... *//** Indicates whether the thread for this session is active and the SNMP adaptor server ONLINE. ... *///return ((myThread != null) && (myThread.isAlive()));/** Gets the SnmpSocket which will be used by inform requests created in this session. ... *//** Gets the SnmpQManager which will be used by inform requests created in this session. ... *//** Indicates whether this session is performing synchronous operation for an inform request. ... *//** Returns <CODE>true</CODE> if the current executing thread is this session's dispatcher. ... *//** Sends an inform request to the specified InetAddress destination using the specified community string. ... *//** Performs sync operations on active requests. Any number of inform requests ... *//** Dispatcher method for this session thread. This is the dispatcher method ... */// Handles out of memory.// finished processing.// re-process the request.// HANDLING INFORM REQUESTS LIST AND INFORM RESPONSES LIST//--------------------------------------------------------/** Adds an inform request. ... */// If the adaptor is not ONLINE, stop adding requests./** Deletes an inform request. ... */// deleteRequest can be called from destroySnmpSession.//In such a case remove is done in cancelAllRequest method./** Cancels all pending inform requests in this session. *//** Adds the inform request object which received a response to an inform request ... *//** Destroys any pending inform requests and then stops the session. ... *//** Make sure you are killing the thread when it is active. Instead ... *//** Finalizer of the <CODE>SnmpSession</CODE> objects. ... *//** This class creates an SNMP Datagram Socket. This class has methods helpful ... *//** Creates a new <CODE>SnmpSocket</CODE> object. ... *//** Sends a datagram packet to a specified device at specified port. ... *//** Checks if the socket is initialised correctly and if it is still active. ... *//** Closes the socket and its associated resources. */// We send an empty datagram packet to fix bug 4293791 (it's a jdk 1.1 bug)// First close the datagram socket.// This may generates an IO exception at the run method (_socket.receive).// Then stop the thread socket./** Dispatcher method for this socket thread. This is the dispatcher method ... */// If the corresponding session is being destroyed, stop handling received responses.// We are closing the snmp socket while handling the datagram.// If the IO exception has been generated because of closing this SNMP socket,// (call to _socket.close while _socket is blocked for receiving packet) simply terminate closing properly.// If the exception (NullPointerException) has been generated because of closing this SNMP socket,// (call to _socket = null while _socket is blocked for receiving packet) simply terminate closing properly.// rethrow dead thread./** Finalizer of the <CODE>SnmpSocket</CODE> objects. ... *//* Keep this locked so that send can't happen. *//** The constructor initialize the subrequest with the whole varbind list contained ... */// Invoke a getBulk operation/* NPCTE fix for bugId 4492741, esc 0, 16-August-2001 */// we need to allocate a new SnmpVarBind. Otherwise the first// sub request will modify the list.../** The method updates find out which element to use at update time. Handle oid overlapping as well */// Take the smallest (lexicographically)// Must compare agent used for reply// Take the deeper within the reply/* Vector v = new Vector(); ... *//** The method updates a given var bind list with the result of a ... */// we can assume that the run method is over ...// First go through all the values once ...// May be we should control the position ...// bugId 4641694: must check position in order to avoid//       ArrayIndexOutOfBoundException// Now update the values which have been repeated// more than once./** Specific to the sub request *//** R as defined in RCF 1902 for the global request the sub-request is associated to. *//* NPCTE fix for bugId 4492741, esc 0 *//** The constructor initialize the subrequest with the whole varbind ... */// The translation table is easy in this case ...// Always call with V2. So the merge of the responses will// be easier./** The method updates the varbind list of the subrequest. *//* NPCTE fix for bugid 4381195 esc 0. <J.C.> < 17-Oct-2000> */// if ((elmt != null) &&  (elmt.value == null) &&//    (version == snmpVersionTwo))//    elmt.value = SnmpVarBind.endOfMibView;/* end of NPCTE fix for bugid 4381195 */// else if ((val == null) && (version == snmpVersionTwo))//    vb.value = SnmpVarBind.endOfMibView;// Now we need to take the smallest oid .../** V3 enabled Adaptor. Each Oid is added using updateRequest method. *//** V3 enabled Adaptor. *//** SNMP V1/V2 . To be called with updateRequest. */// We get a ref on the pdu in order to pass it to SnmpMibRequest.//Pre-allocate room for storing varbindlist and translation table./** SNMP V1/V2 The constructor initialize the subrequest with the whole varbind list contained ... */// cast to NonSyncVector<SnmpVarBind>// This is an optimization://    The SnmpMibRequest created in the check() phase is//    reused in the set() phase.//This is a request comming from an SnmpV3AdaptorServer.//Full power.// If we're doing the check() phase, we store the SnmpMibRequest// so that we can reuse it in the set() phase.// Invoke a get operation//#ifdef DEBUG// end of switch// This function does a best-effort to map global error status// to SNMP v1 valid global error status.// An SnmpStatusException can contain either:// <li> v2 local error codes (that should be stored in the varbind)</li>// <li> v2 global error codes </li>// <li> v1 global error codes </li>// v2 local error codes (noSuchInstance, noSuchObject) are// transformed in a global v1 snmpRspNoSuchName error.// v2 global error codes are transformed in the following way://    If the request was a GET/GETNEXT then either//         snmpRspNoSuchName or snmpRspGenErr is returned.//    Otherwise://      snmpRspNoAccess, snmpRspInconsistentName//               => snmpRspNoSuchName//      snmpRspAuthorizationError, snmpRspNotWritable, snmpRspNoCreation//               => snmpRspReadOnly  (snmpRspNoSuchName for GET/GETNEXT)//      snmpRspWrong*//               => snmpRspBadValue  (snmpRspNoSuchName for GET/GETNEXT)//      snmpRspResourceUnavailable, snmpRspRspCommitFailed,//      snmpRspUndoFailed//                  => snmpRspGenErr// Map v2 codes onto v1 codes// At this point we should have a V1 error code// We have a snmpRspGenErr, or something which is not defined// in RFC1905 => return a snmpRspGenErr// to SNMP v2 valid global error status.// v2 local error codes (noSuchInstance, noSuchObject)// should not raise this level: they should have been stored in the// varbind earlier. If they, do there is nothing much we can do except// to transform them into:// <li> a global snmpRspGenErr (if the request is a GET/GETNEXT) </li>// <li> a global snmpRspNoSuchName otherwise. </li>//    If the request was a GET/GETNEXT then snmpRspGenErr is returned.//    (snmpRspGenErr is the only global error that is expected to be//     raised by a GET/GETNEXT request).//    Otherwise the v2 code itself is returned// v1 global error codes are transformed in the following way://      snmpRspNoSuchName//               => snmpRspNoAccess  (snmpRspGenErr for GET/GETNEXT)//      snmpRspReadOnly//               => snmpRspNotWritable (snmpRspGenErr for GET/GETNEXT)//      snmpRspBadValue//               => snmpRspWrongValue  (snmpRspGenErr for GET/GETNEXT)// Map v1 codes onto v2 codes// For get / getNext / getBulk the only global error// (PDU-level) possible is genErr.// Map to noSuchName//      if ((errorStatus == SnmpDefinitions.snmpRspNoSuchName) ||//   (errorStatus == SnmpStatusException.noSuchInstance) ||//  (errorStatus == SnmpStatusException.noSuchObject))//  return SnmpDefinitions.snmpRspNoSuchName;// SnmpStatusException.noSuchInstance and// SnmpStatusException.noSuchObject can't happen...// Map to notWritable// Map to wrongValue// Other valid V2 codes// Ivalid V2 code => genErr// Too bad, an error occurs ... we need to translate it .../** The method returns the error status of the operation. ... *//** The method returns the error index as a position in the var bind list. ... */// An error occurs. We need to be carefull because the index// we are getting is a valid SNMP index (so range starts at 1).// FIX ME: Shall we double-check the range here ?// The response is : YES :/** Store the protocol version to handle *//** Store the operation type. Remember if the type is Walk, it means ... *//** Agent directly handled by the sub-request handler. *//** Error status. *//** Index of error. ... *//** The varbind list specific to the current sub request. ... *//** The array giving the index translation between the content of ... *//** Contextual object allocated by the SnmpUserDataFactory. *//** The SnmpMibRequest that will be passed to the agent. *//** The SnmpPdu that will be passed to the request. */// Synchronization is a very expensive operation. In our case it is not always// required...// we never serialize this/** This class retries any timed out inform requests. This class is for internal use. *//** This class represents a set of default directories used by Java DMK. ... */// PUBLIC STATIC METHODS//----------------------/** Returns the installation directory for Java DMK. ... *//** Returns the installation directory for Java DMK concatenated with dirname. ... *//** Sets the installation directory for Java DMK. ... *//** Returns the <CODE>etc</CODE> directory for Java DMK. ... *//** Returns the <CODE>etc</CODE> directory for Java DMK concatenated with dirname. ... *//** Sets the <CODE>etc</CODE> directory for Java DMK. ... *//** Returns the <CODE>tmp</CODE> directory for the product. ... *//** Returns the <CODE>tmp</CODE> directory for Java DMK concatenated with dirname. ... *//** Sets the <CODE>tmp</CODE> directory for the product ... */// PRIVATE STATIC METHODS/** Directories used by Java DMK. *//** This class reads a file containing the property list defined for Java DMK ... *//** Reads the Java DMK property list from a file and ... */// PUBLIC STATIC VARIABLES/** References the property that specifies the ACL file ... *//** References the property that specifies the Security file ... *//** References the property that specifies the User ACL file ... *//** References the property that specifies the default mib_core file ... *//** References the property that specifies the name of the vendor of this product ... *//** References the property that specifies the SSL cipher suites to ... *//** Access Control Model interface. Every access control model must implement this interface in order to be integrated in the engine based framework. ... *//** Method called by the dispatcher in order to control the access at an <CODE>SnmpOid</CODE> Level. If access is not allowed, an <CODE>SnmpStatusException</CODE> is thrown. ... *//** Method called by the dispatcher in order to control the access at an SNMP pdu Level. If access is not allowed, an <CODE>SnmpStatusException</CODE> is thrown. In case of exception, the access control is aborted. OIDs are not checked. ... *//** Enable SNMP V1 and V2 set requests. Be aware that can lead to a security hole in a context of SNMP V3 management. By default SNMP V1 and V2 set requests are not authorized. ... *//** Disable SNMP V1 and V2 set requests. By default SNMP V1 and V2 set requests are not authorized. ... *//** The SNMP V1 and V2 set requests authorization status. By default SNMP V1 and V2 set requests are not authorized. ... *//** Access Control sub system interface. To allow engine integration, an Access Control sub system must implement this interface. ... *//** Method called by the dispatcher in order to control the access at an SNMP pdu Level. ... *//** Method called by the dispatcher in order to control the access at an <CODE>SnmpOid</CODE> Level. ... *//** Class returned by <CODE>SnmpSecuritySubSystem</CODE> and <CODE>SnmpSecurityModel</CODE>. If privacy is applied, the received pdu must be decrypted. This class contains the field of of a decrypted scoped pdu. ... *//** Decrypted pdu data. *//** Decrypted pdu data length. *//** Decrypted context name. *//** Decrypted context engine Id. *//** This engine is conformant with the RFC 2571. It is the main object within ... *//** Security level. No authentication, no privacy. Value is 0, ... *//** Security level. Authentication, privacy. Value is 3, ... *//** Flag that indicates that a report is to be sent. Value is 4, as defined in RFC 2572 *//** Mask used to isolate authentication information within a message flag. *//** Mask used to isolate authentication and privacy information within a message flag. *///We do the counter wrap in a lazt way. Each time Engine is asked for his time it checks. So if nobody use the Engine, the time can wrap and wrap again without incrementing nb boot. We can imagine that it is irrelevant due to the amount of time needed to wrap.//67 years of running. That is a great thing!//Reinitialize startTime.//Can't do anything with this counter.//Store for future use./** Gets the engine Lcd. ... *//** Constructor. A Local Configuration Datastore is passed to the engine. It will be used to store and retrieve data (engine Id, engine boots). ... *//** Constructor. A Local Configuration Datastore is passed to the engine. It will be used to store and retrieve data (engine ID, engine boots). ... *//** Access Control will check the oids. By default is false. *//** Access Control will not check the oids. By default is false. *//** Access Control check or not the oids. By default is false. *///Do some check and store the nb boots value.// Initialize internal status.//Initialize the engineID./** Returns the Message Processing Sub System. ... *//** Sets the Message Processing Sub System. ... *//** Returns the Security Sub System. ... *//** Sets the Security Sub System. ... *//** Sets the Access Control Sub System. ... *//** Returns the Access Control Sub System. ... *//** Checks the passed msg flags according to the rules specified in RFC 2572. ... *//** <P> An <CODE>SnmpIncomingRequest</CODE> handles both sides of an incoming SNMP request: ... *//** Once the incoming request decoded, returns the decoded security parameters. ... *//** Tests if a report is expected. ... *//** Tests if a response is expected. ... *//** Tells this request that no response will be sent. *//** Gets the incoming request principal. ... *//** Gets the incoming request security level. This level is defined in {@link com.sun.jmx.snmp.SnmpEngine SnmpEngine}. ... *//** Gets the incoming request security model. ... *//** Gets the incoming request context name. ... *//** Gets the incoming request context engine Id. ... *//** Gets the incoming request context name used by Access Control Model in order to allow or deny the access to OIDs. *//** Encodes the response message to send and puts the result in the specified byte array. ... *//** Decodes the specified bytes and initializes the request with the incoming message. ... *//** Initializes the response to send with the passed Pdu. ... *//** Gets the request PDU encoded in the received message. ... *//** Returns a stringified form of the received message. ... *//** Returns a stringified form of the message to send. ... *//** <P> An <CODE>SnmpIncomingResponse</CODE> handles the unmarshalling of the received response.</P> ... *//** Returns the source address. ... *//** Returns the source port. ... *//** Gets the incoming response security parameters. ... *//** Call this method in order to reuse <CODE>SnmpOutgoingRequest</CODE> cache. ... *//** Gets the incoming response security level. This level is defined in ... *//** Gets the incoming response security model. ... *//** Gets the incoming response context name. ... *//** Decodes the specified bytes and initializes itself with the received ... *//** Gets the request PDU encoded in the received response. ... *//** Returns the response request Id. ... *//** Class to extend in order to develop a customized Local Configuration Datastore. The Lcd is used by the <CODE>SnmpEngine</CODE> to store and retrieve data. ... *//** Returns the number of time the engine rebooted. ... *//** Returns the engine Id located in the Lcd. ... *//** Persists the number of reboots. ... *//** Persists the engine Id. ... *//** Adds an Lcd model. ... *//** Removes an Lcd model. ... *//** Gets an Lcd model. ... *//** Interface that every SNMP model must implement in order to be integrated in the engine framework. ... *//** Returns the sub system that manages this model. ... *//** A human readable model name. ... *//** An interface to implement when developping customized model configuration datastore. ... *//** The message processing model interface. Any message processing model must implement this interface in order to be integrated in the engine framework. ... *//** This method is called when a call is to be sent to the network. ... *//** This method is called when a call is received from the network. ... *//** This method is called when a response is received from the network. ... *//** This method is called to instantiate a pdu according to the passed pdu type and parameters. ... *//** This method is called to encode a full scoped pdu that has not been encrypted. <CODE>contextName</CODE>, <CODE>contextEngineID</CODE> and data are known. ... *//** This method is called to encode a full scoped pdu that as been encrypted. <CODE>contextName</CODE>, <CODE>contextEngineID</CODE> and data are known. ... *//** This method returns a decoded scoped pdu. This method decodes only the <CODE>contextEngineID</CODE>, <CODE>contextName</CODE> and data. It is needed by the <CODE>SnmpSecurityModel</CODE> after decryption. ... *//** This method returns an encoded scoped pdu. This method encode only the <CODE>contextEngineID</CODE>, <CODE>contextName</CODE> and data. It is needed by the <CODE>SnmpSecurityModel</CODE> for decryption. ... *//** In order to change the behavior of the translator, set it. ... *//** Returns the current translator. ... *//** Message processing sub system interface. To allow engine integration, a message processing sub system must implement this interface. This sub system is called by the dispatcher when receiving or sending calls. ... *//** Attaches the security sub system to this sub system. Message processing model are making usage of various security sub systems. This direct attachement avoid the need of accessing the engine to retrieve the Security sub system. ... *//** Gets the attached security sub system. ... *//** This method is called when a call is to be sent to the network. The sub system routes the call to the dedicated model according to the model ID. ... *//** This method is called to instantiate a pdu according to the passed pdu type and parameters. The sub system routes the call to the dedicated model according to the model ID. ... *//** This method is called when a call is received from the network. The sub system routes the call to the dedicated model according to the model ID. ... *//** This method is called to encode a full scoped pdu that as not been encrypted. <CODE>contextName</CODE>, <CODE>contextEngineID</CODE> and data are known. It will be routed to the dedicated model according to the version value. ... *//** This method is called to encode a full scoped pdu that as been encrypted. <CODE>contextName</CODE>, <CODE>contextEngineID</CODE> and data are not known. It will be routed to the dedicated model according to the version value. ... *//** This method returns a decoded scoped pdu. This method decodes only the <CODE>contextEngineID</CODE>, <CODE>contextName</CODE> and data. It is needed by the <CODE>SnmpSecurityModel</CODE> after decryption. It will be routed to the dedicated model according to the version value. ... *//** This method returns an encoded scoped pdu. This method encodes only the <CODE>contextEngineID</CODE>, <CODE>contextName</CODE> and data. It is needed by the <CODE>SnmpSecurityModel</CODE> for decryption. It will be routed to the dedicated model according to the version value. ... *//** <P> An <CODE>SnmpOutgoingRequest</CODE> handles the marshalling of the message to send.</P> ... *//** Returns the cached security data used when marshalling the call as a secure one. ... *//** Encodes the message to send and puts the result in the specified byte array. ... *//** Initializes the message to send with the passed Pdu. ... *//** Cache is returned by <CODE>SnmpSecurityModel</CODE> when handling requests. The cache contants is security dependant. This interface is a marker that every cache classes must implement. ... *//** Security model interface. Any security model implementation must implement this interface in order to be integrated in the engine framework. Security models are called when SNMP messages are received or sent. They deal with security (authentication and privacy). ... *//** Called when a request is to be sent to the network. It must be securized. ... *//** Called when a response is to be sent to the network. It must be securized. ... *//** Called when a request is received from the network. It handles authentication and privacy. ... *//** Called when a response is received from the network. It handles authentication and privacy. ... *//** Instantiate an <CODE>SnmpSecurityCache</CODE> that is dependant to the model implementation. ... *//** Release the previously created cache. ... *//** Security sub system interface. To allow engine integration, a security sub system must implement this interface. ... *//** Instantiates an <CODE>SnmpSecurityCache</CODE> that is dependant to the model implementation. This call is routed to the dedicated model according to the model ID. ... *//** To release the previously created cache. This call is routed to the dedicated model according to the model ID. ... *//** Called when a request is to be sent to the network. It must be securized. This call is routed to the dedicated model according to the model ID. ... *//** Called when a response is to be sent to the network. It must be securized. This call is routed to the dedicated model according to the model ID. ... *//** Called when a request is received from the network. It handles authentication and privacy. This call is routed to the dedicated model according to the model ID. ... *//** Called when a response is received from the network. It handles authentication and privacy. This call is routed to the dedicated model according to the model ID. ... *//** SNMP sub system interface. To allow engine framework integration, a sub system must implement this interface. A sub system is a model manager. Every model is identified by an ID. A sub system can retrieve a previously registered model using this ID. ... *//** Returns the associated engine. ... *//** Adds a model to this sub system. ... *//** Removes a model from this sub system. ... *//** Gets a model from this sub system. ... *//** Returns the set of model Ids that have been registered within the sub system. *//** Returns the set of model names that have been registered within the sub system. *//** Utility class used to deal with various data representations. ... *//** Translates a binary representation in an ASCII one. The returned string is an hexadecimal string starting with 0x. ... *//** Translates a stringified representation in a binary one. The passed string is an hexadecimal one starting with 0x. ... *///System.out.println("ascii : " + p[j+1]);//System.out.println("binary : " + v);//System.out.println("binary : " + v+1);/** The translator interface is implemented by classes dealing with a specific SNMP protocol version. SnmpMsgTranslator are used in conjonction with SnmpMsgProcessingModel implementations. ... *//** Returns the request or message Id contained in the passed message. The message is a generic one that is narrowed in the object implementing this interface. *//** Returns the response max message size. The message is a generic one that is narrowed in the object implementing this interface. *//** Returns the message flags. The message is a generic one that is narrowed in the object implementing this interface. *//** Returns the message security model. The message is a generic one that is narrowed in the object implementing this interface. *//** Returns the message security level. The message is a generic one that is narrowed in the object implementing this interface. *//** Returns an encoded representation of security parameters contained in the passed msg. The message is a generic one that is narrowed in the object implementing this interface. *//** Returns the message security parameters. The message is a generic one that is narrowed in the object implementing this interface. *//** Returns the message context Engine Id. The message is a generic one that is narrowed in the object implementing this interface. *//** Returns the message context name. The message is a generic one that is narrowed in the object implementing this interface. *//** Returns the raw message context name. Raw mean as it is received from the network, without translation. It can be useful when some data are piggy backed in the context name.The message is a generic one that is narrowed in the object implementing this interface. *//** Returns the message accesscontext name. This access context name is used when dealing with access rights (eg: community for V1/V2 or context name for V3).The message is a generic one that is narrowed in the object implementing this interface. *//** Returns the message encrypted pdu or null if no encryption. The message is a generic one that is narrowed in the object implementing this interface. *//** Set the context name of the passed message. *//** Set the context engine Id of the passed message. */// NPCTE fix for bugId 4510777, esc 532372, MR October 2001// file Task.java created for this bug fix/** This interface is implemented by objects that can be executed ... *//** Cancel the submitted task. ... */// file TaskServer.java created for this bug fix/** This interface is implemented by objects that are able to execute ... *//** Submit a task to be executed. ... *//** This class implements a {@link com.sun.jmx.snmp.tasks.TaskServer} over ... */// public methods// --------------// to terminate// TODO// ---------------// A thread used to execute jobs// init// terminated ?// re-init// protected or private variables/** The FactoryEnumeration is used for returning factory instances. ... */// no need to implement Enumeration since this is only for internal use// List<NamedWeakReference<Class | Object>>/** Records the input list and uses it directly to satisfy ... */// reload class if weak ref cleared// Instantiate Class to get factory// replace Class object or null/* Copyright (c) 2001, 2011, Oracle and/or its affiliates. All rights reserved. ... *//** A NamedWeakReference is a WeakReference with an immutable string name. ... *//** The ResourceManager class facilitates the reading of JNDI resource files. ... *//* Name of provider resource files (without the package-name prefix.) *//* Name of application resource files. *//* Name of properties file in <java.home>/lib. *//* Internal environment property, that when set to "true", disables ... *//* The standard JNDI properties that specify colon-separated lists. */// The following shouldn't create a runtime dependence on ldap package./* A cache of the properties that have been constructed by ... */// WeakHashMap<Class | ClassLoader, Hashtable>/* A cache of factory objects (ObjectFactory, StateFactory, ControlFactory). ... *//* A cache of URL factory objects (ObjectFactory). ... *//** A class to allow JNDI properties be specified as applet parameters ... *//** Returns the value of the applet's named parameter. */// if clazz is null then applet cannot be an Applet.// There should be no instances of this class.// ---------- Public methods ----------/* Given the environment parameter passed to the initial context ... */// system/applet properties// Merge property values from env param, applet params, and system// properties.  The first value wins:  there's no concatenation of// colon-separated lists.// Read system properties by first trying System.getProperties(),// and then trying System.getProperty() if that fails.  The former// is more efficient due to fewer permission checks.// Read system property.// Return without merging if application resource files lookup// is disabled.// Merge the above with the values read from all application// resource files.  Colon-separated lists are concatenated./** Retrieves the property from the environment, or from the provider ... *//** Retrieves an enumeration of factory classes/object specified by a ... */// no classes specified; return null// Cache is based on context class loader and property val// Cached list// Populate list with classes named in facProp; skipping// those that we cannot load// System.out.println("loading");// ignore ClassNotFoundException, IllegalArgumentException// System.out.println("adding to cache: " + factories);/** Retrieves a factory from a list of packages specified in a ... */// Merge property with provider property and supplied default// Cache factory based on context class loader, class name, and// property val// check if weak ref has been cleared// Not cached; find first factory and cache// System.out.println("loading " + className);// ignore ClassNotFoundException, IllegalArgumentException,// etc.// Cache it.// ---------- Private methods ----------/* Returns the properties contained in the provider resource file ... *//* Returns the Hashtable (never null) that results from merging ... */// Merge in properties from file in <java.home>/lib./* Merge the properties from one hash table into another.  Each ... *//* Is a property one of the standard JNDI properties that specify ... *//** VersionHelper was used by JNDI to accommodate differences between ... */// Disallow anyone from creating one of these./* Returns a JNDI property from the system properties.  Returns ... *//* Reads each property in PROPS from the system properties, and ... *//* Returns the resource of a given name associated with a particular ... *//* Returns an input stream for a file in <java.home>/lib, ... *//* Returns an enumeration (never null) of InputStreams of the ... *//* Returns the context class loader associated with the current thread. ... */// Parse codebase into separate URLs// Disallow external from creating one of these./** Determines whether classes may be loaded from an arbitrary URL code base. *//** Package private. ... */// Don't use bootstrap class loader directly!/** Given an enumeration of URLs, an instance of this class represents ... *//* Returns the next InputStream, or null if there are no more. ... */// skip this URL/* Copyright (c) 2017, Oracle and/or its affiliates. All rights reserved. *//* Licensed to the Apache Software Foundation (ASF) under one or more ... *//** Constants for the project, mostly defined in the JVM specification. ... *//** Java class file format Magic number (0xCAFEBABE) ... *//** Major version number of class files for Java 1.1. ... *//** Minor version number of class files for Java 1.1. ... *//** Major version number of class files for Java 1.2. ... *//** Minor version number of class files for Java 1.2. ... *//** Minor version number of class files for Java 1.3. ... *//** Major version number of class files for Java 1.3. ... *//** Minor version number of class files for Java 1.4. ... *//** Major version number of class files for Java 1.4. ... *//** Minor version number of class files for Java 1.5. ... *//** Major version number of class files for Java 1.6. ... *//** Minor version number of class files for Java 1.6. ... *//** Major version number of class files for Java 1.7. ... *//** Minor version number of class files for Java 1.7. ... *//** Major version number of class files for Java 1.8. ... *//** Major version number of class files for Java 9. ... *//** Minor version number of class files for Java 1.8. ... *//** Minor version number of class files for Java 9. ... *//** Default major version number. Class file is for Java 1.1. ... *//** Maximum value for an unsigned short. *//** Maximum value for an unsigned byte. */// 2^8 - 1/** One of the access flags for fields, methods, or classes. ... */// Applies to classes compiled by new compilers only/** The names of the access flags. *//* The description of the constant pool is at: ... *//** Marks a constant pool entry as type UTF-8. ... *//** Marks a constant pool entry as type Integer. ... *//** Marks a constant pool entry as type Float. ... *//** Marks a constant pool entry as type Long. ... *//** Marks a constant pool entry as type Double. ... *//** Marks a constant pool entry as a Class ... *//** Marks a constant pool entry as a Field Reference. ... *//** Marks a constant pool entry as type String ... *//** Marks a constant pool entry as a Method Reference. ... *//** Marks a constant pool entry as an Interface Method Reference. ... *//** Marks a constant pool entry as a name and type. ... *//** Marks a constant pool entry as a Method Handle. ... *//** Marks a constant pool entry as a Method Type. ... *//** Marks a constant pool entry as an Invoke Dynamic ... *//** The names of the types of entries in a constant pool. Use getConstantName ... *//** The name of the static initializer, also called &quot;class ... *//** The name of every constructor method in a class, also called ... *//** The names of the interfaces implemented by arrays *//** Maximum Constant Pool entries. One of the limitations of the Java Virtual ... *//** Maximum code size (plus one; the code size must be LESS than this) One of ... *///bytes/** The maximum number of dimensions in an array ({@value}). One of the ... *//** Java VM opcode. ... */// Old notation// Old name in JDK 1.0/** JVM internal opcode. ... *//** BCEL virtual instruction for pushing an arbitrary data type onto the ... *//** BCEL virtual instruction for either LOOKUPSWITCH or TABLESWITCH. Will be ... *//** Illegal opcode. *//** Mnemonic for an illegal opcode. *//** Mnemonic for an illegal type. *//** Boolean data type. ... *//** Char data type. ... *//** Float data type. ... *//** Double data type. ... *//** Byte data type. ... *//** Short data type. ... *//** Int data type. ... *//** Long data type. ... *//** Void data type (non-standard). */// Non-standard/** Array data type. *//** Object data type. *//** Reference data type (deprecated). */// Deprecated/** Unknown data type. *//** Address data type. *//** The primitive type names corresponding to the T_XX constants, e.g., ... *//** The primitive class names corresponding to the T_XX constants, e.g., ... *//** The signature characters corresponding to primitive types, e.g., ... *//** Number of byte code operands for each opcode, i.e., number of bytes after ... *//* nop *//* aconst_null *//* iconst_m1 *//* iconst_0 *//* iconst_1 *//* iconst_2 *//* iconst_3 *//* iconst_4 *//* iconst_5 *//* lconst_0 *//* lconst_1 *//* fconst_0 *//* fconst_1 *//* fconst_2 *//* dconst_0 *//* dconst_1 *//* bipush *//* sipush *//* ldc *//* ldc_w *//* ldc2_w *//* iload *//* lload *//* fload *//* dload *//* aload *//* iload_0 *//* iload_1 *//* iload_2 *//* iload_3 *//* lload_0 *//* lload_1 *//* lload_2 *//* lload_3 *//* fload_0 *//* fload_1 *//* fload_2 *//* fload_3 *//* dload_0 *//* dload_1 *//* dload_2 *//* dload_3 *//* aload_0 *//* aload_1 *//* aload_2 *//* aload_3 *//* iaload *//* laload *//* faload *//* daload *//* aaload *//* baload *//* caload *//* saload *//* istore *//* lstore *//* fstore *//* dstore *//* astore *//* istore_0 *//* istore_1 *//* istore_2 *//* istore_3 *//* lstore_0 *//* lstore_1 *//* lstore_2 *//* lstore_3 *//* fstore_0 *//* fstore_1 *//* fstore_2 *//* fstore_3 *//* dstore_0 *//* dstore_1 *//* dstore_2 *//* dstore_3 *//* astore_0 *//* astore_1 *//* astore_2 *//* astore_3 *//* iastore *//* lastore *//* fastore *//* dastore *//* aastore *//* bastore *//* castore *//* sastore *//* pop *//* pop2 *//* dup *//* dup_x1 *//* dup_x2 *//* dup2 *//* dup2_x1 *//* dup2_x2 *//* swap *//* iadd *//* ladd *//* fadd *//* dadd *//* isub *//* lsub *//* fsub *//* dsub *//* imul *//* lmul *//* fmul *//* dmul *//* idiv *//* ldiv *//* fdiv *//* ddiv *//* irem *//* lrem *//* frem *//* drem *//* ineg *//* lneg *//* fneg *//* dneg *//* ishl *//* lshl *//* ishr *//* lshr *//* iushr *//* lushr *//* iand *//* land *//* ior *//* lor *//* ixor *//* lxor *//* iinc *//* i2l *//* i2f *//* i2d *//* l2i *//* l2f *//* l2d *//* f2i *//* f2l *//* f2d *//* d2i *//* d2l *//* d2f *//* i2b *//* i2c *//* i2s *//* lcmp *//* fcmpl *//* fcmpg *//* dcmpl *//* dcmpg *//* ifeq *//* ifne *//* iflt *//* ifge *//* ifgt *//* ifle *//* if_icmpeq *//* if_icmpne *//* if_icmplt *//* if_icmpge *//* if_icmpgt *//* if_icmple *//* if_acmpeq *//* if_acmpne *//* goto *//* jsr *//* ret *//* tableswitch *//* lookupswitch *//* ireturn *//* lreturn *//* freturn *//* dreturn *//* areturn *//* return *//* getstatic *//* putstatic *//* getfield *//* putfield *//* invokevirtual *//* invokespecial *//* invokestatic *//* invokeinterface *//* invokedynamic *//* new *//* newarray *//* anewarray *//* arraylength *//* athrow *//* checkcast *//* instanceof *//* monitorenter *//* monitorexit *//* wide *//* multianewarray *//* ifnull *//* ifnonnull *//* goto_w *//* jsr_w *//* breakpoint *//* impdep1 *//* impdep2 *//** How the byte code operands are to be interpreted for each opcode. Indexed ... *//** Names of opcodes. Indexed by opcode. OPCODE_NAMES[ALOAD] = "aload". *//** Number of words consumed on operand stack by instructions. Indexed by ... *//** Number of words produced onto operand stack by instructions. Indexed by ... *//** Attributes and their corresponding names. */// count of attributes/** Constants used in the StackMap attribute. *//** Constants used to identify StackMapEntry types. ... *//** Constants that define the maximum value of those constants which store ... */// Constants defining the behavior of the Method Handles (JVMS 5.4.3.5)/** The names of the reference_kinds of a CONSTANT_MethodHandle_info. */// not instantiable/* Copyright (c) 2007, 2020, Oracle and/or its affiliates. All rights reserved. ... *//** Exception constants. ... *//** The mother of all exceptions *//** Super class of any run-time exception *//** Super class of any linking exception (aka Linkage Error) *//** Linking Exceptions *//* UnsupportedClassVersionError is new in JDK 1.2 *///    public static final Class UnsupportedClassVersionError = UnsupportedClassVersionError.class;/** Run-Time Exceptions *//** Pre-defined exception arrays according to chapters 5.1-5.4 of the Java Virtual ... */// Chapter 5.1// Chapter 5.2// Chapter 5.3 (as below)// Chapter 5.4 (no errors but the ones that _always_ could happen! How stupid.)/** Enum corresponding to the various Exception Class arrays, ... */// helper method to merge exception class arrays/** Creates a copy of the specified Exception Class array combined with any additional Exception classes. ... *//** The repository maintains informations about class interdependencies, e.g., ... *//** Set repository instance to be used for class loading *//** Lookup class somewhere found on your CLASSPATH, or whereever the ... *//** Try to find class source using the internal repository instance. ... *//** Clear the repository. *//** Add clazz to repository if there isn't an equally named class already in ... *//** Remove class with given (fully qualified) name from repository. *//** Remove given class from repository. *//** Equivalent to runtime "instanceof" operator. ... *//** Super class for all objects that have modifiers like private, final, ... I.e. ... *//** Set access flags aka "modifiers". ... */// Flag is set already// Flag not set/** Represents the default value of a annotation for a method info ... *//** Called by objects that are traversing the nodes of the tree implicitely ... */// For annotation element values, this is the annotation// u1 type of value (ANNOTATION == '@')/** represents one annotation in the annotation table ... *//* Factory method to create an AnnotionEntry from a DataInput ... *//** Called by objects that are traversing the nodes of the tree implicitely defined by the contents of a Java class. ... */// TODO return List// u2 index of type name in cpool// u2 element_value pair// count// Find attributes that contain annotation data/** base class for annotations ... *//** returns the array of annotation entries in this annotation */// For array types, this is the array// u1 type of value (ARRAY == '[')/** Abstract super class for <em>Attribute</em> objects. Currently the ... */// Points to attribute name in constant pool// Content length of attribute field// Tag to distinguish subclasses/** Dump attribute to file stream in binary format. ... *//** Add an Attribute reader capable of parsing (user-defined) attributes ... *//** Remove attribute reader ... *//** Class method reads one attribute from the input data stream. This method ... */// Get class name from constant pool via `name_index' indirection// Length of data in bytes// Compare strings to find known attribute// found!// Call proper constructor, depending on `tag'// Never reached/** Use copy() if you want to have a deep copy(), i.e., with all references ... */// never happens/** Unknown (non-standard) attributes may be read via user-defined factory ... *//** When this attribute reader is added via the static method ... *//** This class represents a bootstrap method attribute, i.e., the bootstrap ... *//** Index of the CONSTANT_MethodHandle_info structure in the constant_pool table *//** Array of references to the constant_pool table *//** Initialize from another object. *//** Construct object from input stream. ... */// helper method/** Dump object to file stream in binary format. ... */// TODO should this throw?/** This class represents a BootstrapMethods attribute. ... */// TODO this could be made final (setter is not used)/** Initialize from another object. Note that both objects use the same ... *//** Construct object from Input stream. ... *//** Dump bootstrap methods attribute to file stream in binary format. ... */// For primitive types and string type, this points to the value entry in// the cpool// For 'class' this points to the class entry in the cpool// u1 kind of value/** Thrown when the BCEL attempts to read a class file and determines ... *//** Wrapper class that parses a given Java .class file. The method <A ... */// Compiler version// Access rights of parsed class// Names of implemented interfaces// collection of constants// class fields, i.e., its variables// methods defined in the class// attributes defined in the class// Loaded from zip file/** Parse class from the given stream. ... */// Not a very clean solution .../** Parse class from given .class file. ... *//** Parse class from given .class file in a ZIP-archive ... *//** Parse the given Java class file and return an object that represents ... *//** **************** Read headers ******************************* */// Check magic tag of class file// Get compiler version/** **************** Read constant pool and related ************* */// Read constant pool entries// Get class information// Get interface information, i.e., implemented interfaces/** **************** Read class fields and methods ************** */// Read class fields, i.e., the variables of the class// Read class methods, i.e., the functions in the class// Read class attributes// Check for unknown variables//Unknown[] u = Unknown.getUnknownAttributes();//for (int i=0; i < u.length; i++)//  System.err.println("WARNING: " + u[i]);// Everything should have been read now//      if(file.available() > 0) {//        int bytes = file.available();//        byte[] buf = new byte[bytes];//        file.read(buf);//        if(!(is_zip && (buf.length == 1))) {//      System.err.println("WARNING: Trailing garbage at end of " + file_name);//      System.err.println(bytes + " extra bytes: " + Utility.toHexString(buf));// Read everything of interest, so close the file//ignore close exceptions// Return the information we have gathered in a new object/** Read information about the attributes of the class. ... *//** Read information about the class and its super class. ... *//* Interfaces are implicitely abstract, the flag should be set ... *//** Read constant pool entries. ... *//** Read information about the fields of the class, i.e., its variables. ... *//** ****************** Private utility methods ********************* *//** Check whether the header of the file is ok. ... *//** Read information about the interfaces implemented by this class. ... *//** Read information about the methods of the class. ... *//** Read major and minor version of compiler which created the file. ... *//** This class represents a chunk of Java byte code contained in a ... */// Maximum size of stack used by this method  // TODO this could be made final (setter is not used)// Number of local variables  // TODO this could be made final (setter is not used)// Actual byte code// Table of handled exceptions// or LocalVariable// Initialize with some default values which will be overwritten later// Read byte code/* Read exception table that contains all regions where an exception ... *//* Read all attributes, currently `LineNumberTable' and ... *//* Adjust length, because of setAttributes in this(), s.b.  length ... */// Adjust length/** Dump code attribute to file stream in binary format. ... *//* max_stack *//* max_locals *//* code length *//* byte-code *//* exception-table length *//* exception table *//* attributes count *//* attribute header size */// CHECKSTYLE IGNORE MagicNumber/** This class represents an entry in the exception table of the <em>Code</em> ... */// Range in the code the exception handler is// active. start_pc is inclusive, end_pc exclusive/* Starting address of exception handler, i.e., ... *//* If this is zero the handler catches any ... *//** Construct object from file stream. ... *//** Dump code exception to file stream in binary format. ... */// TODO unused/** Abstract superclass for classes to represent the different constant types in ... *//* In fact this tag is redundant since we can distinguish different ... *//** Read one constant from the given input, the type depends on a tag byte. ... */// Read tag byte/** Return value as defined by given BCELComparator strategy. By default two ... *//** Return value as defined by given BCELComparator strategy. By default ... *//** Abstract super class for Fieldref, Methodref, InterfaceMethodref and ... *//** References to the constants containing the class and the field signature */// Note that this field is used to store the// bootstrap_method_attr_index of a ConstantInvokeDynamic.// This field has the same meaning for all subclasses./** Initialize instance from file data. ... *//** Dump constant field reference to file stream in binary format. ... *//** This class is derived from the abstract {@link Constant} ... */// Identical to ConstantString except for the name/** Dump constant class to file stream in binary format. ... *//** This class is derived from the abstract  {@link Constant} ... *//** Dump constant double to file stream in binary format. ... *//** This class represents a constant pool reference to a field. ... *//** Initialize instance from input data. ... *//** Dump constant float to file stream in binary format. ... *//** Dump constant integer to file stream in binary format. ... *//** This class represents a constant pool reference to an interface method. ... *//** Called by objects that are traversing the nodes of the tree implicitly ... */// AKA bootstrap_method_attr_index/** Dump constant long to file stream in binary format. ... *//** Dump method kind and index to file stream in binary format. ... *//** Dump name and signature index to file stream in binary format. ... *//** This class represents a constant pool reference to a method. ... */// Name of field/method// and its signature./** This interface denotes those constants that have a "natural" value, ... *//** This class represents the constant pool, i.e., a table of constants, of ... *//** Read constants from given input stream. ... *//* constant_pool[0] is unused by the compiler and may be used freely ... *//* Quote from the JVM specification: ... *//** Resolve constant to a string representation. ... */// Note that the ReferenceIndex may point to a Fieldref, Methodref or// InterfaceMethodref - so we need to peek ahead to get the actual type./** Retrieve constant at `index' from constant pool and resolve it to ... *//** Dump constant pool to file stream in binary format. ... *//** Get constant from constant pool. ... *//** Get constant from constant pool and check whether it has the ... *//** Get string from constant pool and bypass the indirection of ... *//* This switch() is not that elegant, since the two classes have the ... */// Finally get the string from the constant pool// Identical to ConstantClass except for this name// TODO these should perhaps be AtomicInt?// Set the size to 0 or below to skip caching entirely// for accesss by test code// might be better with a specific lock object/** Dump String in Utf8 format to file stream. ... *//** This class is derived from <em>Attribute</em> and represents a constant ... *//** Dump constant value attribute to file stream on binary format. ... */// Print constant to string depending on its type/** This class is derived from <em>Attribute</em> and denotes that this is a ... *//** Dump source file attribute to file stream in binary format. ... *//* Copyright (c) 2013, 2017, Oracle and/or its affiliates. All rights reserved. *//** Traverses a JavaClass with another Visitor object 'piggy-backed' that is ... */// size - 1 == current/** Start traversal. */// BootstrapMethod[] bms = bm.getBootstrapMethods();// for (int i = 0; i < bms.length; i++)//     bms[i].accept(this);/** @version ... */// TODO isRuntimeVisible/** an annotation's element value pair ... */// u2 name of the element/** Visitor with empty method bodies, can be extended and used in conjunction ... *//** @since ... *//** This attribute exists for local or ... */// Pointer to the CONSTANT_Class_info structure representing the// innermost class that encloses the declaration of the current class.// If the current class is not immediately enclosed by a method or// constructor, then the value of the method_index item must be zero.// Otherwise, the value of the  method_index item must point to a// CONSTANT_NameAndType_info structure representing the name and the// type of a method in the class referenced by the class we point// to in the class_index.  *It is the compiler responsibility* to// ensure that the method identified by this index is the closest// lexically enclosing method that includes the local/anonymous class.// Ctors - and code to read an attribute in.// Accessors// For enum types, these two indices point to the type and value// u1 type of value (ENUM_CONSTANT == 'e')// u2// Utility.signatureToString(cu8.getBytes());/** This class represents the table of exceptions that are thrown by a ... */// constant pool/** Dump exceptions attribute to file stream in binary format. ... *//** This class represents the field info structure, i.e., the representation ... *//** Return string representation close to declaration format, ... */// Short cuts to constant pool// Get names from constant pool/** Return value as defined by given BCELComparator strategy. ... *//** Abstract super class for fields and methods. ... */// Points to field name in constant pool// Points to encoded signature// Collection of attributes// No. of attributes// @since 6.0// annotations defined on the field or method/** Dump object to file stream on binary format. ... */// ignored, but will cause NPE .../** Hunts for a signature attribute on the member and returns its contents. ... *//** This class represents a inner class attribute, i.e., the class ... *//** Dump inner class attribute to file stream in binary format. ... *//** This class is derived from <em>Attribute</em> and denotes that this class ... */// TODO this could be recoded to use a lower level constructor after creating a copy of the inner classes/** Represents a Java class, i.e., the data structures, constant pool, fields, ... */// Constant pool// implemented interfaces// Fields, i.e., variables of class// annotations defined on the class// Generated in memory/** In cases where we go ahead and create something, use the default ... *//** Constructor gets all contents as arguments. ... */// Get source file name if available/* According to the specification the following entries must be of type ... */// May be zero -> class is java.lang.Object/** Dump class to a file. ... */// either was not created or already existed/** Dump class to a file named file_name. ... *//** Dump Java class to output stream in binary format. ... *//** returns the super class name of this class. In the case that this class ... *//** Set File name of class, aka SourceFile attribute value *//** Set absolute path to file this class was read from. *//** ******************* New repository functionality ******************** *//** Gets the ClassRepository which holds its definition. By default this is ... *//** Sets the ClassRepository which loaded the JavaClass. Should be called ... *//** Get interfaces directly implemented by this JavaClass. *//** Get all interfaces implemented by this JavaClass (transitively). *//** Return the natural ordering of two JavaClasses. This ordering is based on ... *//** This class represents a (PC offset, line number) pair, i.e., a line number in ... *//** Program Counter (PC) corresponds to line *//** number in source file *//** Initialize from another object. ... *//** Dump line number/pc pair to file stream in binary format. ... *//** This class represents a table of line numbers for debugging purposes. This ... */// Table of line/numbers pairs/* Initialize from another object. Note that both objects use the same ... *//* @param name_index Index of name ... *//** Dump line number table attribute to file stream in binary format. ... *//** Map byte code positions to source code lines. ... *//* Do a binary search since the array is ordered. *//* If exact match can't be found (which is the most common case) ... *//* It's possible that we did not find any valid entry for the bytecode ... */// TODO could use the lower level constructor and thereby allow// line_number_table to be made final/** This class represents a local variable within a method. It contains its ... */// Range in which the variable is valid// Index in constant pool of variable name// Index of variable signature/* Variable is `index'th local variable on ... *//** Dump local variable to file stream in binary format. ... *//* Helper method shared with LocalVariableTypeTable *//** This class represents colection of local variables in a ... */// variables/** Dump local variable table attribute to file stream in binary format. ... */// The new table is used when generic types are about...//LocalVariableTable_attribute {//       u2 attribute_name_index;//       u4 attribute_length;//       u2 local_variable_table_length;//       {  u2 start_pc;//          u2 length;//          u2 name_index;//          u2 descriptor_index;//          u2 index;//       } local_variable_table[local_variable_table_length];//LocalVariableTypeTable_attribute {//    u2 attribute_name_index;//    u4 attribute_length;//    u2 local_variable_type_table_length;//    {//      u2 start_pc;//      u2 length;//      u2 name_index;//      u2 signature_index;//      u2 index;//    } local_variable_type_table[local_variable_type_table_length];// J5TODO: Needs some testing !/** This class represents the method info structure, i.e., the representation for ... */// annotations defined on the parameters of a method/** Empty constructor, all attributes have to be defined via `setXXX' ... *//** Return string representation close to declaration format, e.g. ... */// Get name and signature from constant pool/** Entry of the parameters table. ... *//** Index of the CONSTANT_Utf8_info structure in the constant_pool table representing the name of the parameter *//** The access flags *//** Returns the name of the parameter. *//** This class represents a MethodParameters attribute. ... *//** Dump method parameters attribute to file stream in binary format. ... *//** Denote class to have an accept method(); ... *//** This class is derived from <em>Attribute</em> and represents a reference ... *//** represents one parameter annotation in the parameter annotation table ... */// Find attributes that contain parameter annotation data/** base class for parameter annotations ... *//** Table of parameter annotations *//** returns the array of parameter annotation entries in this parameter annotation *//** represents an annotation that is represented in the class file but is not ... *//** Represents a parameter annotation that is represented in the class file ... *//** represents an annotation that is represented in the class file and is ... *///System.err.println("Visiting non-standard Signature object");/** Extends ByteArrayInputStream to make 'unreading' chars possible. *///System.out.println("return from ident:" + (char)ch);// Ok, formal parameter//System.out.println("so far:" + buf2 + ":next:" +(char)ch);//System.out.println("within ident:"+ (char)ch);//System.out.println("regular return ident:"+ (char)ch + ":" + buf2);// Parameterized or method//System.out.println("Enter <");// List of parameters//System.out.println("Still no >");// Recursive call//System.out.println("Exit >");//System.out.println("Sig:" + s);// @since 6.0 is no longer final// Whatever kind of value it is, return it as a string/** This class represents a stack map attribute used for ... */// Table of stack map entries// Length of 'number_of_entries' field prior to the array of stack maps/** This class represents a stack map entry recording the types of ... *//* Can't happen *//** DO NOT USE ... *//** Create an instance ... *//** Dump stack map entry ... */// nothing to be done/** Calculate stack map entry size */// CHECKSTYLE IGNORE EmptyBlock/** Update the distance (as an offset delta) from this StackMap ... *//** This class represents the type of a local variable or item on stack ... */// Index to CONSTANT_Class or offset/** Dump type entries to file. ... *//** This class is derived from <em>Attribute</em> and declares this class as ... *//** This class represents a reference to an unknown (i.e., ... *//** Create a non-standard attribute. ... *//** Dump unknown bytes to file stream. ... *//** When this attribute reader is added via the static method Attribute.addAttributeReader, ... *//** Utility functions that do not really belong to any class in particular. ... */// @since 6.0 methods are no longer final/* How many chars have been consumed ... *//* The `WIDE' instruction is used in the ... *//** Convert bit field of flags into string such as `static final'. ... */// Loop through known flags/* Special case: Classes compiled with new compilers and with the ... *//** Disassemble a byte array of JVM byte codes starting from code line ... */// Should be sufficient // CHECKSTYLE IGNORE MagicNumber/** Disassemble a stream of byte codes and return the string representation. ... *//* Special case: Skip (0-3) padding bytes, i.e., the ... */// Both cases have a field default_offset in common/* Table switch has variable length arguments. *//* Lookup switch has variable length arguments. *//* Two address bytes + offset from start of byte stream form the ... *//* 32-bit wide jumps *//* Index byte references local variable (register) */// Clear flag/* Remember wide byte which is used to form a 16-bit address in the ... *//* Array of basic type. *//* Access object/class fields. *//* Operands are references to classes in constant pool *///$FALL-THROUGH$/* Operands are references to methods in constant pool */// With Java8 operand may be either a CONSTANT_Methodref// or a CONSTANT_InterfaceMethodref.   (markro)// historical, redundant// Last byte is a reserved space// Thrid byte is a reserved space/* Operands are references to items in constant pool *//* Array of references. *//* Multidimensional array of references. *//* Increment local variable. *//** Shorten long class names, <em>java/lang/String</em> becomes ... *//** Shorten long class name <em>str</em>, i.e., chop off the <em>prefix</em>, ... */// Is `/' on all systems, even DOS// If string starts with `prefix' and contains no further dots/** Converts string containing the method return and argument types to a byte ... */// Read all declarations between for `(' and `)'// current string position//corrected concurrent private static field acess// update position// Should never occur// Read return type after `)'/** Converts method signature to string with all class names compacted. ... *//** A returntype signature represents the return value from a method. It is a ... */// May be an empty string// Guess what this does/** Replace all occurrences of <em>old</em> in <em>str</em> with ... */// `old' found in str// String start offset// While we have something to replace// append prefix// append replacement// Skip `old'.length chars// append rest of string// Should not occur/** Converts signature to string with all class names compacted. ... *//** The field signature represents the value of an argument to a function or ... */// This is the default, read just one char like `B'// TypeVariableSignature// Look for closing `;'// "Tblabla;" `T' and `;' are removed// Full class name// should this be a while loop? can there be more than// one generic clause?  (markro)// generic type?// check to see if there are any TypeArguments// just a class identifier// "Lblabla;" `L' and `;' are removed// we have TypeArguments; build up partial result// as we recurse for each TypeArgument// Shadows global var// check for wildcards// must be at end of signature// remove final "*>;"// get the first TypeArgument// update our consumed count by the number of characters the for type argument// are there more TypeArguments?// remove final ">;"// Array declaration// Accumulate []'s// Count opening brackets and look for optional size argument// Remember value// The rest of the string denotes a `<field_type>'//Utility.consumed_chars += consumed_chars; is replaced by:/** Parse Java type such as "char", or "java.lang.String[]" and return the ... */// Don't care/** Return type of method signature as a byte value as defined in ... *//** Return type of signature as a byte value as defined in <em>Constants</em> ... *//** Map opcode names to opcode numbers. E.g., return Constants.ALOAD for ... *//** Convert (signed) byte to (unsigned) short value, i.e., all negative ... *//** Convert bytes into hexadecimal string ... *//** Return a string for an integer justified left or right and filled up with ... *//** Fillup char with up to length characters with char `fill' and justify it ... *//** Encode byte array it into Java identifier string, i.e., a string that ... */// Normalize to unsigned/** Decode a string back to a byte array. ... */// Rough estimate// A-Z, g-z, _, $// Reverse map/** Decode characters into bytes. Used by <a ... */// Normal escape/** Encode bytes into valid java identifier characters. Used by <a ... */// Escape character// Special escape/** Escape all occurences of newline chars '\n', quotes \", etc. *//** Interface to make use of the Visitor pattern programming style. I.e. a class ... *//** AALOAD - Load reference from array ... *//** Load reference from array *//** Call corresponding visitor method(s). The order is: ... *//** AASTORE -  Store into reference array ... *//** Store into reference array *//** ACONST_NULL - Push null reference ... *//** Push null reference *//** ALOAD - Load reference from local variable ... *//** Empty constructor needed for the Class.newInstance() statement in ... *//** Load reference from local variable ... *//** ANEWARRAY -  Create new array of references ... *//** ARETURN -  Return reference from method ... *//** Return reference from method *//** ARRAYLENGTH -  Get length of array ... *//* since 6.0 *//** Get length of array *//** ASTORE - Store reference into local variable ... *//** Store reference into local variable ... *//** Call corresponding visitor method(s). The order is: Call visitor methods ... *//** ATHROW -  Throw exception ... *//** Throw exception *//** Denote family of instructions that allocates space in the heap. ... *//** Return immutable variant of this AnnotationElementValueGen *//** Here we are taking a fixed annotation of type Annotation and building a ... *//** Retrieve an immutable version of this AnnotationGen */// u2 element_value pair count// ConstantClass c = (ConstantClass)cpool.getConstant(typeIndex);/* c.getNameIndex() */// BCELBUG: Should I use this instead?// Utility.signatureToString(getTypeSignature());/** Returns list of ElementNameValuePair objects *//** Converts a list of AnnotationGen objects into a set of attributes ... *///  put the annotations in the right output stream// put the annotations in the right output stream/** Annotations against a class are stored in one of four attribute kinds: ... *//* Array of lists, array size depends on #params */// Lets do the visible ones// First goes number of parameters// Lets do the invisible ones/** Super class for the family of arithmetic instructions. ... */// J5TODO: Should we make this an array or a list? A list would be easier to// modify .../** Return immutable variant of this ArrayElementValueGen *//** Super class for instructions dealing with array access such as IALOAD. ... *//** Denotes array type, such as int[][] ... *//** Convenience constructor for array type, e.g. int[] ... *//** Convenience constructor for reference array type, e.g. Object[] ... *//** Constructor for array of given type ... */// Basic type or reference/** BALOAD - Load byte or boolean from array ... *//** Load byte or boolean from array *//** BASTORE - Store into byte or boolean array ... *//** Store byte or boolean into array *//** BIPUSH - Push byte on stack ... *//** Push byte on stack *//** Dump instruction as byte code to stream out. *//** Read needed data (e.g. index) from file. *//** BREAKPOINT, JVM dependent, ignored by default ... *//** Denotes basic type such as int. ... *//** Constructor for basic types such as int, long, `void' ... */// @since 6.0 no longer final/** BranchHandle is returned by specialized InstructionList.append() whenever a ... */// This is also a cache in case the InstructionHandle#swapInstruction() method is used// See BCEL-273// An alias in fact, but saves lots of casts/** Factory methods. */// List of reusable handles/** Handle adds itself to the list of resuable handles. *//* Override InstructionHandle methods: delegate to branch instruction. ... */// Original code: i_position = bi.position = pos;/** Pass new target to instruction. *//** Update target of instruction. *//** Set new contents. Old instruction is disposed and may not be used ... */// This is only done in order to apply the additional type check; could be merged with super impl.// TODO could be package-protected?/** Abstract super class for branching instructions like GOTO, IFEQ, etc.. Branch ... */// Branch target relative to this instruction// Target object in instruction list// Byte code offset/** Common super constructor ... *//** Dump instruction as byte code to stream out. ... */// May be negative, i.e., point backwards/** Called by InstructionList.setPositions when setting the position for ... *//** Long output format: ... */// I'm more interested in the address of the target then// the instruction located there.//t = target.getInstruction().toString(false); // Avoid circles// index = getTargetOffset();  crashes if positions haven't been set// t = "" + (index + position);/** Read needed data (e.g. index) from file. Conversion to a ... *//** Set branch target ... *//** Used by BranchInstruction, LocalVariableGen, CodeExceptionGen, ... *//** Inform target that it's not targeted anymore. *//** CALOAD - Load char from array ... *//** Load char from array *//** CASTORE -  Store into char array ... *//** Store char into array *//** CHECKCAST - Check whether object is of given type ... *//** Check whether object is of given type ... *//** Abstract super class for instructions that use an index into the constant ... */// index to constant pool/** Read needed data (i.e., index) from file. ... *//** Set the index to constant pool. ... */// this.idx = cpool.addClass(t);/** Return immutable variant of this ClassElementValueGen */// idx = cpool.addClass(value.getClassString());// ConstantClass c = (ConstantClass)getConstantPool().getConstant(idx);// ConstantUtf8 utf8 =// (ConstantUtf8)getConstantPool().getConstant(c.getNameIndex());// return utf8.getBytes();/** Template class for building up a java class. May be initialized with an ... *//* Corresponds to the fields found in a JavaClass object. */// Template for building up constant pool// ArrayLists instead of arrays to gather fields, methods, etc./** Convenience constructor to set up some important values initially. ... */// Put everything needed by default into the constant pool and the vectors/** Initialize with existing class. ... */// J5TODO: Could make unpacking lazy, done on first reference/** Look for attributes representing annotations and unpack them. */// TODO: Sometime later, trash any attributes called 'RuntimeVisibleAnnotations' or 'RuntimeInvisibleAnnotations'// Must be last since the above calls may still add something to it/** Add an interface to this class, i.e., this class has to implement it. ... *//** Remove an interface from this class. ... *//** Set major version number of class file, default value is 45 (JDK 1.1) ... */// TODO could be package-protected - only called by test code/** Set minor version number of class file, default value is 3 (JDK 1.1) ... *//** Add an attribute to this class. ... *//** Add a method to this class. ... *//** Convenience method. ... */// Push `this'/** Add a field to this class. ... *//** Remove an attribute from this class. ... *//** Remove a method from this class. ... *//** Replace given method with new one. If the old one does not exist add the ... *//** Replace given field with new one. If the old one does not exist add the ... *//** Remove a field to this class. ... *///  J5TODO: Should we make calling unpackAnnotations() lazy and put it in here?/** Add observer for this object. *//** Remove observer for this object. *//** Call notify() method on all observers. This method is not called ... *//** Thrown on internal errors. Extends RuntimeException so it hasn't to be declared ... *//** Implement this interface if you're interested in changes to a ClassGen object ... *//** This class represents an exception handler, i.e., specifies the region where ... *//** Add an exception handler, i.e., specify region where a handler is active ... *//** Get CodeException object.<BR> ... *//* Set start of handler ... *//* Set end of handler ... *//* Set handler code ... *//** Sets the type of the Exception to catch. Set 'null' for ANY. *//** Gets the type of the Exception to catch, 'null' for ANY. *//** Wrapper class for `compound' operations, virtual instructions that ... *//** This class is used to build up a constant pool. The user adds constants via ... */// First entry (0) used by JVM// Name and Type/** Initialize with given array of constants. ... */// since name can't begin with digit, can  use// METHODREF_DELIM with out fear of duplicates.// entries may be null// nothing to do// TODO should this be handled somehow?/** Initialize with given constant pool. *//** Create empty constant pool. *//** Resize internal array of constants. *//** Look for ConstantString in ConstantPool containing String `str'. ... *//** Add a new String constant to the ConstantPool, if it is not already in ... */// Already in CP/** Look for ConstantClass in ConstantPool named `str'. ... *//** Add a new Class reference to the ConstantPool, if it is not already in ... *//** Add a new Class reference to the ConstantPool for a given type. ... *//** Add a reference to an array class (e.g. String[][]) as needed by ... *//** Look for ConstantInteger in ConstantPool. ... *//** Add a new Integer constant to the ConstantPool, if it is not already in ... *//** Look for ConstantFloat in ConstantPool. ... *//** Add a new Float constant to the ConstantPool, if it is not already in ... *//** Look for ConstantUtf8 in ConstantPool. ... *//** Add a new Utf8 constant to the ConstantPool, if it is not already in ... *//** Look for ConstantLong in ConstantPool. ... *//** Add a new long constant to the ConstantPool, if it is not already in ... */// Wastes one entry according to spec/** Look for ConstantDouble in ConstantPool. ... *//** Add a new double constant to the ConstantPool, if it is not already in ... *//** Look for ConstantNameAndType in ConstantPool. ... *//** Add a new NameAndType constant to the ConstantPool if it is not already ... *//** Look for ConstantMethodref in ConstantPool. ... *//** Add a new Methodref constant to the ConstantPool, if it is not already in ... *//** Look for ConstantInterfaceMethodref in ConstantPool. ... *//** Add a new InterfaceMethodref constant to the ConstantPool, if it is not ... *//** Look for ConstantFieldref in ConstantPool. ... *//** Add a new Fieldref constant to the ConstantPool, if it is not already in ... *//** Use with care! ... *//** Import constant from another ConstantPool and return new index. *//** Denotes a push instruction that produces a literal on the stack ... *//** Super class for the x2y family of instructions. ... *//** D2F - Convert double to float ... *//** Convert double to float *//** D2I - Convert double to int ... *//** Convert double to int *//** D2L - Convert double to long ... *//** Convert double to long *//** DADD - Add doubles ... *//** Add doubles *//** DALOAD - Load double from array ... *//** Load double from array *//** DASTORE -  Store into double array ... *//** Store double into array *//** DCMPG - Compare doubles: value1 &gt; value2 ... *//** DCMPL - Compare doubles: value1 &lt; value2 ... *//** DCONST - Push 0.0 or 1.0, other values cause an exception ... *//** DDIV -  Divide doubles ... *//** Divide doubles *//** DLOAD - Load double from local variable ... *//** Load double from local variable ... *//** DMUL - Multiply doubles ... *//** Multiply doubles *//** DNEG - Negate double ... *//** DREM - Remainder of doubles ... *//** Remainder of doubles *//** DRETURN -  Return double from method ... *//** Return double from method *//** DSTORE - Store double into local variable ... *//** Store double into local variable ... *//** DSUB - Substract doubles ... *//** Substract doubles *//** DUP - Duplicate top operand stack word ... *//** DUP2 - Duplicate two top operand stack words ... *//** DUP2_X1 - Duplicate two top operand stack words and put three down ... *//** DUP2_X2 - Duplicate two top operand stack words and put four down ... *//** DUP_X1 - Duplicate top operand stack word and put two down ... *//** DUP_X2 - Duplicate top operand stack word and put three down ... *//** Subtypes return an immutable variant of the ElementValueGen */// byte// int// Enum constant// Annotation// TODO: isRuntimeVisible ??????????// Array/** Creates an (modifiable) ElementValueGen copy of an (immutable) ... */// J5ASSERT:// Could assert nvp.getNameString() points to the same thing as// cpool.getConstant(nvp.getNameIndex())// if// (!nvp.getNameString().equals(((ConstantUtf8)cpool.getConstant(nvp.getNameIndex())).getBytes()))// throw new RuntimeException("envp buggered");/** Retrieve an immutable version of this ElementNameValuePairGen */// ConstantString cu8 = (ConstantString)cpool.getConstant(nameIdx);/** Supplies empty method bodies to be overridden by subclasses. ... *//** This ctor assumes the constant pool already contains the right type and ... *//** Return immutable variant of this EnumElementValue */// was addClass(t);// was addString(value);// was// addClass(value.getEnumTypeString());// addString(value.getEnumValueString());// ConstantString cu8 =// (ConstantString)getConstantPool().getConstant(valueIdx);// return// ((ConstantUtf8)getConstantPool().getConstant(cu8.getStringIndex())).getBytes();// BCELBUG: Should we need to call utility.signatureToString() on the output// here?// Constant cc = getConstantPool().getConstant(typeIdx);// ConstantClass cu8 =// (ConstantClass)getConstantPool().getConstant(typeIdx);// ((ConstantUtf8)getConstantPool().getConstant(cu8.getNameIndex())).getBytes();// return Utility.signatureToString(cu8.getBytes());/** Denote an instruction that may throw a run-time or a linking ... *//** F2D - Convert float to double ... *//** Convert float to double *//** F2I - Convert float to int ... *//** Convert float to int *//** F2L - Convert float to long ... *//** Convert float to long *//** FADD - Add floats ... *//** Add floats *//** FALOAD - Load float from array ... *//** Load float from array *//** FASTORE -  Store into float array ... *//** Store float into array *//** FCMPG - Compare floats: value1 &gt; value2 ... *//** FCMPL - Compare floats: value1 &lt; value2 ... *//** FCONST - Push 0.0, 1.0 or 2.0, other values cause an exception ... *//** FDIV - Divide floats ... *//** Divide floats *//** FLOAD - Load float from local variable ... *//** Load float from local variable ... *//** FMUL - Multiply floats ... *//** Multiply floats *//** FNEG - Negate float ... *//** FREM - Remainder of floats ... *//** Remainder of floats *//** FRETURN -  Return float from method ... *//** Return float from method *//** FSTORE - Store float into local variable ... *//** Store float into local variable ... *//** FSUB - Substract floats ... *//** Substract floats *//** Template class for building up a field. The only extraordinary thing one can ... *//** Declare a field. If it is static (isStatic() == true) and has a basic ... *//** Instantiate from existing field. ... *//** Set (optional) initial value of field, otherwise it will be set to ... *//** Remove any initial value. *//** Get field object after having set up all necessary values. */// sic/** Return string representation close to declaration format, `public static ... *//** Super class for FieldGen and MethodGen objects, since they have some methods ... */// TODO could this be package protected?/** Add an attribute to this method. Currently, the JVM knows about the ... *//** Remove an attribute. *//** Remove all attributes. *//** Super class for the GET/PUTxxx family of instructions. ... *//** Imnplement this interface if you're interested in changes to a FieldGen object ... *//** Super class for InvokeInstruction and FieldInstruction, since they have ... */// Turn array classes into java.lang.Object./** Return the reference type representing the class, interface, ... *//** Get the ObjectType of the method return or field. ... *//** GETFIELD - Fetch field from object ... *//** GETSTATIC - Fetch static field from class ... *//** GOTO - Branch always (to relative offset, not absolute address) ... */// GOTO_W/** Called in pass 2 of InstructionList.setPositions() in order to update ... */// Depending on old position value// Position may be shifted by preceding expansions// to large for short (estimate)/** GOTO_W - Branch always (to relative offset, not absolute address) ... *//** Super class for GOTO ... *//** I2B - Convert int to byte ... *//** Convert int to byte *//** I2C - Convert int to char ... *//** Convert int to char *//** I2D - Convert int to double ... *//** Convert int to double *//** I2F - Convert int to float ... *//** Convert int to float *//** I2L - Convert int to long ... *//** Convert int to long *//** I2S - Convert int to short ... *//** IADD - Add ints ... *//** Add ints *//** IALOAD - Load int from array ... *//** Load int from array *//** IAND - Bitwise AND int ... *//** IASTORE -  Store into int array ... *//** Store into int array *//** ICONST - Push value between -1, ..., 5, other values cause an exception ... */// Even works for i == -1/** IDIV - Divide ints ... *//** Divide ints *//** IFEQ - Branch if int comparison with zero succeeds ... *//** IFGE - Branch if int comparison with zero succeeds ... *//** IFGT - Branch if int comparison with zero succeeds ... *//** IFLE - Branch if int comparison with zero succeeds ... *//** IFLT - Branch if int comparison with zero succeeds ... *//** IFNE - Branch if int comparison with zero succeeds ... *//** IFNONNULL - Branch if reference is not null ... *//** IFNULL - Branch if reference is not null ... *//** IF_ACMPEQ - Branch if reference comparison succeeds ... *//** IF_ACMPNE - Branch if reference comparison doesn't succeed ... *//** IF_ICMPEQ - Branch if int comparison succeeds ... *//** IF_ICMPGE - Branch if int comparison succeeds ... *//** IF_ICMPGT - Branch if int comparison succeeds ... *//** IF_ICMPLE - Branch if int comparison succeeds ... *//** IF_ICMPLT - Branch if int comparison succeeds ... *//** IF_ICMPNE - Branch if int comparison doesn't succeed ... *//** IINC - Increment local variable by constant ... */// Default behaviour of LocalVariableInstruction causes error// May set wide as side effect// wide byte included/** Set index of local variable. *//** Set increment factor. *//** ILOAD - Load int from local variable onto stack ... *//** Load int from local variable ... *//** IMPDEP1 - Implementation dependent ... *//** IMPDEP2 - Implementation dependent ... *//** IMUL - Multiply ints ... *//** Multiply ints *//** INEG - Negate int ... *//** INSTANCEOF - Determine if object is of given type ... *//** Class for INVOKEDYNAMIC. Not an instance of InvokeInstruction, since that class ... *//** Read needed data (i.e., index) from file. */// Skip 0 byte/** Override the parent method because our classname is held elsewhere. *//** INVOKEINTERFACE - Invoke interface method ... */// Number of arguments on stack (number of stack slots), called "count" in vmspec2/** The <B>count</B> argument according to the Java Language Specification, ... */// nargs is given in byte-code// nargs includes this reference/** INVOKESPECIAL - Invoke instance method; special handling for superclass, private ... *//** INVOKESTATIC - Invoke a class (static) method ... *//** INVOKEVIRTUAL - Invoke instance method; dispatch based on class ... *//** IOR - Bitwise OR int ... *//** IREM - Remainder of int ... *//** Remainder of ints *//** IRETURN -  Return int from method ... *//** Return int from method *//** ISHL - Arithmetic shift left int ... *//** ISHR - Arithmetic shift right int ... *//** ISTORE - Store int from stack into local variable ... *//** Store int into local variable ... *//** ISUB - Substract ints ... *//** Substract ints *//** IUSHR - Logical shift right int ... *//** IXOR - Bitwise XOR int ... *//** Super class for the IFxxx family of instructions. ... *//** Denote entity that refers to an index, e.g. local variable instructions, ... *//** Abstract super class for all Java byte codes. ... */// Length of instruction in bytes// Opcode number// Common for all instructions/** Use with caution, since `BranchInstruction's have a `target' reference ... */// "Constant" instruction, no need to duplicate/** Read needed data (e.g. index) from file. ... *//** Read an instruction from (byte code) input stream and return the ... */// Read next opcode after wide byte// Used predefined immutable object, if available// Do further initializations, if any/** This method also gives right results for instructions whose effect on the ... *//** Needed in readInstruction and subclasses in this package *//** Needed in readInstruction and subclasses in this package ... */// TODO check range?/** Some instructions may be reused, so don't do anything by default. *//** Get Comparator object used in the equals() method to determine equality ... *//** Set comparator to be used for equals(). ... *//** Check for equality, delegated to comparator ... *//** calculate the hashCode of this object ... *//** Check if the value can fit in a byte (signed) ... *//** Check if the value can fit in a short (signed) ... *//** Equality of instructions isn't clearly to be defined. You might ... */// BIs are never equal to make targeters work correctly (BCEL-195)//                } else if (i1 == i2) { TODO consider adding this shortcut//                    return true; // this must be AFTER the BI test/** This interface contains shareable instruction objects. ... *//** Predefined instruction objects *//* NOTE these are not currently immutable, because Instruction ... *//** You can use these constants in multiple places safely, if you can guarantee ... *//** Get object via its opcode, for immutable instructions like ... */// non-instantiable/** Gets the Instruction. ... *//** Instances of this class may be used, e.g., to generate typed versions of ... */// N.N. These must agree with the order of Constants.T_CHAR through T_LONG/** Initialize with ClassGen object *//** Initialize just with ConstantPoolGen object *//** Create an invoke instruction. (Except for invokedynamic.) ... *//** Create an invokedynamic instruction. ... *//* createInvokeDynamic only needed if instrumention code wants to generate ... *//** Create a call to the most popular System.out.println() method. ... *//** Uses PUSH to push a constant value onto the stack. ... */// indices 2, 3// No append(byte)// No append(short)/** Create a field instruction. ... *//** Create reference to `this' *//** Create typed return *//** Create binary operation for simple basic types, such as int and float. ... *//** Create conversion operation for two stack operands, this may be an I2C, ... *//** Create new array of given size and type. ... *//** Create "null" value for reference types, 0 for basic types like int *//** Create branch instruction by given opcode, except LOOKUPSWITCH and ... *//** Instances of this class give users a handle to the instructions contained in ... */// byte code offset of instruction/** Replace current instruction contained in this handle. Old instruction is ... */// Overridden in BranchHandle TODO could be package-protected?/** Temporarily swap the current instruction, without disturbing anything. ... */// TODO remove this method in any redesign of BCEL/* private *//** Factory method. *//** Set the position, i.e., the byte code offset of the contained ... *//** Overridden in BranchHandle *//** Delete contents, i.e., remove user access and make handle reusable. *//** Remove all targeters, if any. *//** Denote this handle isn't referenced anymore by t. *//** Denote this handle is being referenced by t. *///if(!targeters.contains(t))/** Add an attribute to an instruction handle. ... *//** Delete an attribute of an instruction handle. ... *//** Get attribute of an instruction handle. ... *//** Convenience method, simply calls accept() on the contained instruction. ... *//** This class is a container for a list of <a ... */// number of elements in list// byte code offsets corresponding to instructions/** Create (empty) instruction list. *//** Create instruction list containing one instruction. ... *//** Initialize list with (nonnull) compound instruction. Consumes argument ... *//** Test for empty list. */// && end == null/** Find the target instruction (handle) that corresponds to the given target ... *//* Do a binary search since the pos array is orderd. *//** Get instruction handle for instruction at byte code position pos. This ... *//** Initialize instruction list from byte array. ... */// Contains actual length// Can't be more than that/* Pass 1: Create an object for each byte code and append them to the list. */// Remember byte offset and associate it with the instruction/* Read one instruction from the byte stream, the byte position is set accordingly. */// Trim to proper size/* Pass 2: Look for BranchInstruction and update their targets, i.e., convert offsets to instruction handles. *//* Byte code position: relative -> absolute. */// Search for target position// Update target// If it is a Select instruction, update all branch targets// Either LOOKUPSWITCH or TABLESWITCH/** Append another list after instruction (handle) ih contained in this list. ... */// Update end ...// Update length/** Append another list after instruction i contained in this list. Consumes ... *//** Append another list to this one. Consumes argument list, i.e., it becomes ... */// was end.instruction/** Append an instruction to the end of this list. ... *//** Append a branch instruction to the end of this list. ... *//** Append a single instruction j after another instruction i, which must be ... *//** Append a compound instruction, after instruction i. ... *//** Append a compound instruction. ... *//** Append an instruction after instruction (handle) ih contained in this ... *//** Insert another list before Instruction handle ih contained in this list. ... */// Update start .../** Insert another list. ... */// Code is identical for this case/** Insert an instruction at start of this list. ... *//** Insert another list before Instruction i contained in this list. Consumes ... *//** Insert a branch instruction at start of this list. ... *//** Insert a single instruction j before another instruction i, which must be ... *//** Insert a compound instruction before instruction i. ... *//** Insert a compound instruction. ... *//** Insert an instruction before instruction (handle) ih contained in this ... *//** Take all instructions (handles) from "start" to "end" and append them ... */// Step 1: Check constraints// Step 2: Temporarily remove the given instructions from the list// Step 3: append after target// append to start of list/** Move a single instruction (handle) to a new location. ... *//** Remove from instruction `prev' to instruction `next' both contained in ... */// First and last deleted instruction// At start of list// At end of list// Completely separated from rest of list// e.g. BranchInstructions release their targets// Still got targeters?/** Remove instruction from this list. The corresponding Instruction handles ... *//** Remove instructions from instruction `from' to instruction `to' contained ... *//** Search for given Instruction reference, start at beginning of list. ... *//** Search for given Instruction reference, start at end of list ... */// TODO could be package-protected? (some test code would need to be repackaged)/** Give all instructions their position number (offset in byte stream), ... */// called by code in other packages/* Pass 0: Sanity checks */// target instruction within list?/* Pass 1: Set position numbers and sum up the maximum number of bytes an instruction may be shifted. *//* Get an estimate about how many additional bytes may be added, ... *//* Pass 2: Expand the variable-length (Branch)Instructions depending on ... *//* Pass 3: Update position numbers (which may have changed due to the ... *//** When everything is finished, use this method to convert the instruction ... */// Update position indices of instructions// Traverse list/** Get positions (offsets) of all instructions in the list. This relies on ... *//* Pass 1: Make copies of all instructions, append them to the new list and associate old instruction references with the new ones, i.e., a 1:1 mapping. */// Use clone for shallow copy/* Pass 2: Update branch targets. */// old target// New target is in hash map// Update all targets/** Replace all references to the old constant pool with references to the ... *//** Delete contents of list. Provides better memory utilization, because the ... */// Traverse in reverse order, because ih.next is overwritten/* Causes BranchInstructions to release target and targeters, ... *//** Redirect all references from old_target to new_target, i.e., update ... *//** Redirect all references of local variables from old_target to new_target. ... *//** Redirect all references of exception handlers from old_target to ... *//** Implement this interface if you're interested in changes to an InstructionList object ... *//** Denote that a class targets InstructionHandles within an InstructionList. Namely ... *//** Checks whether this targeter targets the specified instruction handle. *//** Replaces the target of this targeter from this old handle to the new handle. ... *//** Super class for the INVOKExxx family of instructions. ... *//** Also works for instructions whose stack effect depends on the ... */// this reference/** This overrides the deprecated version as we know here that the referenced class ... *//** JSR - Jump to subroutine ... */// JSR_W/** JSR_W - Jump to subroutine ... *//** Super class for JSR - Jump to subroutine ... *//** Returns an InstructionHandle to the physical successor ... */// Rewind!// Find the handle for "this" JsrInstruction object.// Return the physical successor/** L2D - Convert long to double ... *//** L2F - Convert long to float ... *//** L2I - Convert long to int ... *//** LADD - Add longs ... *//** LALOAD - Load long from array ... *//** Load long from array *//** LAND - Bitwise AND longs ... *//** LASTORE -  Store into long array ... *//** Store long into array *//** LCMP - Compare longs: ... *//** LCONST - Push 0 or 1, other values cause an exception ... *//** LDC - Push item from constant pool. ... */// Adjust to proper size// Fits in one byte?// TODO useless check?/** Set the index to constant pool and adjust size. *//** LDC2_W - Push long or double from constant pool ... *//** LDC_W - Push item from constant pool (wide index) ... */// Override just in case it has been changed/** LDIV - Divide longs ... *//** LLOAD - Load long from local variable ... *//** LMUL - Multiply longs ... *//** LNEG - Negate long ... *//** LOOKUPSWITCH - Switch with unordered set of values ... *//* alignment remainder assumed 0 here, until dump time. */// npairs// match-offset pairs// reads padding/** LOR - Bitwise OR long ... *//** LREM - Remainder of long ... *//** LRETURN -  Return long from method ... *//** LSHL - Arithmetic shift left long ... *//** LSHR - Arithmetic shift right long ... *//** LSTORE - Store long into local variable ... *//** LSUB - Substract longs ... *//** LUSHR - Logical shift right long ... *//** LXOR - Bitwise XOR long ... *//** This class represents a line number within a method, i.e., give an instruction ... *//** Create a line number. ... *//** Get LineNumber attribute . ... *//** Denotes that an instruction may start the process of loading and resolving ... *//** Returns the ObjectType of the referenced class or interface ... *//** Returns the type associated with this instruction. ... *//** Denotes an unparameterized instruction to load a value from a local ... *//** Generate a local variable that with index `index'. Note that double and ... *//** Get LocalVariable object. ... *//** Clear the references from and to this variable when it's removed. */// If the user changes the name or type, problems with the targeter hashmap will occur.// Note: index cannot be part of hash as it may be changed by the user./** We consider to local variables to be equal, if the use the same index and ... *//** Abstract super class for instructions dealing with local variables. ... */// index of referenced variable// compact version, such as ILOAD_0// canonical tag such as ILOAD// Otherwise ILOAD_n, instruction, e.g.// compact load instruction such as ILOAD_2// Assert ISTORE_0 <= tag <= ASTORE_3/** Set the local variable index. also updates opcode and length TODO Why? ... */// Cannot be < 0 as this is checked above// Use more compact instruction xLOAD_n/** Returns the type associated with the instruction - in case of ALOAD or ... *//** Sets the index of the referenced variable (n) only ... *//** MONITORENTER - Enter monitor for object ... *//** MONITOREXIT - Exit monitor for object ... *//** MULTIANEWARRAY - Create new mutidimensional array of references ... *//** Read needed data (i.e., no. dimension) from file. *//** Template class for building up a method. This is done by defining exception ... */// Array of lists containing AnnotationGen objects/** Declare method. If the method is non-static the constructor automatically ... *//* Add local variables, namely the implicit `this' and the arguments */// Instance method -> `this' is local var 0// Names for variables provided?// Give them dummy names/** Instantiate from existing method. ... *//* may be overridden anyway */// May happen, because end_pc is exclusive// Make it inclusive// Repair malformed handles/** Adds a local variable to this method. ... *//** Adds a local variable to this method and assigns an index automatically. ... *//** Remove a local variable, its slot will not be reused, if you do not use ... *//** Remove all local variables. *//* If the range of the variable has not been set yet, it will be set to be valid from ... *//* If the range of the variable has not been set yet, it will be set to be ... *//* If the range of the variable or type has not been set yet, it will be set ... *//** Adds a local variable type to this method. ... */// Overwrite if necessary/** Remove all local variable types. *//** Give an instruction a line number corresponding to the source code line. ... *//** Remove a line number. *//** Remove all line numbers. *//* @return array of line numbers *//** Remove an exception handler. *//* @return array of declared exception handlers *//** Add an exception possibly thrown by this method. ... *//** Remove an exception. *//** Remove all exceptions. *//* @return array of thrown exceptions *//** Add an attribute to the code. Currently, the JVM knows about the ... *//** Remove a code attribute. *//** Remove all code attributes. *//** Get method object. Never forget to call setMaxStack() or ... *//* Also updates positions of instructions, i.e., their indices *//* Create LocalVariableTable, LocalvariableTypeTable, and LineNumberTable ... *//* Each attribute causes 6 additional header bytes */// Every entry takes 8 bytes// Remove any stale code attribute// prologue byte code// exceptions// Add `Exceptions' if there are "throws" clauses// Undo effects of adding attributes/** Remove all NOPs from the instruction list (if possible) and update every ... *//* Check branch instructions. *//** Set maximum number of local variables. *//** Set maximum stack size for this method. *//** Computes max. stack size by performing control flow analysis. */// TODO could be package-protected? (some tests would need repackaging)/** Compute maximum number of local variables. *//** Do not/Do produce attributes code attributesLineNumberTable and ... *//** Computes stack usage of an instruction list by performing control flow ... *//* Initially, populate the branch stack with the exception ... */// choose the next instruction based on whether current is a branch.// explore all of the select's targets. the default target is handled below.// nothing to fall through to.// if an instruction that comes back to following PC,// push next instruction, with stack depth reduced by 1.// for all branches, the target of the branch is pushed on the branch stack.// conditional branches have a fall through case, selects don't, and// jsr/jsr_w return to the next instruction.// check for instructions that terminate the method.// normal case, go to the next instruction.// if we have no more instructions, see if there are any deferred branches to explore./** Return string representation close to declaration format, e.g. public ... *///J5TODO: Should param_annotations be an array of arrays? Rather than an array of lists, this// is more likely to suggest to the caller it is readonly (which a List does not)./** Return a list of AnnotationGen objects representing parameter annotations ... *//** Goes through the attributes on the method and identifies any that are ... */// Initialize param_annotations// OK// This returns Annotation[] ...// ... which needs transforming into an AnnotationGen[] ...// ... then add these to any we already know about/** Implement this interface if you're interested in changes to a MethodGen object ... *//** NEW - Create new object ... *//** NEWARRAY -  Create new array of basic type (int, short, ...) ... *//** NOP - Do nothing ... *//** Super class for FieldOrMethod and INVOKEDYNAMIC, since they both have ... *//** Denote entity that has both name and type. This is true for local variables, ... *//** Denotes reference such as java.lang.String. ... */// Class name of type/** If "this" doesn't reference a class, it references an interface ... *//** If "this" doesn't reference an interface, it references a class ... *//** Return true if this type references a class, ... *//** Return true if this type references an interface, ... *//** Return true if this type is a subclass of given ObjectType. ... *//** Java Virtual Machine Specification edition 2,  5.4.4 Access Control ... *//** POP - Pop top operand stack word ... *//** POP2 - Pop two top operand stack words ... *//** Wrapper class for push operations, which are implemented either as BIPUSH, ... *//** This constructor also applies for values of type short, char, byte ... *//** creates a push object from a Character value. Warning: Make sure not to attempt to allow ... *//** PUTFIELD - Put field in object ... *//** PUTSTATIC - Put static field in class ... *//** Denotes an unparameterized instruction to pop a value on top from the stack, ... *//** Denotes an unparameterized instruction to produce a value on top of the stack, ... *//** RET - Return from subroutine ... */// index to local variable containg the return address// Including the wide byte/** Set index of local variable containg the return address *//** RETURN -  Return from void method ... *//** Super class for object and array types. ... *//** Class is non-abstract but not instantiable from the outside *//** Return true iff this type is castable to another type t as defined in ... */// If this is ever changed in isAssignmentCompatible()/* Yes, it's true: It's the same definition. ... *//** Return true iff this is assignment compatible with another type t ... */// This is not explicitely stated, but clear. Isn't it?/* If this is a class type then *//* If T is a class type, then this must be the same class as T, ... *//* If T is an interface type, this must implement interface T. *//* If this is an interface type, then: *//* If T is a class type, then T must be Object (2.4.7). *//* If T is an interface type, then T must be the same interface ... *//* If this is an array type, namely, the type SC[], that is, an ... *//* If T is an array type TC[], that is, an array of components ... *//* TC and SC are the same primitive type (2.4.1). *//* TC and SC are reference types (2.4.6), and type SC is ... *//* If T is an interface type, T must be one of the interfaces implemented by arrays (2.15). */// TODO: Check if this is still valid or find a way to dynamically find out which// interfaces arrays implement. However, as of the JVM specification edition 2, there// are at least two different pages where assignment compatibility is defined and// on one of them "interfaces implemented by arrays" is exchanged with "'Cloneable' or// 'java.io.Serializable'"// default./** This commutative operation returns the first common superclass (narrowest ReferenceType ... *//* TODO: Above sounds a little arbitrary. On the other hand, there is ... *//* This code is from a bug report by Konstantin Shagin <konst@cs.technion.ac.il> */// TODO: Is there a proof of OBJECT being the direct ancestor of every ArrayType?// TODO: The above line is correct comparing to the vmspec2. But one could// make class file verification a bit stronger here by using the notion of// superinterfaces or even castability or assignment compatibility.// this and t are ObjectTypes, see above.// Waaahh...// Huh? Did you ask for Type.OBJECT's superclass??/** Super class for the xRETURN family of instructions. ... *//** Returnaddress, the type JSR or JSR_W instructions push upon the stack. ... *//** A Returnaddress [that doesn't know where to return to]. *//** Creates a ReturnaddressType object with a target. *//** Returns if the two Returnaddresses refer to the same target. *//** SALOAD - Load short from array ... *//** SASTORE - Store into short array ... *//** SIPUSH - Push short ... *//** Dump instruction as short code to stream out. *//** SWAP - Swa top operand stack word ... *//** SWITCH - Branch depending on int value, generates either LOOKUPSWITCH or ... *//** Template for switch() constructs. If the match array can be ... *//** Sort match and targets array with QuickSort. */// Swap elements// Swap instructions, too/** Select - Abstract super class for LOOKUPSWITCH and TABLESWITCH instructions. ... *//* @since 6.0 */// matches, i.e., case 1: ... TODO could be package-protected?// target offsets TODO could be package-protected?// target objects in instruction list TODO could be package-protected?// fixed length defined by subclasses TODO could be package-protected?// number of cases TODO could be package-protected?// number of pad bytes for alignment TODO could be package-protected?/** (Match, target) pairs for switch. `Match' and `targets' must have the ... */// don't set default target before instuction is built// now it's safe to set default target/** Since this is a variable length instruction, it may shift the following ... */// Additional offset caused by preceding SWITCHs, GOTOs, etc./* Alignment on 4-byte-boundary, + 1, because of tag byte. */// Write default target offset// Compute number of pad bytes// Default branch target common for both cases (TABLESWITCH, LOOKUPSWITCH)/** Set branch target for `i'th case *//** Inform targets that they're not targeted anymore. */// Allow use in nested calls// the cpGen// For 'class' this points to the class entry in the cpGen// ctors for each supported type... type could be inferred but for now lets// force it to be passed/** Protected ctor used for deserialization, doesn't *put* an entry in the ... *//** The boolean controls whether we copy info from the 'old' constant pool to ... */// J5ASSERT: Could assert value.stringifyValue() is the same as// cpool.getConstant(SimpleElementValuevalue.getIndex())/** Return immutable variant *//** Denote an instruction that may consume a value from the stack. ... *//** Super class for stack operations like DUP and POP. ... *//** Denote an instruction that may produce a value on top of the stack ... *//** Denotes an unparameterized instruction to store a value into a local variable, ... *//** TABLESWITCH - Switch within given range of values, i.e., low..high ... *//* Alignment remainder assumed 0 here, until dump time *//** Thrown by InstructionList.remove() when one or multiple disposed instructions ... *//** Abstract super class for all possible java types, namely basic types such as ... */// signature for the type/** Predefined constants */// EMPTY, so immutable/** boolean, short and char variable are considered as int in the stack or ... *//** Convert type to Java method signature, e.g. int[] f(java.lang.String x) ... *///int consumed_chars=0; // Remember position in string, see getArgumentTypes/** Convert signature to a Type object. ... */// Count dimensions// Recurse, but just once, if the signature is ok//  consumed_chars += dim; // update counter - is replaced by// type == T_REFERENCE// Utility.signatureToString understands how to parse// generic types./** Convert return value of a method (signature) to a Type object. ... *//** Convert arguments of a method (signature) to an array of Type objects. ... *//** Convert runtime java.lang.Class to BCEL Type object. ... *//* That's an amzingly easy case, because getName() returns ... */// "Real" class/** Convert runtime java.lang.Class[] to BCEL Type objects. ... *//* Currently only used by the ArrayType constructor. ... *//** Get the type associated with an instruction, int for ILOAD, or the type ... *//** Denotes an instruction to perform an unconditional branch, i.e., GOTO, JSR. ... *//** Denotes an instruction to be a variable length instruction, such as ... *//** Interface implementing the Visitor pattern programming style. ... *//** Convert found attributes into HTML file. ... */// name of current class// file to write to// Increment number of attributes found so far/* Handle different attributes */// Some directly printable values// Get handled exceptions and list them// Index in constant pool// Create Link to _cp.html// Reference _cp.html// List thrown exceptions// List line number pairs// breakable// List name, range and type// List inner classes// Such as Unknown attribute or Deprecated/** Used for BCEL comparison strategy ... *//** Compare two objects and return what THIS.equals(THAT) should return ... *//** Return hashcode for THIS.hashCode() ... *//** Factory creates il.append() statements, and sets instruction targets. ... */// memorize container// Handled below// Memorize BranchInstructions that need an update/** This class takes a given JavaClass object and converts it to a ... *//** Enum corresponding to flag source. */// The base package name for imports; assumes Const is at the top level// N.B we use the class so renames will be detected by the compiler/IDE/** Start Java code generation *//** Return a string with the flag settings ... *//** Default main method */// Needs to be accessible from unit test code// May throw IOException/** Utility class that implements a sequence of bytes which can be read ... */// pos is protected in ByteArrayInputStream/** Read class file(s) and convert them into HTML files. ... */// current class object// name of package, unclean to make it static, but ...// name of current class, dito/** Write contents of the given JavaClass into HTML files. ... */// Remember full name// Get package name by tacking off everything after the last `.'// default package/* Attributes can't be written in one step, so we just open a file ... */// Write main file (with frames, yuk)// Where to store HTML files/* Parse command line arguments. */// command line switch// Specify target directory, default '.'// Create target directory if necessary// Loop through files ...// Create parser object from file// Create parser object from zip file/** Utility method that converts a class reference in the constant pool, ... */// Type is an array?// Tack of the `['// test for basic type/* ==================================================================== ... *//** Responsible for loading (class) files from the CLASSPATH. Inspired by ... *//** Search for classes in given path. *//** Search for classes in CLASSPATH. ... */// this(getClassPath());/** Checks for class path components in the following properties: ... *//** Return stream for class or resource on CLASSPATH. ... *//** Contains information about file/ZIP entry of the Java class. *//** Utility class implementing a (typesafe) queue of JavaClass objects. ... *//** Utility class implementing a (typesafe) set of JavaClass objects. ... *//** Utility class implementing a (typesafe) stack of JavaClass objects. ... *//** Convert code into HTML file. ... *///    private Method[] methods; // Methods to print//        this.methods = methods;/** Disassemble a stream of byte codes and return the ... */// Print switch indices in first row (and default)// Print target and default indices in second row/* Same for 32-bit wide jumps */// Local field// Special treatment needed// Redundant// Reserved//                    int nargs = bytes.readUnsignedByte(); // Redundant//                    int reserved = bytes.readUnsignedByte(); // Reserved// UNDONE: Java8 now allows INVOKESPECIAL and INVOKESTATIC to// reference EITHER a Methodref OR an InterfaceMethodref.// Not sure if that affects this code or not.  (markro)// Get signature, i.e., types// List arguments// Attach return type// Either branch or index/** Find all target addresses in code, so that they can be marked ... *//* First get Code attribute from method and the exceptions handled ... */// Look for local variables and their range// Get target addresses from GOTO, JSR, TABLESWITCH, etc.//System.out.println(getOpcodeName(opcode));//bytes.readByte(); // Skip already read byte// LOOKUPSWITCH//                            int match = bytes.readInt();// Ignore output/** Write a single method with the byte code associated with it. */// Get raw signature// Get array of strings containing the argument types// Get return type string// Get method name// Get method's access flags// Get the method's attributes, the Code Attribute in particular// No code, an abstract method, e.g.//System.out.println(name + "\n" + Utility.codeToString(code, constant_pool, 0, -1));// Print the byte code/* Set an anchor mark if this line is targetted by a goto, jsr, etc. Defining an anchor for every ... */// Mark last line, may be targetted from Attributes window/** Convert constant pool into HTML file. ... */// name of package// reference to constant pool// String to return for cp[i]// The constants in the cp// Loop through constants, constants[0] is reserved// The header is always the same/* For every constant type get the needed parameters and print them appropiately */// Get class_index and name_and_type_index, depending on type// Get method name and its class// Partially compacted class name, i.e., / -> .// I.e., remove java.lang.// Remove class package prefix// Get method signature// Get class_index and name_and_type_index// Get method name and its class (compacted)// / -> .// switch/** InstructionFinder is a tool to search for given instructions patterns, i.e., ... */// char + OFFSET is outside of LATIN-1// Potential number, some are not used// instruction list as string// map instruction// list to array/** Reread the instruction list, e.g., after you've altered the list upon a ... */// Create a string with length equal to il length// Map opcodes to characters/** Map symbolic instruction names like "getfield" to a single character. ... *//** Replace symbolic names of instructions with the appropiate character and ... *///Bug: BCEL-77 - Instructions are assumed to be english, to avoid odd Locale issues/** Search for the given pattern in the instruction list. You can search for ... */// Where to start search from (index)/** Start search beginning from the start of the given instruction list. ... *//** Start search beginning from `from'. ... *//** Start search beginning from the start of the given instruction list. Check ... *//** Convert opcode number to char. *//** Code patterns found may be checked using an additional user-defined ... */// Initialize pattern map// Some aliases// Precompile some aliases first// Compile strings// Omit already precompiled patterns// precompile all patterns// Add instruction alias to match anything// Not an invalid opcode/* Internal debugging routines. *///    private static final String pattern2string( String pattern ) {//        return pattern2string(pattern, true);//    private static final String pattern2string( String pattern, boolean make_string ) {//        StringBuffer buf = new StringBuffer();//        for (int i = 0; i < pattern.length(); i++) {//            char ch = pattern.charAt(i);//            if (ch >= OFFSET) {//                if (make_string) {//                    buf.append(Constants.getOpcodeName(ch - OFFSET));//                } else {//                    buf.append((ch - OFFSET));//                }//            } else {//                buf.append(ch);//            }//        return buf.toString();/** Java interpreter replacement, i.e., wrapper that uses its own ClassLoader ... *//** Runs the _main method of the given class with the arguments passed in argv ... *//* Method _main is sane ? *//** Default _main method used as wrapper, expects the fully qualified class name ... *//* Expects class name as first argument, other arguments are by-passed. *//** Convert methods and fields into HTML file. ... *//** Print field of class. ... */// Write them to the Attributes.html file with anchor "<name>[<i>]"// Default value// Reference attribute in _attributes.html/* HTML doesn't like names like <clinit> and spaces are places to break ... */// Check for thrown exceptions/** Abstract definition of a class repository. Instances may be used to load ... *//** Store the provided class under "clazz.getClassName()" *//** Remove class from repository *//** Find the class with the name provided, if the class isn't there, return ... *//** Find the class with the name provided, if the class isn't there, make an ... *//** Find the JavaClass instance for the given run-time class object *//** Clear all entries from cache. *//** This repository is used in situations where a Class is created outside the ... */// CLASSNAME X JAVACLASS/** Store a new JavaClass instance into this Repository. *//** Find an already defined (cached) JavaClass object by name. *//** Finds a JavaClass object by name. If it is already in this Repository, the ... */// Just in case, canonical form/** Find the JavaClass object for a runtime Class object. If a class with the ... */// ignored/* Copyright 2003-2004 The Apache Software Foundation. ... *//* $Id: Version.java,v 1.1.2.1 2005/08/01 02:11:19 jeffsuttor Exp $ *//** Administrative class to keep track of the version number of ... *//** Get the basic version string for the current Xalan release. ... *//** Print the processor version to the command line. ... *//** Name of product: Xalan. *//** Implementation Language: Java. *//** Major version number. ... *//** Release Number. ... *//** Maintenance Drop Number. ... *//** Development Drop Number. ... *//* Copyright (c) 2011, 2015, Oracle and/or its affiliates. All rights reserved. ... *//** Commonly used constants. ... *///Xerces security manager// Implementation limits: API properties/** Oracle JAXP property prefix ("http://www.oracle.com/xml/jaxp/properties/"). *//** JDK entity expansion limit; Note that the existing system property ... *//** JDK element attribute limit; Note that the existing system property ... *//** JDK maxOccur limit; Note that the existing system property ... *//** JDK total entity size limit *//** JDK maximum general entity size limit *//** JDK node count limit in entities that limits the total number of nodes ... *//** JDK maximum parameter entity size limit *//** JDK maximum XML name limit *//** JDK maxElementDepth limit *//** JDK property indicating whether the parser shall print out entity ... */// Implementation limits: corresponding System Properties of the above// API properties/** JDK TransformerFactory and Transformer attribute that specifies a class ... *///legacy System Properties/** A string "yes" that can be used for properties such as getEntityCountInfo */// Oracle Feature:/** <p>Use Service Mechanism</p> ... *///System Properties corresponding to ACCESS_EXTERNAL_* properties//all access keyword/** Default value when FEATURE_SECURE_PROCESSING (FSP) is set to true *//** FEATURE_SECURE_PROCESSING (FSP) is false by default *//** Feature enableExtensionFunctions *//** Values for a feature *//** Check if we're in jdk8 or above *//* Check the version of the current JDK against that specified in the ... */// class Constants/** An object that implements this interface can supply ... *//** Get the current context node. ... *//** Get the current context node list. ... *//** Get the error listener. ... *//** Get the value of a node as a number. ... *//** Get the value of a node as a string. ... *//** Get a variable based on it's qualified name. ... *//** Get the XPathContext that owns this ExpressionContext. ... *//** The base class for some EXSLT extension classes. ... *//** Return the string value of a Node ... *//** Convert the string value of a Node to a number. ... *//** This class contains EXSLT common extension functions. ... *//** The exsl:object-type function returns a string giving the type of the object passed ... *//** The exsl:node-set function converts a result tree fragment (which is what you get ... *//** This class contains EXSLT dates and times extension functions. ... */// Datetime formats (era and zone handled separately)./** The date:date-time function returns the current date and time as a date/time string. ... */// Format for date and time.// Must also include offset from UTF.// Get the offset (in milliseconds).// If there is no offset, we have "Coordinated// Universal Time."// Convert milliseconds to hours and minutes// In a few cases, the time zone may be +/-hh:30./** Represent the hours and minutes with two-digit strings. ... *//** The date:date function returns the date specified in the date/time string given ... *//** See above. *//** The date:time function returns the time specified in the date/time string given ... */// The datetime() function returns the zone on the datetime string.  If we// append it, we get the zone substring duplicated.// Fix for JIRA 2013// String zone = datetime.substring(getZoneStart(datetime));// return (time + zone);/** The date:year function returns the year of a date as a number. If no ... */// AD (Common Era -- empty leader)/** The date:month-in-year function returns the month of a date as a number. If no argument ... *//** The date:week-in-year function returns the week of the year as a number. If no argument ... *//** The date:day-in-year function returns the day of a date in a year ... *//** The date:day-in-month function returns the day of a date as a number. ... *//** The date:day-of-week-in-month function returns the day-of-the-week ... *//** The date:day-in-week function returns the day of the week given in a ... *//** The date:hour-in-day function returns the hour of the day as a number. ... *//** The date:minute-in-hour function returns the minute of the hour ... *//** The date:second-in-minute function returns the second of the minute ... *//** The date:leap-year function returns true if the year given in a date ... *//** The date:month-name function returns the full name of the month of a date. ... *//** The date:month-abbreviation function returns the abbreviation of the month of ... *//** The date:day-name function returns the full name of the day of the week ... *//** The date:day-abbreviation function returns the abbreviation of the day ... *//** Returns an array with the 3 components that a datetime input string ... *///  '+' is implicit , not allowed//System.out.println("'" + leader + "' " + datetime + " " + zone);/** Get the start of zone information if the input ends ... */// Invalid.// No zone information./** Attempt to parse an input string with the allowed formats, returning ... *//** Parse the input string and return the corresponding calendar field ... */// Try the allowed formats, from longest to shortest./** Get the full name or abbreviation of the month or day. */// from longest to shortest./** Get the full name or abbreviation for the current month or day ... *//** The date:format-date function formats a date/time according to a pattern. ... */// Get the timezone information if it was supplied and modify the// dateTime so that SimpleDateFormat will understand it.// Need to adjust it since SimpleDateFormat requires GMT+hh:mm but// we have +hh:mm.// Assume local time.// Leave off the timezone since SimpleDateFormat will assume local// time if time zone is not included.// Try the time format first. We need to do this to prevent// SimpleDateFormat from interpreting a time as a year. i.e we just need// to check if it's a time before we check it's a year.// Try the right truncated formats.// Now try the left truncated ones. The Java format() function doesn't// return the correct strings in this case. We strip any pattern// symbols that shouldn't be output so that they are not defaulted to// inappropriate values in the output./** Strips occurrences of the given character from a date format pattern. ... */// Assume it's an openening quote so simply copy the quoted// text to the result. There is nothing to strip here.// The char needs to be stripped./** This class contains EXSLT dynamic extension functions. ... *//** The dyn:max function calculates the maximum value for the nodes passed as ... *//** The dyn:min function calculates the minimum value for the nodes passed as the ... *//** The dyn:sum function calculates the sum for the nodes passed as the first argument, ... *//** The dyn:map function evaluates the expression passed as the second argument for ... *//** The dyn:evaluate function evaluates a string as an XPath expression and returns ... *///"Invalid context passed to evaluate "/** The dyn:closure function creates a node set resulting from transitive closure of ... *//** This class contains EXSLT math extension functions. ... *//** The math:max function returns the maximum value of the nodes passed as the argument. ... *//** The math:min function returns the minimum value of the nodes passed as the argument. ... *//** The math:highest function returns the nodes in the node set whose value is the maximum ... */// empty Nodeset/** The math:lowest function returns the nodes in the node set whose value is the minimum value ... *//** The math:abs function returns the absolute value of a number. ... *//** The math:acos function returns the arccosine value of a number. ... *//** The math:asin function returns the arcsine value of a number. ... *//** The math:atan function returns the arctangent value of a number. ... *//** The math:atan2 function returns the angle ( in radians ) from the X axis to a point (y,x). ... *//** The math:cos function returns cosine of the passed argument. ... *//** The math:exp function returns e (the base of natural logarithms) raised to a power. ... *//** The math:log function returns the natural logarithm of a number. ... *//** The math:power function returns the value of a base expression taken to a specified power. ... *//** The math:random function returns a random number from 0 to 1. ... *//** The math:sin function returns the sine of the number. ... *//** The math:sqrt function returns the square root of a number. ... *//** The math:tan function returns the tangent of the number passed as an argument. ... *//** The math:constant function returns the specified constant to a set precision. ... *//* Copyright (c) 2005, 2017, Oracle and/or its affiliates. All rights reserved. *//* $Id: ExsltSets.java,v 1.1.2.1 2005/08/01 02:08:50 jeffsuttor Exp $ *//** This class contains EXSLT set extension functions. ... *//** The set:leading function returns the nodes in the node set passed as the first argument that ... */// empty NodeSet/** The set:trailing function returns the nodes in the node set passed as the first argument that ... *//** The set:intersection function returns a node set comprising the nodes that are within ... *//** The set:difference function returns the difference between two node sets - those nodes that ... *//** The set:distinct function returns a subset of the nodes contained in the node-set NS passed ... *//** The set:has-same-node function returns true if the node set passed as the first argument shares ... *//** This class contains EXSLT strings extension functions. ... *//** The str:align function aligns a string within another string. ... */// Default is left/** See above *//** The str:concat function takes a node set and returns the concatenation of the ... *//** The str:padding function creates a padding string of a certain length. ... *//** The str:split function splits up a string and returns a node set of token ... *//** The str:tokenize function splits up a string and returns a node set of token ... */// If the delimiter is an empty string, create one token Element for// every single character./** This class contains many of the Xalan-supplied extensions. ... *//** Constructor Extensions */// Make sure class cannot be instantiated/** This method is an extension that implements as a Xalan extension ... */// This no longer will work right since the DTM.// Document myDoc = myProcessor.getContextNode().getOwnerDocument();/** Returns the intersection of two node-sets. ... *//** Returns the difference between two node-sets. ... *//** Returns node-set containing distinct string values. ... *//** Returns true if both node-sets contain the same set of nodes. ... *//** Returns the result of evaluating the argument as a string containing ... *//** Returns a NodeSet containing one text node for each token in the first argument. ... *//** <code>NodeInfo</code> defines a set of XSLT extension functions to be ... *//** <code>systemId</code> returns the system id of the current ... *//** <code>systemId</code> returns the system id of the node passed as ... *//** <code>publicId</code> returns the public identifier of the current ... *//** <code>publicId</code> returns the public identifier of the node passed as ... *//** <code>lineNumber</code> returns the line number of the current ... *//** <code>lineNumber</code> returns the line number of the node ... *//** <code>columnNumber</code> returns the column number of the ... *//** <code>columnNumber</code> returns the column number of the node ... *//** Sets things up for issuing error messages. This class is misnamed, and should ... *//** The language specific resource object for Xalan messages. *//** The class name of the Xalan error message string table. *//** Creates a message from the specified key and replacement arguments, ... *///throws Exception/** Set up error messages. ... *//* This file contains error and warning messages related to Xalan Error ... *//* Static variables *//* Now fill in the message text. ... */// Error messages.../** Get the lookup table for error messages. ... *//** Error message ID that has a null message, but takes in a single object. *///  add this message to fix bug 21478//Earlier (JDK 1.4 XALAN 2.2-D11) at key code '204' the key name was ER_PRIORITY_NOT_PARSABLE// In latest Xalan code base key name is  ER_VALUE_SHOULD_BE_NUMBER. This should also be taken care//in locale specific files like XSLTErrorResources_de.java, XSLTErrorResources_fr.java etc.//NOTE: Not only the key name but message has also been changed.// Note to translators:  The following message should not normally be displayed//   to users.  It describes a situation in which the processor has detected//   an internal consistency problem in itself, and it provides this message//   for the developer to help diagnose the problem.  The name//   'ElemTemplateElement' is the name of a class, and should not be//   translated.//   for the developer to help diagnose the problem.  The substitution text//   provides further information in order to diagnose the problem.  The name//   'RedundentExprEliminator' is the name of a class, and should not be// This code is shared with warning codes.// SystemId Unknown// Note to translators:  The following message is used if the value of// an attribute in a stylesheet is invalid.  "QNAME" is the XML data-type of// the attribute, and should not be translated.  The substitution text {1} is// the attribute value and {0} is the attribute name.//The following codes are shared with the warning codes...// an attribute in a stylesheet is invalid.  "ENUM" is the XML data-type of// the attribute value, {0} is the attribute name, and {2} is a list of valid// an attribute in a stylesheet is invalid.  "NMTOKEN" is the XML data-type// of the attribute, and should not be translated.  The substitution text {1} is// an attribute in a stylesheet is invalid.  "NCNAME" is the XML data-type// an attribute in a stylesheet is invalid.  "boolean" is the XSLT data-type// an attribute in a stylesheet is invalid.  "number" is the XSLT data-type// End of shared codes...// Note to translators:  A "match pattern" is a special form of XPath expression// that is used for matching patterns.  The substitution text is the name of// a function.  The message indicates that when this function is referenced in// a match pattern, its argument must be a string literal (or constant.)// ER_ARG_LITERAL - new error message for bugzilla //5202// Note to translators:  The following message indicates that two definitions of// a variable.  A "global variable" is a variable that is accessible everywher// in the stylesheet.// ER_DUPLICATE_GLOBAL_VAR - new error message for bugzilla #790// a variable were encountered.// ER_DUPLICATE_VAR - new error message for bugzilla #790// Note to translators:  "xsl:template, "name" and "match" are XSLT keywords// which must not be translated.// ER_TEMPLATE_NAME_MATCH - new error message for bugzilla #789// Note to translators:  "exclude-result-prefixes" is an XSLT keyword which// should not be translated.  The message indicates that a namespace prefix// encountered as part of the value of the exclude-result-prefixes attribute// was in error.// ER_INVALID_PREFIX - new error message for bugzilla #788// Note to translators:  An "attribute set" is a set of attributes that can// be added to an element in the output document as a group.  The message// indicates that there was a reference to an attribute set named {0} that// was never defined.// ER_NO_ATTRIB_SET - new error message for bugzilla #782// Note to translators:  This message indicates that there was a reference// to a function named {0} for which no function definition could be found.// Note to translators:  This message indicates that the XSLT instruction// that is named by the substitution text {0} must not contain other XSLT// instructions (content) or a "select" attribute.  The word "select" is// an XSLT keyword in this case and must not be translated.// Note to translators:  This message indicates that the value argument// of setParameter must be a valid Java Object.// Warnings...//Following are the new WARNING keys added in XALAN code base after Jdk 1.4 (Xalan 2.2-D11)// Note to translators:  "name" and "xsl:processing-instruction" are keywords// and must not be translated.// and must not be translated.  "NCName" is an XML data-type and must not be// translated.// Note to translators:  This message is reported if the stylesheet that is// being processed attempted to construct an XML document with an attribute in a// place other than on an element.  The substitution text specifies the name of// the attribute.//Check: WHY THERE IS A GAP B/W NUMBERS in the XSLTErrorResources properties file?// Other miscellaneous text used inside the code...// Note to translators:  The following messages provide usage information// for the Xalan Process command line.  "Process" is the name of a Java class,// and should not be translated.// Note to translators: The option name and the parameter name do not need to// be translated. Only translate the messages in parentheses.  Note also that// leading whitespace in the messages is used to indent the usage information// for each option in the English messages.// Do not translate the keywords: XSLTC, SAX, DOM and DTM.// Following are the new options added in XSLTErrorResources.properties files after Jdk 1.4 (Xalan 2.2-D11)// Added by sboag/scurcuru; experimental//AddITIONAL  STRINGS that need L10n// Note to translators:  The following message describes usage of a particular// command-line option that is used to enable the "template inlining"// optimization.  The optimization involves making a copy of the code// generated for a template in another template that refers to it.// ================= INFRASTRUCTURE ======================/** String for use when a bad error code was encountered. *//** String for use when formatting of the error string failed. *//** General error string. *//** String to prepend to error messages. *//** String to prepend to warning messages. *//** String to specify the XSLT module. *//** String to specify the XML parser module. *//** I don't think this is used any more. ... *//** Default implementation of XSLTErrorResources.  This is just ... *//** Primary constants used in the TransformerImpl classes. ... *//** IDs for XSL element types. These are associated ... *///  ELEMNAME_ANCHOR_PATTERN = 23,// my own//  ELEMNAME_DEFINECONSTANT = 29,//  ELEMNAME_DEFINEMACRO = 10,// Pattern by example support//  ELEMNAME_WITHPARAM = 56,// Next free number: 90 (88 and 89 used for EXSLT elements);/** Literals for XSL element names.  Note that there are more ... */// pattern-by-example support/** Literals for EXSLT function elements. *//** Literals for XSL attribute names.  Note that there may be more ... */// qname,// namespace declaration prefix -- NOT an attribute by itself// default namespace/** IDs for XSL attribute types. These are associated ... *//** Mnemonics for the possible values of the xsl:output element's ... *//* For space-att *//** For indent-result *//** For letter-value attribute (part of conversion attributes). *//** For level attribute in xsl:number. *//** For Stylesheet-prefix and result-prefix in xsl:namespace-alias *//** Integer equivalents for above *//** Integer equivelents for above *//** some stuff for my patterns-by-example *//** Stuff for sorting *//** Integer equivelents for DATATYPE attribute *//** Integer equivelents for ORDER attribute *//** Integer equivelents for CASE-ORDER attribute *//** some stuff for Decimal-format *//** temp dummy *//** A configuration error. This was an internal class in ObjectFactory previously */// Data/** Exception. *//** Construct a new instance with the specified detail string and ... */// <init>(String,Exception)// methods/** Returns the exception associated to this error. */// getException():Exception// class ConfigurationError/* Copyright (c) 2011, 2013, Oracle and/or its affiliates. All rights reserved. ... *//** This is the base class for features and properties *//** States of the settings of a property, in the order: default value, value ... *///this order reflects the overriding order/** Values of the properties as defined in enum Properties *//** States of the settings for each property in Properties above *//** Set the value for a specific property. ... *///only update if it shall override/** Set the value of a property by its index ... *//** Set value by property name and state ... *//** Return the value of the specified property ... *//** Return the value of the specified property. ... *//** Return the value of a property by its ordinal ... *//** Get the index by property name ... *///internally, ordinal is used as index/** Read from system properties, or those in jaxp.properties ... *///invalid setting ignored/** This class is duplicated for each JAXP subpackage so keep it in sync. ... *//** Set to true for debugging *//** Prints a message to standard error if debugging is enabled. */// debugPrintln(String)/** Figure out which ClassLoader to use.  For JDK 1.2 and later use ... *///this will ensure bootclassloader is used// Figure out which ClassLoader to use for loading the provider// class.  If there is a Context ClassLoader then use it.// Assert: we are on JDK 1.1 or we have no Context ClassLoader// or any Context ClassLoader in chain of system classloader// (including extension ClassLoader) so extend to widest// ClassLoader (always look in system ClassLoader if Xalan// is in boot/extension/system classpath and in current// ClassLoader otherwise); normal classloaders delegate// back to system ClassLoader first so this widening doesn't// change the fact that context ClassLoader will be consulted// Assert: Current ClassLoader in chain of// boot/extension/system ClassLoaders// Assert: Current ClassLoader not in chain of// boot ClassLoader reached// Check for any extension ClassLoaders in chain up to// boot ClassLoader// Assert: Context ClassLoader not in chain of// findClassLoader():ClassLoader/** Create an instance of a class using the same class loader for the ObjectFactory by default ... *//** Create an instance of a class using the specified ClassLoader */// assert(className != null);/** Find a Class using the same class loader for the ObjectFactory by default ... *//** Find a Class using the specified ClassLoader *///throw security exception if the calling thread is not allowed to access the//class. Restrict the access to the package classes as specified in java.security policy.// Fall back to current classloader// class ObjectFactory/** This class is duplicated for each subpackage so keep it in sync. It is ... *//** Return an instance of this class. */// eliminate loops in case of the boot// ClassLoader returning itself as a parent/** Return resource using the same classloader for the ObjectFactory by ... *//** Gets a resource bundle using the specified base name, the default locale, and the caller's class loader. ... *//** Gets a resource bundle using the specified base name and locale, and the caller's class loader. ... *//** Strip off path from an URI ... *//** Check the protocol used in the systemId against allowed protocols ... *///access allowed/** Check if the protocol is in the allowed list of protocols. The check ... *//** Read JAXP system property in this order: system property, ... *//** Read from $java.home/lib/jaxp.properties for the specified property ... *//** Cache for properties in java.home/lib/jaxp.properties *//** Flag indicating if the program has tried reading java.home/lib/jaxp.properties *//* Copyright (c) 2013, 2016, Oracle and/or its affiliates. All rights reserved. ... *//** This class is not the same as that in Xerces. It is used to manage the ... *//** Limits managed by the security manager *//** Map old property names with the new ones *//** Values of the properties *//** States of the settings for each property *//** States that determine if properties are set explicitly *//** Index of the special entityCountInfo property *//** Default constructor. Establishes default values for known security ... *//** Instantiate Security Manager in accordance with the status of ... *///read system properties or jaxp.properties/** Setting FEATURE_SECURE_PROCESSING explicitly *//** Set limit by property name and state ... *//** Set the value for a specific limit. ... *///if it's explicitly set, it's treated as yes no matter the value/** Return the value of a property by its index ... *//** Return the state of the limit property ... *///special property to return entity count info/** Indicate if a property is set explicitly ... *//** Read from system properties, or those in jaxp.properties *///if system property is not found, try the older form if any// Array list to store printed warnings for each SAX parser used/** Prints out warnings if a parser does not support the specified feature/property. ... *///invalid setting/** This class manages security related properties *//** Properties managed by the security property manager *//** Default constructor. Establishes default values *//* Copyright (c) 2005, 2015, Oracle and/or its affiliates. All rights reserved. *//* $Id: EnvironmentCheck.java,v 1.2.4.1 2005/09/09 07:13:59 pvedula Exp $ *//** Utility class to report simple information about the environment. ... *//** Command line runnability: checks for [-out outFilename] arg. ... */// Default to System.out, autoflushing// Read our simplistic input args, if supplied/** Programmatic entrypoint: Report on basic Java environment ... */// Use user-specified output writer if non-null// Setup a hash to store various environment information in// Check for ERROR keys in the hashtable, and print report// Note: many logMsg calls have # at the start to//  fake a property-file like output/** Fill a hash with basic environment settings that affect Xalan. ... */// Call various worker methods to fill in the hash//  These are explicitly separate for maintenance and so//  advanced users could call them standalone/** Dump a basic Xalan environment report to outWriter. ... */// Fake the Properties-like output// Special processing for classes found..// ..normal processing for all other entries// Note: we could just check for the ERROR key by itself,//    since we now set that, but since we have to go//    through the whole hash anyway, do it this way,//    which is safer for maintenance/** Prefixed to hash keys that signify serious problems. *//** Added to descriptions that signify potential problems. *//** Value for any error found. *//** Prefixed to hash keys that signify version numbers. *//** Prefixed to hash keys that signify .jars found in classpath. *//** Marker that a class or .jar was found. *//** Marker that a class or .jar was not found. *//** Listing of common .jar files that include Xalan-related classes. */// Serializer (shared between Xalan & Xerces)// Xerces-J 1.x// Xerces-J 2.x/** Print out report of .jars found in a classpath. ... *//** Stylesheet extension entrypoint: Dump a basic Xalan ... */// errors |= logFoundJars(v, keyStr);// end of for.../** Fillin hash with info about SystemProperties. ... */// Grab java version for later use// For applet context, etc.// Printout jar files on classpath(s) that may affect operation//  Do this in order// This is present in all JVM's// Also check for JDK 1.2+ type classpaths//@todo also check other System properties' paths?//  v2 = checkPathForJars(System.getProperty("sun.boot.library.path"), jarNames);   // ?? may not be needed//  v3 = checkPathForJars(System.getProperty("java.library.path"), jarNames);   // ?? may not be needed/** Cheap-o listing of specified .jars found in the classpath. ... */// Look at each classpath entry for each of our requested jarNames// If any requested jarName exists, report on//  the details of that .jar file// Note "-" char is looked for in appendFoundJars// We won't bother reporting on the xalan.jar apparent version// since this requires knowing the jar size of the xalan.jar// before we build it.// For other jars, eg. xml-apis.jar and xercesImpl.jar, we// report the apparent version of the file we've found/* no-op, don't add it *//** Cheap-o method to determine the product version of a .jar. ... */// If we found a matching size and it's for our//  jar, then return it's description// Lookup in static JARVERSIONS Map//              || "xalan.jar".equalsIgnoreCase(jarName))// For xalan.jar and xerces.jar/xercesImpl.jar, which we ship together:// The jar is not from a shipped copy of xalan-j, so//  it's up to the user to ensure that it's compatible// Otherwise, it's just a jar we don't have the version info calculated for/** Report version information about JAXP interfaces. ... */// If we succeeded, we have JAXP 1.4 available/** Report product version information from Xalan-J. ... */// Found Xalan-J 1.x, grab it's version fields// NOTE: This is the old Xalan 2.0, 2.1, 2.2 version class,//    is being replaced by class below// Found Xalan-J 2.x, grab it's version fields// NOTE: This is the new Xalan 2.2+ version class/** Report product version information from common parsers. ... */// Found Xerces-J 1.x, grab it's version fields// Look for xerces1 and xerces2 parsers separately// Found Xerces-J 2.x, grab it's version fields//@todo determine specific crimson version/** Report product version information from Ant. ... */// noArgs/** Report version info from DOM interfaces. ... */// no parameter// If we succeeded, we have loaded interfaces from a//  level 3 DOM somewhere// String, String//  level 2 DOM somewhere// Check for the working draft version, which is//  commonly found, but won't work anymore// Check for the final draft version as well//@todo load an actual DOM implmementation and query it as well//@todo load an actual DOM implmementation and check if//  isNamespaceAware() == true, which is needed to parse//  xsl stylesheet files into a DOM/** Report version info from SAX interfaces. ... */// Attributes// Note this introduces a minor compile dependency on SAX...// This method was only added in the final SAX 2.0 release;//  see changes.html "Changes from SAX 2.0beta2 to SAX 2.0prerelease"//  real, final SAX version 2.0 somewhere// If we didn't find the SAX 2.0 class, look for a 2.0beta2//  SAX version 2.0beta2 or earlier; these might work but//  you should really have the final SAX 2.0// If we didn't find the SAX 2.0beta2 class, look for a 1.0 one//  SAX version 1.0 somewhere; which won't work very//  well for JAXP 1.1 or beyond!// If we didn't find the SAX 2.0 class, look for a 1.0 one// Note that either 1.0 or no SAX are both errors/** Manual table of known .jar sizes. ... *//** Static initializer for JARVERSIONS table. ... */// Stop recording xalan.jar sizes as of Xalan Java 2.5.0// Stop recording xsltc.jar sizes as of Xalan Java 2.5.0// If the below were more common I would update it to report//  errors better; but this is so old hardly anyone has it// Stop recording xalanservlet.jar sizes as of Xalan Java 2.5.0; now a .war file// For those who've downloaded JAXP from sun// jakarta-ant: since many people use ant these days/** Simple PrintWriter we send output to; defaults to System.out. *//** Bottleneck output: calls outWriter.println(s). ... *//* Copyright 1999-2004 The Apache Software Foundation. ... *//* $Id: Process.java,v 1.2.4.2 2005/09/15 18:21:57 jeffsuttor Exp $ *///J2SE does not support Xalan interpretive/* import com.sun.org.apache.xalan.internal.trace.PrintTraceListener; ... *//** The main() method handles the Xalan command-line interface. ... *//** Prints argument options. ... *///"xslproc options: ");//"    [-XSLTC (use XSLTC for transformation)]//"    [-IN inputXMLURL]");//"   [-XSL XSLTransformationURL]");//"   [-OUT outputFileName]");// System.out.println(resbundle.getString("optionE")); //"   [-E (Do not expand entity refs)]");//"   [-V (Version info)]");// System.out.println(resbundle.getString("optionVALIDATE")); //"   [-VALIDATE (Set whether validation occurs.  Validation is off by default.)]");//"   [-EDUMP {optional filename} (Do stackdump on error.)]");//"   [-XML (Use XML formatter and add XML header.)]");//"   [-TEXT (Use simple Text formatter.)]");//"   [-HTML (Use HTML formatter.)]");//"   [-PARAM name expression (Set a stylesheet parameter)]");//"   [-URIRESOLVER full class name (URIResolver to be used to resolve URIs)]");//"   [-ENTITYRESOLVER full class name (EntityResolver to be used to resolve entities)]");//"   [-CONTENTHANDLER full class name (ContentHandler to be used to serialize output)]");//"   [-SECURE (set the secure processing feature to true)]");// J2SE does not support Xalan interpretive/* System.out.println("\n\t\t\t" + resbundle.getString("xslProc_xalan_options") + "\n"); ... *//** Command line interface to transform an XML document according to ... */// main -> _main// Runtime.getRuntime().traceMethodCalls(false); // turns Java tracing off// Runtime.getRuntime().traceMethodCalls(false);// Runtime.getRuntime().traceInstructions(false);/** The default diagnostic writer... */// false -> true//      "XSL Process was not successful.");// shut up compiler/* PrintTraceListener tracer = null; */// The -XSLTC option has been processed./* else if ("-TT".equalsIgnoreCase(argv[i])) ... */// TBD:// xmlProcessorLiaison.setIndent(indentAmount);//"Missing argument for);// xmlProcessorLiaison.setShouldExpandEntityRefs(false);//">>>>>>> Xalan Version "/* xmlProcessorLiaison.getParserDescription()+ */// "<<<<<<<");/* else if ("-QC".equalsIgnoreCase(argv[i])) ... *///            "Missing argument for);/* else if ("-L".equalsIgnoreCase(argv[i])) ... */// Generate the translet class and optionally specify the name// of the translet class.// Specify the destination directory for the translet classes.// Specify the jar file name which the translet classes are packaged into.// Specify the package name prefix for the generated translet classes.// Enable template inlining.// Turns on additional debugging message output// Create the Transformer from the translet if the translet class is newer// than the stylesheet.//"Invalid argument:);// Print usage instructions if no xml and xsl file is specified in the command line// Note that there are usage cases for calling us without a -IN arg// The main XSL transformation occurs here!// Parse in the xml data into a DOM// System.out.println("Calling newTemplates: "+xslFileName);// System.out.println("Done calling newTemplates: "+xslFileName);// One possible improvement might be to ensure this is//  a valid URI before setting the systemId, but that//  might have subtle changes that pre-existing users//  might notice; we can think about that later -sc r1.46// We used to default to incremental mode in this case.// We've since decided that since the -INCREMENTAL switch is// available, that default is probably not necessary nor// necessarily a good idea./* // This is currently controlled via TransformerFactoryImpl. ... */// Did they pass in a stylesheet, or should we get it from the// document?//"No stylesheet found in: "// + inFileName + ", media="// + media);//"No xml-stylesheet PI found in: "//+ inFileName);// Override the output format?/* if (transformer instanceof com.sun.org.apache.xalan.internal.transformer.TransformerImpl) ... */// Now serialize output to disk with identity transformer// Loop for diagnosing bugs with inconsistent behavior// System.out.println("Testing the TransformerHandler...");// Use JAXP1.1 ( if possible )/* if (!useXSLTC) ... */// System.out.println("Starting transform");// System.out.println("Done with transform");//          "XSL Process was not successful.");// close output streams// diagnosticsWriter.println(XSLMessages.createMessage(XSLTErrorResources.ER_NOT_SUCCESSFUL, null)); //"XSL Process was not successful.");// diagnosticsWriter.close();// if(!setQuietMode)//  diagnosticsWriter.println(resbundle.getString("xsldone")); //"Xalan: done");// diagnosticsWriter.println("");  //"Xalan: done");/** It is _much_ easier to debug under VJ++ if I can set a single breakpoint ... *//** Wait for a return key to continue ... *//** Print a message if an option cannot be used with -XSLTC. ... *//** Print a message if an option can only be used with -XSLTC. ... *//* Copyright (c) 2005, 2016, Oracle and/or its affiliates. All rights reserved. */// 0 is reserved for NodeIterator.END// used by some node iterators to know which node to return// Constants used by getResultTreeFrag to indicate the types of the RTFs./** returns singleton iterator containg the document root *//** This method is responsible for: ... *//** Interface for SAXImpl which adds methods used at run-time, over and above ... *//** Callers should not call next() after it returns END. *//** Resets the iterator to the last start node. *//** Returns the number of elements in this iterator. *//** Returns the position of the current node in the set. *//** Remembers the current node for the next call to gotoMark(). *//** Restores the current node remembered by setMark(). *//** Set start to END should 'close' the iterator, ... *//** True if this iterator has a reversed axis. *//** Returns a deep copy of this iterator. *//** Prevents or allows iterator restarts. *//** Admin class that assigns a version number to the XSLTC software. ... *//* Copyright 2001-2004 The Apache Software Foundation. ... *//* $Id: Compile.java,v 1.2.4.1 2005/08/31 11:24:13 pvedula Exp $ */// Versioning numbers  for the compiler -v option output// This variable should be set to false to prevent any methods in this// class from calling System.exit(). As this is a command-line tool,// calling System.exit() is normally OK, but we also want to allow for// this class being used in other ways as well./** This method implements the command line compiler. See the USAGE_STRING ... */// used to be 'false'// fall through to case h// Generate a vector containg URLs for all stylesheets specified// Compile the stylesheet and output class/jar file(s)// exits with code '-1'/* $Id: Transform.java,v 1.2.4.1 2005/09/12 09:07:33 pvedula Exp $ */// TODO: at this time we do not do anything with this// information, attempts to add the jarfile to the CLASSPATH// were successful via System.setProperty, but the effects// were not visible to the running JVM. For now we add jarfile// to CLASSPATH in the wrapper script that calls this program.// TODO verify jarFile exists...// Create a SAX parser and get the XMLReader object it uses// Set the DOM's DOM builder as the XMLReader's SAX2 content handler// Pass global parameters// Transform the document// Parse options starting with '-'// Enough arguments left ?// Get document file and class name// Parse stylesheet parameters/* $Id: GetOpt.java,v 1.2.4.1 2005/08/31 11:46:04 pvedula Exp $ *//** GetOpt is a Java equivalent to the C getopt() library function ... */// fill in the options list// end of opts// set index of first operand// end of options// simple option token such as '-s' found// stacked options found, such as '-shm'// iterate thru the tokens after the dash and// add them to theOptions list// case 1- there are not options stored yet therefore// this must be an command argument, not an option argument// stop processing options// case 2-// there are options stored, check to see if// this arg belong to the last arg stored// case 3 -// the last option stored does not take// an argument, so again, this argument// must be a command argument, not// an option argument// end option does not start with "-"// end for args loop//  attach an iterator to list of options// options are done, now fill out cmd arg list with remaining args/** debugging routine to print out all options collected *//** gets the next option found in the commandline. Distinguishes ... *//** gets the argument for the current parsed option. For example, ... *//** gets list of the commandline arguments. For example, in command ... *///   Inner Classes// inner class to model an option// end class Option// inner class to query optString for a possible option match,// and whether or not a given legal option takes an argument.// reached end of theOptString// end class OptionMatcher// end class GetOpt/* $Id: GetOptsException.java,v 1.2.4.1 2005/08/31 11:47:06 pvedula Exp $ *//* $Id: IllegalArgumentException.java,v 1.2.4.1 2005/08/31 11:47:56 pvedula Exp $ *//* $Id: MissingOptArgException.java,v 1.2.4.1 2005/08/31 11:49:21 pvedula Exp $ */// may be null// promote to node-set// Compile relative path iterator(s)// Backwards branches are prohibited if an uninitialized object is// on the stack by section 4.9.4 of the JVM Specification, 2nd Ed.// We don't know whether this code might contain backwards branches,// so we mustn't create the new object until after we've created// this argument to its constructor.  Instead we calculate the// value of the argument to the constructor first, store it in// a temporary variable, create the object and reload the argument// from the temporary to avoid the problem.// Create new AbsoluteIterator// Initialize AbsoluteIterator with iterator from the stack// absolute path pattern temporary/* If _left is an ancestor pattern, backpatch this pattern's false ... */// clears list/** Construct an alternative pattern. The method <code>setParent</code> ... *//** The type of an '|' is not really defined, hence null is returned. *///!!! can be wildcard/* The scope of this local var must be the entire method since ... *//* If _right is an ancestor pattern, backpatch this pattern's false ... *//** Returns true if this <xsl:apply-imports/> element has parameters *//** Determine the lowest import precedence for any stylesheet imported ... */// Move to root of include tree/** Parse the attributes and contents of an <xsl:apply-imports/> element. */// Indicate to the top-level stylesheet that all templates must be// compiled into separate methods.// Get the mode we are currently in (might not be any)// Get the method name for <xsl:apply-imports/> in this mode// with-params/** Type-check the attributes/contents of an <xsl:apply-imports/> element. *//** Translate call-template. A parameter frame is pushed only if ... */// Push the arguments that are passed to applyTemplates()// Push a new parameter frame in case imported template might expect// parameters.  The apply-imports has nothing that it can pass.// Get the [min,max> precedence of all templates imported under the// current stylesheet// Get name of appropriate apply-templates function for this// xsl:apply-imports instruction// Construct the translet class-name and the signature of the method// Pop any parameter frame that was pushed above./* Copyright (c) 2015, 2016, Oracle and/or its affiliates. All rights reserved. */// instantiate Mode if needed, cache (apply temp) function name// check if sorting nodes is required// Push a new parameter frame// translate with-params// The 'select' expression is a result-tree// <xsl:sort> cannot be applied to a result tree - issue warning// Put the result tree (a DOM adapter) on the stack// Get back the DOM and iterator (not just iterator!!!)// compute node iterator for applyTemplates//!!! need to instantiate all needed modes// unmap parameters to release temporary result trees// Pop parameter frame//!!! add text nodes//!!! take care of value templates/* Copyright (c) 2015, Oracle and/or its affiliates. All rights reserved. *//* $Id: AttributeSet.java,v 1.5 2005/09/28 13:48:04 pvedula Exp $ */// This prefix is used for the method name of attribute set methods// Element contents/** Returns the QName of this attribute set *//** Returns the method name of this attribute set. This method name is ... *//** Call this method to prevent a method for being compiled for this set. ... *//** Parse the contents of this attribute set. Recognised attributes are ... */// Get this attribute set's name// Get any included attribute sets (similar to inheritance...)// Parse the contents of this node. All child elements must be// <xsl:attribute> elements. Other elements cause an error.// Point the symbol table back at us.../** Type check the contents of this element */// _mergeSet Point to any previous definition of this attribute set/** Compile a method that outputs the attributes in this set */// Create a new method generator for an attribute set method// Generate a reference to previous attribute-set definitions with the// same name first.  Those later in the stylesheet take precedence.// Translate other used attribute sets first, as local attributes// take precedence (last attributes overrides first)// Translate all local attributes/* $Id: AttributeValueTemplate.java,v 1.2.4.1 2005/09/01 10:26:57 pvedula Exp $ */// A Unicode nonchar/** Two-pass parsing of ATVs. In the first pass, double curly braces are ... *//* First pass: replace double curly braces and delimit expressions ... */// Use lookahead if available// replace {{ by {// replace }} by }// Must be in OUT_EXPR at the end of parsing/* Second pass: split up buffer into literal and non-literal expressions. */// consume other delimiter// StringBuffer is on the stack/* Copyright (c) 2019, Oracle and/or its affiliates. All rights reserved. ... *//** Returns true if this expressions contains a call to position(). This is ... *//** Returns true if this expressions contains a call to last() *//* Copyright (c) 2015, 2019, Oracle and/or its affiliates. All rights reserved. ... *//** This class implements inlined calls to the XSLT standard functions ... */// true list falls through/* Copyright (c) 2016, Oracle and/or its affiliates. All rights reserved. *//** Name of template to call. *//** The array of effective parameters in this CallTemplate. An object in ... *//** The corresponding template which this CallTemplate calls. *//** Verify that a template with this name exists. */// If there are Params in the stylesheet or WithParams in this call?// Build the parameter list if the called template is simple named// This is only needed when the called template is not// a simple named template.// Push parameter frame// Generate a valid Java method name// Load standard arguments// Initialize prefix of method signature// If calling a simply named template, push actual arguments// append Object to signature// Push 'null' if Param to indicate no actual parameter specified// translate WithParam// Complete signature and generate invokevirtual call// release temporary result trees// Do not need to call Translet.popParamFrame() if we are// calling a simple named template./** Return the simple named template which this CallTemplate calls. ... *//** Build the list of effective parameters in this CallTemplate. ... */// Put the parameters from the called template into the array first.// This is to ensure the order of the parameters.// Replace a Param with a WithParam if they have the same name.// Ignore if not WithParam// Search for a Param with the same name/** Name of the class that is the target of the cast. Must be a ... *//** A reference to the expression being casted. *//** Type check the two parameters for this function */// Check that the function was passed exactly two arguments// The first argument must be a literal String// Second argument must be of type reference or object/* $Id: CastExpr.java,v 1.2.4.1 2005/09/12 10:06:35 pvedula Exp $ *//** Legal conversions between internal types. */// Possible type conversions between internal types/** Construct a cast expression and check that the conversion is ... */// use inherited field// check if conversion is valid/** Type checking a cast expression amounts to verifying that the ... */// multiple instances// throw new TypeCheckError(this);// This is a special case for the self:: axis. Instead of letting// the Step object create and iterator that we cast back to a single// node, we simply ask the DOM for the node type./* $Id: Choose.java,v 1.2.4.1 2005/09/01 12:00:14 pvedula Exp $ *//** Display the element contents (a lot of when's and an otherwise) *//** Translate this Choose element. Generate a test-chain for the various ... */// These two are for reporting errors only// Traverse all child nodes - must be either When or Otherwise// Add a When child element// Add an Otherwise child element// It is an error if we find some other element here// Make sure that there is at least one <xsl:when> element// next element will hold a handle to the beginning of next// When/Otherwise if test on current When fails// handled later!// remember end of condition// The When object should be ignored completely in case it tests// for the support of a non-available element// goto exit after executing the body of when// Translate any <xsl:otherwise> element// now that end is known set targets of exit gotos/** Returns true if this closure is compiled in an inner class (i.e. ... *//** Returns a reference to its parent closure or null if outermost. *//** Returns the name of the auxiliary class or null if this predicate ... *//** Add new variable to the closure. */// Shortcut for literal strings// If the content is literal text, call comment(char[],int,int) or// comment(String), as appropriate.  Otherwise, use a// StringValueHandler to gather the textual content of the xsl:comment// and call comment(String) with the result.// Save the current handler base on the stack// first arg to "comment" call// Get the translet's StringValueHandler// translate contents with substituted handler// get String out of the handler// call "comment"// Restore old handler base from stack/** translate leaves a String on the stack *//* Copyright (c) 2016, 2017, Oracle and/or its affiliates. All rights reserved. *//* $Id: Constants.java,v 1.7 2006/06/19 19:49:04 spericas Exp $ */// Error categories used to report errors to Parser.reportError()// Unexpected internal errors, such as null-ptr exceptions, etc.// Immediately terminates compilation, no translet produced// XSLT elements that are not implemented and unsupported ext.// Fatal error in the stylesheet input (parsing or content)// Other error in the stylesheet input (parsing or content)// Does not terminate compilation, no translet produced// Other error in the stylesheet input (content errors only)// Does not terminate compilation, a translet is produced// xml/dtm/ref/DTMDefaultBaseIterators"; //xalan/xsltc/dom/DOMImpl";//xml/dtm/ref/DTMDefaultBaseIterators"; //xalan/xsltc/dom/DOMImpl;";// output interface/** Create a contains() call - two arguments, both strings *//** This XPath function returns true/false values */// The first argument must be a String, or cast to a String// The second argument must also be a String, or cast to a String/** Compile the expression - leave boolean expression on stack *//** Compile expression and update true/false-lists */// Get the name of the node to copy and save for later// Get the length of the node name and save for later// Ignore attribute sets if current node is ROOT. DOM.shallowCopy()// returns "" for ROOT, so skip attribute sets if length == 0// Copy in attribute sets if specified// If the parent of this element will result in an element being// output then we know that it is safe to copy out the attributes// If not we have to check to see if the copy will result in an// element being output.// check if element; if not skip to translate body// length != 0 -> element -> do attribute sets// not an element; root// Instantiate body of xsl:copy// Call the output handler's endElement() if we copied an element// (The DOM.shallowCopy() method calls startElement().)// make sure required attribute(s) have been set// falls through// push NodeIterator// call copy from the DOM 'library'// We want the whole tree, so we start with the root node//need a pointer to the DOM ;//ICONST_0);/** No type check needed for the <xsl:decimal-formatting/> element *//** Parse the name of the <xsl:decimal-formatting/> element */// Get the name of these decimal formatting symbols// Check if a set of symbols has already been registered under this name/** This method is called when the constructor is compiled in ... */// DecimalFormatSymbols.<init>(Locale);// xsl:decimal-format - except for the NaN and infinity attributes.// Push the format name on the stack for call to addDecimalFormat()// Manufacture a DecimalFormatSymbols on the stack// for call to addDecimalFormat()// Use the US Locale as the default, as most of its settings// are equivalent to the default settings required of// DecimalFormatSymbols.setDecimalSeparator();/** Creates the default, nameless, DecimalFormat object in ... */// Push the format name, which is empty, on the stack// Manufacture a DecimalFormatSymbols on the stack for// call to addDecimalFormat().  Use the US Locale as the// default, as most of its settings are equivalent to// the default settings required of xsl:decimal-format -// except for the NaN and infinity attributes./** Default function call constructor *//** Type checks the arguments passed to the document() function. The first ... */// At least one argument - two at most// Parse the first argument// should not happened// Parse the second argument/** Translates the document() function call to a call to LoadDocument()'s ... */// documentF(Object,String,AbstractTranslet,DOM)//ac == 2; ac < 1 or as >2  was tested in typeChec()// documentF(Object,DTMAxisIterator,String,AbstractTranslet,DOM)// The URI can be either a node-set or something else cast to a string//_arg2 == null was tested in typeChec()// Feck the rest of the parameters on the stack/** Force the argument to this function to be a literal string. *//** Returns an object representing the compile-time evaluation ... *//** Returns the result that this function will return *//** Calls to 'element-available' are resolved at compile time since ... *//** Typing rules: see XSLT Reference by M. Kay page 345. */// both compared as strings// the following 2 cases optimize @attr|.|.. = 'string'// optimize node/node// compare(Node, NodeSet) will be invoked// for compare(Node, NodeSet)// At least one argument is of type node, node-set or result-tree// Promote an expression of type node to node-set// If one arg is a node-set then make it the left one// Promote integers to doubles to have fewer compares// not x <-> x xor 1// Next, result-tree/string and result-tree/result-tree comparisons// x != y <-> x xor y// needed ?// Next, node-set/t for t in {real, string, node-set, result-tree}// Cast a result tree to a string to use an existing compare// Call the appropriate compare() from the BasisLibrary/** The type of this expression. It is set after calling ... *//** Instruction handles that comprise the true list. *//** Instruction handles that comprise the false list. */// default should be 'false' for StepPattern/** Type check all the children of this node. *//** Translate this node into JVM bytecodes. *//** Translate this node into a fresh instruction list. ... *//** Redefined by expressions of type boolean that use flow lists. *//** If this expression is of type node-set and it is not a variable ... */// Ignore if type is not node-set// setStartNode() should not be called if expr is a variable ref/** Synthesize a boolean expression, i.e., either push a 0 or 1 onto the ... *//** Search for a primop in the symbol table that matches the method type ... */// Skip if different arity// The first method with the right arity is the default// default method// Check if better than last one found/** This element never produces any data on the stack *//** Activate this fallback element *//** Parse contents only if this fallback element is put in place of ... *//** Translate contents only if this fallback element is put in place of ... *//** Primary expression of this filter. I.e., 'e' in '(e)[p1]...[pn]'. *//** Array of predicates in '(e)[p1]...[pn]'. *//** Type check a FilterParentPath. If the filter is not a node-set add a ... */// Type check predicates and turn all optimizations off if appropriate/** Translate a filter expression by pushing the appropriate iterator ... *//** Translate a sequence of predicates. Each predicate is translated ... */// If not predicates left, translate primary expression// Get the next predicate to be translated// Translate the rest of the predicates from right to left// Backwards branches are prohibited if an uninitialized object// is on the stack by section 4.9.4 of the JVM Specification,// 2nd Ed.  We don't know whether this code might contain// backwards branches, so we mustn't create the new object unti// after we've created the suspect arguments to its constructor// Instead we calculate the values of the arguments to the// constructor first, store them in temporary variables, create// the object and reload the arguments from the temporaries to// avoid the problem.// Translate predicates from right to left// the suspect arguments to its constructor.  Instead we calculate// the values of the arguments to the constructor first, store them// in temporary variables, create the object and reload the// arguments from the temporaries to avoid the problem.// Create a CurrentNodeListIterator// Initialize CurrentNodeListIterator/* else if (ftype instanceof ResultTreeType)  { ... */// Wrap single node path in a node set// Create new StepIterator// Recursively compile 2 iterators// Initialize StepIterator with iterators from the stack// This is a special case for the //* path with or without predicates// Create new Dup Filter Iterator// Initialize Dup Filter Iterator with iterator from the stack/** Back patch a flow list. All instruction handles must be branch handles. */// avoid backpatching more than once/** Redirect the handles from oldList to newList. "This" flow list ... *//* $Id: ForEach.java,v 1.2.4.1 2005/09/01 15:23:46 pvedula Exp $ */// Save current node and current iterator on the stack// Collect sort objects associated with this instruction// Store existing DOM on stack - must be restored when loop is done// Put the result tree on the stack (DOM)// Get an iterator for the whole DOM - excluding the root node// Store the result tree as the default DOM// Compile node iterator// Overwrite current iterator// Give local variables (if any) default values before starting loop// Restore current DOM (if result tree was used instead for this loop)// Restore current node and current iterator from the stack/** The code that is generated by nested for-each loops can appear to some ... */// Inform stylesheet to instantiate a DecimalFormat object/** Constructs a FunctionAvailableCall FunctionCall. Takes the ... *//** Argument of function-available call must be literal, typecheck ... *//** for external java functions only: reports on whether or not ... */// Get the class name from the namespace uri// Get the method name from the argument to function-available// Replace the '-' characters in the method name/** Reports on whether the function specified in the argument to ... *//** Return true if the namespace uri is null or it is the XSLTC translet uri. *//** Calls to 'function-available' are resolved at compile time since ... *//* $Id: FunctionCall.java,v 1.2.4.1 2005/09/12 10:31:32 pvedula Exp $ */// Name of this function call// Arguments to this function call (might not be any)// Empty argument list, used for certain functions// Valid namespaces for Java function-call extension// Namespace format constants// Namespace format/** Stores reference to object for non-static Java calls */// External Java function's class/method/signature// Encapsulates all unsupported external function calls// If FunctionCall is a external java constructor// If the java method is static// Legal conversions between internal and Java types.// Legal conversions between Java and internal types.// The mappings between EXSLT extension namespaces and implementation classes// Extension functions that are implemented in BasisLibrary/** inner class to used in internal2Java mappings, contains ... *//** Defines 2 conversion tables: ... */// -- Internal to Java --------------------------------------------// Type.Boolean -> { boolean(0), Boolean(1), Object(2) }// Type.Real -> { double(0), Double(1), float(2), long(3), int(4),//                short(5), byte(6), char(7), Object(8) }// Type.Int must be the same as Type.Real// Type.String -> { String(0), Object(1) }// Type.NodeSet -> { NodeList(0), Node(1), Object(2), String(3) }// Type.Node -> { Node(0), NodeList(1), Object(2), String(3) }// Type.ResultTree -> { NodeList(0), Node(1), Object(2), String(3) }// Possible conversions between Java and internal types// Conversions from org.w3c.dom.Node/NodeList to internal NodeSet// Initialize the extension namespace table// Initialize the extension function table/** Type check a function call. Since different type conversions apply, ... */// Handle extension functions (they all have a namespace)/** Type check a call to a standard function. Insert CastExprs when needed. ... */// HACK!!!// invalid conversion// Constructor not found in this class// Try all constructors// reset// Check if all parameters to this constructor can be converted// Convert from internal (translet) type to external (Java) type// no mapping available/** Type check a call to an external (Java) method. ... */// check if function is a contructor 'new'// check if we are calling an instance method/* Warn user if external function could not be resolved. ... */// use "Int" as "unknown"// Method not found in this class// Try all methods to identify the best fit// reset internal type// Check if all paramteters to this method can be converted// Allow a Reference type to match any external (Java) type at// the moment. The real type checking is performed at runtime.// Check if the return type can be converted// Use this method if all parameters & return type match// It is an error if the chosen method is an instance menthod but we don't// have a this argument./** Type check the actual arguments of this function call. *//** Compile the function call and treat as an expression ... *//** Translate a function call. The compiled code will leave the function's ... */// Translate calls to methods in the BasisLibrary// append "F" to the function's name// Special precautions for some method calls// Invoke the method in the basis library// Add call to BasisLibrary.unresolved_externalF() to generate// run-time error message for unsupported external functions// We don't know whether this code might contain backwards branches// Convert the argument to its Java type// Convert the return type back to our internal type// Invoke function calls that are handled in separate classes// Push "this" if it is an instance method/** Returns a vector with all methods named <code>_fname</code> ... *///Check if FSP and SM - only then proceed with loading// Is it public and same number of args ?/** Returns a vector with all constructors named <code>_fname</code> ... */// Is it public, static and same number of args ?/** Compute the JVM method descriptor for the method. *//** Compute the JVM constructor descriptor for the constructor. *//** Return the signature of the current method *//** To support EXSLT extensions, convert names with dash to allowable Java names: ... *//** Translate code to call the BasisLibrary.unallowed_extensionF(String) ... */// one argument// reuse signature// Returns the KeyIndex object of a given name// Initialises a KeyIndex to return nodes with specific values// Call getKeyIndex in AbstractTranslet with the name of the key// to get the index for this key (which is also a node iterator).// Now use the value in the second argument to determine what nodes// the iterator should return./** Display the contents of this element *//** Parse the "test" expression and contents of this element. */// Parse the "test" expression// Make sure required attribute(s) have been set// Ignore xsl:if when test is false (function-available() and// element-available())/** Type-check the "test" expression and contents of this element. ... */// Type-check the "test" expression// Type check the element contents/** Translate the "test" expression and contents of this element. ... *//* Copyright (c) 2007, 2015, Oracle and/or its affiliates. All rights reserved. *//* $Id: Import.java,v 1.8 2007/04/09 21:30:40 joehw Exp $ */// Use SourceLoader if available// No SourceLoader or not resolved by SourceLoader// Return if we could not resolve the URL// precedence for the including stylesheet/* $Id: Include.java,v 1.8 2007/04/09 21:30:41 joehw Exp $ */// An included stylesheet gets the same import precedence// as the stylesheet that included it./* $Id: Key.java,v 1.6 2006/04/25 02:25:08 jeffsuttor Exp $ *//** The name of this key as defined in xsl:key. *//** The pattern to match starting at the root node. *//** The expression that generates the values for this key. *//** The type of the _use expression. *//** Parse the <xsl:key> element and attributes ... */// Get the required attributes and parser XPath expressions// Parse key name and add to symbol table/** Returns a String-representation of this key's name ... */// Type check match pattern// Cast node values to string values (except for nodesets)/** This method is called if the "use" attribute of the key contains a ... */// DOM.getStringValueX(nodeIndex) => String// AbstractTranslet.SetKeyIndexDom(name, Dom) => void// This variable holds the id of the node we found with the "match"// attribute of xsl:key. This is the id we store, with the value we// get from the nodes we find here, in the index for this key.// Get the 'parameter' from the stack and store it in a local var.// Overwrite current iterator with one that gives us only what we want// Prepare to call buildKeyIndex(String name, int node, String value);// Now get the node value and push it on the parameter stack// Finally do the call to add an entry in the index for this key.// Go on to next matching node..../** Gather all nodes that match the expression in the attribute "match" ... */// AbstractTranslet.buildKeyIndex(name,node_id,value) => void// DOM.getAxisIterator(root) => NodeIterator// Get an iterator for all nodes in the DOM// Reset the iterator to start with the root node// Loop for traversing all nodes in the DOM// Check if the current node matches the pattern in "match"// Leaves 0 or 1 on stack// If this is a node-set we must go through each node in the set// Pass current node as parameter (we're indexing on that node)// Get the next node from the iterator and do loop again.../** The name of the key. *//** The value to look up in the key/index. *//** The value's data type. */// The value's data type/** Expanded qname when name is literal. *//** Get the parameters passed to function: ... *//** If this call to key() is in a top-level element like  another variable ... */// If name unknown statically, there's nothing we can do/** Type check the parameters for the id() or key() function. ... */// Run type check on the key name (first argument) - must be a string,// and if it is not it must be converted to one using string() rules.// Run type check on the value for this key. This value can be of// any data type, so this should never cause any type-check errors.// If the value is a reference, then we have to defer the decision// of how to process it until run-time.// If the value is known not to be a node-set, then it should be// converted to a string before the lookup is done. If the value is// known to be a node-set then this process (convert to string, then// do lookup) should be applied to every node in the set, and the// result from all lookups should be added to the resulting node-set.// If in a top-level element, create dependency to the referenced key// KeyIndex.setDom(Dom, node) => void// Initialise the index specified in the first parameter of key()// Generate following byte code://   KeyIndex ki = translet.getKeyIndex(_name)//   ki.setDom(translet.dom);//   ki.getKeyIndexIterator(_value, true)  - for key()//        OR//   ki.getKeyIndexIterator(_value, false)  - for id()// Attribute name (incl. prefix)// Attribute value/** Creates a new literal attribute (but does not insert it into the AST). ... */// push handler// push attribute name - namespace prefix set by parent node// push attribute value// Generate code that calls SerializationHandler.addUniqueAttribute()// if all attributes are unique.// Set the HTML flags// call attribute/** Return true if at least one character in the String is considered to ... *//** Return the name of the attribute *//** Return the value of the attribute */// True if all attributes of this LRE are unique, i.e. they all have// different names. This flag is set to false if some attribute// names are not known at compile time./** Returns the QName for this literal element *//** Displays the contents of this literal element *//** Returns the namespace URI for which a prefix is pointing to *//** Method used to keep track of what namespaces that are references by ... */// Check if the parent has a declaration for this namespace// Check if we have any declared namespaces// Check if this node has a declaration for this namespace/** Translates the prefix of a QName according to the rules set in ... */// Break up the QName and get prefix:localname strings// Treat default namespace as "" and not null// Check if we must translate the prefix// Get the namespace this prefix refers to// Register the namespace as accessed// Construct the new name for the element (may be unchanged)/** Add an attribute to this element *//** Set the first attribute of this element *//** Type-check the contents of this element. The element itself does not ... */// Type-check all attributes/** This method starts at a given node, traverses all namespace mappings, ... *//** Determines the final QName for the element and its attributes. ... */// Check if in a literal element context// Process all attributes and register all namespaces they use// Handle xsl:use-attribute-sets. Attribute sets are placed first// in the vector or attributes to make sure that later local// attributes can override an attributes in the set.// Handle xsl:extension-element-prefixes// Handle xsl:exclude-result-prefixes// Ignore special attributes (e.g. xmlns:prefix and xmlns)// Handle all other literal attributes// Register all namespaces that are in scope, except for those that// are listed in the xsl:stylesheet element's *-prefixes attributes/** Compiles code that emits the literal element to the output handler, ... */// Check whether all attributes are unique.// Compile code to emit element start tag// duplicate these 2 args for endElement// The value of an attribute may depend on a (sibling) variable// Compile code to emit namespace attributes// Output all attributes// Compile code to emit attributes and child elements// Compile code to emit element end tag/** Return true if the output method is html. *//** Return the ElemDesc object for an HTML element. ... *//** Return true if all attributes of this LRE have unique names. *//** Check whether all attributes are unique. *//** Return true if the instructions under the given SyntaxTreeNode can produce attribute nodes ... */// Cannot add an attribute to an element after children have been added to it.// We can safely return false when the instruction can produce an output node.// In general, there is no way to check whether <xsl:call-template> or// <xsl:apply-templates> can produce attribute nodes. <xsl:copy> and// <xsl:copy-of> can also copy attribute nodes to an element. Return// true in those cases to be safe./** Creates a new literal expression node. ... *//** Handles calls with no parameter (current node is implicit parameter). *//** Handles calls with one parameter (either node or node-set). */// Returns the name of a node in the DOM// TODO: What does it mean to translate a Pattern ?/** This method is used by the Mode class to prioritise patterns and ... */// operator// first operand// second operand/** Creates a new logical expression - either OR or AND. Note that the ... */// Return null if we can't evaluate at compile time/** Returns this logical expression's operator - OR or AND represented ... *//** Override the SyntaxTreeNode.setParser() method to make sure that the ... *//** Returns a string describing this expression *//** Type-check this expression, and possibly child expressions. */// Get the left and right operand types// Check if the operator supports the two operand types// Yes, the operation is supported// Check if left-hand side operand must be type casted// Check if right-hand side operand must be type casted// Return the result type for the operator we will use// Compile AND-expression// Translate left hand side - must be true// Need this for chaining any OR-expression children// Translate left right side - must be true// Append child expression false-lists to our false-list// Special case for OR-expression as a left child of AND.// The true-list of OR must point to second clause of AND.// Special case for OR-expression as a right child of AND// The true-list of OR must point to true-list of AND.// Compile OR-expression// Translate left-hand side expression and produce true/false list// This GOTO is used to skip over the code for the last test// in the case where the the first test succeeds// Translate right-hand side expression and produce true/false list// Load the translet (for call to displayMessage() function)// Push current output handler onto the stack// Replace the current output handler by a ToXMLStream// Push a reference to a StringWriter// Load ToXMLStream// Invoke output.setWriter(STRING_WRITER)// Invoke output.setEncoding("UTF-8")// other encodings?// Invoke output.setOmitXMLDeclaration(true)// Inline translation of contents// Call toString() on StringWriter// Restore old output handler// Send the resulting string to the message handling method// If 'terminate' attribute is set to 'yes': Instanciate a// RunTimeException, but it on the stack and throw an exception// Create a new instance of RunTimeException/* $Id: Mode.java,v 1.2.4.1 2005/09/19 05:18:11 pvedula Exp $ *//** Mode gathers all the templates belonging to a given mode; ... *//** The name of this mode as defined in the stylesheet. *//** A reference to the stylesheet object that owns this mode. *//** The name of the method in which this mode is compiled. *//** A vector of all the templates in this mode. *//** Group for patterns with node()-type kernel and child axis. *//** Test sequence for patterns with node()-type kernel and child axis. *//** Group for patterns with node()-type kernel and attribute axis. *//** Test sequence for patterns with node()-type kernel and attribute axis. *//** Group for patterns with id() or key()-type kernel. *//** Test sequence for patterns with id() or key()-type kernel. *//** Group for patterns with any other kernel type. *//** Test sequence for patterns with any other kernel type. *//** A mapping between templates and test sequences. *//** A mapping between named templates and Mode objects. *//** A mapping between templates and instruction handles. *//** A mapping between templates and instruction lists. *//** A reference to the pattern matching the root node. *//** Stores ranges of template precendences for the compilation ... *//** A mapping between key names and keys. *//** Variable index for the current node used in code generation. *//** Creates a new Mode. ... *//** Returns the name of the method (_not_ function) that will be ... *//** Shortcut to get the class compiled for this mode (will be inlined). *//** Process all the test patterns in this mode *//* System.out.println("Before Sort " + _name); ... *//* System.out.println("\n After Sort " + _name); ... */// Traverse all templates// Get the next template/* Add this template to a table of named templates if it has a name. ... */// Add this template to a test sequence if it has a pattern/** This method will break up alternative patterns (ie. unions of patterns, ... */// Patterns on type id() and key() are special since they do not have// any kernel node type (it can be anything as long as the node is in// the id's or key's index).// Alternative patterns are broken up and re-processed recursively// Finally we have a pattern that can be added to a test sequence!/** Group patterns by NodeTests of their last Step ... */// id() and key()-type patterns do not have a kernel type// Otherwise get the kernel pattern from the LPP// kernel pattern is the last (maybe only) Step/** Adds a pattern to a pattern group */// Make sure the array of pattern groups is long enough// Find the vector to put this pattern into/** Complete test sequences of a given type by adding all patterns ... *//** Build test sequences. The first step is to complete the test sequences ... */// Complete test sequence for "text()" with "child::node()"// Complete test sequence for "*" with "child::node()"// Complete test sequence for "pi()" with "child::node()"// Complete test sequence for "comment()" with "child::node()"// Complete test sequence for "@*" with "attribute::node()"// Complete test sequence for user-defined types// If an attribute then copy "@*" to its test sequence// And also copy "attribute::node()" to its test sequence// If an element then copy "*" to its test sequence// And also copy "child::node()" to its test sequence// System.out.println("testSeq[" + i + "] = " + testSeq);/* if (_attribNodeGroup != null && _attribNodeGroup.size() > 0) { ... */// doesn't matter what is 'put', only key matters// Initialize the types and names arrays for the NamedMethodGenerator.// For simple named templates, the signature of the generated method// is not fixed. It depends on the number of parameters declared in the// template.// !!! TODO templates both named and matched// empty template// else trivial TestSeq/** Compiles the default handling for DOM elements: traverse all children *//** Compiles the default action for DOM text nodes and attribute nodes: ... */// Append switch() statement - namespace test dispatch loop// Initialize targets for namespace() switch statement// Add test sequences for known namespace types// Return "null" if no test sequences were compiled// Append first code in applyTemplates() - get type of current node/** Compiles the applyTemplates() method and adds it to the translet. ... */// Create the applyTemplates() method// Insert an extra NOP just to keep "current" from appearing as if it// has a value before the start of the loop.// Create a local variable to hold the current node// Create the "body" instruction list that will eventually hold the// code for the entire method (other ILs will be appended).// Create an instruction list that contains the default next-node// iteration// The body of this code can get very large - large than can be handled// by a single IFNE(body.getStart()) instruction - need workaround:// applyTemplates() ends here!// Live range of "current" ends at end of loop// Compile default handling of elements (traverse children)// Compile default handling of text/attribute nodes (output text)// Distinguish attribute/element/namespace tests for further processing// Initialize isAttribute[] and isNamespace[] arrays// Compile all templates - regardless of pattern type// Handle template with explicit "*" pattern// Handle template with explicit "@*" pattern// Do tests for id() and key() patterns first// If there is a match on node() we need to replace ihElem// and ihText if the priority of node() is higher// Compare priorities of node() and "*"// Compare priorities of node() and text()// Handle templates with "ns:*" pattern// Handle templates with "ns:@*" pattern// Handle templates with "ns:elem" or "ns:@attr" pattern// Jump straight to namespace tests ?// Test first, then jump to namespace tests// Handle pattern with match on root node - default: traverse children// Handle any pattern with match on text nodes - default: output text// This DOM-type is not in use - default: process next node// Match unknown element in DOM - default: check for namespace match// Match unknown attribute in DOM - default: check for namespace match// Match on processing instruction - default: process next node// Match on comments - default: process next node// Now compile test sequences for various match patterns:// Match on node type// Append switch() statement - main dispatch loop in applyTemplates()// Append all the "case:" statements// Append the actual template code// Append NS:* node tests (if any)// Append NS:@* node tests (if any)// Append default action for element and root nodes// Append default action for text and attribute nodes// putting together constituent instruction lists// fall through to ilLoop// Compile method(s) for <xsl:apply-imports/> for this mode// Clear some datastructures// IMPORTANT: Save orignal & complete set of templates!!!!// Gather templates that are within the scope of this import// Process all patterns from those templates// Create the local variable to hold the current node// %HZ%:  Was ihLoop in XSLTC_DTM branch// Handle any pattern with match on text nodes - default: loop// Match on processing instruction - default: loop// Mark the end of the live range for the "current" variable// Restore original (complete) set of templates for this transformation/** Peephole optimization. */// LoadInstruction, POP => (removed)// pattern = "LoadInstruction POP";// changed to lower case - changing to all lower case although only the instruction with capital I// is creating a problem in the Turkish locale// TODO: move target down into the list// ILOAD_N, ILOAD_N, SWAP, ISTORE_N => ILOAD_N// pattern = "ILOAD ILOAD SWAP ISTORE";// LoadInstruction_N, LoadInstruction_M, SWAP => LoadInstruction_M, LoadInstruction_N// pattern = "LoadInstruction LoadInstruction SWAP";// ALOAD_N ALOAD_N => ALOAD_N DUP// pattern = "ALOAD ALOAD";/** Auxiliary method to determine if a qname is an attribute. *//** Auxiliary method to determine if a qname is a namespace ... *//** Check that we either have no parameters or one parameter that is ... */// Check the argument type (if any)// The argument has to be a node, a node-set or a node reference/** Translate the code required for getting the node for which the ... */// Function was called with no parameters// Function was called with node parameter// Function was called with node-set parameter/** Translate code that leaves a node's QName (as a String) on the stack *//* The namespace alias definitions given here have an impact only on ... */// do nada/** Translate code that leaves a node's namespace URI (as a String) ... */// Returns the string value for a node in the DOM// generalized type// swap flow lists// LEVEL_SINGLE// LEVEL_MULTIPLE// LEVEL_ANY// -- Begin Closure interface --------------------// Only one reference per variable// -- End Closure interface ----------------------/** True if the has specified a value for this instance of number. *//** Returns <tt>true</tt> if this instance of number has neither ... */// Add a new private field to this class// Get a reference to the newly added field// Check if field is initialized (runtime)// Create an instance of DefaultNodeCounter// Store the node counter in the field// Backpatch conditionals/** Compiles a constructor for the class <tt>_className</tt> that ... */// this// translet// DOM// iterator// hasFrom/** This method compiles code that is common to matchesFrom() and ... */// Get NodeCounter._iterator and store locally// 'this' pointer on stack// Get NodeCounter._translet and store locally// Get NodeCounter._document and store locally// Make sure we have the correct DOM type on the stack!!!// Add a new instance variable for each var in closure// Add a single constructor to the class/* Compile method matchesFrom() */// Translate Pattern/* Compile method matchesCount() */// Push an instance of the newly created class// Initialize closure variables// Store variable in new closure// Push "this" for the call to characters()// Using java.lang.Math.floor(number + 0.5) to return a double value// Call setValue on the node counter// Call setStartNode()// Call getCounter() with or without args// TODO ??// Output the resulting string to the handler// TODO: use three-value variables for boolean values: true/false/default// These attributes are extracted from the xsl:output element. They also// appear as fields (with the same type, only public) in the translet// Disables this output element (when other element has higher precedence)// Some global constants/** Displays the contents of this element (for debugging) *//** Disables this <xsl:output> element in case where there are some other ... */// Transfer attributes from previous xsl:output// Merge cdata-section-elements// addAttribute works as a setter if it already exists// Transfer non-standard attributes as well/** Scans the attribute list for the xsl:output instruction */// Ask the parser if it wants this <xsl:output> element// Do nothing if other <xsl:output> element has higher precedence// Get the output version// Get the output method - "xml", "html", "text" or <qname> (but not ncname)// Get the output encoding - any value accepted here// Create a write to verify encoding support// Should the XML header be omitted - translate to true/false// Add 'standalone' decaration to output - use text as is// Get system/public identifiers for output DOCTYPE declaration// Names the elements of whose text contents should be output as CDATA// Make sure to store names in expanded form// Get the indent setting - only has effect for xml and html output// indent-amount: extension attribute of xsl:output//  Hack for supporting Old Namespace URI.// Get the MIME type for the output file// Implied properties// Set output properties in current stylesheet/** Compile code that passes the information in this <xsl:output> element ... */// Only update _version field if set and different from default// Only update _method field if "method" attribute used// Only update if _encoding field is "encoding" attribute used// Only update if "omit-xml-declaration" used and set to 'yes'// Set system/public doctype only if both are set// Add 'medye-type' decaration to output - if used// Compile code to set output indentation on/off//Compile code to set indent amount.// Forward to the translet any elements that should be output as CDATA// Cleanup - pop last translet reference off stack/** True if this Param is declared in a simple named template. ... *//** Display variable as single string *//** Set the instruction for loading the value of this variable onto the ... *//** Set the instruction for storing a value from the stack into this ... *//** Display variable in a full AST dump *//** Parse the contents of the <xsl:param> element. This method must read ... */// Parse 'name' and 'select' attributes plus parameter contents// Add a ref to this param to its enclosing construct// Mark this as a global parameter// Check if a global variable with this name already exists...// ...and if it does we need to check import precedence// It is an error if the two have the same import precedence// Ignore this if previous definition has higher precedence// Add this variable if we have higher precedence/** Type-checks the parameter. The parameter type is determined by the ... */// This element has no type (the parameter does, but the parameter// element itself does not)./* To fix bug 24518 related to setting parameters of the form ... *//* If simple named template then generate a conditional init of the ... */// Call addParameter() from this class// nobody uses the value// normal case// Cache the result of addParameter() in a local variable// Cache the result of addParameter() in a field/** Name of param being referenced. */// The method cloneIterator() also does resetting/** This method is used to determine if this parent location path is a ... */// Special case for '@*/following::*' expressions. The resulting// iterator is initialised with the parent's first child, and this// can cause duplicates in the output if the parent has more than// one attribute that matches the left step.// Compile path iterator// iterator on stack..../* If this pattern contains a sequence of descendant iterators we ... *//* If _right is an ancestor pattern, backpatch _left false ... *//* Copyright (c) 2015, 2017, Oracle and/or its affiliates. All rights reserved. */// standard prefix// extension prefix// Reference to the compiler object.// Reference to the XPath parser.// Contains all compilation errors// Contains all compilation warnings// Maps instructions to classes// reqd and opt attrs// Maps QNames to syntax-tree nodes// Reference to the template being parsed.// Used for validity check// parse and retrieve namespace// Get the namespace uri from the symbol table/** Create an instance of the <code>Stylesheet</code> class, ... */// Map the default NS if not already defined/** Instanciates a SAX2 parser and generate the AST from the input. *//** Parses a stylesheet and builds the internal abstract syntax tree ... */// Parse the input document and build the abstract syntax tree// Find the start of the stylesheet within the tree/** Set the parameters to use to locate the correct <?xml-stylesheet ...?> ... *//** Extracts the DOM for the stylesheet. In the case of an embedded ... */// Assume that this is a pure XSL stylesheet if there is not// <?xml-stylesheet ....?> processing instruction// Find the xsl:stylesheet or xsl:transform with this reference/** Find a Stylesheet element with a specific ID attribute value. ... *//** For embedded stylesheets: Load an external file with stylesheet */// Check if the location is URL or a local file/** Initialize the _instructionClasses map, which maps XSL element ... *//** Add primops and base functions to the symbol table. *//* Standard functions: implemented but not in this table concat(). ... */// The following functions are inlined// The following functions are implemented in the basis library// Extensions// Operators +, -, *, /, % defined on real types.// Operators +, -, * defined on integer types.// Operators / and % are not  defined on integers (may cause exception)// Operators <, <= >, >= defined on real types.// Operators <, <= >, >= defined on int types.// Operators <, <= >, >= defined on boolean types.// Operators 'and' and 'or'.// Unary minus./** Creates a new node in the abstract syntax tree. This node can be ... */// Check if the element belongs in our namespace// Check if this is an XSLTC extension element// Check if this is an extension of some other XSLT processor/** checks the list of attributes against a list of allowed attributes ... */// Ignore if special or if it has a prefix// Workaround for the TCK failure ErrorListener.errorTests.error001../** Parse an XPath expression: ... */// Get the textual representation of the expression (if any)// Use the default expression if none was found// Invoke the XPath parser/** Parse an XPath pattern: ... */// Get the textual representation of the pattern (if any)// Use the default pattern if none was found/** Parse an XPath expression or pattern using the generated XPathParser ... */// Return a dummy pattern (which is an expression)/** ********************** ERROR HANDLING SECTION *********************** *//** Returns true if there were any errors during compilation *//** Prints all compile-time errors *//** Prints all compile-time warnings *//** Common error/warning message handler *//** ********************** SAX2 ContentHandler INTERFACE **************** *//** SAX2: Receive notification of the beginning of a document. *//** SAX2: Receive notification of the end of a document. *//** SAX2: Begin the scope of a prefix-URI Namespace mapping. ... *//** SAX2: End the scope of a prefix-URI Namespace mapping. ... *//** SAX2: Receive notification of the beginning of an element. ... */// If this is the root element of the XML document we need to make sure// that it contains a definition of the XSL namespace URI// Extension elements and excluded elements have to be// handled at this point in order to correctly generate// Fallback elements from <xsl:fallback>s./** SAX2: Receive notification of the end of an element. *//** SAX2: Receive notification of character data. */// If this text occurs within an <xsl:text> element we append it// as-is to the existing text element// Ignore text nodes that occur directly under <xsl:stylesheet>// Add it as a regular text node otherwise/** SAX2: Receive notification of a processing instruction. ... */// We only handle the <?xml-stylesheet ...?> PI// URI of stylesheet found// Media of stylesheet found// Title of stylesheet found// Charset of stylesheet found// Get the attributes from the processing instruction// Set the target to this PI's href if the parameters are// null or match the corresponding attributes of this PI./** IGNORED - all ignorable whitespace is ignored *//** IGNORED - we do not have to do anything with skipped entities *//** Store the document locator to later retrieve line numbers of all ... *//** Get the line number, or zero ... *//** Returns the type of a pattern, which is always a <code>NodeType</code>. ... *//** Translate this node into JVM bytecodes. Patterns are translated as ... *//** Returns the priority of this pattern (section 5.5 in the XSLT spec). *//** The predicate's expression. *//** This flag indicates if optimizations are turned on. The ... *//** Flag indicatig if the nth position optimization is on. It ... *//** Flag indicatig if the nth position descendant is on. It ... *//** Cached node type of the expression that owns this predicate. *//** Name of the inner class. *//** List of variables in closure. *//** Reference to parent closure. *//** Cached value of method <code>getCompareValue()</code>. *//** Initializes a predicate. *//** Set the parser for this expression. *//** Returns a boolean value indicating if the nth position optimization ... *//** Returns a boolean value indicating if the nth descendant optimization ... *//** Turns off all optimizations for this predicate. *//** Returns true if the expression in this predicate contains a call ... */// way up in the tree// Add variable to parent closure as well/** Returns the node type of the expression owning this predicate. The ... *//** Type check a predicate expression. If the type of the expression is ... */// We need explicit type information for reference types - no good!// A result tree fragment should not be cast directly to a number type,// but rather to a boolean value, and then to a numer (0 or 1).// Ref. section 11.2 of the XSLT 1.0 spec// Numerical types will be converted to a position filter// Cast any numerical types to an integer// Nth position optimization. Expression must not depend on context// _nthDescendant optimization - only if _nthPositionFilter is on// Reset optimization flags// Otherwise, expand [e] to [position() = e]// All other types will be handled as boolean values/** Create a new "Filter" class implementing ... */// Store the dom in a local variable// Store the dom index in the test generator/** Returns true if the predicate is a test for the existance of an ... *//** Method to see if we can optimise the predicate by using a specialised ... *//** Returns the step in an expression of the form 'step = value'. ... */// Returned cached value if called more than once// Nothing to do if _exp is null// Ignore if not equality expression// Unwrap and set _step if appropriate/** Returns the value in an expression of the form 'step = value'. ... */// Nothing to to do if _exp is null// Ignore if not an equality expression// Return if left is literal string// Return if left is a variable reference of type string// Return if right is literal string// Return if left is a variable reference whose type is string/** Translate a predicate expression. This translation pushes ... */// Compile auxiliary class for filter// Create new instance of filter// Find nearest closure implemented as an inner class// Use getfield if in an inner class// Use a load of instruction if in translet class/** Translate a predicate expression. If non of the optimizations apply ... */// name treated as AVT (7.1.3)// specified name is not AVT// if the ncname is an AVT, then the ncname has to be checked at runtime if it is a valid ncname// store the name into a variable first so _name.translate only needs to be called once// call checkNCName if the name is an AVT// first arg to "attributes" call// load name value again// Push attribute name// 2nd arg// call "processingInstruction"//if (_name.equals("*")) _typeChecked = true; no wildcard allowed!// Type check all the predicates (e -> position() = e)// context node is on the stack// Push current node on the stack// Overwrite current node with matching node// If pattern not reduced then check kernel// Load the requested processing instruction name// Load the current processing instruction's name// Compare the two strings// Compile the expressions within the predicates// Backpatch true list and restore current iterator/node// Backpatch false list and restore current iterator/node// True list falls through// cached for speed//bug fix # 2838, cast to reals if both are result tree fragments// If one is of reference type, then convert the other too// bug fix # 2838// Ensure that the node-set is the left argument// Promote nodes to node sets// Promote integer to doubles to have fewer compares// Promote result-trees to strings// In the node-boolean case, convert node to boolean first// Lookup the table of primops to find the best match// Call compare() from the BasisLibrary// TODO: optimize if one of the args is 0// must be backpatched// Get two copies of the argument on the stack// The attributes value (literate string)./** Creates a new simple attribute value. ... *//** Returns this attribute value's type (String). ... *//** Translate this attribute value into JVM bytecodes that pushes the ... */// bug! see 26869, see XALANJ-2546/** Parse the attributes of the xsl:sort element */// Parse the select expression (node string value if no expression)// Get the sort order; default is 'ascending'// Get the sort data type; default is text// Get the case order; default is language dependant/** Run type checks on the attributes; expression must return a string ... */// If the sort data-type is not set we use the natural data-type// of the data we will sort/** These two methods are needed in the static methods that compile the ... *//** This method compiles code for the select expression for this ... *//** This method should not produce any code */// empty/** Compiles code that instantiates a SortingIterator object. ... */// SortingIterator.SortingIterator(NodeIterator,NodeSortRecordFactory);// Get the current node iterator// apply-templates default// Compile the code for the NodeSortRecord producing class and pass// that as the last argument to the SortingIterator constructor./** Compiles code that instantiates a NodeSortRecordFactory object which ... */// Compile code that initializes the static _sortOrder// Initialize closure variables in sortRecordFactory// Discard duplicate variable references// Define a constructor for this class// Push all parameters onto the stack and called super.<init>()// Override the definition of makeNodeSortRecord()// Initialize closure in record class// Get field from factory class// Put field in record class/** Create a new auxillary class extending NodeSortRecord. */// This generates a new class for handling this specific sort// Set the name of the inner class in this sort object/** Create a constructor for the new class. Updates the reference to the ... */// Call the constructor in the NodeSortRecord superclass/** Compiles a method that overloads NodeSortRecord.extractValueFromDOM() */// String NodeSortRecord.extractValueFromDOM(dom,node,level);// Values needed for the switch statement// Compile switch statement only if the key has multiple levels// Put the parameter to the swtich statement on the stack// Append the switch statement here later on// Append all the cases for the switch statment// Compile def. target for switch statement if key has multiple levels// Append the default target - it will _NEVER_ be reached/** This interface is used to plug external document loaders into XSLTC ... *//** Create a starts-with() call - two arguments, both strings *//** This step's axis as defined in class Axis. *//** A vector of predicates (filters) defined on this step - may be null *//** Some simple predicates can be handled by this class (and not by the ... *//** Type of the node test. *//** Set the parser for this element and all child predicates *//** Define the axis (defined in Axis class) for this step *//** Get the axis (defined in Axis class) for this step *//** Returns the node-type for this step *//** Returns the vector containing all predicates for this step. *//** Returns 'true' if this step has a parent pattern. ... *//** Returns 'true' if this step has a parent location path. *//** Returns 'true' if this step has any predicates *//** Returns 'true' if this step is used within a predicate *//** True if this step is the abbreviated step '.' *//** True if this step is the abbreviated step '..' *//** Type check this step. The abbreviated steps '.' and '@attr' are ... */// Save this value for later - important for testing for special// combinations of steps and patterns than can be optimised// Special case for '.'//   in the case where '.' has a context such as book/.//   or .[false()] we can not optimize the nodeset to a single node.// Type check all predicates (expressions applied to the step)// Return either Type.Node or Type.NodeSet/** Translate a step by pushing the appropriate iterator onto the stack. ... */// If it is an attribute, but not '@*', '@pre:*' or '@node()',// and has no parent// Put context node on stack if using Type.Node// Wrap the context node in a singleton iterator if not.// DOM.getAxisIterator(int axis);// Special case for /foo/*/bar// "ELEMENT" or "*" or "@*" or ".." or "@attr" with a parent.// DOM.getTypedAxisIterator(int axis, int type);// Get the typed iterator we're after// Special case for predicates that can use the NodeValueIterator// instead of an auxiliary class. Certain path/predicates pairs// are translated into a base path, on top of which we place a// node value iterator that tests for the desired value://   foo[@attr = 'str']  ->  foo/@attr + test(value='str')//   foo[bar = 'str']    ->  foo/bar + test(value='str')//   foo/bar[. = 'str']  ->  foo/bar + test(value='str')// If the predicate's Step is simply '.' we translate this Step// and place the node test on top of the resulting iterator// Otherwise we create a parent location path with this Step and// the predicates Step, and place the node test on top of that// Force re-parenting// Handle '//*[n]' expression// il.append(new ICONST(NodeTest.ELEMENT));// Handle 'elem[n]' expression// backwards branches, so we mustn't create the new object until// after we've created the suspect arguments to its constructor.// recursive call// create new CurrentNodeListIterator/** Returns a string representation of this step. */// node()// Analyze context cases// Create an instance of Step to do the translation// Need to allow for long jumps here// Store matching node into a local variable// Push current iterator and current node on the stack// Create a new matching iterator using the matching node// Get the parent of the matching node// Start the iterator with the parent// Overwrite current iterator and current node// Translate the expression of the predicate// Store node on the stack into a local variable// Create a new local to store the iterator// Add a new private field if this is the main class// Compile the step created at type checking time// If in the main class update the field too// If class is not external, start of range for iter variable was// set above// Get the parent of the node on the stack// Initialize the iterator with the parent/* Inline loop: ... */// NodeIterator.END/* Copyright (c) 2007, 2016, Oracle and/or its affiliates. All rights reserved. *//* $Id: Stylesheet.java,v 1.5 2005/09/28 13:48:16 pvedula Exp $ *//** XSLT version defined in the stylesheet. *//** Internal name of this stylesheet used as a key into the symbol table. *//** A URI that represents the system ID for this stylesheet. *//** A reference to the parent stylesheet or null if topmost. *//** Contains global variables and parameters defined in the stylesheet. *//** Used to cache the result returned by <code>hasLocalParams()</code>. *//** The name of the class being generated. *//** Contains all templates defined in this stylesheet *//** Used to cache result of <code>getAllValidTemplates()</code>. Only ... *//** Counter to generate unique mode suffixes. *//** Mapping between mode names and Mode instances. *//** A reference to the default Mode object. *//** Mapping between extension URIs and their prefixes. *//** Reference to the stylesheet from which this stylesheet was ... *//** Array of all the stylesheets imported or included from this one. *//** Import precendence for this stylesheet. *//** Minimum precendence of any descendant stylesheet by inclusion or ... *//** Mapping between key names and Key objects (needed by Key/IdPattern). *//** A reference to the SourceLoader set by the user (a URIResolver ... *//** Flag indicating if format-number() is called. *//** Flag indicating if this is a simplified stylesheets. A template ... *//** Flag indicating if multi-document support is needed. *//** Flag indicating if nodset() is called. *//** Flag indicating if id() is called. *//** Set to true to enable template inlining optimization. ... *//** A reference to the last xsl:output object found in the styleshet. *//** Output properties for this stylesheet. *//** Output method for this stylesheet (must be set to one of ... */// Output method constants/** Return the output method *//** Check and set the output method *//* Fix for bug 23046, if the stylesheet is included, set the ... */// Set import precedence for this stylesheet// Set import precedence for all included stylesheets// Set import precedence for the stylesheet that imported this one// Set import precedence for the stylesheet that included this one/** Get the minimum of the precedence of this stylesheet, any stylesheet ... */// Start with precedence of current stylesheet as a basis.// Recursively examine all imported/included stylesheets.// Return true if this stylesheet includes/imports itself// Then check with any stylesheets that included/imported this one// Otherwise OK/** Returns true if this stylesheet has global vars or params. *//** Returns true if at least one template in the stylesheet has params ... *//** Adds a single prefix mapping to this syntax tree node. ... *//** Store extension URIs *//** Parse the version and uri fields of the stylesheet and add an ... *//* // Make sure the XSL version set in this stylesheet ... */// Add the implicit mapping of 'xml' to the XML namespace URI// Report and error if more than one stylesheet defined// Error: more that one stylesheet defined// If this is a simplified stylesheet we must create a template that// grabs the root node of the input doc ( <xsl:template match="/"/> ).// This template needs the current element (the one passed to this// method) as its only child, so the Template class has a special// method that handles this (parseSimplified()).// Parse the children of this node/** Parse all direct children of the <xsl:stylesheet/> element. */// Exclude XSLT uri// We have to scan the stylesheet element's top-level elements for// variables and/or parameters before we parse the other elements// Now go through all the other top-level elements...// All template code should be compiled as methods if the// <xsl:apply-imports/> element was ever used in this stylesheet/** Translate the stylesheet into JVM bytecodes. *//** Add a static field */// Define a new class by extending TRANSLET_CLASS// Compile transform() to initialize parameters, globals & output// and run the transformation// Translate all non-template elements and filter out all templates// xsl:template// Separate templates by modes//_templates.addElement(template);// xsl:attribute-set// save the element for later to pass to compileConstructor// Global variables and parameters are handled elsewhere.// Other top-level non-template elements are ignored. Literal// elements outside of templates will never be output./** Compile the namesArray, urisArray and typesArray into ... */// Create fields of type char[] that will contain literal text from// the stylesheet.// Put the names array into the translet - used for dom/translet mapping// Put the namespace names array into the translet// Grab all the literal text in the stylesheet and put it in a char[]/** Compile the translet's constructor */// Call the constructor in the AbstractTranslet superclass// Compile in code to set the output configuration from <xsl:output>// Set all the output settings files in the translet// Compile default decimal formatting symbols.// This is an implicit, nameless xsl:decimal-format top-level element./** Compile a topLevel() method into the output class. This method is ... */// Define and initialize 'current' variable with the root node// Create a new list containing variables/params + keys// Determine a partial order for the variables/params and keys// Translate vars/params and keys in the right order// Compile code for other top-level elements// xsl:decimal-format// xsl:strip/preserve-space// Translate all whitespace strip/preserve rules// Compute max locals + stack and add method to class/** This method returns a vector with variables/params and keys in the ... *//* DEBUG CODE - INGORE ... */// If nothing was changed in this pass then we have a circular ref/** Compile a buildKeys() method into the output class. Note that keys ... */// xsl:key/** Compile transform() into the output class. This method is used to ... *//* Define the the method transform with the following signature: ... */// call resetPrefixIndex at the beginning of transform// Define and initialize current with the root node// push translet for PUTFIELD// prepare appropriate DOM implementation// DOMAdapter is on the stack// MultiDOM is on the stack//store to _dom variable// continue with globals initialization// Transfer the output settings to the output post-processor/* Compile buildKeys() method. Note that this method is not ... */// Look for top-level elements that need handling// Compile method for handling top-level elements// Get a reference to that method// Push all parameters on the stack and call topLevel()// The 'this' pointer// The DOM reference// The output handler// start document// push first arg for applyTemplates// push translet for GETFIELD to get DOM arg// push remaining 2 args// endDocument/** Peephole optimization: Remove sequences of [ALOAD, POP]. */// do we need this wrapper ?????// Return templates if no imported/included stylesheets// Is returned value cached?//templates.addAll(_templates);// Cache results in top-level stylesheet only/* $Id: SymbolTable.java,v 1.5 2005/09/28 13:48:16 pvedula Exp $ */// These maps are used for all stylesheets// These maps are used for some stylesheets/** Add a primitive operator or function to the symbol table. To avoid ... *//** Lookup a primitive operator or function in the symbol table by ... *//** This is used for xsl:attribute elements that have a "namespace" ... *//** Use a namespace prefix to lookup a namespace URI *//** Adds an alias for a namespace prefix *//** Retrieves any alias for a given namespace prefix *//** Register a namespace URI so that it will not be declared in the output ... */// The null-namespace cannot be excluded// Create a new map of exlcuded URIs if none exists// Register the namespace URI/** Exclude a series of namespaces given by a list of whitespace ... *//** Check if a namespace should not be declared in the output (unless used) *//** Turn of namespace declaration exclusion *//** Exclusion of namespaces by a stylesheet does not extend to any stylesheet ... *//* Copyright (c) 2006, 2016, Oracle and/or its affiliates. All rights reserved. */// Reference to the AST parser// AST navigation pointers// Parent node// Stylesheet ancestor node// Template ancestor node// Child nodes// Element description data// The element QName// Source file line number// Attributes of this element// Namespace declarations// Sentinel - used to denote unrecognised syntaxt tree nodes.// These two are used for indenting nodes in the AST (debug output)/** Creates a new SyntaxTreeNode with a 'null' QName and no source file ... *//** Creates a new SyntaxTreeNode with a 'null' QName. ... *//** Creates a new SyntaxTreeNode with no source file line number reference. ... *//** Set the source file line number for this element ... *//** Get the source file line number for this element. If unavailable, lookup ... *//** Set the QName for the syntax tree node. ... *//** Set the QName for the SyntaxTreeNode ... *//** Set the attributes for this SyntaxTreeNode. ... *//** Returns a value for an attribute from the source element. ... *//** Returns a list of all attributes declared for the element represented by ... *//** Sets the prefix mapping for the namespaces that were declared in this ... *//** Returns a Map containing the prefix mappings that were declared ... *//** Returns any namespace URI that is in scope for a given prefix. This ... */// Initialise the output (default is 'null' for undefined)// First look up the prefix/uri mapping in our own map...// ... but if we can't find it there we ask our parent for the mapping// ... and then we return whatever URI we've got./** Returns any namespace prefix that is mapped to a prefix in the current ... *//** Set this node's parser. The parser (the XSLT parser) gives this ... *//** Returns this node's XSLT parser. ... *//** Set this syntax tree node's parent node, if unset. For ... *//** Returns this syntax tree node's parent node. ... *//** Returns 'true' if this syntax tree node is the Sentinal node. ... *//** Get the import precedence of this element. The import precedence equals ... *//** Get the Stylesheet node that represents the <xsl:stylesheet/> element ... *//** Get the Template node that represents the <xsl:template/> element ... *//** Returns a reference to the XSLTC (XSLT compiler) in use. ... *//** Returns the XSLT parser's symbol table. ... *//** Parse the contents of this syntax tree nodes (child nodes, XPath ... *//** Parse all children of this syntax tree node. This method is normally ... */// only create when needed// if variable or parameter, add it to scope// after the last element, remove any locals from scope/** Add a node to the current scope and return name of a variable or ... *//** Type check the children of this node. The type check phase may add ... *//** Call typeCheck() on all child syntax tree nodes. ... *//** Translate this abstract syntax tree node into JVM bytecodes. ... *//** Call translate() on all child syntax tree nodes. ... */// Call translate() on all child nodes// After translation, unmap any registers for any variables/parameters// that were declared in this scope. Performing this unmapping in the// same AST scope as the declaration deals with the problems of// references falling out-of-scope inside the for-each element.// (the cause of which being 'lazy' register allocation for references)/** Return true if the node represents a simple RTF. ... *//** Return true if the node represents an adaptive RTF. ... *//** Return true if the node only produces Text content. ... *//** Utility method used by parameters and variables to store result trees ... */// Create new instance of DOM class (with RTF_INITIAL_SIZE nodes)//int index = cpg.addMethodref(DOM_IMPL, "<init>", "(I)V");//il.append(new NEW(cpg.addClass(DOM_IMPL)));// Overwrite old handler with DOM handler// Call startDocument on the new handler// Instantiate result tree fragment// Call endDocument on the new handler// Check if we need to wrap the DOMImpl object in a DOMAdapter object.// DOMAdapter is not needed if the RTF is a simple RTF and the nodeset()// function is not used.// new com.sun.org.apache.xalan.internal.xsltc.dom.DOMAdapter(DOMImpl,String[]);/* Give the DOM adapter an empty type mapping if the nodeset ... */// Push name arrays on the stack// Initialized DOM adapter// Add DOM adapter to MultiDOM class by calling addDOMAdapter()// ignore mask returned by addDOMAdapter/** Returns true if this expression/instruction depends on the context. By ... *//** Return true if any of the expressions/instructions in the contents of ... *//** Adds a child node to this syntax tree node. ... *//** Inserts the first child node of this syntax tree node. The existing ... *//** Removed a child node of this syntax tree node. ... *//** Returns a List containing all the child nodes of this node. ... *//** Tells you if this node has any child nodes. ... *//** Returns the number of children this node has. ... *//** Returns an Iterator of all child nodes of this node. ... *//** Returns a child node at a given position. ... *//** Returns this element's last child ... *//** Displays the contents of this syntax tree node (to stdout). ... *//** Set the indentation level for debug output. ... *//** Report an error to the parser. ... *//** Report a recoverable error to the parser. ... */// The name of the template (if any)// Mode in which this template is instantiated.// Matching pattern defined for this template.// Matching priority of this template.// Position within stylesheet (prio. resolution)//make sure it is compiled only once// True if this is a simple named template. A simple named// template is a template which only has a name but no match pattern.// The list of parameters in this template. This is only used// for simple named templates./** Compare this template to another. First checks priority, then position. */// Add the (named) template to the symbol table// Is this a simple named template?// set current template// clear template/** When the parser realises that it is dealign with a simplified stylesheet ... */// bug fix #4433133, add a call to named template from applyTemplates// %OPT% Special handling for simple named templates.// Update load/store instructions to access Params from the stack/* $Id: TestSeq.java,v 1.2.4.1 2005/09/12 11:31:38 pvedula Exp $ *//** A test sequence is a sequence of patterns that ... *//** Integer code for the kernel type of this test sequence *//** Vector of all patterns in the test sequence. May include ... *//** A reference to the Mode object. *//** Default template for this test sequence *//** Instruction list representing this test sequence. *//** Cached handle to avoid compiling more than once. *//** Creates a new test sequence given a set of patterns and a mode. *//** Returns a string representation of this test sequence. Notice ... *//** Returns the instruction list for this test sequence *//** Return the highest priority for a pattern in this test ... *//** Returns the position of the highest priority pattern in ... *//** Reduce the patterns in this test sequence. Creates a new ... */// Reduce this pattern// Is this pattern fully reduced?// Ignore following patterns/** Returns, by reference, the templates that are included in ... *//** Get the instruction handle to a template's code. This is ... *//** Returns pattern n in this test sequence *//** Compile the code for this test sequence. Compile patterns ... */// Returned cached value if already compiled// If not patterns, then return handle for default template// Init handle to jump when all patterns failed// Compile all patterns in reverse order// Patterns expect current node on top of stack// Apply the test-code compiled for the pattern// Make a copy of the instruction list for backpatching// On success branch to the template code// Next pattern's 'fail' target is this pattern's first instruction// Append existing instruction list to the end of this one// Set current instruction list to be this one/** Create a blank Text syntax tree node. *//** Create text syntax tree node. ... *//** Returns the text wrapped inside this node ... *//** Set the text for this node. Appends the given text to any already ... */// Turn off character escaping if so is wanted.// Call characters(String) or characters(char[],int,int), as// appropriate.// Restore character escaping setting to whatever it was.// Note: setEscaping(bool) returns the original (old) value/** Check whether this Text node can be stored in a char[] in the translet. ... */// Magic number!  21845*3 == 65535.  BCEL uses a DataOutputStream to// serialize class files.  The Java run-time places a limit on the size// of String data written using a DataOutputStream - it cannot require// more than 64KB when represented as UTF-8.  The number of bytes// required to represent a Java string as UTF-8 cannot be greater// than three times the number of char's in the string, hence the// check for 21845./** Generates code that loads the array that will contain the character ... */// The XSLTC object keeps track of character data// that is to be stored in char arrays./* List of dependencies with other variables, parameters or ... *//** Add a dependency with other top-level elements like ... *//** Get the list of dependencies with other top-level elements ... *//* $Id: TransletOutput.java,v 1.2.4.1 2005/09/05 09:19:44 pvedula Exp $ *//** Displays the contents of this <xsltc:output> element. *//** Parse the contents of this <xsltc:output> element. The only attribute ... */// Get the output filename from the 'file' attribute// If the 'append' attribute is set to "yes" or "true",// the output is appended to the file.// Verify that the filename is in fact set// Save filename as an attribute value template/** Type checks the 'file' attribute (must be able to convert it to a str). *//** Compile code that opens the give file for output, dumps the contents of ... */// Save the current output handler on the stack// Create the new output handler (leave it on stack)// Overwrite current handler// Translate contents with substituted handler// Close the output handler (close file)// Restore old output handler from stack// linearization for top level UnionPathExprs// find all expressions in this Union// Put attribute iterators first// Check if the union contains a reverse iterator// No need to reverse anything if another expression lies on top of this// Create the UnionIterator and leave it on the stack// Add the various iterators to the UnionIterator// Order the iterator only if strictly needed// Feck the this pointer on the stack...// ...then the entity name...// ...to get the URI from the DOM object.// At this point the AST is already built and we should be able to// find any declared global variable or parameter// If in a top-level element, create dependency to the referenced var/* $Id: UnsupportedElement.java,v 1.2.4.1 2005/09/05 09:26:51 pvedula Exp $ *//** Basic consutrcor - stores element uri/prefix/localname *//** There are different categories of unsupported elements (believe it ... *//** Displays the contents of this element *//** Scan and process all fallback children of the unsupported element. *//** Find any fallback in the descendant nodes; then activate & parse it *//** Run type check on the fallback element (if any). *//** Translate the fallback element (if any). */// We only go into the else block in forward-compatibility mode, when// the unsupported element has no fallback.// If the unsupported element does not have any fallback child, then// at runtime, a runtime error should be raised when the unsupported// element is instantiated. Otherwise, no error is thrown.// Only error that can occur:// Contains the names of all references attribute sets/** Constructur - define initial attribute sets to use *//** This method is made public to enable an AttributeSet object to merge ... *//** Do nada. *//** Generate a call to the method compiled for this attribute set */// Go through each attribute set and generate a method call// Get the attribute set name// Get the AttributeSet reference from the symbol table// Compile the call to the set's method if the set exists// Generate an error if the attribute set does not exist// Prefer to handle the value as a node; fall back to String, otherwise/** * ... */// Translate the contents.  If the value is a string, use the// translet.characters(String, TranslatOutputHandler) method.// Otherwise, the value is a node, and the// dom.characters(int node, TransletOutputHandler) method can dispatch// the string value of the node to the output handler more efficiently./** Parse the contents of the variable */// Add a ref to this var to its enclosing construct// Mark this as a global variable/** Runs a type check on either the variable element body or the ... */// Type check the 'select' expression if present// Type check the element contents otherwise// The return type is void as the variable element does not leave// anything on the JVM's stack. The '_type' global will be returned// by the references to this variable, and not by the variable itself./** This method is part of a little trick that is needed to use local ... */// This is only done for local variables that are actually used// Create a variable slot if none is allocated// Push the default value on the JVM's stack// 0 for node-id, integer and boolean// 0.0 for floating point numbers// and 'null' for anything else// Mark the store as the start of the live range of the variable// Don't generate code for unreferenced variables// Make sure that a variable instance is only compiled once// Compile variable value computation// Add a new local variable and store value// If the local is just being created, mark the store as the start// of its live range.  Note that it might have been created by// initializeVariables already, which would have set the start of// the live range already.// Global variables are store in class fields// Push a reference to "this" for putfield// Store the variable in the allocated field// The name of the variable.// The escaped qname of the variable.// The type of this variable.// True if the variable is local.// Reference to JVM variable// Instruction to load JVM variable// Reference to variable expression// Textual repr. of variable expr.// References to this variable (when local)// Used to make sure parameter field is not added twice/** Disable this variable/parameter *//** Add a reference to this variable. Called by VariableRef when an ... *//** When a variable is overriden by another, e.g. via xsl:import, ... *//** Map this variable to a register */// TODO: namespace ?/** Remove the mapping of this variable to a register. ... *//** Returns an instruction for loading the value of this variable onto ... *//** Returns an instruction for storing a value from the JVM stack ... *//** Returns the expression from this variable's select attribute (if any) *//** Returns the type of the variable *//** Returns the name of the variable or parameter as it will occur in the ... *//** Returns the escaped qname of the variable or parameter *//** Set the name of the variable or paremeter. Escape all special chars. *//** Returns the true if the variable is local *//** Parse the contents of the <xsl:decimal-format> element. */// Get the 'name attribute// Check whether variable/param of the same name is already in scope// Children must be parsed first -> static scoping/** Compile the value of the variable, which is either in an expression in ... */// Compile expression is 'select' attribute if present// Create a CachedNodeListIterator for select expressions// in a variable or parameter.// If not, compile result tree from parameter body if present.// If neither are present then store empty string in variable// Fall-through for variables that are implemented as methods/** A reference to the associated variable. *//** A reference to the enclosing expression/instruction for which a ... *//** Returns a reference to the associated variable *//** If this variable reference is in a top-level element like ... *//** Two variable references are deemed equal if they refer to the ... *//** Returns a string representation of this variable reference on the ... */// Returned cached type if available// Find nearest closure to add a variable reference// Attempt to get the cached variable type// If that does not work we must force a type-check (this is normally// only needed for globals in included/imported stylesheets// Return the type of the referenced variable/** Type-check this when element. The test should always be type checked, ... */// Type-check the test expression// Type-check the contents (if necessary)/** This method should never be called. An Otherwise object will explicitly ... */// Three possible actions for the translet:// The 3 different categories of strip/preserve rules (order important)// priority 0// priority -1/4// priority -1/2/** Auxillary class for encapsulating a single strip/preserve rule */// Should be replaced by NS type (int)// Should be replaced by node type (int)/** Strip/preserve rule constructor */// Determine the action (strip or preserve) for this rule// Get the namespace and element name for this rule// Determine the initial priority for this rule// Get the strip/preserve type; either "NS:EL", "NS:*" or "*"// Strip/preserve _all_ elements// Lowest priority// Strip/reserve elements within NS// Medium priority// Strip/preserve single element/** For sorting rules depending on priority *//** Parse the attributes of the xsl:strip/preserve-space element. ... */// Determine if this is an xsl:strip- or preserve-space element// Determine the import precedence// Get the list of elements to strip/preserve/** De-tokenize the elements listed in the 'elements' attribute and ... */// Go through each element and instanciate strip/preserve-object/** Scans through the rules vector and looks for a rule of higher ... */// Get the next rule in the prioritized list// We only consider rules with higher priority/* See if there is a contradicting rule with higher priority. ... */// intentional fall-through/** Orders a set or rules by priority, removes redundant rules and rules ... */// Sort all rules with regard to priority// Check if there are any "xsl:strip-space" elements at all.// If there are no xsl:strip elements we can ignore all xsl:preserve// elements and signal that all whitespaces should be preserved// Return with default action: PRESERVE_SPACE// Remove all rules that are contradicted by rules with higher priority// Remove this single rule if it has no purpose// Remove all following rules if this one overrides all// Skip to next rule (there might not be any)...// The rules vector could be empty if first rule has strength RULE_ALL// Now work backwards and strip away all rules that have the same// action as the default rule (no reason the check them at the end).// Signal that whitespace detection predicate must be used./* private static void compileDebug(ClassGenerator classGen, ... *//** Compiles the predicate method */// private boolean Translet.stripSpace(int type) - cannot be static// Traverse all strip/preserve rules// Get the next rule in the prioritised list// Returns the namespace for a node in the DOM// Handle elements="ns:*" type rule// Handle elements="ns:el" type rule// Create the QName for the element// Register the element.// Compare current node type with wanted element type/** Takes a vector of WhitespaceRule objects and generates a predicate ... */// Get the core rules in prioritized order// The rules vector may be empty after prioritising// Now - create a predicate method and sequence through rules...// Return with the translets required action (/** Sorts a range of rules with regard to PRIORITY only *//** Used with quicksort method above *//** Type-check contents/attributes - nothing to do... */// We don't return anything./** Parameter's name. *//** The escaped qname of the with-param. *//** Parameter's default value. *//** Reference to JVM variable holding temporary result tree. *//** %OPT% This is set to true when the WithParam is used in a CallTemplate ... *//** Returns the escaped qname of the parameter *//** Return the name of this WithParam. *//** Set the do parameter optimization flag *//** The contents of a <xsl:with-param> elements are either in the element's ... *//** Type-check either the select attribute or the element body, depending ... *//** Compile the value of the parameter, which is either in an expression in ... */// Store result tree into local variable for releasing it later// If neither are present then store empty string in parameter slot/** This code generates a sequence of bytecodes that call the ... */// Translate the value and put it on the stack// Make name acceptable for use as field name in class// Load reference to the translet (method is in AbstractTranslet)// Load the name of the parameter// Generete the value of the parameter (use value in 'select' by def.)// Mark this parameter value is not being the default value// Pass the parameter to the template// cleanup stack/** Release the compiled result tree. *//* @author Jacek Ambroziak ... *//** If symbol is not followed by '::' or '(', then treat it as a ... */// Peek in the input buffer without changing the internal state// Skip whitespace// If end of buffer, can't disambiguate :(// Can't disambiguate, so return as symbol// Return symbol if next token is '::' or '('/** If symbol is first token or if it follows any of the operators ... */// first token/* LS *//* PS *//* 0 *//* 1 *//* 2 *//* 3 *//* 4 *//* 5 *//* 6 *//* 7 *//* 8 *//* 9 *//* 10 *//* 11 *//* 12 *//* 13 *//* 14 *//* 15 *//* 16 *//* 17 *//* 18 *//* 19 *//* 20 *//* 21 *//* 22 *//* 23 *//* 24 *//* 25 *//* 26 *//* 27 *//* 28 *//* 29 *//* 30 *//* 31 *//* 32 *//* 33 *//* 34 *//* 35 *//* 36 *//* 37 *//* 38 *//* 39 *//* 40 *//* 41 *//* 42 *//* 43 *//* 44 *//* 45 *//* 46 *//* 47 *//* 48 *//* 49 *//* 50 *//* 51 *//* 52 *//* 53 *//* 54 *//* 55 *//* 56 *//* 57 *//* 58 *//* 59 *//* 60 *//* 61 *//* 62 *//* 63 *//* 64 *//* 65 *//* 66 *//* 67 *//* 68 *//* 69 *//* 70 *//* 71 *//* 72 *//* 73 *//* 74 *//* 75 *//* 76 *//* 77 *//* 78 *//* 79 *//* 80 *//* 81 *//* 82 *//* 83 *//* 84 *//* 85 *//* 86 *//* 87 *//* 88 *//* 89 *//* 90 *//* 91 *//* 92 *//* 93 *//* 94 *//* 95 *//* 96 *//* 97 *//* 98 *//* 99 *//* 100 *//* 101 *//* 102 *//* 103 *//* 104 *//* 105 *//* 106 *//* 107 *//* 108 *//* 109 *//* 110 *//* 111 *//* 112 *//* 113 *//* 114 *//* 115 *//* 116 *//* 117 *//* 118 *//* 119 *//* 120 *//* 121 *//* 122 *//* 123 *//* 124 *//* 125 *//* 126 *//* 127 *//* 128 *//* 129 *//* 130 *//* 131 *//* 132 *//* 133 *//* 134 *//* 135 *//* 136 *//* 137 *//* 138 *//* 139 *//* 140 *//* 141 *//* 142 *//* 143 *//* 144 *//* 145 *//* 146 *//* 147 *//* 148 *//* 149 *//* 150 *//* 151 *//* 152 *//* 153 *//* 154 *//* 155 *//* 156 *//* 157 *//* 158 *//* 159 *//* 160 *//* 161 *//* 162 *//* 163 *//* 164 *//* 165 *//* 166 *//* 167 *//* 168 *//* 169 *//* 170 *//* 171 *//* 172 *//* 173 *//* 174 *//* 175 *//* 176 *//* 177 *//* 178 *//* 179 *//* 180 *//* 181 *//* 182 *//* 183 *//* 184 *//* 185 *//* 186 *//* 187 *//* 188 *//* 189 *//* 190 *//* 191 *//* 192 *//* 193 *//* 194 *//* 195 *//* 196 *//* 197 *//* 198 *//* 199 *//* 200 *//* 201 *//* 202 *//* 203 *//* 204 *//* 205 *//* 206 *//* 207 *//* 208 *//* 209 *//* 210 *//* 211 *//* 212 *//* 213 *//* 214 *//* 215 *//* 216 *//* 217 *//* 218 *//* 219 *//* 220 *//* 221 *//* 222 *//* 223 *//* 224 *//* 225 *//* 226 *//* 227 *//* 228 *//* 229 *//* 230 *//* 231 *//* 232 *//* 233 *//* ignore white space. *//* Copyright (c) 2005, 2019, Oracle and/or its affiliates. All rights reserved. ... *//** CUP v0.11b generated parser. ... *//** Constructor which sets the default scanner. *//** Production table. *//** Access to production table. *//** Parse-action table. *//** Access to parse-action table. *//** <code>reduce_goto</code> table. *//** Access to <code>reduce_goto</code> table. *//** Instance of action encapsulation class. *//** Action encapsulation object initializer. *//** Invoke a user supplied parse action. *//* call code in generated class *//** Indicates start state. *//** Indicates start production. *//** <code>EOF</code> Symbol index. *//** <code>error</code> Symbol index. *//** Used by function calls with no args. *//** Reference to non-existing variable. *//** Reference to the Parser class. *//** String representation of the expression being parsed. *//** Line number where this expression/pattern was declared. *//** Reference to the symbol table. *//** This method is similar to findNodeType(int, Object) except that it ... */// "*"// Expand {uri}:* to *[namespace-uri() = 'uri'] - same for @*// Priority is set by hand if no other predicates exist// Set priority for case prefix:* and prefix:@* (no predicates)// */** Parse the expression passed to the current scanner. If this expression ... *//** Lookup a variable or parameter in the symbol table given its name. ... */// Is it a local var or param ?/** Returns true if the axis applies to elements only. The axes child, ... *//** Cup generated class to encapsulate user supplied action code. *//** Constructor *//** Method with the actual generated action code. *//* Symbol object for return from actions *//* select the action based on the action number *//* . . . . . . . . . . . . . . . . . . . . */// $START ::= TopLevel EOF/* ACCEPT */// TopLevel ::= PATTERN Pattern// TopLevel ::= EXPRESSION Expr// Pattern ::= LocationPathPattern// Pattern ::= LocationPathPattern VBAR Pattern// LocationPathPattern ::= SLASH// LocationPathPattern ::= SLASH RelativePathPattern// LocationPathPattern ::= IdKeyPattern// LocationPathPattern ::= IdKeyPattern SLASH RelativePathPattern// LocationPathPattern ::= IdKeyPattern DSLASH RelativePathPattern// LocationPathPattern ::= DSLASH RelativePathPattern// LocationPathPattern ::= RelativePathPattern// IdKeyPattern ::= ID LPAREN Literal RPAREN// IdKeyPattern ::= KEY LPAREN Literal COMMA Literal RPAREN// ProcessingInstructionPattern ::= PIPARAM LPAREN Literal RPAREN// RelativePathPattern ::= StepPattern// RelativePathPattern ::= StepPattern SLASH RelativePathPattern// RelativePathPattern ::= StepPattern DSLASH RelativePathPattern// StepPattern ::= NodeTestPattern// StepPattern ::= NodeTestPattern Predicates// StepPattern ::= ProcessingInstructionPattern// StepPattern ::= ProcessingInstructionPattern Predicates// StepPattern ::= ChildOrAttributeAxisSpecifier NodeTestPattern// StepPattern ::= ChildOrAttributeAxisSpecifier NodeTestPattern Predicates// StepPattern ::= ChildOrAttributeAxisSpecifier ProcessingInstructionPattern// TODO: report error if axis is attribute// StepPattern ::= ChildOrAttributeAxisSpecifier ProcessingInstructionPattern Predicates// NodeTestPattern ::= NameTestPattern// NodeTestPattern ::= NODE// NodeTestPattern ::= TEXT// NodeTestPattern ::= COMMENT// NodeTestPattern ::= PI// NameTestPattern ::= STAR// NameTestPattern ::= QName// ChildOrAttributeAxisSpecifier ::= ATSIGN// ChildOrAttributeAxisSpecifier ::= CHILD DCOLON// ChildOrAttributeAxisSpecifier ::= ATTRIBUTE DCOLON// Predicates ::= Predicate// Predicates ::= Predicate Predicates// Predicate ::= LBRACK Expr RBRACK// Expr ::= OrExpr// OrExpr ::= AndExpr// OrExpr ::= OrExpr OR AndExpr// AndExpr ::= EqualityExpr// AndExpr ::= AndExpr AND EqualityExpr// EqualityExpr ::= RelationalExpr// EqualityExpr ::= EqualityExpr EQ RelationalExpr// EqualityExpr ::= EqualityExpr NE RelationalExpr// RelationalExpr ::= AdditiveExpr// RelationalExpr ::= RelationalExpr LT AdditiveExpr// RelationalExpr ::= RelationalExpr GT AdditiveExpr// RelationalExpr ::= RelationalExpr LE AdditiveExpr// RelationalExpr ::= RelationalExpr GE AdditiveExpr// AdditiveExpr ::= MultiplicativeExpr// AdditiveExpr ::= AdditiveExpr PLUS MultiplicativeExpr// AdditiveExpr ::= AdditiveExpr MINUS MultiplicativeExpr// MultiplicativeExpr ::= UnaryExpr// MultiplicativeExpr ::= MultiplicativeExpr STAR UnaryExpr// MultiplicativeExpr ::= MultiplicativeExpr DIV UnaryExpr// MultiplicativeExpr ::= MultiplicativeExpr MOD UnaryExpr// UnaryExpr ::= UnionExpr// UnaryExpr ::= MINUS UnaryExpr// UnionExpr ::= PathExpr// UnionExpr ::= PathExpr VBAR UnionExpr// PathExpr ::= LocationPath// PathExpr ::= FilterExpr// PathExpr ::= FilterExpr SLASH RelativeLocationPath// PathExpr ::= FilterExpr DSLASH RelativeLocationPath// Expand '//' into '/descendant-or-self::node()/' or// into /descendant-or-self::*/// LocationPath ::= RelativeLocationPath// LocationPath ::= AbsoluteLocationPath// RelativeLocationPath ::= Step// RelativeLocationPath ::= RelativeLocationPath SLASH Step// Remove './' from the middle// Remove '/.' from the end// RelativeLocationPath ::= AbbreviatedRelativeLocationPath// AbsoluteLocationPath ::= SLASH// AbsoluteLocationPath ::= SLASH RelativeLocationPath// AbsoluteLocationPath ::= AbbreviatedAbsoluteLocationPath// AbbreviatedRelativeLocationPath ::= RelativeLocationPath DSLASH Step// Compress './/child:E' into 'descendant::E' - if possible// Expand 'rlp//child::E' into 'rlp/descendant::E'// Expand './/step' -> 'descendant-or-self::*/step'// Expand 'rlp//step' -> 'rlp/descendant-or-self::*/step'// Expand 'rlp//step' -> 'rlp/descendant-or-self::node()/step'// AbbreviatedAbsoluteLocationPath ::= DSLASH RelativeLocationPath// Step ::= NodeTest// Step ::= NodeTest Predicates// Step ::= AxisSpecifier NodeTest Predicates// Step ::= AxisSpecifier NodeTest// Step ::= AbbreviatedStep// AxisSpecifier ::= AxisName DCOLON// AxisSpecifier ::= ATSIGN// AxisName ::= ANCESTOR// AxisName ::= ANCESTORORSELF// AxisName ::= ATTRIBUTE// AxisName ::= CHILD// AxisName ::= DESCENDANT// AxisName ::= DESCENDANTORSELF// AxisName ::= FOLLOWING// AxisName ::= FOLLOWINGSIBLING// AxisName ::= NAMESPACE// AxisName ::= PARENT// AxisName ::= PRECEDING// AxisName ::= PRECEDINGSIBLING// AxisName ::= SELF// AbbreviatedStep ::= DOT// AbbreviatedStep ::= DDOT// FilterExpr ::= PrimaryExpr// FilterExpr ::= PrimaryExpr Predicates// PrimaryExpr ::= VariableReference// PrimaryExpr ::= LPAREN Expr RPAREN// PrimaryExpr ::= Literal/* If the string appears to have the syntax of a QName, store ... */// PrimaryExpr ::= INT// PrimaryExpr ::= REAL// PrimaryExpr ::= FunctionCall// VariableReference ::= DOLLAR VariableName// An empty qname prefix for a variable or parameter reference// should map to the null namespace and not the default URI.// FunctionCall ::= FunctionName LPAREN RPAREN// FunctionCall ::= FunctionName LPAREN NonemptyArgumentList RPAREN// Special case for extension function nodeset()// implies MultiDOM// NonemptyArgumentList ::= Argument// NonemptyArgumentList ::= Argument COMMA NonemptyArgumentList// FunctionName ::= QName// VariableName ::= QName// Argument ::= Expr// NodeTest ::= NameTest// NodeTest ::= NODE// NodeTest ::= TEXT// NodeTest ::= COMMENT// NodeTest ::= PIPARAM LPAREN Literal RPAREN// NodeTest ::= PI// NameTest ::= STAR// NameTest ::= QName// QName ::= QNAME// QName ::= DIV// QName ::= MOD// QName ::= KEY// QName ::= ANCESTOR// QName ::= ANCESTORORSELF// QName ::= ATTRIBUTE// QName ::= CHILD// QName ::= DESCENDANT// QName ::= DESCENDANTORSELF// QName ::= FOLLOWING// QName ::= FOLLOWINGSIBLING// QName ::= NAMESPACE// QName ::= PARENT// QName ::= PRECEDING// QName ::= PRECEDINGSIBLING// QName ::= SELF// QName ::= ID/* . . . . . . *//* Copyright (c) 2012, 2017, Oracle and/or its affiliates. All rights reserved. */// A reference to the main stylesheet parser object.// A reference to an external XMLReader (SAX parser) passed to us// A reference to an external SourceLoader (for use with include/import)// A reference to the stylesheet being compiled.// Counters used by various classes to generate unique names.// private int _variableSerial     = 1;// Name index tables// Next available element type// Index of all registered QNames// Map of all registered elements// Map of all registered attributes// Namespace index tables// Next available namespace type// Index of all registered namespaces// Map of all registered namespaces// Map of all registered namespace prefixes// All literal text in the stylesheet// These define the various methods for outputting the translet// Compiler options (passed from command line or XSLTC client)// -x// -j <jar-file-name>// -o <class-name>// -p <package-name>// -d <directory-name>// by default/** Set to true if template inlining is requested. Template ... *//** State of the secure processing feature. *//** protocols allowed for external references set by the stylesheet processing instruction, Import and Include element. *//** protocols allowed for external DTD references in source file and/or stylesheet. *//** Extension function class loader variables *//* Class loader reference that will be used for external extension functions loading *//** HashMap with the loaded classes *//** XSLTC compiler constructor *//** Set the state of the secure processing feature. *//** Return the state of the secure processing feature. *//** Return the value of the specified feature ... *//** Return allowed protocols for accessing external stylesheet. *//** Set allowed protocols for accessing external stylesheet. *//* Clear the external extension functions HashMap if extension class ... *//** Only for user by the internal TrAX implementation. *//** Initializes the compiler to compile a new stylesheet *//* Function loads an external extension function. ... *///Check if the function is not loaded already//Return loaded class/* Returns unmodifiable view of HashMap with loaded external extension ... *//** Initializes the compiler to produce a new translet *///_variableSerial     = 1;/** Defines an external SourceLoader to provide the compiler with documents ... *//** Set a flag indicating if templates are to be inlined or not. The ... *//** Return the state of the template inlining feature. *//** Compiles an XSL stylesheet pointed to by a URL ... */// Open input stream from URL and wrap inside InputSource/** Compiles an XSL stylesheet passed in through an InputStream ... */// We have nothing else!!!// Reset globals in case we're called by compile(Vector v);// The systemId may not be set, so we'll have to check the URL// Set the translet class name if not already set// Ensure we have a non-empty class name at this point// default translet name// Get the root node of the abstract syntax tree// Compile the translet - this is where the work is done!// Create a Stylesheet element from the root node// Create AST under the Stylesheet element (parse & type-check)// Generate the bytecodes and output the translet class(es)// Class synchronization is needed for BCEL/* if (_debug) */// reset this here to be sure it is not re-used/** Compiles a set of stylesheets pointed to by a Vector of URLs ... */// Get the number of stylesheets (ie. URLs) in the vector// Return straight away if the vector is empty// Special handling needed if the URL count is one, becuase the// _className global must not be reset if it was set explicitly// Traverse all elements in the vector and compile// reset, so that new name will be computed/** Returns an array of bytecode arrays generated by a compilation. ... *//** Compiles a stylesheet pointed to by a URL. The result is put in a ... *//** Set the XMLReader to use for parsing the next input stylesheet ... *//** Get the XMLReader to use for parsing the next input stylesheet *//** Get a list of all compile error messages ... *//** Get a list of all compile warning messages ... *//** Print all compile error messages to standard output *//** Print all compile warning messages to standard output *//** This method is called by the XPathParser when it encounters a call ... *//** Set the class name for the generated translet. This class name is ... *//** Get the class name for the generated translet. *//** Convert for Java class name of local system file name. ... *//** Generate an output File object to send the translet to *//** Set the destination directory for the translet. ... *//** Set an optional package name for the translet and auxiliary classes *//** Set the name of an optional JAR-file to dump the translet and ... *//** Set the top-level stylesheet *//** Returns the top-level stylesheet *//** Registers an attribute and gives it a type so that it can be mapped to ... *//** Registers an element and gives it a type so that it can be mapped to ... */// Register element (full QName)/** Registers a namespace prefix and gives it a type so that it can be mapped to ... */// namespace::ext2:ped2 will be made empty in TypedNamespaceIterator/** Registers a namespace and gives it a type so that it can be mapped to ... *//** Returns a unique name for every helper class needed to ... *//** File separators are converted to forward slashes for ZIP files. *//** Generate output JAR-file and packages */// create the manifest// create manifest// dump() closes it's output stream/** Turn debugging messages on/off *//** Get current debugging message setting *//** Retrieve a string representation of the character data to be stored ... *//** Get the number of char[] arrays, thus far, that will be created to ... *//** Add literal text to char arrays that will be used to store character ... */// Character data could take up to three-times as much space when// written to the class file as UTF-8.  The maximum size for a// constant is 65535/3.  If we exceed that,// (We really should use some "bin packing".)/* $Id: XslAttribute.java,v 1.2.4.1 2005/09/12 11:39:32 pvedula Exp $ *//** Returns the name of the attribute *//** Displays the contents of the attribute *//** Parses the attribute's contents. Special care taken for namespaces. */// Ignore attribute if preceeded by some other type of element// These three objects result in one or more attribute output// These objects _can_ result in one or more attribute// The output handler will generate an error if not (at runtime)// Report warning but do not ignore attribute// Get namespace from namespace attribute?// Get namespace from prefix in name attribute?// Common handling for namespaces:// Generate prefix if we have none/* TODO: The namespace URI must be passed to the parent ... */// Compile code that emits any needed namespace declaration// public void attribute(final String name, final String value)// if the qname is an AVT, then the qname has to be checked at runtime if it is a valid qname// call checkQName if the name is an AVT// Push attribute value - shortcut for literal strings// call "attribute"/** Displays the contents of the element */// Handle the 'name' attribute// Ignore the element if the QName is invalid// Get namespace attribute// Optimize compilation when name is known at compile time// Ignore the element if prefix is undeclared// Prepend prefix to local name/** Run type check on element name & contents *//** This method is called when the name of the element is known at compile time. ... *//** At runtime the compilation of xsl:element results in code that: (i) ... */// Optimize translation if element name is a literal// Push handler for call to endElement()// Push additional arguments// Invoke BasisLibrary.startXslElemCheckQName()/** Override this method to make sure that xsl:attributes are not ... *///----------------------------------------------------// The following code was generated by CUP v0.10j// Fri Feb 27 13:01:50 PST 2004/** CUP generated class containing symbol constants. *//* terminals *//** Translates a real into an object of internal type <code>type</code>. The ... *//** Expects a boolean on the stack and pushes a string. If the value on the ... *//** Expects a boolean on the stack and pushes a real. The value "true" is ... *//** Expects a boolean on the stack and pushes a boxed boolean. ... *//** Translates an internal boolean into an external (Java) boolean. */// Is Boolean <: clazz? I.e. clazz in { Boolean, Object }/** Translates an external (Java) boolean into internal boolean. *//** Translates an object of this type to its boxed representation. *//** Translates an object of this type to its unboxed representation. *//** The class that implements any class that inherits from ... */// --> can be moved to XSLT// a  single instance cached here/** Pretend this is the stylesheet class. Useful when compiling ... *//** Returns <tt>true</tt> or <tt>false</tt> depending on whether ... */// not available//??? may not be used anymore/* XSLTC compile-time error messages. ... */// These message should be read from a locale-specific resource bundle/* Note to translators:  The substitution text is the name of a ... *//* Note to translators:  The substitution text is the name of a variable ... *//* Note to translators:  The word "class" here refers to a Java class. ... *//* Note to translators:  The word "method" here refers to a Java method. ... *//* Note to translators:  The file or URI named in the substitution text ... *//* Note to translators:  This message is displayed when the URI ... *//* Note to translators: <xsl:stylesheet> and <xsl:transform> are ... *//* Note to translators:  The stylesheet contained a reference to a ... *//* Note to translators:  The Java function named in the stylesheet could ... *//* Note to translators:  This message indicates there was a syntactic ... *//* Note to translators:  An element in the stylesheet requires a ... *//* Note to translators:  This message indicates that a character not ... *//* Note to translators:  A processing instruction is a mark-up item in ... *//* Note to translators:  This message is reported if the stylesheet ... *//* Note to translators:  An attribute that wasn't recognized was ... *//* Note to translators:  "import" and "include" are keywords that should ... *//* Note to translators:  A result-tree fragment is a portion of a ... *//* Note to translators:  A name can be given to a particular style to be ... *//* Note to translators:  The stylesheet version named in the ... *//* Note to translators:  The definitions of one or more variables or ... *//* Note to translators:  The operator in an expresion with two operands was ... *//* Note to translators:  This message is produced if a reference to a ... *//* Note to translators:  "document()" is the name of function and must ... *//* Note to translators:  "<xsl:when>" and "<xsl:choose>" are keywords ... *//* Note to translators:  "<xsl:otherwise>" and "<xsl:choose>" are ... *//* Note to translators:  "<xsl:when>", "<xsl:otherwise>" and ... *//* Note to translators:  "<xsl:attribute-set>" and "name" are keywords ... *//* Note to translators:  An element in the stylesheet contained an ... *//* Note to translators:  The stylesheet tried to create an element with ... *//* Note to translators:  The stylesheet tried to create an attribute ... *//* Note to translators:  The children of the outermost element of a ... *//* Note to translators:  JAXP is an acronym for the Java API for XML ... *//* Note to translators:  The substitution text names the internal error ... *//* Note to translators:  The stylesheet contained an element that was ... *//* Note to translators:  The stylesheet referred to an extension to the ... *//* Note to translators:  The XML document given to XSLTC as a stylesheet ... *//* Note to translators:  XSLTC could not find the stylesheet document ... *//* Note to translators:  access to the stylesheet target is denied *//* Note to translators:  This message represents an internal error in ... *//* Note to translators:  The element named in the substitution text was ... *//* Note to translators:  "use", "<key>", "node", "node-set", "string" ... *//* Note to translators:  An XML document can specify the version of the ... *//* Note to translators:  The operator in a comparison operation was ... *//* Note to translators:  An attribute set defines as a set of XML ... *//* Note to translators:  The term "attribute value template" is a term ... *//* Note to translators:  ??? *//* Note to translators:  The substitution text refers to data types. ... *//* Note to translators:  "Templates" is a Java class name that should ... *//* Note to translators:  The substitution text is the name of a class. *//* Note to translators:  "ErrorListener" is a Java interface name that ... *//* Note to translators:  StreamSource, SAXSource and DOMSource are Java ... *//* Note to translators:  "Source" is a Java class name that should not ... *//* Note to translators:  The message indicates that XSLTC failed to ... *//* Note to translators:  "TransformerFactory" is a class name.  In this ... *//* Note to translators:  "setResult()" and "startDocument()" are Java ... *//* Note to translators:  "Transformer" is a Java interface name that ... *//* Note to translators:  The XML document that results from a ... *//* Note to translators:  "Result" is a Java interface name in this ... *//* Note to translators:  "Transformer" is a Java interface name.  The ... *//* Note to translators:  SAX2DOM is the name of a Java class that should ... *//* Note to translators:  "XSLTCSource.build()" is a Java method name. ... *//* Note to translators:  This message indicates that the value argument ... *//* Note to translators:  This message contains usage information for a ... *//* Note to translators:  "<xsl:sort>", "<xsl:for-each>" and ... *//* Note to translators:  The message indicates that the encoding ... *//* Note to translators:  The message indicates that the XPath expression ... *//* Note to translators:  The substitution text is the name of a Java ... *//* Note to translators:  "static" is the Java keyword.  The substitution ... *//* Note to translators:  An XPath expression was not of the type ... *//* Note to translators:  The substitution text is the name of a command- ... *//* Note to translators:  This message is used to indicate the severity ... *//* Note to translators:  The first substitution is the name of a class, ... *//* Note to translators:  "TransformerFactory" is the name of a Java ... *//* Note to translators:  This message is produced when the user ... *//* Note to translators:  The following message is used as a header. ... *//* Note to translators:  An attribute whose value is constrained to ... *//* Note to translators:  An attribute whose value is required to ... *//* Note to translators:  An attribute with an incorrect value was ... *//* Note to translators:  This message describes an internal error in the ... *//* $Id: ErrorMsg.java,v 1.2.4.1 2005/09/15 10:18:01 pvedula Exp $ */// Compiler error messages// JAXP/TrAX error messages// Command-line error messages// Recently added error messages// All error messages are localized and are stored in resource bundles.// This array and the following 4 strings are read from that bundle./** This version of toString() uses the _params instance variable ... *//** Return an ErrorMessages string corresponding to the _code ... */// If the _isWarningError flag is true, the error is treated as// a warning by the compiler, but should be reported as an error// to the ErrorListener. This is a workaround for the TCK failure// ErrorListener.errorTests.error001./** This class implements auxliary classes needed to compile ... *//** The index of the translet pointer within the execution of ... *//** Returns <tt>true</tt> since this class is external to the ... *//** @see *//** Translates an integer into an object of internal type <code>type</code>. ... *//** Expects an integer on the stack and pushes a real. ... *//** Expects an integer on the stack and pushes its string value by calling ... *//** Expects an integer on the stack and pushes a 0 if its value is 0 and ... *//** Expects an integer on the stack and translates it to a non-synthesized ... *//** Expects an integer on the stack and pushes a boxed integer. ... *//** Translates an integer into the Java type denoted by <code>clazz</code>. ... */// Is Double <: clazz? I.e. clazz in { Double, Number, Object }/** Marks a class of errors in which XSLTC has reached some incorrect internal ... *//** Construct an <code>InternalError</code> with the specified error message. ... *//** A special abstract dummy subclass of ... *//** Zero-argument constructor.  Sets the opcode to an invalid value and ... *//** {@link com.sun.org.apache.bcel.internal.generic.Visitor}s will know nothing about this ... *//** The number of JVM stack entries consumed by the instruction. ... *//** The number of JVM stack entries produced by the instruction. ... *//** Produce a copy of the instruction.  By default a ... *//** Dump instruction as byte code to stream out.  A {@link MarkerInstruction} ... *//** Get index of the register where the DOM is stored. *//** Set index where the reference to the DOM is stored. *//** Get index of the register where the current iterator is stored. *//** Set index of the register where the current iterator is stored. *//* $Id: MethodGenerator.java,v 1.2.4.1 2005/09/05 11:16:47 pvedula Exp $ *//** A mapping between patterns and instruction lists used by ... *//** Allocates a local variable. If the slot allocator has already been ... *//** Keeps track of all local variables used in the method. ... *//** <p>A <code>java.lang.ArrayList</code> of all ... *//** Maps a name to a {@link LocalVariableGen} *//** Registers a {@link org.apache.bcel.generic.LocalVariableGen} ... */// If the LocalVariableGen uses a slot index beyond any previously// encountered, expand the _variables, padding with intervening null// entries as required.// If the LocalVariableGen reuses a slot, make sure the entry// in _variables contains an ArrayList and add the newly// registered LocalVariableGen to the list.  If the entry in// _variables just contains null padding, store the// LocalVariableGen directly./** <p>Find which {@link LocalVariableGen}, if any, is registered for a ... */// If this slot index was never used, _variables.get will return// null; if it was used once, it will return the LocalVariableGen;// more than once it will return an ArrayList of all the// LocalVariableGens for variables stored in that slot.  For each// LocalVariableGen, check whether its range includes the// specified offset, and return the first such encountered.// No local variable stored in the specified slot at the specified/** <p>Set up a mapping of the name of the specified ... *//** Remove the mapping from the name of the specified ... *//** <p>Given the name of a variable, finds a {@link LocalVariableGen} ... *//** <p>Gets all {@link LocalVariableGen} objects for this method.</p> ... *//** Determines whether a particular variable is in use at a particular offset ... */// If no start handle is recorded for the LocalVariableGen, it is// assumed to be in use from the beginning of the method.// If no end handle is recorded for the LocalVariableGen, it is assumed// to be in use to the end of the method.// Does the range of the instruction include the specified offset?// Note that the InstructionHandle.getPosition method returns the// offset of the beginning of an instruction.  A LocalVariableGen's// range includes the end instruction itself, so that instruction's// length must be taken into consideration in computing whether the// varible is in range at a particular offset./** by default context node is the same as current node. MK437 */// Get the current number of local variable slots// Get numer of actual variables// We want at least 5 local variable slots (for parameters)/** Add a pre-compiled pattern to this mode. *//** Get the instruction list for a pre-compiled pattern. Used by ... *//** Used to keep track of an outlineable chunk of instructions in the ... *//** {@link InstructionHandle} of the first instruction in the outlineable ... *//** {@link org.apache.bcel.generic.InstructionHandle} of the first ... *//** Number of bytes in the instructions contained in this outlineable ... *//** <p>Constructor for an outlineable {@link MethodGenerator.Chunk}.</p> ... *//** Determines whether this outlineable {@link MethodGenerator.Chunk} is ... *//** Getter method for the start of this {@linke MethodGenerator.Chunk} ... *//** Getter method for the end of this {@link MethodGenerator.Chunk} ... *//** The size of this {@link MethodGenerator.Chunk} ... *//** Implements the <code>java.util.Comparable.compareTo(Object)</code> ... *//** Find the outlineable chunks in this method that would be the best choices ... */// Scan instructions in the method, keeping track of the nesting level// of outlineable chunks.// currLevelChunks//     keeps track of the child chunks of a chunk.  For each chunk,//     there will be a pair of entries:  the InstructionHandles for the//     start and for the end of the chunk// subChunkStack//     a stack containing the partially accumulated currLevelChunks for//     each chunk that's still open at the current position in the//     InstructionList.// candidateChunks//     the list of chunks which have been accepted as candidates chunks//     for outlining// Get the next instruction.  The loop will perform one extra// iteration after it reaches the end of the InstructionList, with// currentHandle set to null.// At the first iteration, create a chunk representing all the// code in the method.  This is done just to simplify the logic -// this chunk can never be outlined because it will be too big.// Found a new chunk// If last MarkerInstruction encountered was an// OutlineableChunkStart, this represents the first chunk// nested within that previous chunk - push the list of chunks// from the outer level onto the stack// Close off an open chunk// If the last MarkerInstruction encountered was an// OutlineableChunkEnd, it means that the current instruction// marks the end of a chunk that contained child chunks.// Those children might need to be examined below in case they// are better candidates for outlining than the current chunk.// Get the handle for the start of this chunk (the last entry// in currLevelChunks)// Two ranges of chunk size to consider:// 1. [0,TARGET_METHOD_SIZE]//      Keep this chunk in consideration as a candidate,//      and ignore its subchunks, if any - there's nothing to be//      gained by outlining both the current chunk and its//      children!// 2. (TARGET_METHOD_SIZE,+infinity)//      Ignore this chunk - it's too big.  Add its subchunks//      as candidates, after merging adjacent chunks to produce//      chunks that are as large as possible// Gather all the child chunks of the current chunk// Merge adjacent siblings// Add chunks that mean minimum size requirements// to the list of candidate chunks for outlining// Drop the chunk which was too big// currLevelChunks contains pairs of InstructionHandles.  If// its size is an odd number, the loop has encountered the// start of a chunk at this level, but not its end./** Merge adjacent sibling chunks to produce larger candidate chunks for ... */// Loop through chunks, and record in adjacencyRunStart where each// run of adjacent chunks begins and how many are in that run.  For// example, given chunks A B C D E F, if A is adjacent to B, but not// to C, and C, D, E and F are all adjacent,//   adjacencyRunStart[0] == 0; adjacencyRunLength[0] == 2//   adjacencyRunStart[1] == 2; adjacencyRunLength[1] == 4// Track the longest run of chunks found// Try merging adjacent chunks to come up with better sized chunks for// outlining.  This algorithm is not optimal, but it should be// reasonably fast.  Consider an example like this, where four chunks// of the sizes specified in brackets are adjacent.  The best way of// combining these chunks would be to merge the first pair and merge// the last three to form two chunks, but the algorithm will merge the// three in the middle instead, leaving three chunks in all.//    [25000] [25000] [20000] [1000] [20000]// Start by trying to merge the maximum number of adjacent chunks, and// work down from there.// Look at each run of adjacent chunks// Within the current run of adjacent chunks, look at all// "subruns" of length numToMerge, until we run out or find// a subrun that can be merged.// Find out how big the subrun is// If the current subrun is small enough to outline,// merge it, and split the remaining chunks in the run// Adjust the length of the current run of adjacent// chunks to end at the newly merged chunk...// and any chunks that follow the newly merged chunk// in the current run of adjacent chunks form another// new run of adjacent chunks// Make a final pass for any chunk that wasn't merged with a sibling// and include it in the list of chunks after merging./** Breaks up the IL for this {@link MethodGenerator} into separate ... */// Special handling for initialization methods.  No other methods can// include the less than and greater than characters in their names,// so we munge the names here.// Loop until the original method comes in under the JVM limit or// the loop was unable to outline any more methods// Get all the best candidates for outlining, and sort them in// ascending order of size// Loop over the candidates for outlining, from the largest to the// smallest and outline them one at a time, until the loop has// outlined all or the original method comes in under the JVM// limit on the size of a method.// Check the size of the method now// Outlining failed to reduce the size of the current method// sufficiently.  Throw an internal error./** Given an outlineable chunk of code in the current {@link MethodGenerator} ... */// We're not equipped to deal with exception handlers yet.  Bail out!// Create new outlined method with signature://   private final outlinedMethodName(CopyLocals copyLocals);// CopyLocals is an object that is used to copy-in/copy-out local// variables that are used by the outlined method.   Only locals whose// value is potentially set or referenced outside the range of the// chunk that is being outlined will be represented in CopyLocals.  The// type of the variable for copying local variables is actually// generated to be unique - it is not named CopyLocals.// The outlined method never needs to be referenced outside of this// class, and will never be overridden, so we mark it private final.// Create class for copying local variables to the outlined method.// The fields the class will need to contain will be determined as the// code in the outlineable chunk is examined.// Number of fields in the copy class// The handle for the instruction after the last one to be outlined.// Note that this should never end up being null.  An outlineable chunk// won't contain a RETURN instruction or other branch out of the chunk,// and the JVM specification prohibits code in a method from just// "falling off the end" so this should always point to a valid handle.// InstructionLists for copying values into and out of an instance of// CopyLocals://      oldMethCoypInIL  - from locals in old method into an instance//                         of the CopyLocals class (oldMethCopyInIL)//      oldMethCopyOutIL - from CopyLocals back into locals in the old//                         method//      newMethCopyInIL  - from CopyLocals into locals in the new//      newMethCopyOutIL - from locals in new method into the instance//                         of the CopyLocals class// Allocate instance of class in which we'll copy in or copy out locals// and make two copies:  last copy is used to invoke constructor;// other two are used for references to fields in the CopyLocals object// Generate code to invoke the new outlined method, and place the code// on oldMethCopyOutIL// Used to keep track of the first in a sequence of// OutlineableChunkStart instructions// Used to keep track of the last instruction that was copied// Keeps track of the mapping from instruction handles in the old// method to instruction handles in the outlined method.  Only need// to track instructions that are targeted by something else in the// generated BCEL// Keeps track of the mapping from local variables in the old method// to local variables in the outlined method.// Pass 1: Make copies of all instructions, append them to the new list// and associate old instruction references with the new ones, i.e.,// a 1:1 mapping.  The special marker instructions are not copied.// Also, identify local variables whose values need to be copied into or// out of the new outlined method, and builds up targetMap and// localVarMap as described above.  The code identifies those local// variables first so that they can have fixed slots in the stack// frame for the outlined method assigned them ahead of all those// variables that don't need to exist for the entirety of the outlined// method invocation.// MarkerInstructions are not copied, so if something else targets// one, the targetMap will point to the nearest copied sibling// InstructionHandle:  for an OutlineableChunkEnd, the nearest// preceding sibling; for an OutlineableChunkStart, the nearest// following sibling.// Copy the instruction and append it to the outlined method's// InstructionList.// For any instruction that touches a local variable,// check whether the local variable's value needs to be// copied into or out of the outlined method.  If so,// generate the code to perform the necessary copying, and// use localVarMap to map the variable in the original// method to the variable in the new method.// Has the code already mapped this local variable to a// local in the new method?// Determine whether the local variable needs to be// copied into or out of the outlined by checking// whether the range of instructions in which the// variable is accessible is outside the range of// instructions in the outlineable chunk.// Special case a chunk start offset of zero:  a local// variable live at that position must be a method// parameter, so the code doesn't need to check whether// the variable is live before that point; being live// at offset zero is sufficient to know that the value// must be copied in to the outlined method.// For any variable that needs to be copied into or out// of the outlined method, create a field in the// CopyLocals class, and generate the necessary code for// copying the value.// Record the mapping from the old local to the new// Generate code for the old method to store the// value of the local into the correct field in// CopyLocals prior to invocation of the// outlined method.// If the end of the live range of the old// variable was in the middle of the outlined// chunk.  Make the load of its value the new// end of its range.// Generate code for start of the outlined// method to copy the value from a field in// CopyLocals to the new local in the outlined// method// Generate code for the end of the outlined// method to copy the value from the new local// variable into a field in CopyLocals// Generate code to copy the value from a field// in CopyLocals into a local in the original// method following invocation of the outlined// If the start of the live range of the old// chunk.  Make this store into it the new start// of its range.// If this is the first instruction copied following a sequence// of OutlineableChunkStart instructions, indicate that the// sequence of old instruction all map to this newly created// instruction// Pass 2: Walk old and new instruction lists, updating branch targets// and local variable references in the new list// i == old instruction; c == copied instruction// New target must be in targetMap// Handle LOOKUPSWITCH or TABLESWITCH which may have many// target instructions// map the location of the variable in the original// method to its location in the new method.// Create new variable based on old variable - use same// name and type, but we will let the variable be active// for the entire outlined method.// LocalVariableGen oldLocal = oldLocals[oldLocalVarIndex];// The old variable's live range was wholly contained in// the outlined chunk.  There should no longer be stores// of values into it or loads of its value, so we can just// mark its live range as the reference to the outlined// If the old instruction marks the end of the range of a local// variable, make sure that any slots on the stack reserved for// local variables are made available for reuse by calling// MethodGenerator.removeLocalVariable// If the current instruction in the original list was a marker,// it wasn't copied, so don't advance through the list of copied// instructions yet.// POP the reference to the CopyLocals object from the stack// Now that the generation of the outlined code is complete, update// the old local variables with new start and end ranges, as required.// Assemble the instruction lists so that the old method invokes the// new outlined method// Insert the copying code into the outlined method// Discard instructions in outlineable chunk from old method// If there were still references to old instructions lingering,// clean those up.  The only instructions targetting the deleted// instructions should have been part of the chunk that was just// deleted, except that instructions might branch to the start of// the outlined chunk; similarly, all the live ranges of local// variables should have been adjusted, except for unreferenced// variables.// In the case of any lingering variable references,// just make the live range point to the outlined// function reference.  Such variables should be unused// anyway.// Make a copy for the new method of all exceptions that might be thrown/** Helper method to generate an instance of a subclass of ... *//** Track the number of outlineable chunks seen. *//** Track the number of outlineable chunks started but not yet ended.  Used ... *//** Mark the end of the method's ... */// m_chunkTree.markChunkStart();/** Mark the end of an outlineable chunk of code.  See ... */// m_chunkTree.markChunkEnd();/** <p>Get all {@link Method}s generated by this {@link MethodGenerator}. ... */// Need to look for any branch target offsets that exceed the range// [-32768,32767]// If any branch instructions needed widening, recompute the size// of the byte code for the method/** <p>Rewrites branches to avoid the JVM limits of relative branch ... */// Loop through all the instructions, finding those that would be// affected by inserting new instructions in the InstructionList, and// calculating the maximum amount by which the relative offset between// two instructions could possibly change.// In part this loop duplicates code in// org.apache.bcel.generic.InstructionList.setPosition(), which does// this to determine whether to use 16-bit or 32-bit offsets for GOTO// and JSR instructions.  Ideally, that method would do the same for// conditional branch instructions, but it doesn't, so we duplicate the// processing here.// Instructions that may have 16-bit or 32-bit branch targets.// The size of the branch offset might increase by two bytes.// Instructions that contain padding for alignment purposes// Up to three bytes of padding might be needed.  For greater// accuracy, we should be able to discount any padding already// added to these instructions by InstructionList.setPosition(),// their APIs do not expose that information.// Instructions that might be rewritten by this method as a// conditional branch followed by an unconditional branch.// The unconditional branch would require five bytes.// Now that the maximum number of bytes by which the method might grow// has been determined, look for conditional branches to see which// might possibly exceed the 16-bit relative offset.// Consider the worst case scenario in which the conditional// branch and its target are separated by all the instructions// in the method that might increase in size.  If that results// in a relative offset that cannot be represented as a 32-bit// signed quantity, rewrite the instruction as described above.// Invert the logic of the IF instruction, and append// that to the InstructionList following the original IF// Append an unconditional branch to the target of the// original IF instruction after the new IF instruction// If the original IF was the last instruction in// InstructionList, add a new no-op to act as the target// of the new IF// Make the new IF instruction branch around the GOTO// If anything still "points" to the old IF instruction,// make adjustments to refer to either the new IF or GOTO// Ideally, one should simply be able to use// InstructionTargeter.updateTarget to change// references to the old IF instruction to the new// IF instruction.  However, if a LocalVariableGen// indicated the old IF marked the end of the range// in which the IF variable is in use, the live// range of the variable must extend to include the// newly created GOTO instruction.  The need for// this sort of specific knowledge of an// implementor of the InstructionTargeter interface// makes the code more fragile.  Future implementors// of the interface might have similar requirements// which wouldn't be accommodated seemlessly.// This can never happen - we updated the list of// instructions that target the deleted instruction// prior to deleting it.// Adjust the pointer in the InstructionList to point after// the newly inserted IF instruction// Indicate that this method rewrote at least one IF// Did this method rewrite any IF instructions?/** Returns the signature of this method that results by adding ... */// should never be called// return MAX_VALUE// both methods have no args/* $Id: MultiHashtable.java,v 1.2.4.1 2005/09/05 11:18:51 pvedula Exp $ *//** Associates the specified key with a set of values. If the map previously ... *//** Maps a key to a value in a set that is associated with the specified key. ... *//** Makes the MultiHashtable unmodifiable.  This method allows modules to set the table ... *//** This class is used for named templates. Named template methods have access ... */// The index of the first parameter (after dom/iterator/handler/current)/** This class implements auxiliary classes needed to compile ... *//** Set the index of the register where "this" (the pointer to ... *//** Translates a node-set into an object of internal type ... *//** Translates an external Java Class into an internal type. ... */// w3c NodeList is on the stack from the external Java function call.// call BasisFunction to consume NodeList and leave Iterator on//    the stack.// push translet onto stack// push DOM onto stack// w3c Node is on the stack from the external Java function call.// call BasisLibrary.node2Iterator() to consume Node and leave// Iterator on the stack./** Translates a node-set into a synthesized boolean. ... *//** Translates a node-set into a string. The string value of a node-set is ... *//** Expects a node-set on the stack and pushes a real. ... *//** Expects a node-set on the stack and pushes a node. ... *//** Subsume node-set into ObjectType. ... *//** Translates a node-set into a non-synthesized boolean. It does not ... *//** Expects a node-set on the stack and pushes a boxed node-set. ... *//** Translates a node-set into the Java type denoted by <code>clazz</code>. ... */// Get next node from the iterator// Get the node's string value (from the DOM)/** Some type conversions require gettting the first node from the node-set. ... *//** Returns the class name of an internal type's external representation. *//** Generator for subclasses of NodeSortRecordFactory. ... *//** Translates a node into an object of internal type <code>type</code>. ... *//** Expects a node on the stack and pushes its string value. ... */// dom ref must be below node index/** Translates a node into a synthesized boolean. ... *//** Expects a node on the stack and pushes a real. ... *//** Expects a node on the stack and pushes a singleton node-set. Singleton ... */// Create a new instance of SingletonIterator/** Subsume Node into ObjectType. ... *//** Translates a node into a non-synthesized boolean. It does not push a ... *//** Expects a node on the stack and pushes a boxed node. Boxed nodes ... *//** Translates a node into the Java type denoted by <code>clazz</code>. ... *//** Used to represent a Java Class type such is required to support ... *//** Must return the same value for all ObjectType instances. This is ... *//** Translates a void into an object of internal type <code>type</code>. ... *//** Translates an object of this type to the external (Java) type denoted ... *//** Translates an external Java type into an Object type *//** <p>Marks the end of a region of byte code that can be copied into a new ... *//** A constant instance of {@link OutlineableChunkEnd}.  As it has no fields, ... *//** Private default constructor.  As it has no fields, ... *//** Get the name of this instruction.  Used for debugging. ... *//** <p>This pseudo-instruction marks the beginning of a region of byte code that ... *//** A constant instance of {@link OutlineableChunkStart}.  As it has no fields, ... *//** Expects a real on the stack and pushes its string value by calling ... *//** Expects a real on the stack and pushes a 0 if that number is 0.0 and ... *//** Expects a real on the stack and pushes a truncated integer value ... *//** Translates a real into a non-synthesized boolean. It does not push a ... */// Store real into a local variable// Compare it to 0.0//!!! call isNaN// Compare it to itself to see if NaN// NaN != NaN/** Expects a double on the stack and pushes a boxed double. Boxed ... *//** Translates a real into the Java type denoted by <code>clazz</code>. ... *//** Translates an external (primitive) Java type into a real. Expects a java ... *//** Translates a reference to an object of internal type <code>type</code>. ... *//** Translates reference into object of internal type <code>type</code>. ... */// If no current, conversion is a top-level// push root node/** Translates a reference into an object of internal type <code>type</code>. ... *//** Casts a reference into a NodeIterator. ... */// Reset this iterator/** Casts a reference into a Node. ... *//** Casts a reference into a ResultTree. ... *//** Subsume reference into ObjectType. ... *//** Translates a reference into the Java type denoted by <code>clazz</code>. *//** Translates an external Java type into a reference. Only conversion ... *//** Expects a reference on the stack and translates it to a non-synthesized ... *//** Translates a result tree to object of internal type <code>type</code>. ... *//** Expects an result tree on the stack and pushes a boolean. ... */// A result tree is always 'true' when converted to a boolean value,// since the tree always has at least one node (the root).// don't need the DOM reference// push 'true' on the stack/** Expects an result tree on the stack and pushes a string. ... */// Push required parameters// Create a new instance of a StringValueHandler// Store new Handler into a local variable// Call the method that implements this result tree// Restore new handler and call getValue()/** Expects an result tree on the stack and pushes a real. ... *//** Expects a result tree on the stack and pushes a boxed result tree. ... */// Store new DOM into a local variable//index = cpg.addMethodref(DOM_IMPL,//                   "getOutputDomBuilder",//                   "()" + TRANSLET_OUTPUT_SIG);//il.append(new INVOKEVIRTUAL(index));// Store DOM handler in a local in order to call endDocument()// Call endDocument on the DOM handler// Push the new DOM on the stack/** Expects a result tree on the stack and pushes a node-set (iterator). ... */// Put an extra copy of the result tree (DOM) on the stack// DOM adapters containing a result tree are not initialised with// translet-type to DOM-type mapping. This must be done now for// XPath expressions and patterns to work for the iterator we create.// get names array// get uris array// get types array// get namespaces array// Pass the type mappings to the DOM adapter// Create an iterator for the root node of the DOM adapter/** Subsume result tree into ObjectType. ... *//** Translates a result tree into a non-synthesized boolean. ... *//** Translates a result tree to a Java type denoted by <code>clazz</code>. ... *//** This class is used for result trees implemented as methods. These ... */// insert/** Translates a string into an object of internal type <code>type</code>. ... */// NOP -> same representation/** Translates a string into a synthesized boolean. ... *//** Translates a string into a real by calling stringToReal() from the ... *//** Translates a string into a non-synthesized boolean. It does not push a ... *//** Expects a string on the stack and pushes a boxed string. ... *//** Translates a internal string into an external (Java) string. ... */// Is String <: clazz? I.e. clazz in { String, Object }/** Translates an external (primitive) Java type into a string. ... */// same internal representation, convert null to ""/** Factory method to instantiate object types. Returns a pre-defined ... *//** Returns a string representation of this type. *//** Returns true if this and other are identical types. *//** Returns true if this type is a numeric type. Redefined in NumberType. *//** Returns true if this type has no object representaion. Redefined in ... *//** Returns true if this type is a simple type. Redefined in NumberType, ... *//** Returns the distance between two types. This measure is used to select ... *//** Returns the signature of an internal type's external representation. *//** Translates an object of this type to an object of type ... *//** Translates object of this type to an object of type <code>type</code>. ... *//** Translates an object of this type to an non-synthesized boolean. It ... *//** Translates an external (Java) type denoted by <code>clazz</code> to ... *//** Search for both slashes in order to support URLs and ... *//** Replace all illegal Java chars by '_'. *//** Replace a certain character in a string with a new substring. *//** Replace occurances of '.', '-', '/' and ':' *//** Checks if the string is a literal (i.e. not an AVT) or not. *//** Checks if the string is valid list of qnames *//** Translates a void into a string by pushing the empty string ''. ... *//** Translates an external (primitive) Java type into a void. ... *//** Absolute iterators ignore the node that is passed to setStartNode(). ... *//** Source for this iterator. */// System.out.println("AI source = " + source + " this = " + this);// resets source/** AdaptiveResultTreeImpl is a adaptive DOM model for result tree fragments (RTF). It is ... */// Document URI index, which increases by 1 at each getDocumentURI() call.// The SAXImpl object wrapped by this class, if the RTF is a tree./** The following fields are only used for the nested SAXImpl * */// The whitespace filter// The size of the RTF// True if we want to build the ID index table// The AttributeList// The element name// Create a AdaptiveResultTreeImpl// Return the DOM object wrapped in this object.// Return the document ID// Return the String value of the RTF// Return the expanded type id of a given node/** Dispatch the character content of a node to an output handler. ... *//** Return the node identity from a node handle. *//** Return the node handle from a node identity. *//** Implementation of the SerializationHandler interfaces * *//** The code in some of the following interfaces are copied from SAXAdapter. * */// Create and initialize the wrapped SAXImpl object// Flush pending Text nodes to SAXImpl// "prefix:localpart" or "localpart"/** Implementation of the DTM interfaces * *///See Errata E24//%HZ%:  Is this the best way of finding the root?  Is it better to check//%HZ%:  parent(next)?/* if (next == root) { ... */// This table is used to prevent expensive shift operations// (These operations are inexpensive on CPUs but very expensive on JVMs.)/** Constructor. Defines the initial size of the bit array (in bits). *//** Set the mask for this bit array. The upper 8 bits of this mask ... *//** See setMask() *//** Returns the size of this bit array (in bits). *//** Returns true if the given bit is set *//** Returns the next set bit from a given position *//** This method returns the Nth bit that is set in the bit array. The ... */// Return last node if position we're looking for is the same// Start from beginning of position we're looking for is before// the point where we left off the last time.// Scan through the bit array - skip integers that have no bits set// Any bits set?/** Returns the integer array in which the bit array is contained */// The index where first set bit is// The _INTEGER INDEX_ where last set bit is/** Sets a given bit *//** Merge two bit arrays. This currently only works for nodes from ... */// Take other array's bits if we have node set// Only merge if other array has any bits set// Merge these bits into other array if other array is larger// Merge other bits into this array if this arrai is large/equal./** Resizes the bit array - try to avoid using this method!!! *//** Read the whole tree from a file (serialized) *//** CachedNodeListIterator is used for select expressions in a ... *///_isRestartable = isRestartable;//_source.setRestartable(isRestartable);/** A ClonedNodeListIterator is returned by the cloneIterator() method ... *//** Iterators of this kind use a CurrentNodeListFilter to filter a subset of ... *//** A flag indicating if nodes are returned in document order. *//** The source for this iterator. *//** A reference to a filter object. *//** An integer array to store nodes from source iterator. *//** Index in _nodes of the next node to filter. *//** The current node in the stylesheet at the time of evaluation. *//** A reference to the translet. */// note increment// Mutually exclusive casting of DOM interface to known implementations// Cached mappings/** Returns singleton iterator containg the document root *//** Return a instance of a DOM class to be used as an RTF *//** Returns a SerializationHandler class wrapped in a SAX adapter. *//* $Id: DOMWSFilter.java,v 1.2.4.1 2005/09/06 06:14:31 pvedula Exp $ *//** A wrapper class that adapts the ... */// The Map for DTM to mapping array// Cache the DTM and mapping that are used last time/** Construct an adapter connecting the <code>DTMWSFilter</code> interface ... *//** Test whether whitespace-only text nodes are visible in the logical ... */// %OPT% The mapping array does not have information about all the// exptypes. However it does contain enough information about all names// in the translet's namesArray. If the expType does not fall into the// range of the mapping array, it means that the expType is not for one// of the recognized names. In this case we can just set the type to -1./* $Id: DocumentCache.java,v 1.2.4.1 2005/09/06 06:15:22 pvedula Exp $ *//* Inner class containing a DOMImpl object and DTD handler */// Statistics data// DOM and DTD handler references/** Constructor - load document and initialise statistics */// Initialise statistics variables/** Loads the document and updates build-time (latency) statistics */// The build time can be used for statistics for a better// priority algorithm (currently round robin).// ???/** DocumentCache constructor *//** Returns the time-stamp for a document's last update */// Check for a "file:" URI (courtesy of Brian Ewins)// get 0 for local URI// Brutal handling of all exceptions// Insert out URI in circular buffer// Remove oldest URI from reference map// Insert our URI in circular buffer/** Returns a document either by finding it in the cache or ... */// Try to get the document from the cache first// better error handling needed!!!// If the document is in the cache we must check if it is still valid// Has the modification time for this file been checked lately?// Reload document if it has been modified since last download// Get the references to the actual DOM and DTD handler// The dom reference may be null if the URL pointed to a// non-existing document// For statistics// Give the translet an early opportunity to extract any// information from the DOM object that it would like./** Outputs the cache statistics *//** Removes duplicates and sorts a source iterator. The nodes from the ... *//** Reference to source iterator. *//** Array to cache all nodes from source. *//** Index in _nodes array to current node. *//** Cardinality of _nodes array. *//** Last value returned by next(). *//** Temporary variable to store _lastNext. */// System.out.println("DFI source = " + source + " this = " + this);// Cache contents of id() or key() index right away. Necessary for// union expressions containing multiple calls to the same index, and// correct as well since start-node is irrelevant for id()/key() exrp./** Set the start node for this iterator ... */// KeyIndex iterators are always relative to the root node, so there// is never any point in re-reading the iterator (and we SHOULD NOT).// Nodes produced by KeyIndex are known to be in document order.// Take advantage of it.// Bugzilla 25924/** Similar to a CurrentNodeListIterator except that the filter has a ... *//** Reference to a filter object that to be applied to each node. *//** A flag indicating if position is reversed. */// System.out.println("FI souce = " + source + " this = " + this);/** Extends a StepIterator by adding the ability to filter nodes. It ... *//** This iterator is a wrapper that always returns the position of ... *//* $Id: KeyIndex.java,v 1.6 2006/06/19 19:49:02 spericas Exp $ *//** Stores mappings of key values or IDs to DTM nodes. ... *//** A mapping between values and nodesets for the current document.  Used ... *//** The document node currently being processed.  Used only while building ... *//** A mapping from a document node to the mapping between values and nodesets *//** The node set associated to the current value passed ... *//** The XSLTC DOM object if this KeyIndex is being used to implement the ... *//** Store position after call to setMark() *//** Adds a node to the node list for a given value. Nodes will ... */// Because nodes are added in document order,// duplicates can be eliminated easily at this stage./** Merge the current value's nodeset set by lookupKey() with _nodes. ... *//** This method must be called by the code generated by the id() function ... */// Clear _nodes array/** Return an IntegerArray for the DOM Node which has the given id. ... *//** <p>This method must be called by the code generated by the key() function ... *//** <p>Callers should not call next() after it returns END.</p> ... *//** Given a context node and the argument to the XPath <code>id</code> ... */// Get the mapping table for the document containing the context node// Split argument to id function into XML whitespace separated tokens// If input was from W3C DOM, use DOM's getElementById to do// the look-up.// Did we find the context node in the set of nodes?// Didn't find the context node in the set of nodes returned by id/** <p>Given a context node and the second argument to the XSLT ... */// Check whether the context node is present in the set of nodes// returned by the key function// The particular key name identifies no nodes in this document/** <p>Resets the iterator to the last start node.</p> ... *//** <p>Returns the number of elements in this iterator.</p> ... *//** <p>Returns the position of the current node in the set.</p> ... *//** <p>Remembers the current node for the next call to gotoMark().</p> ... *//** <p>Restores the current node remembered by setMark().</p> ... *//** <p>Set start to END should 'close' the iterator, ... *//** <p>Get start to END should 'close' the iterator, ... *//** <p>True if this iterator has a reversed axis.</p> ... *//** <p>Returns a deep copy of this iterator.</p> ... */// If a MultiDOM, ensure _enhancedDOM is correctly set// so that getElementById() works in lookupNodes below/** Create a {@link KeyIndexIterator} that iterates over the nodes that ... *//** Used to represent an empty node set. *//** An iterator representing the result of a reference to either the ... *//** <p>A reference to the <code>key</code> function that only has one ... *//** <p>This field contains the iterator representing a node set key value ... *//** <p>This field contains the iterator representing a non-node-set key ... *//** Indicates whether this object represents the result of a reference ... *//** Represents the DTM nodes retrieved for one key value or one string ... *//** {@link IntegerArray} of DTM nodes retrieved for one key value. ... *//** Position in {@link #_nodes} array of next node to return from ... *//** Marked position.  Used by {@link #setMark()} and ... *//** Create a heap node representing DTM nodes retrieved for one ... *//** Advance to the next node represented by this {@link HeapNode} ... *//** Creates a deep copy of this {@link HeapNode}.  The clone is not ... *//** Remembers the current node for the next call to ... *//** Restores the current node remembered by {@link #setMark()}. *//** Performs a comparison of the two heap nodes ... *//** <p>Sets context with respect to which this heap node is ... *//** Reset the heap node back to its beginning. *//** Constructor used when the argument to <code>key</code> or ... *//** Retrieve nodes for a particular key value or a particular id ... */// Get mapping from key values/IDs to DTM nodes for this document// For id function, tokenize argument as whitespace separated// list of values and look up nodes identified by each ID.// Does the ID map to any node in the document?// If we found any nodes, merge them into the cumulative// result// For key function, map key value to nodes/** Set context node for the iterator.  This will cause the iterator ... */// If the arugment to the function is a node set, set the// context node on it./** Get the next node in the iteration. ... */// If at most one key value or at most one string argument to id// resulted in nodes being returned, use the IntegerArray// stored at _nodes directly.  This relies on the fact that the// IntegerArray never includes duplicate nodes and is always stored// in document order./** Resets the iterator to the last start node. ... *//** Evaluate the reference to the <code>key</code> or <code>id</code> ... */// All nodes retrieved are in the same document// Is the argument not a node set?// Look up nodes returned for the single string argument// For each node in the node set argument, get the string value// and look up the nodes returned by key or id for that string// value.  If at most one string value has nodes associated,// the nodes will be stored in _nodes; otherwise, the nodes// will be placed in a heap./** Returns the number of nodes in this iterator. ... */// If nodes are stored in _nodes, take advantage of the fact that// there are no duplicates.  Otherwise, fall back to the base heap// implementaiton and hope it does a good job with this./** Return the node at the given position. ... */// there are no duplicates and they are stored in document order.// Otherwise, fall back to the base heap implementation to do a// good job with this./** Interprets the arguments passed from the document() function (see ... *///  the second argument node-set is empty//System.err.println("arg2FirstNode name: "//                   + dom.getNodeName(arg2FirstNode )+"["//                   +Integer.toHexString(arg2FirstNode )+"]");// %OPT% Optimization to cache the stylesheet DOM.// The stylesheet DOM is built once and cached// in the Templates object.// If the cached dom exists, we need to migrate it// to the new DTMManager and create a DTMAxisIterator// for the document.// Prepend URI base to URI (from context)// Return an empty iterator if the URI is clearly invalid// (to prevent some unncessary MalformedURL exceptions).// Check if this DOM has already been added to the multiplexer// Check if we can get the DOM from a DOMCache// Parse the input document and construct DOM object// Trust the DTMManager to pick the right parser and// set up the DOM correctly.// Cache the stylesheet DOM in the Templates object// Wrap the DOM object in a DOM adapter and add to multiplexer// Create index for any key elements// Return a singleton iterator containing the root node//document(node-set) if true;  document(node-set,node-set) if false/** Create a DTMAxisIterator for the newdom. This is currently only ... */// Need to migrate the cached DTM to the new DTMManager/** This is a special kind of iterator that takes a source iterator and a ... *//** A reference to a source iterator. *//** The node to match. */// iterator is not a clone// Calculate the position of the node in the set// constitutive data// implementation mechanism// Get a new source first time and when mask changes// end of AxisIterator/** ************************************************************ ... */// %HZ% %REVISIT% Is this the right thing to do here?  In the old// %HZ% %REVISIT% version, the main document did not get added through// %HZ% %REVISIT% a call to addDOMAdapter, which meant it couldn't be// %HZ% %REVISIT% found by a call to getDocumentMask.  The problem is// %HZ% %REVISIT% TransformerHandler is typically constructed with a// %HZ% %REVISIT% system ID equal to the stylesheet's URI; with SAX// %HZ% %REVISIT% input, it ends up giving that URI to the document.// %HZ% %REVISIT% Then, any references to document('') are resolved// %HZ% %REVISIT% using the stylesheet's URI.// %HZ% %REVISIT% MultiDOM.getDocumentMask is called to verify that// %HZ% %REVISIT% a document associated with that URI has not been// %HZ% %REVISIT% encountered, and that method ends up returning the// %HZ% %REVISIT% mask of the main document, when what we really what// %HZ% %REVISIT% is to read the stylesheet itself!// This method only has a function in DOM adapters// Add the DOM adapter to the array of DOMs// Store reference to document (URI) in the Map// If the dom is an AdaptiveResultTreeImpl, we need to create a// DOMAdapter around its nested dom object (if it is non-null) and// add the DOMAdapter to the list./** Returns singleton iterator containing the document root */// main source document @ 0// TODO: gather nodes from all DOMs ?/** Returns a DOMBuilder class wrapped in a SAX adapter. */// %HZ% Does this method make any sense here???/* Method addDOMAdapter overwrites for AdaptiveResultTreeImpl ... *//* $Id: UnionIterator.java 337874 2004-02-16 23:06:53Z minchau $ *//** <p><code>MultiValuedNodeHeapIterator</code> takes a set of multi-valued ... *//** wrapper for NodeIterators to support iterator ... *//** An abstract representation of a set of nodes that will be retrieved in ... *//** Remembers the current node for the next call to {@link #gotoMark()}. *//** Sets context with respect to which this heap node is evaluated. ... *//** Reset the heap node back to its beginning. ... */// end of HeapNode// Last node returned by this MultiValuedNodeHeapIterator to the caller of// next; used to prune duplicates// cached returned last for use in gotoMark// cached heap size for use in gotoMark// iterator _heap[0] is done// Swap first and last (iterator must be restartable)// duplicate// value consumed// fallthrough if not returned above// to get the first node// build heap/* Build a heap in document order. put the smallest node on the top. ... */// rebuild heap after call last() function. fix for bug 20913// Gather all ancestors that do not match from pattern// include self// Create an array of counters// Increment array of counters according to semantics// Count the node itself/** Indicates if this instance of xsl:number has a from pattern. *//** Set the start node for this counter. The same <tt>NodeCounter</tt> ... *//** If the user specified a value attribute, use this instead of ... *//** Sets formatting fields before calling formatNumbers(). *//** Effectively does the same thing as Integer.parseInt(String s) except ... */// Accumulating negatively avoids surprises near MAX_VALUE/* Only got "-" */// format == null assumed here// has already been set/* Tokenize the format string into alphanumeric and non-alphanumeric ... *//** Sets formatting fields to their default values. *//** Returns the position of <tt>node</tt> according to the level and ... *//** Returns true if <tt>node</tt> matches the count pattern. By ... *//** Returns true if <tt>node</tt> matches the from pattern. By default, ... *//** Format a single value according to the format parameters. *//** Format a sequence of values according to the format paramaters ... */// Format the output string using the values array and the fmt. tokens// Append separation token before first digit/letter/numeral// Append next digit/letter/numeral and separation token// Append separation token after last digit/letter/numeral/** Format a single value based on the appropriate formatting token. ... */// Special case for Greek alphabet// omega// General case: search for end of group/** Cached computed value of last(). *//** Value of position() in this iterator. Incremented in ... *//** Store node in call to setMark(). *//** Store node in call to setStartNode(). *//** Flag indicating if "self" should be returned. *//** Flag indicating if iterator can be restarted. *//** Setter for _isRestartable flag. *//** Initialize iterator using a node. If iterator is not ... *//** Reset this iterator using state from last call to ... */// Must adjust _startNode if self is included/** Setter for _includeSelf flag. *//** Default implementation of getLast(). Stores current position ... *//** Returns the position() in this iterator. *//** Indicates if position in this iterator is computed in reverse ... *//** Clones and resets this iterator. Note that the cloned iterator is ... *//** Utility method that increments position and returns its ... *//** Reset the position in this iterator. *//** Base class for sort records containing application specific sort keys *//** A reference to a collator. May be updated by subclass if the stylesheet ... *//** A reference to the first Collator ... *//** A locale field that might be set by an instance of a subclass. ... */// The position in the current iterator// Number of nodes in the current iterator// Number of key levels extracted from DOM// Contains Comparable  objects/** This constructor is run by a call to ClassLoader in the ... *//** This method allows the caller to set the values that could not be passed ... */// -- W. Eliot Kimber (eliot@isogen.com)// If we can't read the propery, just use default collator/** Returns the node for this sort object *//** Get the string or numeric value of a specific level key for this sort ... */// Get value from our array if possible// Get value from DOM if accessed for the first time// Get value from our vector if possible// Treat number as NaN if it cannot be parsed as a double/** Compare this sort element to another. The first level is checked first, ... */// Compare the two nodes either as numeric or text values// Return inverse compare value if inverse sort order// Compare based on document order if all sort keys are equal/** Returns the array of Collators used for text comparisons in this object. ... *//** Extract the sort value for a level of this key. *//** Creates a NodeSortRecord producing object. The DOM specifies which tree ... */// This should return a Class definition if using TrAX// This code is only run when the native API is used// Old NodeSortRecordFactory constructor had no lang or case_order// arguments.  Provide default values in that case for binary// compatibility.// Set up array of zero-length strings as default values// of lang and case_order/** Create an instance of a sub-class of NodeSortRecord. The name of this ... *///NodeSortRecord subclasses are generated with a public empty constructor// refer to com.sun.org.apache.xalan.internal.xsltc.compiler.Sort::compileInit// ...[N]/* if (_ready && _position > 0) { ... *//** SAXImpl is the core model for SAX input source. SAXImpl objects are ... *//* ------------------------------------------------------------------- *//* DOMBuilder fields BEGIN */// Namespace prefix-to-uri mapping stuff// private int       _prefixCount  = 0;// Stack used to keep track of what whitespace text nodes are protected// by xml:space="preserve" attributes and which nodes that are not.// private static final String XML_STRING = "xml:";// private static final String XMLNS_PREFIX = "xmlns";/* DOMBuilder fields END */// empty String for null attribute values// empty iterator to be returned when there are no children// The number of expanded names// Namespace related stuff// The initial size of the text buffer// Tracks which textnodes are not escaped// The URI to this document// private String _documentURI = null;// The owner Document when the input source is DOMSource.// The Map for org.w3c.dom.Node to node id mapping.// This is only used when the input is a DOMSource and the// buildIdIndex flag is true.// True if the input source is a DOMSource.// The DTMManager// Support for access/navigation through org.w3c.dom API// private final static String XML_LANG_ATTRIBUTE = "http://www.w3.org/XML/1998/namespace:@lang";/** Define the origin of the document from which the tree was built *//** Returns the origin of the document from which the tree was built *//** Lookup a namespace URI from a prefix starting at node. This method ... *//** Returns 'true' if a specific node is an element (of any type) *//** Returns 'true' if a specific node is an attribute (of any type) *//** Returns the number of nodes in the tree (used for indexing) *//** Part of the DOM interface - no function here. *//** Returns true if node1 comes before node2 in document order *//** Create an org.w3c.dom.Node from a node in the tree *//** Create an org.w3c.dom.Node from a node in an iterator ... *//** Create an org.w3c.dom.NodeList from a node in the tree *//** Create an org.w3c.dom.NodeList from a node iterator ... *//** Iterator that returns the namespace nodes as defined by the XPath data ... *//** Constructor TypedChildrenIterator ... */// end of TypedNamespaceIterator// end NodeValueIterator/** Encapsulates an iterator in an OrderedIterator to ensure node order *//** Returns singleton iterator containg the document root ... *//** Get mapping from DOM namespace types to external namespace types *//** Returns the namespace type of a specific node *//** Sets up a translet-to-dom type mapping table *//* private int[] setupMapping(String[] names, String[] uris, int[] types, int nNames) { ... *//** Returns the internal type associated with an expanded QName */// Is there a prefix?// Local part of name is after colon.  lastIndexOf returns -1 if// there is no colon, so lNameStartIdx will be zero in that case.// Distinguish attribute and element names.  Attribute has @ before// local part of name.// Extract local name/** Get mapping from DOM element/attribute types to external types */// Delegate the work to getMapping2 if the document is not fully built.// Some of the processing has to be different in this case.// primitive types map to themselves// actual mapping of caller requested names/** Get mapping from external element/attribute types to DOM types */// caller's types map into appropriate dom types/** Get mapping from DOM element/attribute types to external types. ... */// When the document is not fully built, the searchOnly// flag should be set to false. That means we should add// the type if it is not already in the expanded name table.//generalizedTypes[i] = getGeneralizedType(names[i], false);// Initialize all entries to -1/** Get mapping from external namespace types to DOM namespace types *//** Construct a SAXImpl object using the default block size. *//** Construct a SAXImpl object using the given block size. */// Use a smaller size for the space stack if the blocksize is small/* From DOMBuilder */// If the input source is DOMSource, set the _document field and// create the node2Ids table./** Migrate a DTM built with an old DTMManager to a new DTMManager. ... *//** Return the node identity for a given id String ... *//** Return true if the input source is DOMSource. *//* --------------------------------------------------------------------------- *//* DOMBuilder methods begin *//** Call this when an xml:space attribute is encountered to ... *//** Call this from endElement() to revert strip/preserve setting ... *//** Find out whether or not to strip whitespace nodes. ... *//** Creates a text-node and checks if it is a whitespace node. */// Resize the _dontEscape BitArray if necessary./** ************************************************************* *//* SAX Interface Starts Here *//** Specialized interface used by DOM2SAX. This one has an extra Node ... *//** SAX2: Receive notification of the beginning of an element. */// Look for any xml:space attributes// Depending on the implementation of attributes, this// might be faster than looping through all attributes. ILENE// Revert to strip/preserve-space setting from before this element/** SAX2: Receive notification of a processing instruction. *//** SAX2: Receive notification of ignorable whitespace in element ... *//** SAX2: Begin the scope of a prefix-URI Namespace mapping. */// Check if the URI already exists before pushing on stack/** SAX2: Report an XML comment anywhere in the document. *//* DOMBuilder methods end *//** Prints the whole tree to standard output *//** Returns the name of a node (attribute or element). */// Get the node type and make sure that it is within limits/** Returns the namespace URI to which a node belongs *//** Returns the attribute node of a given type (if any) for an element *//** Returns the value of a given attribute type of a given element *//** This method is for testing/debugging only *//** Returns an iterator with all the children of a given node *//** Returns an iterator with all children of a specific type ... *//** This is a shortcut to the iterators that implement the ... *//** Similar to getAxisIterator, but this one returns an iterator ... */// Most common case handled first/** Do not think that this returns an iterator for the namespace axis. ... *//** Iterator that handles node tests that test for a namespace, but have ... *//** The namespace type index. *//** A nested typed axis iterator that retrieves nodes of the principal ... *//** Constructor NamespaceWildcard ... */// Create a nested iterator that will select nodes of// the principal node kind for the selected axis.// For "attribute::p:*", the principal node kind is// attribute// This covers "namespace::p:*".  It is syntactically// correct, though it doesn't make much sense.// In all other cases, the principal node kind is// element// Return only nodes that are in the selected namespace/** Returns a deep copy of this iterator.  The cloned iterator is not ... *//** True if this iterator has a reversed axis. ... *//** Iterator that returns children within a given namespace for a ... *//** The extended type ID being requested. *//** Constructor NamespaceChildrenIterator ... *///%HZ%: Added reference to DTMDefaultBase.ROOTNODE back in, temporarily// end of NamespaceChildrenIterator/** Iterator that returns attributes within a given namespace for a node. *//** Constructor NamespaceAttributeIterator ... */// end of NamespaceAttributeIterator/** Returns an iterator with all descendants of a node that are of ... *//** Returns the nth descendant of a node *//** Copy the string value of a node directly to an output handler *//** Copy a node-set to an output handler *//** Copy the whole tree to an output handler *//** Performs a deep copy (ref. XSLs copy-of()) ... */// Start element definition//if(isChild) => not to copy any namespaces  from parents// else copy all namespaces in scope// Copy element children// Close element definition// Shallow copy of attribute to output handler/** Copies a processing instruction node to an output handler *//** Performs a shallow copy (ref. XSLs copy()) *//** Returns a node' defined language for a node (if any) *//** Returns an instance of the DOMBuilder inner class ... *//** Return a SerializationHandler for output handling. ... *//** Return a instance of a DOM class to be used as an RTF ... *//** Return the attributes map. ... *//** The getUnparsedEntityURI function returns the URI of the unparsed ... */// Special handling for DOM input/* $Id: SimpleResultTreeImpl.java,v 1.2.4.1 2005/09/06 10:09:25 pvedula Exp $ *//** This class represents a light-weight DOM model for simple result tree fragment(RTF). ... *//** The SimpleIterator is designed to support the nodeset() extension function. It has ... */// The direction of traversal (default to DOWN).// DOWN is for child and descendant. UP is for parent and ancestor.// Increase the node ID for down traversal. Also match the node type// if the type is given.// Decrease the node ID for up traversal.// Increase the node ID by 1 if self is not included.// END of SimpleIterator/** The SingletonIterator is used for the self axis. */// END of SingletonIterator// The root node id of the simple RTF// The Text node id of the simple RTF (simple RTF has only one Text node).// The number of nodes.// Constant for empty String// The String value of the Text node.// This is set at the endDocument() call.// The array of Text items, which is built by the characters() call.// The characters() interface can be called multiple times. Each character item// can have different escape settings.// Number of character items// The document ID// A BitArray, each bit holding the escape setting for a character item.// The current escape setting// Create a SimpleResultTreeImpl from a DTMManager and a document ID.// Return the axis iterator for a given axis.// The SimpleIterator is used for the child, descendant, parent and ancestor axes.// %REVISIT% Can this one ever get used?// %REVISIT% Can the makeNode() and makeNodeList() interfaces ever get used?/** We only need to override the endDocument, characters, and ... */// Set the String value when the document is built.// Resize the text array if necessary// If the escape setting is false, set the corresponding bit in// the _dontEscape BitArray.// The _dontEscape array is only created when needed.// Resize the _dontEscape array if necessary/** The DTM interfaces are not used in this class. Implementing the DTM ... */// found target// no target found// Target found, but need to check if ancestor matches from// found from// Have we found ancestor matching from?// If no target found then pass the empty list/** Override the value of <tt>_node</tt> only when this ... *//** Class for carrying settings that are to be used for a particular set ... *//** A reference to the translet object for the transformation. *//** The sort order (ascending or descending) for each level of ... *//** The type of comparison (text or number) for each level of ... *//** The Locale for each level of <code>xsl:sort</code>, based on any lang ... *//** The Collator object in effect for each level of <code>xsl:sort</code> *//** Case ordering for each level of <code>xsl:sort</code>. *//** Create an instance of <code>SortSettings</code>. ... */// index in _nodes of the next node to try// gather all nodes from the source iterator// now sort the records/** Clone a <code>SortingIterator</code> by cloning its source ... */// shared between clones/** A step iterator is used to evaluate expressions like "BOOK/TITLE". ... *//** A reference to the "outer" iterator. *//** A reference to the "inner" iterator. *//** Temp variable to store a marked position. */// System.out.println("SI source = " + source + " this = " + this);// System.out.println("SI iterator = " + iterator + " this = " + this);// must be restartable// Set start node for left-hand iterator...// ... and get start node for right-hand iterator from left-hand,// with special case for //* path - see ParentLocationPath// Special case for //* path - see ParentLocationPath// Try to get another node from the right-hand iterator// If not, get the next starting point from left-hand iterator...// ...and pass it on to the right-hand iterator//_pos = _position;//_position = _pos;/** UnionIterator takes a set of NodeIterators and produces ... */// end of LookAheadIterator/** The default implementation for the DTMManager. *//** Set this to true if you want a dump of the DTM after creation *//** Set this to true if you want basic diagnostics *//** Constructor DTMManagerDefault *//** Obtain a new instance of a <code>DTMManager</code>. ... *//** Creates a new instance of the XSLTC DTM Manager service. ... *//** Get an instance of a DTM, loaded with the content from the ... */// Make sure the user didn't lie// %REVIEW% Is there a better way to send a warning?// Create the basic SAX2DTM.// Go ahead and add the DTM to the lookup table.  This needs to be// done before any parsing occurs. Note offset 0, since we've just// created a new DTM.// Then the user will construct it themselves.// It should have been handled by a derived class or the caller// made a mistake./* /* ... */// appear as fields (with the same type, only public) in Output.java//see OutputPropertiesFactory.ORACLE_IS_STANDALONE// Initialize Translet version field to base value.  A class that extends// AbstractTranslet may override this value to a more recent translet// version; if it doesn't override the value (because it was compiled// before the notion of a translet version was introduced, it will get// this default value).// DOM/translet handshaking - the arrays are set by the compiled translet// The Templates object that is used to create this Translet instance// Boolean flag to indicate whether this translet has id functions.// TODO - these should only be instanciated when needed// Use one empty string instead of constantly instanciating String("");// This is the name of the index used for ID attributes/** protocols allowed for external references set by the stylesheet processing instruction, Document() function, Import and Include element. *//** ********************************************************************** ... *//** Wrap the initial input DOM in a dom adapter. This adapter is wrapped in ... */// Parameter's stack: <tt>pbase</tt> and <tt>pframe</tt> are used// to denote the current parameter frame./** Push a new parameter frame. *//** Pop the topmost parameter frame. *//** Add a new global parameter if not already in the current frame. ... *//** Add a new global or local parameter if not already in the current frame. ... */// Local parameters need to be re-evaluated for each iteration// Only overwrite if current value is the default value and// the new value is _NOT_ the default value.// Add new parameter to parameter stack/** Clears the parameter stack. *//** Get the value of a parameter from the current frame or ... */// Holds the translet's message handler - used for <xsl:message>.// The deault message handler dumps a string stdout, but anything can be// used, such as a dialog box for applets, etc./** Set the translet's message handler - must implement MessageHandler *//** Pass a message to the message handler - used by Message class. */// Contains decimal number formatting symbols used by FormatNumberCall/** Adds a DecimalFormat object to the _formatSymbols map. ... */// Instanciate map for formatting symbols if needed// The name cannot be null - use empty string instead// Construct a DecimalFormat object containing the symbols we got/** Retrieves a named DecimalFormat object from the _formatSymbols map. *//** Give the translet an opportunity to perform a prepass on the document ... *//** Leverages the Key Class to implement the XSLT id() function. ... */// If the input source is DOMSource, the KeyIndex table is not// built at this time. It will be built later by the lookupId()// and containsId() methods of the KeyIndex class.// Given a Map of DTM nodes indexed by ID attribute values,// loop through the table copying information to a KeyIndex// for the mapping from ID attribute value to DTM node/** After constructing the translet object, this method must be called to ... */// If the version of the translet had just one namesArray, split// it into multiple fields.// Distinguish attribute and element names.  Attribute has// @ before local part of name.// Was translet compiled using a more recent version of the XSLTC// compiler than is known by the AbstractTranslet class?  If, so// and we've made it this far (which is doubtful), we should give up.// Container for all indexes for xsl:key elements/** This method is used to pass the largest DOM size to the translet. ... *//** Creates a KeyIndex object of the desired size - don't want to resize!!! *//** Adds a value to a key/id index ... *//** Create an empty KeyIndex in the DOM case ... *//** Return KeyIndex for the buildKeyIndex methods. Note the difference from the ... *//** Returns the index for a given key (or id). ... */// Return an empty key index iterator if none are defined// Look up the requested key index// Return an empty key index iterator if the requested index not found/** This method builds key indexes - it is overridden in the compiled ... */// Hold the DOM cache (if any) used with this translet/** Sets the DOM cache used for additional documents loaded using the ... *//** Returns the DOM cache used for this translet. Used by the LoadDocument ... */// what can you do?/** Main transform() method - this is overridden by the compiled translet *//** Calls transform() with a given output handler *//** Used by some compiled code as a shortcut for passing strings to the ... *///final int length = string.length();/** Add's a name of an element whose text contents should be output as CDATA *//** Transfer the output settings to the output post-processor */// GTM added (see pg 110)/** Return the state of the services mechanism feature. *//** Set the state of the services mechanism feature. *//* $Id: BasisLibrary.java,v 1.6 2006/06/20 21:51:58 spericas Exp $ *//** Standard XSLT functions. All standard functions expect the current node ... *//** Re-use a single instance of StringBuffer (per thread) in the basis library. ... *//** ThreadLocal for StringBuffer used *//** Standard function count(node-set) *//** Standard function position() ... *//** XSLT Standard function sum(node-set). ... *//** XSLT Standard function string() *//** XSLT Standard function string(value) */// When the first argument is a DOM we want the whole// DOM and not just a single node - that would not make sense.//return ((DOM)obj).getStringValueX(node);/** XSLT Standard function number() *//** XSLT Standard function number(value) *//** XSLT Standard function round() *//** XSLT Standard function boolean() *//** XSLT Standard function substring(). Must take a double because of ... *//** XSLT Standard function substring-after(). *//** XSLT Standard function substring-before(). *//** XSLT Standard function translate(). *//** XSLT Standard function normalize-space(). *//** XSLT Standard function normalize-space(string). *//** XSLT Standard function generate-id(). */// Only generate ID if node exists// Otherwise return an empty string/** utility function for calls to local-name(). *//** External functions that cannot be resolved are replaced with a call ... *//** Utility function to throw a runtime error on the use of an extension ... *//** Utility function to throw a runtime error for an unsupported element. ... *//** XSLT Standard function namespace-uri(node-set). *//** XSLT Standard function system-property(name) *//** XSLT Standard function namespace-uri(). *//** Implements the object-type() extension function. ... *//** Implements the nodeset() extension function. *///final DOMAdapter adapter = (DOMAdapter) obj;//-- Begin utility functions/** Utility function: node-set/node-set compare. */// String value must be the same if both nodes are the same//iterator.reset();// Assume we're comparing document order here/** Utility function: node-set/number compare. *///left.reset();/** Utility function: node-set/string comparison. */// If node-boolean comparison -> convert node to boolean// compare them as strings// swap operands and operator/** Utility function: used to test context node's language */// language for context node (if any)// compare context node's language agains test language/** Utility function: used in StringType to convert a string to a real. *//** Utility function: used in StringType to convert a string to an int. */// Set max fraction digits so that truncation does not occur. Setting// the max to Integer.MAX_VALUE may cause problems with some JDK's.// This formatter is used to convert numbers according to the XPath// 1.0 syntax which ignores locales (http://www.w3.org/TR/xpath#NT-Number)/** Utility function: used in RealType to convert a real to a string. ... */// Remove leading zeros.//Convert -0.0 to +0.0 other values remains the same// Use the XPath formatter to ignore locales/** Utility function: used in RealType to convert a real to an integer *//** Utility function: used to format/adjust  a double to a string. The ... */// bugzilla fix 12813/** Utility function: used to convert references to node-sets. If the ... */// Convert var/param -> node// Convert var/param -> node-set/** Utility function: used to convert reference to org.w3c.dom.NodeList. *//** Utility function: used to convert reference to org.w3c.dom.Node. *//** Utility function: used to convert reference to long. */// handles Integer and Double/** Utility function: used to convert reference to double. *//** Utility function: used to convert reference to boolean. *//** Utility function: used to convert reference to String. *//** Utility function used to convert a w3c Node into an internal DOM iterator. */// Create a dummy NodeList which only contains the given node to make// use of the nodeList2Iterator() interface./** In a perfect world, this would be the implementation for ... *//** Utility function used to convert a w3c NodeList into a internal ... */// First pass: build w3c DOM for all nodes not proxied from our DOM.// Notice: this looses some (esp. parent) context for these nodes,// so some way to wrap the original nodes inside a DTMAxisIterator// might be preferable in the long run.// allow for change in list length, just in case.// invalid node handle, so definitely not our doc// Use one dummy element as container for each node of the// list. That way, it is easier to detect resp. avoid// funny things which change the number of nodes,// e.g. auto-concatenation of text nodes.// The mid element also serves as a container for// attributes, avoiding problems with conflicting// attributes or node order.// Better play it safe for all types we aren't sure we know// how to deal with.// w3cDOM -> DTM -> DOMImpl// Create DOMAdapter and register with MultiDOM// Second pass: find DTM handles for every node in the list.// Should not happen, as first run should have got all these// For now, play it self and perform extra checks:/** Utility function used to convert references to DOMs. *//** Utility function: used with nth position filters to convert a sequence ... *//** Utility function: used in xsl:copy. *///((DOM)obj).copy(((com.sun.org.apache.xml.internal.dtm.ref.DTMDefaultBase)((DOMAdapter)obj).getDOMImpl()).getDocument(), handler);// or call stringF()/** Utility function to check if xsl:attribute has a valid qname ... */// even though the orignal prefix is ignored, it should still get checked for valid NCName// prefix must be a valid NCName// local name must be a valid NCName and must not be XMLNS/** Utility function to check if a name is a valid ncname ... *//** Utility function to check if a name is a valid qname ... *//** Utility function for the implementation of xsl:element. */// Get prefix from qname// Handle case when prefix is not known at compile time// not sure if this line of code ever works// need to flush or else can't get namespacemappings// Need to generate a prefix?/** This function is used in the execution of xsl:element *//** These functions are used in the execution of xsl:element to generate ... *//** Print a run-time error message. *//** Utility method to allow setting parameters of the form ... *//** Utility method to calculate string-length as a number of code points, ... *///-- End utility functions/** This class defines constants used by both the compiler and the ... *//* XSLTC run-time error messages. ... *//* Note to translators:  the substitution text in the following message ... *//* Note to translators:  <xsl:copy> is a keyword that should not be ... *//* Note to translators:  This message is displayed if the function named ... *//* Note to translators:  This message is displayed if two values are ... *//* Note to translators:  The substitution text for {0} will be a data ... *//* Note to translators:  There is way of specifying a format for a ... *//* Note to translators:  The following represents an internal error ... *//* Note to translators:  As with the preceding message, a namespace ... *//* Note to translators:  The following represents an internal error. ... *//* Note to translators:  The following message indicates that the XML ... *//* Note to translators:  The substitution text is the URI that was in ... *//* Note to translators:  This error message is produced if the translet ... *//* Note to translators:  An attribute whose effective value is required ... *//** Class to express failed assertions and similar for the xsltc runtime. ... *//** This class is used as "wrapper" for dom nodes. Wrappers are needed when ... *///  Swap operator array// EQ// NE// GT// LT// GE// LE// Override the setEscaping method just to indicate that this class is// aware that that method might be called./** The value of a PI must not contain the substring "?>". Should ... */// again falls through - Padmaja Vedula// default case// Set a larger buffer size for Solaris/** Initializes a WriterOutputBuffer by creating an instance of a ... *//* $Id: DOM2SAX.java,v 1.2.4.1 2005/09/06 11:52:46 pvedula Exp $ *//** Begin the scope of namespace prefix. Forward the event to the ... *//* End the scope of a name prefix by popping it from the stack and ... *//** If the DOM was created using a DOM 1.0 API, the local name may be ... *//** Traverse the DOM and generate SAX events for a handler. A ... */// handled by ELEMENT_NODE// These node types are ignored!!!// in the case where there is no lex handler, we still// want the text of the cdate to make its way through.// should be handled!!!// Process all namespace declarations// Ignore everything but NS declarations here// Process all other attributes// Ignore NS declarations here// Uri may be implicitly declared// If no prefix for this attr, we need to create// one because we cannot use the default ns// Add attribute to list// Now process the element itself// Generate SAX event to start element// Traverse all child nodes of the element (if any)// Generate SAX event to close element// Generate endPrefixMapping() for all pushed prefixes/** This class is only used internally so this method should never ... */// Debugging/** A reference to the DOM to be traversed. *//** A reference to the output handler receiving the events. */// Empty/** Traverse the DOM and generate TO events for a handler. Notice that ... */// Process all namespace attributes first// Is this a namespace declaration?// Process all non-namespace attributes next// Is this a regular attribute?// Fix for bug 26319// For attributes not given an prefix explictly// but having a namespace uri we need// to explicitly generate the prefix// Now element namespace and children// If an element foo is created using// createElementNS(null,locName)// then the  element should be serialized// <foo xmlns=" "/>//Replace StringBuffer with StringBuilder now that we no long support jdk1.4/** JAXP document builder factory. Create a single instance and use ... */// Ignore text nodes of length 0// No text nodes can be children of root (DOM006 exception)//try to set document version// Add namespace declarations first// Add attributes to element/* final int nattrs = attrs.getLength(); ... */// checking if Namespace processing is being done// Append this new node onto current stack node// If the SAX2DOM is created with a non-null next sibling node,// insert the result nodes before the next sibling under the root.// Push this node onto stack/** adds processing instruction node to DOM. *//** Lexical Handler method to create comment node in DOM tree. */// Lexical Handler methods- not implemented//default implementation is thread safe/** Used to report a {@link SAXException}to the {@link XMLReporter} ... *//** Parses an XML qualified name, and places the resulting prefix and local ... *//** {@Link Location}implementation used to expose details from a SAX ... */// Encoding and version info will be available only after startElement// is called for first time. So, defer START_DOCUMENT event of StAX till// that point of time.// clear the namespaces// set document location// create attribute and namespace events// parse name// get namespaces// Drat. We were trying to postpone this until the first element so that we could get// the locator, but we can't output a comment before the start document, so we're just// going to have to do without the locator if it hasn't been set yet.// the locator, but we can't output a PI before the start document, so we're just// create namespaces// create attributes// namespace declaration disguised as an attribute. If the// namespace has already been declared, skip it, otherwise// write it as an namespace//Do not call writeStartElement with prefix and namespaceURI, as it writes out//namespace declaration.//writer.writeStartElement(qname[0], qname[1], uri);// No need to write namespaces, as they are written as part of attributes./* if (namespaces != null) { ... */// write attributes// namespace declaration disguised as an attribute./* $Id: SmartTransformerFactoryImpl.java,v 1.2.4.1 2005/09/14 09:57:13 pvedula Exp $ *//** Implementation of a transformer factory that uses an XSLTC ... *//** <p>Name of class as a constant to use for debugging.</p> *//** <p>State of secure processing feature.</p> *//** implementation of the SmartTransformerFactory. This factory ... */// try to create instance of Xalan factory...// GTM: NB: 'debug' should change to something more unique.../** <p>Set a feature for this <code>SmartTransformerFactory</code> and <code>Transformer</code>s ... */// feature name cannot be null// secure processing?// all done processing feature// unknown feature/** javax.xml.transform.sax.TransformerFactory implementation. ... */// All supported features should be listed here// Inefficient, but it really does not matter in a function like this/** Create a Transformer object that copies the input document to the ... *//** Create a Transformer object that from the input stylesheet ... *//** Create a Templates object that from the input stylesheet ... *//** Get a TemplatesHandler object that can process SAX ContentHandler ... *//** Get a TransformerHandler object that can process SAX ContentHandler ... *//** Create an XMLFilter that uses the given source as the ... *//* Create an XMLFilter that uses the given source as the ... *///private final static String EMPTYSTRING = "";//private static final String XMLNS_PREFIX = "xmlns";// StAX event source//private Node _dom = null;//Main Work Starts Here./* public void parse() throws IOException, SAXException { ... *//* @see StAXReaderToContentHandler#bridge() */// remembers the nest level of elements to know when we are done.// that gets the one we peeked at// that really gets the next one// Handle the prolog: http://www.w3.org/TR/REC-xml/#NT-prolog// Process the (document) element// These are all of the events listed in the javadoc for// XMLEvent.// The spec only really describes 11 of them.// Handle the Misc (http://www.w3.org/TR/REC-xml/#NT-Misc) that can follow the document element//construct prefix:localName from qName// fire endElement// end namespace bindings// true for default namespace// start namespace bindings// fire startElement/** Get the attributes associated with the given START_ELEMENT StAXevent. ... */// in SAX, namespace declarations are not part of attributes by default.// (there's a property to control that, but as far as we are concerned// we don't use it.) So don't add xmlns:* to attributes.// gather non-namespace attrs// no-op ???// namespace events don't normally occur outside of a startElement// or endElement// attribute events don't normally occur outside of a startElement// it seems like we need to pass this info along, but how?// this event is listed in the javadoc, but not in the spec./* Copyright (c) 2005, 2015, Oracle and/or its affiliates. All rights reserved. ... */// StAX Stream source// skip over START_DOCUMENT// If not a START_ELEMENT (e.g., a DTD), skip to next tag// An error if a START_ELEMENT isn't found now// workaround for bugid 5046319 - switch over to commented section// below when it is fixed.//        int start = 0;//        int len;//        do {//            len = staxStreamReader.getTextCharacters(start, buf, 0, buf.length);//            start += len;//            try {//                _sax.characters(buf, 0, len);//            } catch (SAXException e) {//                throw new XMLStreamException(e);//        } while (len == buf.length);/** Get the attributes associated with the given START_ELEMENT or ATTRIBUTE ... *//* Copyright (c) 2007, 2017, Oracle and/or its affiliates. All rights reserved. *//** Implementation of a JAXP1.1 TemplatesHandler ... *//** System ID for this stylesheet. *//** Number of spaces to add for output indentation. *//** This URIResolver is passed to all Transformers. *//** A reference to the transformer factory that this templates ... *//** A reference to XSLTC's parser object. *//** The created Templates object. *//** Default constructor */// Instantiate XSLTC and get reference to parser object/** Implements javax.xml.transform.sax.TemplatesHandler.getSystemId() ... *//** Implements javax.xml.transform.sax.TemplatesHandler.setSystemId() ... *//** Store URIResolver needed for Transformers. *//** Implements javax.xml.transform.sax.TemplatesHandler.getTemplates() ... *//** This method implements XSLTC's SourceLoader interface. It is used to ... */// A _uriResolver must be set if this method is called// Falls through// -- ContentHandler --------------------------------------------------/** Re-initialize parser and forward SAX2 event. */// calls _parser.init()/** Just forward SAX2 event to parser object. */// create the templates// Get java-legal class name from XSLTC module// Set a document loader (for xsl:include/import) if defined// Set it as top-level in the XSLTC object// Create AST under the Stylesheet element// Check that the transformation went well before returning// Set URIResolver on templates object/** Set internal system Id and forward SAX2 event to parser object. *//* $Id: TemplatesImpl.java,v 1.8 2007/03/26 20:12:27 spericas Exp $ *//** Name of the superclass of all translets. This is needed to ... *//** Name of the main class or default name if unknown. *//** Contains the actual class definition for the translet class and ... *//** Contains the translet class definition(s). These are created when ... *//** The index of the main translet class in the arrays _class[] and ... *//** Contains the list of auxiliary class definitions. *//** Output properties of this translet. *//** This URIResolver is passed to all Transformers. ... *//** Cache the DTM for the stylesheet in a thread local variable, ... *//** A flag to determine whether the system-default parser may be overridden *//** @serialField ... */// The _loadedExternalExtensionFunctions will be empty when the// SecurityManager is not set and the FSP is turned off/** Access to final protected superclass member from outer class. *//** Create an XSLTC template object from the bytecodes. ... *//** Create an XSLTC template object from the translet class definition(s). *//** Need for de-serialization, see readObject(). *//** Overrides the default readObject implementation since we decided ... */// We have to read serialized fields first./** This is to fix bugzilla bug 22438 ... *///throw with the same message as when Hashtable was used for compatibility.// Write serialized fields/** The TransformerFactory must pass us the translet bytecodes using this ... *//** Returns the translet bytecodes stored in this template ... *//** Returns the index of the main class in array of bytecodes *//** The TransformerFactory should call this method to set the translet name *//** Returns the name of the main translet class stored in this template *//** Defines the translet class and auxiliary classes. ... */// Check if this is the main class/** This method generates an instance of the translet class that is ... */// The translet needs to keep a reference to all its auxiliary// class to prevent the GC from collecting them/** Implements JAXP's Templates.newTransformer() ... *//** Implements JAXP's Templates.getOutputProperties(). We need to ... *//** Return the thread local copy of the stylesheet DOM. *//** Set the thread local copy of the stylesheet DOM. *//** skeleton extension of XMLFilterImpl for now. ... *///org.xml.sax.helpers.XMLReaderFactory// make this XMLReader the parent of this filter// call parse on the parent/** Implementation of a JAXP TransformerFactory for Translets. ... */// Public constants for attributes supported by the XSLTC TransformerFactory./** This error listener is used only for this factory and is not passed to ... *//** This URIResolver is passed to all created Templates and Transformers *//** As Gregor Samsa awoke one morning from uneasy dreams he found himself ... *//** The class name of the translet *//** The destination directory for the translet *//** The package name prefix for all generated translet classes *//** The jar file name which the translet classes are packaged into *//** This Map is used to store parameters for locating ... *//** The above Map stores objects of this class. *//** Set to <code>true</code> when debugging is enabled. *//** Set to <code>true</code> when templates are inlined. *//** Set to <code>true</code> when we want to generate ... *//** If this is set to <code>true</code>, we attempt to use translet classes ... *//** If this is set to <code>true</code>, we attempt to load the translet ... *//** Number of indent spaces when indentation is turned on. *//** <p>State of secure mode.</p> *//** Indicates whether 3rd party parser may be used to override the system-default ... */// Unmodifiable view of external extension function from xslt compiler// It will be populated by user-specified extension functions during the// type checking/** javax.xml.transform.sax.TransformerFactory implementation. *///Parser's security manager//Unmodifiable hash map with loaded external extension functions// Return value for attribute 'translet-name'/** Check to see if the property is managed by the security manager * */// Throw an exception for all other attributes// Set the default translet name (ie. class name), which will be used// for translets that cannot be given a name from their system-id./** <p>Set a feature for this <code>TransformerFactory</code> and <code>Transformer</code>s ... */// set external access restriction when FSP is explicitly set// for compatibility, in secure mode, useServicesMechanism is determined by the constructor// Inefficient, but array is small/** Check to see if the property is managed by the JdkXmlFeatures * */// Feature not supported/** Fix for bugzilla bug 24187 */// startElement encountered so do not parse further/** Pass warning messages from the compiler to the error listener */// Pass messages to listener, one by one// Workaround for the TCK failure ErrorListener.errorTests.error001./** Pass error messages from the compiler to the error listener */// If the _useClasspath attribute is true, try to load the translet from// the CLASSPATH and create a template object using the loaded// translet.// If _autoTranslet is true, we will try to load the bytecodes// from the translet classes without compiling the stylesheet.// Reset the per-session attributes to their default values// after each newTemplates() call.// Create and initialize a stylesheet compiler// Pass parameters to the Parser to make sure it locates the correct// <?xml-stylesheet ...?> PI in an XML input document// Get the parameters for this Source object// Pass them on to the compiler (which will pass then to the parser)// Set the attributes for translet generation// Set the translet name// Compile the stylesheet// Output to the jar file if the jar file name is set.// Pass compiler warnings to the error listener// Pass compiler errors to the error listener// As required by TCK 1.2, send a fatalError to the// error listener because compilation of the stylesheet// failed and no further processing will be possible.// well, we tried./** javax.xml.transform.sax.SAXTransformerFactory implementation. ... *//** Receive notification of a recoverable error. ... *//** Receive notification of a non-recoverable error. ... *//** Receive notification of a warning. ... */// should catch it when the resolver explicitly throws the exception/** Reset the per-session attributes to their default values *//** Load the translet classes from local .class files and return ... */// Find the base name of the translet// Construct the path name for the translet class file// Return null if the translet class file does not exist.// Compare the timestamps of the translet and the xsl file.// If the translet is older than the xsl file, return null// so that the xsl file is used for the transformation and// the translet is regenerated.// Load the translet into a bytecode array.// Find the parent directory of the translet.// Find all the auxiliary files which have a name pattern of "transletClass$nnn.class".// Load the auxiliary class files and add them to the bytecode array.// Convert the Vector of byte[] to byte[][]./** Load the translet classes from the jar file and return the bytecode. ... */// Construct the path for the jar file// Return null if the jar file does not exist.// Compare the timestamps of the jar file and the xsl file. Return null// if the xsl file is newer than the jar file.// Create a ZipFile object for the jar file// Iterate through all entries in the jar file to find the// translet and auxiliary classes./** Read a given number of bytes from the InputStream into a byte array. ... *//** Return the base class name of the translet. ... *//** Return the local file name from the systemId of the Source object ... *//** Returns a new instance of the XSLTC DTM Manager service. *//** Implementation of a JAXP1.1 TransformerHandler ... */// Set in endDocument()/** A flag indicating whether this transformer handler implements the ... *//** Cosntructor - pass in reference to a TransformerImpl object */// Save the reference to the transformer// Set initial handler to the empty handler// Get a reference to the translet wrapped inside the transformer/** Implements javax.xml.transform.sax.TransformerHandler.getSystemId() ... *//** Implements javax.xml.transform.sax.TransformerHandler.setSystemId() ... *//** Implements javax.xml.transform.sax.TransformerHandler.getTransformer() ... *//** Implements javax.xml.transform.sax.TransformerHandler.setResult() ... *///"result should not be null");// Connect this object with output system directly// Run the transformation now, if not already done// What the hell are we supposed to do with this???/** Implements org.xml.sax.ContentHandler.characters() ... *//** Implements org.xml.sax.ContentHandler.startDocument() ... */// Make sure setResult() was called before the first SAX event// Create an internal DOM (not W3C) and get SAX2 input handler// Construct the DTM using the SAX events that come through// Set document URI// Proxy call/** Implements org.xml.sax.ContentHandler.endDocument() ... */// Signal to the DOMBuilder that the document is complete// Run the transformation now if we have a reference to a Result object// Signal that the internal DOM is built (see 'setResult()').// Set this DOM as the transformer's DOM/** Implements org.xml.sax.ContentHandler.startElement() ... *//** Implements org.xml.sax.ContentHandler.endElement() ... *//** Implements org.xml.sax.ContentHandler.processingInstruction() ... *//** Implements org.xml.sax.ext.LexicalHandler.startCDATA() *//** Implements org.xml.sax.ext.LexicalHandler.endCDATA() *//** Implements org.xml.sax.ext.LexicalHandler.comment() ... *//** Implements org.xml.sax.ContentHandler.ignorableWhitespace() ... *//** Implements org.xml.sax.ContentHandler.setDocumentLocator() ... *//** Implements org.xml.sax.ContentHandler.skippedEntity() ... *//** Implements org.xml.sax.ContentHandler.startPrefixMapping() ... *//** Implements org.xml.sax.ContentHandler.endPrefixMapping() ... *//** Implements org.xml.sax.ext.LexicalHandler.startDTD() *//** Implements org.xml.sax.ext.LexicalHandler.endDTD() *//** Implements org.xml.sax.ext.LexicalHandler.startEntity() *//** Implements org.xml.sax.ext.LexicalHandler.endEntity() *//** Implements org.xml.sax.DTDHandler.unparsedEntityDecl() *//** Implements org.xml.sax.DTDHandler.notationDecl() *//** Implements org.xml.sax.ext.DeclHandler.attributeDecl() *//** Implements org.xml.sax.ext.DeclHandler.elementDecl() *//** Implements org.xml.sax.ext.DeclHandler.externalEntityDecl() *//** Implementation of the reset() method *//* $Id: TransformerImpl.java,v 1.10 2007/06/13 01:57:09 joehw Exp $ *//** Namespace prefixes feature for {@link XMLReader}. *//** A reference to the translet or null if the identity transform. *//** The output method of this transformation. *//** The output encoding of this transformation. *//** The systemId set in input source. *//** An error listener for runtime errors. *//** A reference to a URI resolver for calls to document(). *//** Output properties of this transformer instance. *//** A reference to an output handler factory. *//** A reference to a internal DOM representation of the input. *//** Number of indent spaces to add when indentation is on. *//** A reference to the output stream, if we create one in our code. *//** A reference to the XSLTCDTMManager which is used to build the DOM/DTM ... *//** A reference to an object that creates and caches XMLReader objects. *//** A flag indicating whether we use incremental building of the DTM. *///private boolean _isIncremental = false;/** A flag indicating whether this transformer implements the identity ... *//** Indicates whether 3rd party parser may be used to override the system-default *//** A map to store parameters for the identity transform. These ... *//** This class wraps an ErrorListener into a MessageHandler in order to ... */// _properties.put(OutputKeys.METHOD, "xml");//_isIncremental = tfactory._incremental;/** Returns the translet wrapped inside this Transformer or ... *//** Implements JAXP's Transformer.transform() ... */// Pass output properties to the translet// Pass output properties to handler if identity//result = new StAXResult(_tohFactory.getXMLStreamWriter());/** Create an output handler for the transformation output based on ... */// Get output method using get() to ignore defaults// Get encoding using getProperty() to use defaults// Set indentation number in the factory// Return the content handler for this Result object// Result object could be SAXResult, DOMResult, or StreamResult/** Fix for bug 24414 ... */// Get StreamResult// StreamResult may have been created with a java.io.File,// java.io.Writer, java.io.OutputStream or just a String// systemId.// try to get a Writer from Result object// or try to get an OutputStream from Result object// or try to get just a systemId string from Result object// System Id may be in one of several forms, (1) a uri// that starts with 'file:', (2) uri that starts with 'http:'// or (3) just a filename on the local system.// if StreamResult(File) or setSystemID(File) was used,// the systemId will be URI encoded as a result of File.toURI(),// it must be decoded for use by URL// decoded String//decoded String// if host (URI authority) then file:// + host + path// else just path (may be absolute or relative)// URI exception which means nothing can be done so OK to ignore// system id is just a filename// If we cannot write to the location specified by the SystemId// If we cannot create the file specified by the SystemId/** Set the internal DOM that will be used for the next transformation *//** Builds an internal DOM from a TrAX Source object */// use only once, so reset to 'null'// Give the translet the opportunity to make a prepass of// the document, in case it can extract useful information early/** Returns the {@link com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl} ... *//** Returns the {@link com.sun.org.apache.xalan.internal.xsltc.runtime.output.TransletOutputHandlerFactory} ... */// Get systemId from source// Hook up reader and output handler// Create input source from source// Start pushing SAX events// Create a reader if not set by user/** Internal transformation method - uses the internal APIs of XSLTC *//* According to JAXP1.2, new SAXSource()/StreamSource() ... */// Copy system ID from original, empty Source to new// If we create an output stream for the Result, we need to close it after the transformation./** Implements JAXP's Transformer.getErrorListener() ... *//** Implements JAXP's Transformer.setErrorListener() ... */// Register a message handler to report xsl:messages/** Inform TrAX error listener of an error */// ignored - transformation cannot be continued/** Inform TrAX error listener of a warning *//** Implements JAXP's Transformer.getOutputProperties(). ... *//** Implements JAXP's Transformer.getOutputProperty(). ... *//** Implements JAXP's Transformer.setOutputProperties(). ... */// Ignore lower layer properties/** Implements JAXP's Transformer.setOutputProperty(). ... *//** Internal method to pass any properties to the translet prior to ... */// Return right now if no properties are set// Get a list of all the defined properties// Note the use of get() instead of getProperty()// Ignore default properties// Pass property value to translet - override previous setting// clear previous setting/** This method is used to pass any properties to the output handler ... */// look for the last colon, as the String may be// something like "http://abc.com:local"// no colon at all, lets hope this is the// local name itself then// add the uri/localName as a pair, in that order// Call setDoctype() if needed/** Internal method to create the initial set of properties. There ... */// Copy propeties set in stylesheet to base// Update defaults based on output method/** Internal method to get the default properties from the ... *//** Verifies if a given output property name is a property defined in ... *//** Checks if a given output property is default (2nd layer only) *//** Implements JAXP's Transformer.setParameter() ... *//** Implements JAXP's Transformer.clearParameters() ... *//** Implements JAXP's Transformer.getParameter() ... *//** Implements JAXP's Transformer.getURIResolver() ... *//** Implements JAXP's Transformer.setURIResolver() ... *//** This class should only be used as a DOMCache for the translet if the ... */// Argument to document function was: document('');/* Fix for bug 24188 ... *//** This method resets  the Transformer to its original configuration ... *//* $Id: Util.java,v 1.2.4.1 2005/09/14 09:37:34 pvedula Exp $ *//** Creates a SAX2 InputSource object from a TrAX Source object */// Try to get InputSource from SAXSource input// Pass the SAX parser to the compiler// compatibility for legacy applications// handle  DOMSource// Try to get SAX InputSource from DOM Source.// handle StAXSource// get sax InputSource from StAXSource// Try to get InputStream or Reader from StreamSource// Clear old XML reader// Create InputSource from Reader or InputStream in Source/** Create a new XSLTC-specific source from a system ID *//** Create a new XSLTC-specific source from a JAXP Source *//** Implements javax.xml.transform.Source.setSystemId() ... *//** Implements javax.xml.transform.Source.getSystemId() ... *//** Internal interface which returns a DOM for a given DTMManager and translet. *//** Adds new int at the end if not already present. */// already in array/** Merge two sorted arrays and eliminate duplicates. ... */// System.out.println("IntegerArray.merge() begin newSize = " + newSize);// Merge the two arrays// Copy the rest if of different lengths// Update reference to this array// System.out.println("IntegerArray.merge() end");/* Copyright (c) 2016, Oracle and/or its affiliates. All rights reserved. ... *//** Constructor AbortException *//** Attribute represents an XML-style attribute of an ... *//** Serialization version. *//** DTD namespace. * *//** This can either be a String or the first child node. *//** Attribute name. *//** Type information */// REVISIT: we are losing the type information in DOM during serialization/** Attribute has no public constructor. Please use the factory ... *//** False for default attributes. */// for AttrNSImpl// Support for DOM Level 3 renameNode method.// Note: This only deals with part of the pb. It is expected to be// called after the Attr has been detached for one thing.// CoreDocumentImpl does all the work.// create a real text node as child if we don't have one yet/** NON-DOM ... *//** NON-DOM: set the type of this attribute to be ID type. ... *//** DOM Level 3: isId */// REVISIT: should an attribute that is not in the tree return// isID true?// Node methods// take care of case where there are kids// Need to break the association w/ original kids// Cloning an Attribute always clones its children,// since they represent its value, no matter whether this// is a deep clone or not/** A short integer indicating what type of node this is. The named ... *//** Returns the attribute name *//** Implicit in the rerouting of getNodeValue to getValue is the ... *//** Method getSchemaTypeInfo. ... *//** In Attribute objects, NodeValue is considered a synonym for ... */// Attr methods/** In Attributes, NodeName is considered a synonym for the ... */// getName():String/** The DOM doesn't clearly define what setValue(null) means. I've taken it ... */// Can no longer just discard the kids; they may have// event listeners waiting for them to disconnect.// create an actual text node as our child so// that we can use it in the event// simply discard children if any// remove ref from first child to last child// then remove ref to current value// Create and add the new one, generating only non-aggregate events// (There are no listeners on the new Text, but there may be// capture/bubble listeners on the Attr.// Note that aggregate events are NOT dispatched here,// since we need to combine the remove and insert.// if there are any event handlers create a real node// notify document// directly store the string// setValue(String)/** The "string value" of an Attribute is its text representation, ... */// getValue():String/** The "specified" flag is true if and only if this attribute's ... */// getSpecified():boolean// Attr2 methods/** Returns the element node that this attribute is associated with, ... */// if we have an owner, ownerNode is our ownerElement, otherwise it's// our ownerDocument and we don't have an ownerElement// No need to normalize if already normalized or// if value is kept as a String.// If kid is a text node, we need to check for one of two// conditions://   1) There is an adjacent text node//   2) There is no adjacent text node, but kid is//      an empty text node.// If an adjacent text node, merge it with kid// Don't advance; there might be another.// If kid is empty, remove it// normalize()// Public methods/** NON-DOM, for use by parser */// setSpecified(boolean)/** NON-DOM: used by the parser ... */// Object methods/** NON-DOM method for debugging convenience *//** Test whether this node has any children. Convenience shorthand ... *//** Obtain a NodeList enumerating all children of this node. If there ... */// JKESS: KNOWN ISSUE HERE// getChildNodes():NodeList/** The first child of this Node, or null if none. */// getFirstChild():Node/** The last child of this Node, or null if none. */// getLastChild():Node// last child is stored as the previous sibling of first child// store lastChild as previous sibling of first child/** Move one or more node(s) to our list of children. Note that this ... */// Tail-call; optimizer should be able to do good things with.// insertBefore(Node,Node):Node/** NON-DOM INTERNAL: Within DOM actions,we sometimes need to be able ... */// SLOW BUT SAFE: We could insert the whole subtree without// juggling so many next/previous pointers. (Wipe out the// parent's child-list, patch the parent pointers, set the// ends of the list.) But we know some subclasses have special-// case behavior they add to insertBefore(), so we don't risk it.// This approch also takes fewer bytecodes.// NOTE: If one of the children is not a legal child of this// node, throw HIERARCHY_REQUEST_ERR before _any_ of the children// have been transferred. (Alternative behaviors would be to// reparent up to the first failure point or reparent all those// which are acceptable to the target node, neither of which is// as robust. PR-DOM-0818 isn't entirely clear on which it// recommends?????// No need to check kids for right-document; if they weren't,// they wouldn't be kids of that DocFrag.// Prescan// stupid case that must be handled as a no-op triggering events...// refChild must be a child of this node (or null)// Prevent cycles in the tree// newChild cannot be ancestor of this Node,// and actually cannot be this// make sure we have a node and not a string// Convert to internal type, to avoid repeated casting// Attach up// Attach before and after// Note: firstChild.previousSibling == lastChild!!// this our first and only child// firstchild = newInternal;// this is an append// this is an insert// at the head of the list// firstChild = newInternal;// somewhere in the middle// internalInsertBefore(Node,Node,int):Node/** Remove a child from this Node. The removed child's subtree ... */// Tail-call, should be optimizable// we don't have any child per say so it can't be one of them!// removeChild(Node) :Node// Patch linked list around oldChild// Note: lastChild == firstChild.previousSibling// oldInternal == firstChild// removing first child// next line is: firstChild = oldInternal.nextSibling// removing last child// removing some other child in the middle// Save previous sibling for normalization checking.// Remove oldInternal's references to tree// internalRemoveChild(Node,int):Node/** Make newChild occupy the location that oldChild used to ... */// If Mutation Events are being generated, this operation might// throw aggregate events twice when modifying an Attr -- once// on insertion and once on removal. DOM Level 2 does not specify// this as either desirable or undesirable, but hints that// aggregations should be issued only once per user request.// NodeList methods/** NodeList method: Count the immediate children of this node ... */// getLength():int/** NodeList method: Return the Nth immediate child of this node, or ... */// item(int):Node// DOM3/** DOM Level 3 WD- Experimental. ... *//** Introduced in DOM Level 3. <p> ... *//** Override default behavior so that if deep is true, children are also ... */// Recursively set kids// setReadOnly(boolean,boolean)/** Override this method in subclass to hook in efficient ... */// By default just change the flag to avoid calling this method again/** Checks the normalized state of this node after inserting a child. ... */// See if insertion caused this node to be unnormalized.// If an adjacent sibling of the new child is a text node,// flag this node as unnormalized.// If the new child is not normalized,// then this node is inherently not normalized.// checkNormalizationAfterInsert(ChildNode)/** Checks the normalized of this node after removing a child. ... */// See if removal caused this node to be unnormalized.// If the adjacent siblings of the removed child were both text nodes,// checkNormalizationAfterRemove(ChildNode)// Serialization methods/** Serialize object. */// synchronize chilren// write object// writeObject(ObjectOutputStream)/** Deserialize object. */// perform default deseralization// hardset synchildren - so we don't try to sync -// it does not make any sense to try to synchildren when we just// deserialize object.// readObject(ObjectInputStream)// class AttrImpl/** AttrNSImpl inherits from AttrImpl and adds namespace support. ... *//** DOM2: Namespace URI. *//** DOM2: localName. *//* Default constructor *//** DOM2: Constructor for Namespace implementation. */// DOM Level 3: namespace URI is never empty string.// there is no prefix// when local name is known// for DeferredAttrImpl/** NON-DOM: resets this node and sets specified values for the node ... */// DOM2: Namespace methods/** Introduced in DOM Level 2. <p> ... */// REVIST: This code could/should be done at a lower-level, such that// the namespaceURI is set properly upon creation. However, there still// seems to be some DOM spec interpretation grey-area.// update node name with new qualifiedName/** AttributeMap inherits from NamedNodeMapImpl and extends it to deal with the ... *//** Constructs a named node map. */// initialize map with the defaults/** Adds an attribute using its nodeName attribute. ... */// replacing an Attribute with itself does nothing// set owner// make sure it won't be mistaken with defaults in case it's reused// Insert point (may be end of list)// If the new attribute is not normalized,// the owning element is inherently not normalized.// setNamedItem(Node):Node/** Adds an attribute using its namespaceURI and localName. ... */// If we can't find by namespaceURI, localName, then we find by// nodeName so we know where to insert.//      changed(true);// setNamedItemNS(Node):Node/** Removes an attribute specified by name. ... *//** Same as removeNamedItem except that it simply returns null if the ... *//** NON-DOM: Remove the node object ... *//** Internal removeNamedItem method allowing to specify whether an exception ... */// internalRemoveNamedItem(String,boolean):Node// If there's a default, add it instead// we must rely on the name to find a default attribute// ("test:attr"), but while copying it from the DOCTYPE// we should not loose namespace URI that was assigned// to the attribute in the instance document.//        changed(true);// remove reference to owner// make sure it won't be mistaken with defaults in case it's// reused/** Internal removeNamedItemNS method allowing to specify whether an ... */// update id table if needed// internalRemoveNamedItemNS(String,String,boolean):Node/** Cloning a NamedNodeMap is a DEEP OPERATION; it always clones ... */// cloneMap():AttributeMap/** Override parent's method to set the ownerNode correctly */// cloneContent():AttributeMap/** Move specified attributes from the given map to this one */// moveSpecifiedAttributes(AttributeMap):void/** Get this AttributeMap in sync with the given "defaults" map. ... */// remove any existing default// add the new defaults// reconcileDefaults()// class AttributeMap/** XML provides the CDATA markup to allow a region of text in which ... *//** Factory constructor for creating a CDATA section. *//** Returns the node name. */// class CDATASectionImpl/** CharacterData is an abstract Node that can carry character data as its ... *//** Empty child nodes. *//** Factory constructor. *//** Returns an empty node list. *//* returns the content of this node *//** Convenience wrapper for calling setNodeValueInternal when ... *//** This function added so that we can distinguish whether ... */// revisit: may want to set the value in ownerDocument.// Default behavior, overridden in some subclasses// keep old value for document notification/** Sets the content, possibly firing related events, ... */// CharacterData methods/** Retrieve character data currently stored in this node. ... *//** Report number of characters currently stored in this node's ... *//** Concatenate additional characters onto the end of the data ... */// appendData(String)/** Remove a range of characters from the node's value. Throws a ... */// deleteData(int,int)/** NON-DOM INTERNAL: Within DOM actions, we sometimes need to be able ... */// internalDeleteData(int,int,boolean)/** Insert additional characters into the data stored in this node, ... */// insertData(int,int)// internalInsertData(int,String,boolean)/** Replace a series of characters at the specified (zero-based) ... */// The read-only check is done by deleteData()// ***** This could be more efficient w/r/t Mutation Events,// specifically by aggregating DOMAttrModified and// DOMSubtreeModified. But mutation events are// underspecified; I don't feel compelled// to deal with it right now.//notify document// replaceData(int,int,String)/** Store character data into this node. ... *//** Substring is more than a convenience function. In some ... */// substringData(int,int):String// class CharacterDataImpl/** ChildNode inherits from NodeImpl and adds the capability of being a child by ... *//** Previous sibling. *//** Next sibling. *//** No public constructor; only subclasses of Node should be ... */// <init>(CoreDocumentImpl)/** Constructor for serialization. *//** Returns a duplicate of a given node. You can consider this a ... */// cloneNode(boolean):Node/** Returns the parent node of this node */// if we have an owner, ownerNode is our parent, otherwise it's// our ownerDocument and we don't have a parent/* same as above but returns internal type *//** The next child of this node's parent, or null if none *//** The previous child of this node's parent, or null if none */// if we are the firstChild, previousSibling actually refers to our// parent's lastChild, but we hide that// class ChildNode/** Represents an XML (or HTML) comment. ... */// class CommentImpl/* Copyright 1999-2005 The Apache Software Foundation. ... *//** The DOMImplementation class is description of a particular ... */// validators pool// Document and doctype counter.  Used to assign order to documents and// doctypes without owners, on an demand basis.   Used for// compareDocumentPosition// static/** Dom implementation singleton. *//** NON-DOM: Obtain and return the single shared object */// DOMImplementation methods/** Test if the DOM implementation supports a specific "feature" -- ... */// check if Xalan implementation is around and if yes report true for supporting// XPath API// if a plus sign "+" is prepended to any feature name, implementations// are considered in which the specified feature may not be directly// castable DOMImplementation.getFeature(feature, version). Without a// plus, only features whose interfaces are directly castable are considered.// Check if the DOM XPath implementation implements// the interface org.w3c.dom.XPathEvaluator// hasFeature(String,String):boolean// REVISIT: this might allow creation of invalid name for DOCTYPE//          xmlns prefix.//          also there is no way for a user to turn off error checking.// it is an error for NCName to have more than one ':'// check if it is valid QName [Namespace in XML production 6]// Namespace in XML production [6]// check that prefix is NCName// check local part// REVISIT: add qname parameter to the message/** DOM Level 3 WD - Experimental. */// DOM L3 LS/** DOM Level 3 LS CR - Experimental. ... */// create default parser configuration validating against XMLSchemas/** NON-DOM: retrieve validator. */// REVISIT: implement retrieving DTD validator// create new validator - we should not attempt// to restrict the number of validation handlers being// requested// return first available validator/** NON-DOM: release validator */// REVISIT: implement support for DTD validators as well// resize size of the validators/** NON-DOM:  increment document/doctype counter *//* DOM Level 3 LS CR - Experimental. ... */// class DOMImplementationImpl/* Copyright (c) 2009, 2015, Oracle and/or its affiliates. All rights reserved. *//** The Document interface represents the entire HTML or XML document. ... *//** TODO:: 1. Change XML11Char method names similar to XMLChar. That will ... */// document information/** Document type. *//** Document element. *//** NodeListCache free list *//** Experimental DOM Level 3 feature: Document encoding *//** Experimental DOM Level 3 feature: Document actualEncoding *//** Experimental DOM Level 3 feature: Document version *//** Experimental DOM Level 3 feature: Document standalone *//** Experimental DOM Level 3 feature: documentURI *///Revisit :: change to a better data structure./** Table for user data attached to this document nodes. *//** Identifiers. */// DOM Level 3: normalizeDocument// support of XPath API/** Table for quick check of child insertion. *//** Number of alterations made to this document since its creation. ... */// experimental/** Allow grammar access. *//** Bypass error checking. *//** Ancestor checking *///Did version change at any point when the document was created ?//this field helps us to optimize when normalizingDocument./** The following are required for compareDocumentPosition */// Document number.   Documents are ordered across the implementation using// positive integer values.  Documents are assigned numbers on demand.// Node counter and table.  Used to assign numbers to nodes for this// document.  Node number values are negative integers.  Nodes are// assigned numbers on demand.//by default 1.0// Static initialization/** NON-DOM: Actually creating a Document is outside the DOM's spec, ... *//** For DOM2 support. ... *//** For DOM2 support. */// even though ownerDocument refers to this in this implementation// the DOM Level 2 spec says it must be null, so make it appear so/** Returns the node type. *//** Deep-clone a document, including fixing ownerDoc for the cloned ... *//** internal method to share code with subclass */// clone the children by importing them// Build a reverse mapping from element to identifier.// Copy children into new document.// cloneNode(CoreDocumentImpl,boolean):void/** Since a Document may contain at most one top-level Element child, ... */// Only one such child permitted// Adopt orphan doctypes// If insert succeeded, cache the kid appropriately/** Since insertBefore caches the docElement (and, currently, docType), ... */// If remove succeeded, un-cache the kid appropriately// removeChild(Node):Node/** Since we cache the docElement (and, currently, docType), ... */// replaceChild(Node,Node):Node/* Get Node text content ... *//* Set Node text content ... */// no-op// plus, only features whose interfaces are directly castable are// considered.// If an XPathEvaluator was created previously// return it otherwise create a new one.// Document methods// factory methods/** Factory method; creates an Attribute having this Document as its ... */// createAttribute(String):Attr/** Factory method; creates a CDATASection having this Document as ... *//** Factory method; creates a Comment having this Document as its ... *//** Factory method; creates a DocumentFragment having this Document ... *//** Factory method; creates an Element having this Document ... */// createElement(String):Element/** Factory method; creates an EntityReference having this Document ... */// createEntityReference(String):EntityReference/** Factory method; creates a ProcessingInstruction having this Document ... */// createProcessingInstruction(String,String):ProcessingInstruction/** Factory method; creates a Text node having this Document as its ... */// other document methods/** For XML, this provides access to the Document Type Definition. ... *//** Convenience method, allowing direct access to the child node ... *//** Return a <em>live</em> collection of all descendent Elements (not just ... *//** Retrieve information describing the abilities of this particular ... */// Currently implemented as a singleton, since it's hardcoded// information anyway./** Sets whether the DOM implementation performs error checking ... *//* DOM Level 3 WD - Experimental. *//** Returns true if the DOM implementation performs error checking. *//** DOM Level 3 CR - Experimental. (Was getActualEncoding) ... *//** DOM Internal ... *//** DOM Level 3 WD - Experimental. ... *//** DOM Level 3 CR - Experimental. ... *///we need to change the flag value only --// when the version set is different than already set.//change the normalization value back to false//NOT_SUPPORTED_ERR: Raised if the vesion is set to a value that is not supported by//this document//we dont support any other XML version// fire user data NODE_RENAMED event// we need to create a new object// register event listeners on new node// remove user data from old node// remove old node from parent if any// move children to new node// move specified attributes to new node// attach user data to new node// and fire user data NODE_RENAMED event// insert new node where old one was// fire ElementNameChanged event// dettach attr from element// reattach attr to element// fire AttributeNameChanged event/** DOM Level 3 WD - Experimental ... */// No need to normalize if already normalized.//set the XMLversion changed value to false -- once we have finished//doing normalization/** DOM Level 3 CR - Experimental ... *//** Returns the absolute base URI of this node or null if the implementation ... */// attribute value is always empty string// REVISIT: what should happen in this case?/** Sets whether the DOM implementation generates mutation events upon ... */// does nothing by default - overidden in subclass/** Returns true if the DOM implementation generates mutation events. */// does nothing by default - overriden in subclass// non-DOM factory methods/** NON-DOM Factory method; creates a DocumentType having this Document as ... */// createDocumentType(String):DocumentType/** NON-DOM Factory method; creates an Entity having this Document as its ... */// createEntity(String):Entity/** NON-DOM Factory method; creates a Notation having this Document as its ... */// createNotation(String):Notation/** NON-DOM Factory method: creates an element definition. Element ... */// createElementDefinition(String):ElementDefinitionImpl// other non-DOM methods/** NON-DOM: Get the number associated with this document. Used to order ... *//** NON-DOM: Get a number associated with a node created with respect to this ... */// Check if the node is already in the hash// If so, retrieve the node number// If not, assign a number to the node// Node numbers are negative, from -1 to -n/** Copies a node from another document to this document. The new nodes are ... */// importNode(Node,boolean):Node/** Overloaded implementation of DOM's importNode method. This method ... */// Sigh. This doesn't work; too many nodes have private data that// would have to be manually tweaked. May be able to add local// shortcuts to each nodetype. Consider ?????// if(source instanceof NodeImpl &&//  !(source instanceof DocumentImpl))//  // Can't clone DocumentImpl since it invokes us...//  newnode=(NodeImpl)source.cloneNode(false);//  newnode.ownerDocument=this;// Create element according to namespace support/qualification.// Copy element's attributes, if any.// NOTE: this methods is used for both importingNode// and cloning the document node. In case of the// clonning default attributes should be copied.// But for importNode defaults should be ignored.// Attach attribute according to namespace// support/qualification.// Register element identifier.// Does element have an associated identifier?// if source is an AttrImpl from this very same implementation// avoid creating the child nodes if possible// According to the DOM spec the kids carry the value.// However, there are non compliant implementations out// there that fail to do so. To avoid ending up with no// value at all, in this case we simply copy the text value// directly.// the subtree is created according to this doc by the method// above, so avoid carrying over original subtree// Kids carry additional value,// allow deep import temporarily// unless this is used as part of cloning a Document// forbid it for the sake of being compliant to the DOM spec// Values are on NamedNodeMaps// NOTE: At this time, the DOM definition of DocumentType// doesn't cover Elements and their Attributes. domimpl's// extentions in that area will not be preserved, even if// copying from domimpl to domimpl. We could special-case// that here. Arguably we should. Consider. ?????// No name, kids carry value// Kids carry additional value// No name, no value// Can't import document nodes// Unknown node type// If deep, replicate and attach the kids.// importNode(Node,boolean,boolean,Map):Node// source node comes from a different DOMImplementation// Return null if the source is null// when the source node comes from a different implementation.// Adopting from a DefferedDOM to DOM// traverse the DOM and expand deffered nodes and then allow adoption// Adopting from a DOM into a DefferedDOM, this should be okay// Adopting between two dissimilar DOM's is not allowed// remove node from wherever it is//1. owner element attribute is set to null//2. specified flag is set to true//3. change ownership//entity, notation nodes are read only nodes.. so they can't be adopted.//runtime will fall through to NOTATION_NODE//document, documentype nodes can't be adopted.//runtime will fall through to DocumentTypeNode// discard its replacement value// change ownership// set its new replacement value if any// reconcile default attributes//DOM L3 Core CR//http://www.w3.org/TR/2003/CR-DOM-Level-3-Core-20031107/core.html#UserDataHandler-ADOPTED/** Traverses the DOM Tree and expands deferred nodes and their ... */// identifier maintenence/** Introduced in DOM Level 2 ... *//** Remove all identifiers from the ID table *//** Registers an identifier name with a specified element node. ... */// putIdentifier(String,Element)/** Returns a previously registered element with the specified ... */// check that the element is in the tree// getIdentifier(String):Element/** Removes a previously registered element with the specified ... */// removeIdentifier(String)/** NON-DOM: a factory method used by the Xerces DOM parser ... *//** Clone. */// Public static methods/** Check the string against XML's definition of acceptable names for ... */// isXMLName(String):boolean/** Checks if the given qualified name is legal with respect ... */// check that both prefix and local part match NCName/** Uses the kidOK lookup table to check whether the proposed ... *//** Denotes that this node has changed. *//** Returns the number of changes to this node. *///  NodeListCache pool/** Returns a NodeListCache for the given node. */// revoke previous ownership// c.next = null; not necessary, except for confused people.../** Puts the given NodeListCache in the free list. ... *//** Associate an object to a key on this node. The object can later be ... *//** Retrieves the object associated to a key on a this node. The object ... *//** Remove user data table for the given node. ... *//** Set user data table for the given node. ... *//** Call user data handlers when a node is deleted (finalized) ... *//** Call user data handlers to let them know the nodes they are related to ... */// Temporarily comment out this method, because// 1. It seems that finalizers are not guaranteed to be called, so the//    functionality is not implemented.// 2. It affects the performance greatly in multi-thread environment.// -SG/* public void finalize() { ... */// :camera , nikon:camera:minolta, camera:/** We could have more xml versions in future , but for now we could ... */// REVISIT: Implement to optimize when normalization// is required//we should be checking the (elements, attribute, entity etc.) names only when//version of the document is changed./** NON-DOM: kept for backward compatibility ... */// Event related methods overidden in subclass// Notification methods overidden in subclasses/** A method to be called when some text was changed in a text node, ... *//** A method to be called when some text was deleted from a text node, ... *//** A method to be called when some text was inserted into a text node, ... *//** A method to be called when a character data node is about to be modified *//** A method to be called when a character data node has been modified *//** A method to be called when a node is about to be inserted in the tree. *//** A method to be called when a node has been inserted in the tree. *//** A method to be called when a node is about to be removed from the tree. *//** A method to be called when a node has been removed from the tree. *//** A method to be called when a node is about to be replaced in the tree. *//** A method to be called when a node has been replaced in the tree. *//** A method to be called when a character data node is about to be replaced *//** method to be called when a character data node has been replaced. *//** A method to be called when an attribute value has been modified *//** A method to be called when an attribute node has been set *//** A method to be called when an attribute node has been removed *//** A method to be called when an attribute node has been renamed *//** A method to be called when an element has been renamed *//** @serialData ... */// Convert Maps to Hashtables//e.getValue() will not be null since an entry is always put with a non-null value//userData is the original name. It has been changed to nodeUserData, refer to the corrsponding @serialField//convert Hashtables back to HashMaps// class CoreDocumentImpl/** Xerces implementation of DOMConfiguration that maintains a table of recognized parameters. ... */// feature identifiers/** Feature identifier: validation. *//** Feature identifier: namespaces. *//** sending psvi in the pipeline *//** Feature identifier: namespace growth */// property identifiers/** Property identifier: entity manager. *//** Property identifier: error reporter. *//** Property identifier: xml string. *//** Property identifier: symbol table. *//** Property id: Grammar pool *//** Property identifier: error handler. *//** Property identifier: entity resolver. *//** Property identifier: JAXP schema language / DOM schema-type. *//** Property identifier: JAXP schema source/ DOM schema-location. *//** Property identifier: Schema DV Factory *//** Property identifier: Security manager. *//** Property identifier: Security property manager. *//** Normalization features *//** Symbol table. *//** Components. *//** Locale. *//** Error reporter */// private data/** Default Constructor. */// <init>()/** Constructs a parser configuration using the specified symbol table. ... */// <init>(SymbolTable)/** Constructs a parser configuration using the specified symbol table ... */// create table for features and properties// add default recognized features// set state for default features// add default recognized properties// set default values for normalization features// add message formatters// REVISIT: try to include XML Schema formatter.//          This is a hack to allow DTD configuration to be build.// set locale// REVISIT: What is the right thing to do? -Ac// XMLParserConfiguration methods/** Parse an XML document. ... *//** Sets the document handler on the last component in the pipeline ... */// setDocumentHandler(XMLDocumentHandler)/** Returns the registered document handler. */// getDocumentHandler():XMLDocumentHandler/** Sets the DTD handler. ... *///no-op// setDTDHandler(XMLDTDHandler)/** Returns the registered DTD handler. */// getDTDHandler():XMLDTDHandler/** Sets the DTD content model handler. ... */// setDTDContentModelHandler(XMLDTDContentModelHandler)/** Returns the registered DTD content model handler. */// getDTDContentModelHandler():XMLDTDContentModelHandler/** Sets the resolver used to resolve external entities. The EntityResolver ... */// setEntityResolver(XMLEntityResolver)/** Return the current entity resolver. ... */// getEntityResolver():XMLEntityResolver/** Allow an application to register an error event handler. ... */// setErrorHandler(XMLErrorHandler)/** Return the current error handler. ... */// getErrorHandler():XMLErrorHandler/** Set the state of a feature. ... */// save state if noone "objects"// setFeature(String,boolean)/** setProperty ... */// store value if noone "objects"// setProperty(String,Object)/** Set the locale to use for messages. ... */// setLocale(Locale)/** Returns the locale. */// getLocale():Locale// REVISIT: Recognizes DOM L3 default features only.//          Does not yet recognize Xerces features.// Setting to false has no effect.// true is not supported// false is not supported// REVISIT: turning augmentation of PSVI is not support,// because in this case we won't be able to retrieve element// default value./* String msg = ... */// set properties// REVISIT: type mismatch// map DOM schema-location to JAXP schemaSource property// REVISIT: when add support to DTD validation// Added support for revalidation against DTDs// Xerces Symbol Table// REVISIT: check if this is a boolean parameter -- type mismatch should be thrown.//parameter is not recognized// REVISIT: datatype-normalization only takes effect if validation is on//if null, the returned value is true.//REVISIT: I dont like this --- even for unrecognized parameter it would//return 'true'. I think it should return false in that case.// Application will be surprised to find that setParameter throws not//recognized exception when canSetParameter returns 'true' Then what is the use//of having canSetParameter ??? - nb.//features whose parameter value can be set either 'true' or 'false'// or they accept any boolean value -- so we just need to check that// its a boolean value..//features whose parameter value can not be set to 'true'//features whose parameter value can not be set to 'false'// if name is not among the above listed above -- its not recognized. return false// REVISIT: should null value be supported?//as of now we are only supporting W3C XML Schema//false if the parameter is not recognized or the requested value is not supported.//canSetParameter//Add DOM recognized parameters//REVISIT: Would have been nice to have a list of//recognized paramters.//Add recognized xerces features and properties//getParameterNames/** reset all components before parsing */// reset()/** Check a property. If the property is known and supported, this method ... */// special cases// http://xml.org/sax/properties/xml-string// Value type: String// Access: read-only//   Get the literal string of characters associated with the//   current event.  If the parser recognises and supports this//   property but is not currently parsing text, it should return//   null (this is a good way to check for availability before the//   parse begins).// REVISIT - we should probably ask xml-dev for a precise// definition of what this is actually supposed to return, and// in exactly which circumstances.// check property// checkProperty(String)// don't add a component more than once// register component's recognized features// register component's recognized properties// addComponent(XMLComponent)// class XMLParser/** <code>DOMErrorImpl</code> is an implementation that describes an error. ... */// REVISIT: the implementation of ErrorReporter.//          we probably should not pass XMLParseException/** Exctracts information from XMLParserException) *//** The severity of the error, either <code>SEVERITY_WARNING</code>, ... *//** An implementation specific string describing the error that occured. *//** The location of the error. */// method to get the DOMLocator Object// assuming DOMLocator wants the *expanded*, not the literal, URI of the doc... - neilg// createDOMLocator()/** The related platform dependent exception if any.exception is a reserved ... */// class DOMErrorImpl//if namespaceURI, qualifiedName and doctype are null, returned document is empty with//no document element/** <p>This class implements the DOM Level 3 Core interface DOMImplementationList.</p> ... *///A collection of DOMImplementations/** Construct an empty list of DOMImplementations *//** Returns the indexth item in the collection. ... *//** Returns the number of DOMImplementations in the list. ... *//** Supply one the right implementation, based upon requested features. Each ... *//** A method to request a DOM implementation. ... */// first check whether the CoreDOMImplementation would do// if not try the DOMImplementation/** A method to request a list of DOM implementations that support the ... *//** This Class <code>DOMInputImpl</code> represents a single input source for an XML entity. ... */// 1. it should be possible to do the following// DOMInputImpl extends XMLInputSource implements LSInput// 2. we probably need only the default constructor.  -- el/** Default Constructor, constructs an input source *//** Constructs an input source from just the public and system ... */// DOMInputImpl(String,String,String)/** Constructs an input source from a byte stream. ... */// DOMInputImpl(String,String,String,InputStream,String)/** Constructs an input source from a character stream. ... */// DOMInputImpl(String,String,String,Reader,String)/** Constructs an input source from a String. ... */// DOMInputImpl(String,String,String,String,String)/** An attribute of a language-binding dependent type that represents a ... *//** A string attribute that represents a sequence of 16 bit units (utf-16 ... *//** The character encoding, if known. The encoding must be a string ... *//** The public identifier for this input source. The public identifier is ... *//** The system identifier, a URI reference , for this input source. The ... *//** The base URI to be used (see section 5.1.4 in ) for resolving relative ... *//** If set to true, assume that the input is certified (see section 2.13 ... */// class DOMInputImpl/** <code>DOMLocatorImpl</code> is an implementaion that describes a location (e.g. ... *//** The column number where the error occured, ... *//** The line number where the error occured, ... *//** related data node *//** The URI where the error occured, ... *//** The byte offset into the input source this locator is pointing to or -1 ... *//** The UTF-16, as defined in [Unicode] and Amendment 1 of [ISO/IEC 10646], ... */// DOMLocatorImpl (int lineNumber, int columnNumber, String uri )// DOMLocatorImpl (int lineNumber, int columnNumber, int utf16Offset, String uri )// DOMLocatorImpl (int lineNumber, int columnNumber, int offset, Node errorNode, String uri )/** The line number where the error occured, or -1 if there is no line ... *//** The column number where the error occured, or -1 if there is no column ... *//** The URI where the error occured, or null if there is no URI available. */// class DOMLocatorImpl/** Used to format DOM error messages, using the system locale. ... *//** Formats a message with the specified arguments using the given ... */// format message// error// no message/** Initialize Message Formatter. *//** setLocale to be used by the formatter. ... *//** This class adds implementation for normalizeDocument method. ... */// constants/** Debug normalize document *//** Debug namespace fix up algorithm *//** Debug document handler events *//** prefix added by namespace fixup algorithm should follow a pattern "NS" + index *//** Validation handler represents validator instance. *//** symbol table *//** error handler. may be null. *//** Cached {@link DOMError} impl. ... */// Validation against namespace aware grammar// Update PSVI information in the tree/** The namespace context of this document: stores namespaces in scope *//** Stores all namespace bindings on the current element *//** list of attributes *//** DOM Locator -  for namespace fixup algorithm *//** for setting the PSVI */// attribute value normalization//DTD validator//Check if element content is all "ignorable whitespace"/** Normalizes document. ... */// intialize and reset DOMNormalizer component// reset namespace context// report fatal error on DOM Level 1 nodes// check if we need to fill in PSVI// reset ID table// reset schema validator// don't advance// release resources// otherwise re-throw./** This method acts as if the document was going through a save ... *///REVISIT: well-formness encoding info//do the name check only when version of the document was changed &//application has set the value of well-formed features to true// push namespace context// fix namespaces and remove default attributes// fix namespaces// normalize attribute values// remove default attributes//removeDefault(attr, attributes);// REVISIT: possible solutions to discard default content are://         either we pass some flag to XML Schema validator//         or rely on the PSVI information.// updates global qname// set error node in the dom error wrapper// so if error occurs we can report an error node// call re-validation handler// normalize children// normalized subtree// pop namespace context// remove the comment node//if comment node need not be removed// check comments for invalid xml chracter as per the version// of the document//end-else if comment node is not to be removed.// The list of children #text -> &ent;// and entity has a first child as a text// we should not advance// Don't advance// REVISIT: traverse entity reference and send appropriate calls to the validator// (no normalization should be performed for the children).// convert CDATA to TEXT nodes//don't advance// send characters call for CDATA// issue warning// check well-formedness// If node is a text node, we need to check for one of two//   2) There is no adjacent text node, but node is// If an adjacent text node, merge it with this node// We don't need to check well-formness here since we are not yet// done with this node.// Don't advance;// validator.characters() call and well-formness// Don't send characters or check well-formness in the following cases:// 1. entities is false, next child is entity reference: expand tree first// 2. comments is false, and next child is comment// 3. cdata is false, and next child is cdata//do the well-formed valid PI target name , data check when application has set the value of well-formed feature to true//1.check PI target name//2. check PI data//processing isntruction data may have certain characters//which may not be valid XML character//end case Node.PROCESSING_INSTRUCTION_NODE//end of switch//normalizeNode// check attribute names if the version of the document changed.// ------------------------------------// pick up local namespace declarations// <xsl:stylesheet xmlns:xsl="http://xslt">//   <!-- add the following via DOM//          body is bound to http://xslt//    -->//   <xsl:body xmlns:xsl="http://bound"/>// Record all valid local declarations//checkQName does checking based on the version of the document// namespace attribute// "namespace-declarations" == false; Discard all namespace declaration attributes// Check for invalid namespace declaration://A null value for locale is passed to formatMessage,//which means that the default locale will be used// XML 1.0 Attribute value normalization// value = normalizeAttributeValue(value, attr);//xmlns:prefix// REVISIT: issue error on invalid declarations//          xmlns:foo = ""//removeDefault (attr, attributes);// (localpart == fXmlnsSymbol && prefix == fEmptySymbol)  -- xmlns// empty prefix is always bound ("" or some string)// end-else: valid declaration// end-if: namespace attribute// ---------------------------------------------------------// Fix up namespaces for element: per DOM L3// Need to consider the following cases:// case 1: <xsl:stylesheet xmlns:xsl="http://xsl">// We create another element body bound to the "http://xsl" namespace// as well as namespace attribute rebounding xsl to another namespace.// <xsl:body xmlns:xsl="http://another">// Need to make sure that the new namespace decl value is changed to// "http://xsl"// check if prefix/namespace is correct for current element// "namespace-declarations" == false? Discard all namespace declaration attributes// no namespace declaration == no namespace URI, semantics are to keep prefix// Element has a namespace// The xmlns:prefix=namespace or xmlns="default" was declared at parent.// The binder always stores mapping of empty prefix to "".// the prefix is either undeclared// or// conflict: the prefix is bound to another URI// Element has no namespace//  Error: DOM Level 1 node!// uri=null and no colon (DOM L2 node)// undeclare default namespace declaration (before that element// bound to non-zero length uir), but adding xmlns="" decl// -----------------------------------------// Fix up namespaces for attributes: per DOM L3// check if prefix/namespace is correct the attributes// clone content of the attributes// normalize attribute value// make sure that value is never null.// attribute has namespace !=null/* String localpart = */// ---------------------------------------// skip namespace declarations// REVISIT: can we assume that "uri" is from some symbol// table, and compare by reference? -SG//---------------------------------------// check if value of the attribute is namespace well-formed/* if (removeDefault(attr, attributes)) { ... *///value = normalizeAttributeValue(value, attr);// reset id-attributes// find if for this prefix a URI was already declared// attribute has no prefix (default namespace decl does not apply to attributes)// OR// attribute prefix is not declared// conflict: attribute has a prefix that conficlicts with a binding//           already active in scope// Find if any prefix for attributes namespace URI is available// in the scope// use the prefix that was found (declared previously for this URI// the current prefix is not null and it has no in scope declaration// use this prefix// find a prefix following the pattern "NS" +index (starting at 1)// make sure this prefix is not declared in the current scope.// add declaration for the new prefix// change prefix for this attribute// attribute uri == null// It is an error if document has DOM L1 nodes.// uri=null and no colon// no fix up is needed: default namespace decl does not// removeDefault(attr, attributes);// end loop for attributes/** Adds a namespace attribute or replaces the value of existing namespace ... */// Methods for well-formness checking/** Check if CDATA section is well-formed ... */// version of the document is XML 1.1// we need to check all chracters as per production rules of XML11// check if this is a supplemental character// CDEndInContent// version of the document is XML 1.0// we need to check all chracters as per production rules of XML 1.0// Note:  The key InvalidCharInCDSect from XMLMessages.properties// is being used to obtain the message and DOM error type// "wf-invalid-character" is used.  Also per DOM it is error but// as per XML spec. it is fatal error// end-else fDocument.isXMLVersion()// isCDataWF/** NON-DOM: check for valid XML characters as per the XML version ... *///we need to check all characters as per production rules of XML11// we need to check all characters as per production rules of XML 1.0// isXMLCharWF/** NON-DOM: check if value of the comment is well-formed ... */// invalid: '--' in comment// isCommentWF/** NON-DOM: check if attribute value is well-formed ... *///check each child node of the attribute's value//If the attribute's child is an entity refernce//search for the entity in the docType//of the attribute's ownerDocument//If the entity was not found issue a fatal error// Text node/** Reports a DOM error to the user handler. ... */// REVISIT: the symbols are added too often: start/endElement//          and in the namespaceFixup. Should reduce number of calls to symbol table./* REVISIT: remove this method if DOM does not change spec. ... */// specified attributes should already have a normalized form// since those were added by validator// ensure capacity// skip following xA// REVISIT: this implementation does not store any value in augmentations//          and basically not keeping augs in parallel to attributes map//          untill all attributes are added (default attributes)/** This method adds default declarations ... */// add defaults to the tree// the default attribute was removed by a user and needed to// be added back// REVISIT: the following should also update ID table// default attribute is in the tree// we don't need to do anything since prefix was already fixed// at the namespace fixup time and value must be same value, otherwise// attribute will be treated as specified and we will never reach// this method.// REVISIT: implement//return fAttributes.item(index).ge);// REVISIT: is this desired behaviour?// The values are updated in the case datatype-normalization is turned on// in this case we need to make sure that specified attributes stay specified/** Sets the augmentations of the attribute at the specified index. ... */// XMLDocumentHandler methods/** The start of the document. ... *//** Notifies of the presence of an XMLDecl line in the document. If ... *//** Notifies of the presence of the DOCTYPE line in the document. ... *//** A comment. ... *//** A processing instruction. Processing instructions consist of a ... *//** The start of an element. ... *///REVISIT: instead we should be using augmentations:// to set/retrieve Id attributes// datatype-normalization// NOTE: The specified value MUST be set after we set//       the node value because that turns the "specified"//       flag to "true" which may overwrite a "false"//       value from the attribute list./** An empty element. ... *//** This method notifies the start of a general entity. ... *//** Notifies of the presence of a TextDecl line in an entity. If present, ... *//** This method notifies the end of a general entity. ... *//** Character content. ... *//** Ignorable whitespace. For this method to be called, the document ... *//** The end of an element. ... */// include element default content (if one is available)// NOTE: this is a hack: it is possible that DOM had an empty element// and validator sent default value using characters(), which we don't// implement. Thus, here we attempt to add the default value.// default content could be provided/** The start of a CDATA section. ... *//** The end of a CDATA section. ... *//** The end of the document. ... *//** Sets the document source. *//** Returns the document source. */// DOMNormalizer class/** This class represents an output destination for data. ... *//** Default Constructor *//** An attribute of a language and binding dependent type that represents a ... *//** Depending on the language binding in use, this attribute may not be ... *//** The system identifier, a URI reference [IETF RFC 2396], for this output ... *///DOMOutputImpl/* Copyright 2001, 2002,2004 The Apache Software Foundation. ... *//** DOM Level 3 ... *///A collection of DOMString values/** Construct an empty list of DOMStringListImpl *//** DOM Internal: ... *//** Allows to retrieve <code>XSImplementation</code>, DOM Level 3 Core and LS implementations ... */// if not try the PSVIDOMImplementation// if not try the XSImplementation//Add core DOMImplementations/** This class implements the DOM's NodeList behavior for ... */// Where the search started// Or "*" to mean all-tags-acceptable/** Constructor for Namespace support. *//** Returns the length of the node list. */// Preload all matching elements. (Stops when we run out of subtree!)/** Returns the node at the specified index. */// Tree changed. Do it all from scratch!// In the cache// Not yet seen// Pick up where we left off (Which may be the beginning)// Add nodes up to the one we're looking for// Either what we want, or null (not avail.)// Protected methods (might be overridden by an extending DOM)/** Iterative tree-walker. When you have a Parent link, there's often no ... */// Look down to first child.// Look right to sibling (but not from root!)// Look up and right (but not past root!)// Stop when we return to starting point// Have we found an Element with the right tagName?// ("*" matches anything.)// DOM2: Namespace logic.// Otherwise continue walking the tree// Fell out of tree-walk; no more instances found// nextMatchingElementAfter(int):Node// class DeepNodeListImpl/* WARNING: because java doesn't support multi-inheritance some code is ... *//** Node index. *//** This is the deferred constructor. Only the fNodeIndex is given here. ... */// <init>(DeferredDocumentImpl,int)// DeferredNode methods/** Returns the node index. *//** Synchronizes the data (name and value) for fast nodes. */// no need to sync in the future// fluff data// synchronizeData()/** Synchronizes the node's children with the internal structure. ... */// synchronizeChildren()// class DeferredAttrImpl/** DeferredAttrNSImpl is to AttrNSImpl, what DeferredAttrImpl is to ... */// extract prefix and local part from QName/** This is the deferred constructor. Only the fNodeIndex is given here. All other data, ... */// class DeferredCDATASectionImpl// class DeferredCommentImpl/** <p>This DOMImplementation class is description of a particular ... */// debugging/** To include code for printing the ref count tables. *//** To include code for printing the internal tables. *//** To debug identifiers set to true and recompile. */// protected/** Chunk shift. */// 2^8 = 256/** Chunk size. *//** Chunk mask. *//** Initial chunk size. */// 32// lazy-eval information// To maximize memory consumption the actual semantic of these fields vary// depending on the node type./** Node count. *//** Node types. *//** Node names. *//** Node values. *//** Node parents. *//** Node first children. *//** Node prev siblings. *//** Node namespace URI. *//** Extra data. *//** Identifier count. *//** Identifier name indexes. *//** Identifier element indexes. *//** DOM2: For namespace support in the deferred case. */// Implementation Note: The deferred element and attribute must know how to// interpret the int representing the qname.// <init>(boolean)/** Experimental constructor. */// <init>(boolean,boolean)/** Returns the cached parser.getNamespaces() value. */// internal factory methods/** Creates a document node in the table. *//** Creates a doctype. */// create node// save name, public id, system id// return node index// createDeferredDocumentType(String,String,String):int// create extra data node to store internal subset/** Creates a notation in the table. */// create extra data node// save name, public id, system id, and notation name// in extra data node set baseURI value// createDeferredNotation(String,String,String):int/** Creates an entity in the table. */// set other values in the extra chunk// notation// version  L3// encoding L3// baseURI// createDeferredEntity(String,String,String,String):int// DOM Level 3: setting encoding and version// DOM Level 3: sets element TypeInfo// get first extra data chunk// get second extra data chunk/** Creates an entity reference node in the table. */// createDeferredEntityReference(String):int/** Creates an element node with a URI in the table and type information. ... */// createDeferredElement(String,String,Object):int/** Creates an element node in the table. ... *//** Creates an element node with a URI in the table. */// createDeferredElement(String,String):int/** This method is used by the DOMParser to create attributes. ... */// create attribute// set attribute's parent to element// get element's last attribute// add link from new attribute to last attribute// add link from element to new last attribute// store type information/** Creates an attribute in the table. *//** Creates an attribute with a URI in the table. */// createDeferredAttribute(String,String,String,boolean):int/** Creates an element definition in the table. */// createDeferredElementDefinition(String):int/** Creates a text node in the table. */// use extra to store ignorableWhitespace info// createDeferredTextNode(String,boolean):int/** Creates a CDATA section node in the table. */// createDeferredCDATASection(String):int/** Creates a processing instruction node in the table. */// createDeferredProcessingInstruction(String,String):int/** Creates a comment node in the table. */// createDeferredComment(String):int/** Creates a clone of the specified node. */// clone immediate node// clone and attach children// return cloned node index// cloneNode(int,boolean):int/** Appends a child to the specified parent in the table. */// append parent index// set previous sibling of new child// update parent's last child// appendChild(int,int)/** Adds an attribute node to the specified element. */// see if this attribute is already here// remove old attribute// patch links// remove connections to siblings// add new attribute// setAttributeNode(int,int):int/** Sets type of attribute *//** Inserts a child before the specified node in the table. */// insertBefore(int,int,int):int/** Sets the last child of the parentIndex to childIndex. */// setAsLastChild(int,int)/** Returns the parent node of the given node. ... */// getParentNode(int):int/** Returns the last child of the given node. *//** Returns the last child of the given node. ... */// getLastChild(int,boolean):int/** Returns the prev sibling of the given node. ... */// getPrevSibling(int,boolean):int/** Returns the <i>real</i> prev sibling of the given node, ... *//** Returns the <i>real</i> prev sibling of the given node. ... */// getReadPrevSibling(int,boolean):int/** Returns the index of the element definition in the table ... */// find doctype// find element definition// lookupElementDefinition(String):int/** Instantiates the requested node object. */// is there anything to do?// get node type// create new node// Standard DOM node types// NOTE: Document fragments can never be "fast".//       The parser will never ask to create a document//       fragment during the parse. Document fragments//       are used by the application *after* the parse.// case Node.DOCUMENT_FRAGMENT_NODE: { break; }// this node is never "fast"// save the doctype node// check to see if this element needs to be// registered for its ID attributes// register ID// continue if there are more IDs for// this element// non-standard DOM node types// switch node type// store and return// createNodeObject(int):Node/** Returns the name of the given node. */// getNodeNameString(int):String/** Returns the name of the given node. ... */// getNodeName(int,boolean):String/** Returns the real value of the given node. */// getNodeValueString(int):String/** Returns the real value of the given node. ... */// append data that is stored in fNodeValue// REVISIT: for text nodes it works differently than for CDATA//          nodes.// go in reverse order: find last child, then// its previous sibling, etc// add to the buffer in the correct order.// find if any other data stored in children// getNodeValueString(int,boolean):String/** Returns the value of the given node. *//** Clears the type info that is stored in the fNodeValue array ... *//** Returns the value of the given node. ... */// getNodeValue(int,boolean):String/** Returns the extra info of the given node. ... */// getNodeExtra(int,boolean):int/** Returns the type of the given node. *//** Returns the type of the given node. ... */// getNodeType(int):int/** Returns the attribute value of the given name. *//** Returns the URI of the given node. *//** Returns the URI of the given node. ... */// getNodeURI(int,int):String// identifier maintenance/** Registers an identifier name with a specified element node. */// initialize arrays// resize arrays// store identifier// putIdentifier(String,int)// DEBUG/** Prints out the tables. */// separator// ref count// This assumes that the document is small// print()/** Synchronizes the node's data. */// fluff up enough nodes to fill identifiers hash// REVISIT: There has to be a more efficient way of//          doing this. But keep in mind that the//          tree can have been altered and re-ordered//          before all of the element nodes with ID//          attributes have been registered. For now//          this is reasonable and safe. -Ac// ignore if it's already been registered// find path from this element to the root// Traverse path (backwards), fluffing the elements// along the way. When this loop finishes, "place"// will contain the reference to the element node// we're interested in. -Ac// register the element// see if there are more IDs on this element// if identifiers/* when we have elements with IDs this method is being recursively ... */// we don't want to generate any event for this so turn them off// create children and link them as siblings// save doctype and document type// set mutation events flag back to its original value// create children and link them as siblings or simply store the value// as a String if all we have is one piece of text// firstChild = firstNode// synchronizeChildren(AttrImpl,int):void// synchronizeChildren(ParentNode,int):void// utility methods/** Ensures that the internal tables are large enough. */// create buffers// resize the tables// Done - there's sufficient capacity// create new chunks// ensureCapacity(int,int)/** Creates a node of the specified type. */// ensure tables are large enough// initialize node// return node index number// createNode(short):int/** Performs a binary search for a target value in an array of ... */// look for target value// is this the one we're looking for?// is this point higher or lower?// while// not found// binarySearch(int[],int,int,int):int// Private methods/** Creates the specified chunk in the given array of chunks. *//** Sets the specified value in the given of data at the chunk and index. ... */// Re-create chunk if it was deleted./** Returns the specified value in the given data at the chunk and index. */// type information/** Clears the specified value in the given data at the chunk and index. ... *//** This version of putIdentifier is needed to avoid fluffing ... */// create Map// save ID and its associated element// putIdentifier0(String,Element)/** Prints the ID array. */// print(int[],int,int,int,int)// Classes/** A simple integer vector. *//** Data. *//** Size. *//** Returns the length of this vector. *//** Returns the element at the specified index. *//** Appends an element to the end of the vector. *//** Clears the vector. *//** Makes sure that there is enough storage. */// ensureCapacity(int)// class IntVector// class DeferredDocumentImpl/** This class represents a Document Type <em>declaraction</em> in ... */// public and system ids/** Synchronizes the entities, notations, and elements. */// no need to synchronize again// create new node maps// fill node maps// internal, external, and unparsed entities// notations// element definitions// elements// NOTE: Should never get here! -Ac// set entities and notations read_only per DOM spec// class DeferredDocumentTypeImpl/** NON-DOM CLASS: Describe one of the Elements (and its associated ... *//** Synchronizes the default attribute values. */// attributes are now synced// create attributes node map// Default attributes dangle as children of the element// definition "node" in the internal fast table.// class DeferredElementDefinitionImpl/** Elements represent most of the "markup" and structure of the ... *//** This is the deferred constructor. Only the fNodeIndex is given here. All ... */// <init>(DocumentImpl,int)// class DeferredElementImpl/** DeferredElementNSImpl is to ElementNSImpl, what DeferredElementImpl is to ... */// extract local part from QName// Take special care of schema defaulted attributes. Calling the// non-namespace aware setAttributeNode() method could overwrite// another attribute with the same local name./** Entity nodes hold the reference data for an XML Entity -- either ... *//** Synchronize the entity data. This is special because of the way ... */// no need to sychronize again// get the node data// get the entity data// encoding and version DOM L3// baseURI, actualEncoding DOM L3/** Synchronize the children. */// class DeferredEntityImpl/** EntityReference models the XML &entityname; syntax, when used for ... */// get children// class DeferredEntityReferenceImpl/** An interface for deferred node object. ... */// interface DeferredNode/** Notations are how the Document Type Description (DTD) records hints ... *//** Synchronizes the data. This is special because of the way ... */// class DeferredNotationImpl/** Processing Instructions (PIs) permit documents to carry ... *//** Synchronizes the data. */// class DeferredProcessingInstructionImpl/** Text nodes hold the non-markup, non-Entity content of ... *//** Synchronizes the underlying data. */// no need for future synchronizations// get initial text value// NOTE: We used to normalize adjacent text node values here.//       This code has moved to the DeferredDocumentImpl//       getNodeValueString() method. -Ac// ignorable whitespace// class DeferredTextImpl/** DocumentFragment is a "lightweight" or "minimal" Document ... *//** Override default behavior to call normalize() on this Node's ... */// class DocumentFragmentImpl/** Iterators */// REVISIT: Should this be transient? -Ac/** Ranges *//** Table for event listeners registered to this document nodes. *//** Bypass mutation events firing. */// DocumentTraversal methods/** NON-DOM extension: ... *//** Create and return a NodeIterator. The NodeIterator is ... *//** Create and return a TreeWalker. ... */// Not DOM Level 2. Support DocumentTraversal methods./** This is not called by the developer client. The ... */// DocumentRange methods/** Not a client function. Called by Range.detach(), ... */// notify ranges/** A method to be called when a text node has been split, ... */// DocumentEvent methods/** Introduced in DOM Level 2. Optional. <p> ... *//** Sets whether the DOM implementation generates mutation events ... *//** Store event listener registered on a given node ... */// stop firing events when there isn't any listener// turn mutation events on/** Retreive event listener registered on a given node */// EventTarget support (public and internal)/* NON-DOM INTERNAL: Class LEntry is just a struct used to represent ... *//** NON-DOM INTERNAL: Constructor for Listener list Entry ... */// LEntry/** Introduced in DOM Level 2. <p> Register an event listener with this ... */// We can't dispatch to blank type-name, and of course we need// a listener to dispatch to// Each listener may be registered only once per type per phase.// Simplest way to code that is to zap the previous entry, if any.// Record active listener// addEventListener(NodeImpl,String,EventListener,boolean) :void/** Introduced in DOM Level 2. <p> Deregister an event listener previously ... */// If this couldn't be a valid listener registration, ignore request// Note that addListener has previously ensured that// each listener may be registered only once per type per phase.// count-down is OK for deletions!// Storage management: Discard empty listener lists// Remove active listener// Found it; no need to loop farther.// removeEventListener(NodeImpl,String,EventListener,boolean) :void// Can't use anyone else's implementation, since there's no public// API for setting the event's processing-state fields.// VALIDATE -- must have been initialized at least once, must have// a non-null non-blank name.// If nobody is listening for this event, discard immediately// INITIALIZE THE EVENT'S DISPATCH STATUS// (Note that Event objects are reusable in our implementation;// that doesn't seem to be explicitly guaranteed in the DOM, but// I believe it is the intent.)// Capture pre-event parentage chain, not including target;// use pre-event-dispatch ancestors even if event handlers mutate// document and change the target's context.// Note that this is parents ONLY; events do not// cross the Attr/Element "blood/brain barrier".// DOMAttrModified. which looks like an exception,// is issued to the Element rather than the Attr// and causes a _second_ DOMSubtreeModified in the Element's// tree.// CAPTURING_PHASE:// Ancestors are scanned, root to target, for// Capturing listeners.// Someone set the flag. Phase ends.// Handle all capturing listeners on this node// call listeners in the order in which they got registered// All exceptions are ignored.// Both AT_TARGET and BUBBLE use non-capturing listeners.// AT_TARGET PHASE: Event is dispatched to NON-CAPTURING listeners// on the target node. Note that capturing listeners on the target// node are _not_ invoked, even during the capture phase.// BUBBLING_PHASE: Ancestors are scanned, target to root, for// non-capturing listeners. If the event's preventBubbling flag// has been set before processing of a node commences, we// instead immediately advance to the default phase.// Note that not all events bubble.// Handle all bubbling listeners on this node// call listeners in the order in which they got// registered// DEFAULT PHASE: Some DOMs have default behaviors bound to specific// nodes. If this DOM does, and if the event's preventDefault flag has// not been set, we now return to the target node and process its// default handler for this event, if any.// No specific phase value defined, since this is DOM-internal// evt.eventPhase = Event.DEFAULT_PHASE;// evt.currentTarget = node;// DO_DEFAULT_OPERATION// dispatchEvent(NodeImpl,Event) :boolean/** NON-DOM INTERNAL: DOMNodeInsertedIntoDocument and ...RemovedFrom... ... */// dispatchEventToSubtree(NodeImpl,Node,Event) :void/** Dispatches event to the target node's descendents recursively ... */// ***** Recursive implementation. This is excessively expensive,// and should be replaced in conjunction with optimization// mentioned above./** NON-DOM INTERNAL: Return object for getEnclosingAttr. Carries ... *//** NON-DOM INTERNAL: Convenience wrapper for calling ... */// dispatchAggregateEvents(NodeImpl,EnclosingAttr) :void/** NON-DOM INTERNAL: Generate the "aggregated" post-mutation events ... */// We have to send DOMAttrModified.// DOMSubtreeModified gets sent to the lowest common root of a// set of changes.// "This event is dispatched after all other events caused by the// mutation have been fired."// If we're within an Attr, DStM gets sent to the Attr// and to its owningElement. Otherwise we dispatch it// locally.// dispatchAggregateEvents(NodeImpl, AttrImpl,String) :void/** NON-DOM INTERNAL: Pre-mutation context check, in ... */// MUTATION PREPROCESSING AND PRE-EVENTS:// If we're within the scope of an Attr and DOMAttrModified// was requested, we need to preserve its previous value for// that event.// Any other parent means we're not in an Attr// saveEnclosingAttr(NodeImpl) :void// MUTATION POST-EVENTS:// Subroutine: Transmit DOMAttrModified and DOMSubtreeModified,// if required. (Common to most kinds of mutation)// End mutation postprocessing/** A method to be called when a character data node has been replaced *///now that we have finished replacing data, we need to perform the same actions//that are required after a character data node has been modified//send the value of false for replace parameter so that mutation//events if appropriate will be initiated// "Local" events (non-aggregated)// New child is told it was inserted, and where// If within the Document, tell the subtree it's been added// to the Doc.// Might have been orphan Attr// Last non-null ancestor// In this context, ancestry includes// walking back from Attr to Element// Subroutine: Transmit DOMAttrModified and DOMSubtreeModified// (Common to most kinds of mutation)// notify the range of insertions// notify iterators// mutation events// Child is told that it is about to be removed// If within Document, child's subtree is informed that it's// losing that status// End mutation preprocessing/** A method to be called when character data is about to be replaced in the tree. */// We can't use the standard dispatchAggregate, since it assumes// that the Attr is still attached to an owner. This code is// similar but dispatches to the previous owner, "element".// If we have to send DOMAttrModified (determined earlier),// do so.// We can hand off to process DOMSubtreeModified, though.// Note that only the Element needs to be informed; the// Attr's subtree has not been changed by this operation.// REVISIT: To be implemented!!!// Convert Maps to Hashtables, Lists to Vectors//convert Hashtables back to HashMaps and Vectors to Lists// class DocumentImpl/** Document type name. *//** Entities. *//** Notations. */// NON-DOM/** Elements. */// DOM2: support public ID.// DOM2: support system ID.// DOM2: support internal subset.// Doctype number.   Doc types which have no owner may be assigned// a number, on demand, for ordering purposes for compareDocumentPosition/** Factory method for creating a document type node. */// <init>(CoreDocumentImpl,String)// DOM2: methods./** NON-DOM. <p> ... *//** Returns the document type name *//** Clones the node. */// NamedNodeMaps must be cloned explicitly, to avoid sharing them.//test if the following string attributes are equal: publicId,//systemId, internalSubset.//test if NamedNodeMaps entities and notations are equal//end isEqualNode// If the doctype has a document owner, get the node number// relative to the owner doc// The doctype is disconnected and not associated with any document.// Assign the doctype a number relative to the implementation.// DocumentType methods/** Name of this document type. If we loaded from a DTD, this should ... *//** Access the collection of general Entities, both external and ... *//** Access the collection of Notations defined in the DTD.  A ... *//** NON-DOM: Subclassed to flip the entities' and notations' readonly switch ... */// set read-only property/** NON-DOM: Access the collection of ElementDefinitions. ... */// Convert the HashMap to Hashtable//convert the Hashtable back to HashMap// class DocumentTypeImpl/** Element definition name. *//** Default attributes. *//** Returns the element definition name *//** Replicate this object. */// NamedNodeMap must be explicitly replicated to avoid sharing/** Query the attributes defined on this Element. ... */// getAttributes():NamedNodeMap// class ElementDefinitionImpl/* Copyright 1999-2002,2004 The Apache Software Foundation. ... *//** Element name. *//** Attributes. */// synchronizeData will initialize attributes// for ElementNSImpl// Note: This only deals with part of the pb. CoreDocumentImpl// does all the work./** Returns the element name *//** Retrieve all the Attributes as a set. Note that this API is inherited ... *//** Return a duplicate copy of this Element. Note that its children ... */// Replicate NamedNodeMap rather than sharing it.// Absolute base URI is computed according to// XML Base (http://www.w3.org/TR/xmlbase/#granularity)// 1. The base URI specified by an xml:base attribute on the element,// if one exists// This may be a relative URI.// Make any parentURI into a URI object to use with the URI(URI, String) constructor// This should never happen: parent should have checked the URI and returned null if invalid.// 2.the base URI of the element's parent element within the// document or external entity, if one exists// 3. the base URI of the document entity or external entity// containing the element// ownerNode serves as a parent or as document//base URI of parent element is not null//return valid absolute base URI//getBaseURI// Element methods/** Look up a single Attribute by name. Returns the Attribute's ... */// getAttribute(String):String/** Look up a single Attribute by name. Returns the Attribute Node, ... */// getAttributeNode(String):Attr/** Returns a NodeList of all descendent nodes (children, ... *//** Returns the name of the Element. Note that Element.nodeName() is ... *//** In "normal form" (as read from a source file), there will never be two ... */// Otherwise it might be an Element, which is handled recursively// We must also normalize all of the attributes// changed() will have occurred when the removeChild() was done,// so does not have to be reissued./** Remove the named attribute from this Element. If the removed ... */// removeAttribute(String)/** Remove the specified attribute/value pair. If the removed ... */// removeAttributeNode(Attr):Attr/** Add a new name/value pair, or replace the value of the existing ... */// setAttribute(String,String)/** Add a new attribute/value pair, or replace the value of the ... */// This will throw INUSE if necessary// setAttributeNode(Attr):Attr// getAttributeNS(String,String):String// REVISIT: this is not efficient, we are creating twice the same//          strings for prefix and localName.// Note: we can't just change the name of the attribute. Names have to be in sorted// order in the attributes vector because a binary search is used to locate them.// If the new name has a different prefix, the list may become unsorted.// Maybe it would be better to resort the list, but the simplest// fix seems to be to remove the old attribute and re-insert it.// -- Norman.Walsh@Sun.COM, 2 Feb 2007// This case may happen if user calls://      elem.setAttribute("name", "value");//      elem.setAttributeNS(null, "name", "value");// This case is not defined by the DOM spec, we choose// to create a new attribute in this case and remove an old one from the tree// note this might cause events to be propagated or user data to be lost// setAttributeNS(String,String,String)// removeAttributeNS(String,String)/** Retrieves an Attr node by local name and namespace URI. ... */// getAttributeNodeNS(String,String):Attr// setAttributeNodeNS(Attr):Attr/** NON-DOM: sets attribute node for this element *//** NON-DOM: get inded of an attribute *//** Introduced in DOM Level 2. */// DOM Level 1 Node/** DOM Level 3: register the given attribute node as an ID attribute *///if namespace uri is empty string, set it to 'null'/** NON-DOM: Subclassed to flip the attributes' readonly switch as well. ... */// support for DOM Level 3 renameNode method// @param el The element from which to take the attributes/** Setup the default attributes. *//** Reconcile default attributes. *//** Get the default attributes. */// getDefaultAttributes()// class ElementImpl/** ElementNSImpl inherits from ElementImpl and adds namespace support. ... *//** DOM3: type information *///convert the empty string to 'null'//NAMESPACE_ERR://1. if the qualified name is 'null' it is malformed.//2. or if the qualifiedName is null and the namespaceURI is different from null,// We dont need to check for namespaceURI != null, if qualified name is null throw DOMException.//there is a prefix//1. if the qualifiedName has a prefix and the namespaceURI is null,//2. or if the qualifiedName has a prefix that is "xml" and the namespaceURI//is different from " http://www.w3.org/XML/1998/namespace"// for DeferredElementImpl// remove children first// set owner document//DOM2: Namespace methods.// Absolute base URI is computed according to XML Base (http://www.w3.org/TR/xmlbase/#granularity)// 1.  the base URI specified by an xml:base attribute on the element, if one exists// Start from the base URI of the parent, or if this node has no parent, the owner node.// Make any parentURI into a URI object to use with the URI(URI, String) constructor.//2.the base URI of the element's parent element within the document or external entity,//if one exists//3. the base URI of the document entity or external entity containing the element/** NON-DOM: setting type used by the DOM parser ... *//** Entity name. *//** Public identifier. *//** System identifier. *//** Encoding *//** Input Encoding *//** Version *//** Notation name. *//** base uri *//** Returns the entity name *//** Sets the node value. ... *//** The namespace prefix of this node ... *//** Clone node. */// Entity methods/** The public identifier associated with the entity. If not specified, ... */// getPublicId():String/** The system identifier associated with the entity. If not specified, ... */// getSystemId():String/** DOM Level 3 WD - experimental ... */// getVersion():String/** Unparsed entities -- which contain non-XML data -- have a ... */// getNotationName():String/** DOM Level 2: The public identifier associated with the entity. If not specified, ... */// setPublicId(String)// setEncoding (String)/** An attribute specifying the encoding used for this entity at the tiome ... *//** NON-DOM, used to set the input encoding. */// setVersion (String)/** DOM Level 2: The system identifier associated with the entity. If not ... */// setSystemId(String)/** DOM Level 2: Unparsed entities -- which contain non-XML data -- have a ... */// setNotationName(String)/** NON-DOM: set base uri */// class EntityImpl/** Name of Entity referenced *//** Base URI *//** Entity changes. *///protected int entityChanges = -1;/** Enable synchronize. *///protected boolean fEnableSynchronize = false;/** Returns the name of the entity referenced *//** NON-DOM: compute string representation of the entity reference. ... */// invalid to have other types of nodes in attr value/** EntityReference's children are a reflection of those defined in the ... */// No Entity by this name, stop here.// If entity's definition exists, clone its kids/** NON-DOM: sets the node and its children value. ... *//** Enable the synchronize method which may do cloning. This method is enabled ... */// The Xerces parser invokes callbacks for startEnityReference// the parsed value of the entity EACH TIME, so it is actually// easier to create the nodes through the callbacks rather than// clone the Entity.// class EntityReferenceImpl/** Internal class LCount is used to track the number of ... *//** @xerces.internal */// class LCount/* Copyright (c) 2018, Oracle and/or its affiliates. All rights reserved. *//** NamedNodeMaps represent collections of Nodes that can be accessed ... *//** Nodes. */// the node this map belongs to// NamedNodeMap methods/** Report how many nodes are currently stored in this NamedNodeMap. ... *//** Retrieve an item from the map by 0-based index. ... *//** Retrieve a node by name. ... */// getNamedItem(String):Node// getNamedItemNS(String,String):Node/** Adds a node using its nodeName attribute. ... *//** Adds a node using its namespaceURI and localName. ... *//** Removes a node specified by name. ... */// removeNamedItem(String):Node// cloneMap():NamedNodeMapImpl// Package methods/** Internal subroutine to allow read-only Nodes to make their contained ... *//** Internal subroutine returns this NodeNameMap's (shallow) readOnly value. */// getReadOnly()/** Subroutine: Locate the named item, or the point at which said item ... */// Binary search// Name found// not-found has to be encoded.// findNamePoint(String):int/** This findNamePoint is for DOM Level 2 Namespaces. */// This is a linear search through the same nodes ArrayList.// The ArrayList is sorted on the DOM Level 1 nodename.// The DOM Level 2 NS keys are namespaceURI and Localname,// so we must linear search thru it.// In addition, to get this to work with nodes without any namespace// (namespaceURI and localNames are both null) we then use the nodeName// as a secondary key.// compare 2 nodes in the map.  If a precedes b, return true, otherwise// return false/** NON-DOM: Remove attribute at specified index *//** NON-DOM: copy content of this map into the specified ArrayList ... *//** NON-DOM remove all elements from this map */// cast to Vector is required// If the write fails for some reason ensure// that we restore the original object.// class NamedNodeMapImpl/** NodeImpl provides the basic structure of a DOM tree. It is never used ... */// TreePosition Constants.// Taken from DOM L3 Node interface./** The node precedes the reference node. *//** The node follows the reference node. *//** The node is an ancestor of the reference node. *//** The node is a descendant of the reference node. *//** The two nodes have an equivalent position. This is the case of two ... *//** The two nodes are the same. Two nodes that are the same have an ... *//** The two nodes are disconnected, they do not have any common ancestor. ... */// DocumentPosition// public/** Element definition node type. */// links// typically the parent but not always!// data// as long as we do not have any owner, ownerNode is our ownerDocument/** the name of this node. *//** Returns the node value. ... */// overridden in some subclasses// Default behavior is to do nothing, overridden in some subclasses/** Adds a child node to the end of the list of children for this node. ... */// if we get here we have an error in our program we may as well// be vocal about it, so that people can take appropriate action.// By default we make all clones readwrite,// this is overriden in readonly subclasses/** Find the Document that this Node belongs to (the document in ... */// if we have an owner simply forward the request// otherwise ownerNode is our ownerDocument/** same as above but returns internal type and this one is not overridden ... */// if we have an owner we rely on it to have it right/** Returns the node number *//** Obtain the DOM-tree parent of this node, or null if it is not ... */// overriden by ChildNode// default behavior, overriden in ChildNode/** Return the collection of attributes associated with this node, ... */// overridden in ElementImpl/** Returns whether this node (if it is an element) has any attributes. ... *//** The first child of this Node, or null if none. ... */// DOM2: methods, getters, setters/** Puts all <code>Text</code> nodes in the full depth of the sub-tree ... *//* by default we do not have any children, ... */// EventTarget support// simply forward to Document// Public DOM Level 3 methods/** The absolute base URI of this node or <code>null</code> if undefined. ... *//** Compares a node with this node with regard to their position in the ... */// Questions of clarification for this method - to be answered by the// DOM WG.   Current assumptions listed - LM// 1. How do ENTITY nodes compare?//    Current assumption: TREE_POSITION_DISCONNECTED, as ENTITY nodes//    aren't really 'in the tree'// 2. How do NOTATION nodes compare?//    Current assumption: TREE_POSITION_DISCONNECTED, as NOTATION nodes// 3. Are TREE_POSITION_ANCESTOR and TREE_POSITION_DESCENDANT//    only relevant for nodes that are "part of the document tree"?//     <outer>//         <inner  myattr="true"/>//     </outer>//    Is the element node "outer" considered an ancestor of "myattr"?//    Current assumption: No.// 4. How do children of ATTRIBUTE nodes compare (with eachother, or//    with children of other attribute nodes with the same element)//    Current assumption: Children of ATTRIBUTE nodes are treated as if//    they they are the attribute node itself, unless the 2 nodes//    are both children of the same attribute.// 5. How does an ENTITY_REFERENCE node compare with it's children?//    Given the DOM, it should precede its children as an ancestor.//    Given "document order",  does it represent the same position?//    Current assumption: An ENTITY_REFERENCE node is an ancestor of its//    children.// 6. How do children of a DocumentFragment compare?//    Current assumption: If both nodes are part of the same document//    fragment, there are compared as if they were part of a document.// If the nodes are the same...// If either node is of type ENTITY or NOTATION, compare as disconnected// Find the ancestor of each node, and the distance each node is from// its ancestor.// During this traversal, look for ancestor/descendent relationships// between the 2 nodes in question.// We do this now, so that we get this info correct for attribute nodes// and their children.// The other node is an ancestor of this one.// The other node is a descendent of the reference node.// if the ancestor is an attribute, get owning element.// we are now interested in the owner to determine position.// Before proceeding, we should check if both ancestor nodes turned// out to be attributes for the same element// Now, find the ancestor of the owning element, if the original// ancestor was an attribute// Note:  the following 2 loops are quite close to the ones above.// May want to common them up.  LM.// The other node is an ancestor of the owning element// The other node is a descendent of the reference// node's element// thisAncestor and otherAncestor must be the same at this point,// otherwise, we are not in the same tree or document fragment// Go up the parent chain of the deeper node, until we find a node// with the same depth as the shallower node// Check if the node we have reached is in fact "otherNode". This can// happen in the case of attributes.  In this case, otherNode// "precedes" this.// Check if the node we have reached is in fact "thisNode".  This can// "follows" this.// We now have nodes at the same depth in the tree.  Find a common// ancestor.// At this point, thisNode and otherNode are direct children of// the common ancestor.// See whether thisNode or otherNode is the leftmost// REVISIT:  shouldn't get here.   Should probably throw an// If the nodes are the same, no flags should be set// check if other is from a different implementation// other comes from a different implementation// get the respective Document owners.// If from different documents, we know they are disconnected.// and have an implementation dependent order// Special casing for ENTITY, NOTATION, DOCTYPE and ATTRIBUTES// LM:  should rewrite this.// the nodes are of different types// the nodes are of the same type.  Find order.// Now, find the ancestor of the element// otherwise, the original nodes are disconnected/** This attribute returns the text content of this node and its ... */// overriden in some subclasses// internal method taking a StringBuffer in parameter/** Returns whether this node is the same node as the given one. ... */// we do not use any wrapper so the answer is obvious/** DOM Level 3: Experimental ... *//** DOM Level 3 - Experimental: ... */// REVISIT: When Namespaces 1.1 comes out this may not be true// Prefix can't be bound to null namespace// to flip out children// looking for default namespace// non default namespace// at this point we are dealing with DOM Level 2 nodes only// REVISIT: if no prefix is available is it null or empty string, or//          could be both?// DOM Level 2 nodes/** Tests whether two nodes are equal. ... */// in theory nodeName can't be null but better be careful// who knows what other implementations may be doing?...// we don't have any alternate node, either this node does the job// or we don't have anything that does/** NON-DOM: PR-DOM-Level-1-19980818 mentions readonly nodes in conjunction ... *//** NON-DOM: Returns true if this node is read-only. This is a ... */// getReadOnly():boolean/** NON-DOM: As an alternative to subclassing the DOM, this implementation ... *//** NON-DOM: ... */// we do not actually store this information on every node, we only// have a global indicator on the Document. Doing otherwise cost us too// much for little gain./** For non-child nodes, the node which "points" to this node. ... *//* Flags setters and getters */// inconsistent name to avoid clash with public method on TextImpl// See if flag should propagate to parent./** NON-DOM method for debugging convenience. */// synchronize data// class NodeImpl/** DefaultNodeIterator implements a NodeIterator, which iterates a ... *//** The DocumentImpl which created this iterator, so it can be detached. *//** The root. *//** The whatToShow mask. *//** The NodeFilter reference. *//** If detach is called, the fDetach flag is true, otherwise flase. */// Iterator state - current node and direction.// Note: The current node and direction are sufficient to implement// the desired behaviour of the current pointer being _between_// two nodes. The fCurrentNode is actually the last node returned,// and the// direction is whether the pointer is in front or behind this node.// (usually akin to whether the node was returned via nextNode())// (eg fForward = true) or previousNode() (eg fForward = false).// Note also, if removing a Node, the fCurrentNode// can be placed on a Node which would not pass filters./** The last Node returned. *//** The direction of the iterator on the fCurrentNode. ... *//** When TRUE, the children of entites references are returned in the iterator. *//** Public constructor */// Implementation Note: Note that the iterator looks at whatToShow// and filter values at each call, and therefore one _could_ add// setters for these values and alter them while iterating!/** Return the whatToShow value *//** Return the filter *//** Return whether children entity references are included in the iterator. *//** Return the next Node in the Iterator. The node is the next node in ... */// if root is null there is no next node.// the next node has not been accepted.// if last direction is not forward, repeat node.//System.out.println("nextNode():!fForward:"+fCurrentNode.getNodeName());// else get the next node via depth-first//REVIST: should direction be set forward before null check?// nothing in the list. return null.// does node pass the filters and whatToShow?// if so, then the node is the current node.// while (!accepted) {// no nodes, or no accepted nodes./** Return the previous Node in the Iterator. The node is the next node in ... */// if the root is null, or the current node is null, return null.//repeat last node.// get previous node in backwards depth first order.// we are going backwards// if the new previous node is null, we're at head or past the root,// so return null.// check if node passes filters and whatToShow.// if accepted, update the current node, and return it.// there are no nodes?/** The node is accepted if it passes the whatToShow and the filter. *//** Return node, if matches or any parent if matches. */// Additions and removals in the underlying data structure may occur// before any iterations, and in this case the reference_node is null.// check if the removed node is an _ancestor_ of the// reference node/** The method nextNode(Node, boolean) returns the next node ... */// only check children if we visit children.//if hasChildren, return 1st child.//if Root has no kids// if hasSibling, return sibling// return parent's 1st sibling.// while (parent != null && parent != fRoot) {// end of list, return null/** The method previousNode(Node) returns the previous node ... */// if we're at the root, return null.// get sibling//if 1st sibling, return parent// if sibling has children, keep getting last child of child./** Fix-up the iterator on a remove. Called by DOM or otherwise, ... */// Implementation note: Fix-up means setting the current node properly// after a remove.// if (!fForward)// normal case: there _are_ nodes following this in the iterator.// the last node in the iterator is to be removed,// so we set the current node to be the previous one./** This class is used, via a pool managed on CoreDocumentImpl, in ParentNode to ... *//** Cached node list length. *//** Last requested node index. *//** Last requested node. *//** Owner of this cache *//** Pointer to the next object on the list, ... *//** Returns the notation name */// Notation methods/** The Public Identifier for this Notation. If no public identifier ... *//** The System Identifier for this Notation. If no system identifier ... *//** NON-DOM: The Public Identifier for this Notation. If no public ... *//** NON-DOM: The System Identifier for this Notation. If no system ... */// class NotationImpl/* Copyright 2002-2004 The Apache Software Foundation. ... *//** Attribute namespace implementation; stores PSVI attribute items. ... *//** Construct an attribute node. *//** attribute declaration *//** type of attribute, simpleType *//** If this attribute was explicitly given a ... *//** schema normalized value property *//** schema actual value *//** schema actual value type *//** actual value types if the value is a list *//** member type definition against which attribute was validated *//** validation attempted: none, partial, full *//** validity: valid, invalid, unknown *//** error codes *//** validation context: could be QName or XPath expression */// AttributePSVI methods/** [schema default] ... *//** [schema normalized value] ... *//** [schema specified] ... *//** Determines the extent to which the document has been validated ... *//** Determine the validity of the node with respect ... *//** A list of error codes generated from validation attempts. ... */// This is the only information we can provide in a pipeline./** An item isomorphic to the type definition used to validate this element. ... *//** If and only if that type definition is a simple type definition ... *//** An item isomorphic to the attribute declaration used to validate ... *//** Copy PSVI properties from another psvi item. ... *//* (non-Javadoc) ... */// REVISIT: Forbid serialization of PSVI DOM until// we support object serialization of grammars -- mrglavas/** Our own document implementation, which knows how to create an element ... *//** Create a document. *//** Create an element with PSVI information *//** Create an attribute with PSVI information *//** The configuration used when <code>Document.normalizeDocument</code> is ... */// class PSVIDocumentImpl/** Element namespace implementation; stores PSVI element items. ... *//** Construct an element node. *//** element declaration *//** type of element, could be xsi:type *//** true if clause 3.2 of Element Locally Valid (Element) (3.3.4) ... *//** false if the element value was provided by the schema; true otherwise. *//** http://www.w3.org/TR/xmlschema-1/#e-notation *//** member type definition against which element was validated *//** the schema information property */// ElementPSVI methods/** [nil] ... *//** [notation] ... *//** An item isomorphic to the element declaration used to validate ... *//** [schema information] ... *//** ParentNode inherits from ChildNode and adds the capability of having child ... *//** Owner document. *//** First child. */// transients/** NodeList cache *//** No public constructor; only subclasses of ParentNode should be ... */// invalidate cache for children NodeList// Then, if deep, clone the kids too./* setting the owner document of self, after it's children makes the ... */// update cached length if we have any// if we happen to insert just before the cached node, update// the cache to the new node to match the cached index// otherwise just invalidate the cache// internalInsertBefore(Node,Node,boolean):Node// if the removed node is the cached node// move the cache to its (soon former) previous sibling// internalRemoveChild(Node,boolean):Node// internal method returning whether to take the given node's text content// get rid of any existing children// create a Text node to hold the given content/** Count the immediate children of this node.  Use to implement ... */// get rid of trivial cases// otherwise request a cache object// is the cached length invalid ?// start from the cached node if we have one// nodeListGetLength():int/** Return the Nth immediate child of this node, or null if the index is ... */// get rid of trivial case// short way// long way// release cache if reaching last child or first child// we can keep using the cache until it is actually reused// fNodeListCache will be nulled by the pool (document) if that// happens.// fNodeListCache = null;// otherwise update it// nodeListItem(int):Node/** Create a NodeList to access children that is use by subclass elements ... */// getChildNodesUnoptimized():NodeList// there are many ways to do this test, and there isn't any way// better than another. Performance may vary greatly depending on// the implementations involved. This one should work fine for us.// checkNormalizationAfterRemove(Node)// hardset synchildren - so we don't try to sync - it does not make any// sense to try to synchildren when we just deserialize object./* a class to store some user data along with its handler */// class ParentNode/** Returns the target */// ProcessingInstruction methods/** A PI's "target" states what processor channel the PI's data ... */// getTarget():String/** A PI's data content tells the processor what we actually want it ... */// getData():String/** Change the data content of this PI. ... */// Hand off to setNodeValue for code-reuse reasons (mutation// events, readonly protection, synchronizing, etc.)// setData(String)// class ProcessingInstructionImpl/** The RangeImpl class implements the org.w3c.dom.range.Range interface. ... */// Was the Node inserted from the Range or the Document/** The constructor. Clients must use DocumentRange.createRange(), ... */// If one boundary-point of a Range is set to have a root container// other// than the current one for the Range, the Range should be collapsed to// the new position.// The start position of a Range should never be after the end position.// REVIST: what to do if it IS null?// WRONG_DOCUMENT_ERR: Raised if the two Ranges are not in the same Document or DocumentFragment.// The DOM Spec outlines four cases that need to be tested// to compare two range boundary points://   case 1: same container//   case 2: Child C of container A is ancestor of B//   case 3: Child C of container B is ancestor of A//   case 4: preorder traversal of context tree.// case 1: same container// case 2: Child C of container A is ancestor of B// This can be quickly tested by walking the parent chain of B// case 3: Child C of container B is ancestor of A// This can be quickly tested by walking the parent chain of A// case 4: preorder traversal of context tree.// Instead of literally walking the context tree in pre-order,// we use relative node depth walking which is usually faster//throw exception?//boolean MULTIPLE_MODE = false;//holds number of kids before insertion// split text node: results is 3 nodes..//update ranges after the insertion//endContainer is the new Node created//endContainer was not a text Node.//endOffset + = number_of_children_added// signal other Ranges to update their start/end containers/offsets// ! TEXT_NODE//need to remember number of kids//update fEndOffset. ex:<body><p/></body>. Range(start;end): body,0; body,1// insert <h1>: <body></h1><p/></body>. Range(start;end): body,0; body,2//update fEndOffset if not 0//fEndContainer!=fStartContainer//fStartContainer is not a TextNode//find a first node within a range, specified by fStartOffset//look into all kids of the Range// Mutation functions/** Signal other Ranges to update their start/end ... *//** Fix up this Range if another Range has split a Text Node ... *//** This function inserts text into a Node and invokes ... *//** This function is called from DOM. ... *//** This function is called from the DOM. ... */// Offsets are adjusted in Range.insertNode/** This function is called within Range ... *//** This function must be called by the DOM _BEFORE_ ... *///startContainer or endContainer or both is/are the ancestor(s) of the Node to be deleted// Utility functions.// parameters for traverseContents(int)//REVIST: use boolean, since there are only 2 now.../** This is the master routine invoked to visit the nodes ... */// REVIST: Throw exception?//Check for a detached range./* Traversal is accomplished by first determining the ... */// case 2: Child C of start container is ancestor of end container// This can be quickly tested by walking the parent chain of// end container// case 4: There is a common ancestor container.  Find the// ancestor siblings that are children of that container.// ascend the ancestor hierarchy until we have a common parent./** Visits the nodes selected by this range when we know ... */// If selection is empty, just return the fragment// Text node needs special case handling// get the substring// set the original text node to its new value// Nothing is partially selected, so collapse to start point// Copy nodes between the start/end offsets.// Collapse to just before the endAncestor, which// is partially selected.// Because we already traversed it..../** Traverses the "right boundary" of this range and ... */// should never occur/** Traverses the "left boundary" of this range and ... *//** Utility method for traversing a single node. ... *//** Utility method for traversing a single node when ... */// TBD: This should be a HIERARCHY_REQUEST_ERR/** Utility method for traversing a text node that we know ... */// If the node contains text, ensure that the// offset of the range is <= to the length of the text// Since the node is not text, ensure that the offset// is valid with respect to the number of child nodes/** Given a node, calculate what the Range's root container ... *//** Returns true IFF the given node can serve as a container ... *//** Finds the root container for the given node and determines ... *//** Returns true IFF the given node can be contained by ... *//** is a an ancestor of b ? *//** what is the index of the child in the parent *//** Utility method to retrieve a child node by index.  This method ... */// This case is an important convenience for// traverseRightBoundary()// Private Data members/** NON-DOM: resets node and sets specified values for the current node ... *//** NON-DOM: Set whether this Text is ignorable whitespace. */// setIgnorableWhitespace(boolean)/** DOM L3 Core CR - Experimental ... */// REVISIT: is this implemenation correct?//concatenate text of logically adjacent text nodes to the left of this node in the tree//clear buffer//concatenate text of logically adjacent text nodes to the right of this node in the tree/** internal method taking a StringBuffer in parameter and inserts the ... *//** Concatenates the text of all logically-adjacent text nodes to the ... */// boolean to indicate whether node is a child of an entity reference// if the parent node is an entity reference node, must// check nodes to the right of the parent entity reference node for logically adjacent// text nodes/** Concatenates the text of all logically-adjacent text nodes to the left of ... */// check nodes to the left of the parent entity reference node for logically adjacent/** Replaces the text of the current node and all logically-adjacent text ... *///if the content is null// check if node in the tree//replace the text node//check logically-adjacent text nodes//If the logically-adjacent next node can be removed//remove it. A logically adjacent node can be removed if//it is a Text or CDATASection node or an EntityReference with//Text and CDATA only children./** If any EntityReference to be removed has descendants that are not ... *///If the previous sibling was entityreference//check if its content is replaceable//if the entity reference has no children//return false//The replacement text of the entity reference should//be either only text,cadatsections or replaceable entity//reference nodes or the last child should be neither of these//If the EntityReference child contains//only text, or non-text or ends with a//non-text node.//If the last child was replaceable and others are not//Text or CDataSection or replaceable EntityRef nodes//return false.//If the previous sibling was text or cdatasection move to next//If the previous sibling was anything but text or//cdatasection or an entity reference, stop search and//return true//If the first child was replaceable text and next//children are not, then return false//If the next sibling was anything but text or/** Check if an EntityReference node has Text Only child nodes ... *//** NON-DOM: Returns whether this Text is ignorable whitespace. */// isIgnorableWhitespace():boolean// Text methods/** Break a text node into two sibling nodes. (Note that if the current node ... */// split text into two separate nodes// insert new text node// splitText(int):Text/** NON-DOM (used by DOMParser): Reset data for the node. *//** NON-DOM (used by DOMParser: Sets data to empty string. ... */// class TextImpl/** This class implements the TreeWalker interface. ... *//** The current Node. *//** The root Node. */// Implementation Note: No state is kept except the data above// (fWhatToShow, fNodeFilter, fCurrentNode, fRoot) such that// setters could be created for these data values and the// implementation will still work./** Return the NodeFilter *//** Return the current Node. *//** Return the parent Node from the current node, ... *//** Return the first child Node from the current node, ... *//** Return the last child Node from the current node, ... *//** Return the previous sibling Node from the current node, ... *//** Return the next sibling Node from the current node, ... *//** Return the previous Node from the current node, ... */// get the lastChild of result.// if there is a lastChild which passes filters return it.// otherwise return the previous sibling.// otherwise return null./** Return the next Node from the current node, ... */// end , return null/** Internal function. ... *///if (accept == NodeFilter.SKIP_NODE) // and REJECT too.//if (accept == NodeFilter.REJECT_NODE)// getNextSibling(Node node) {// getPreviousSibling(Node node) {// What to show has failed. See above excerpt from spec.// Equivalent to FILTER_SKIP./** EventImpl is an implementation of the basic "generic" DOM Level 2 Event ... *//** The DOM doesn't deal with constructors, so instead we have an ... *//** Causes exit from in-progress event dispatch before the next ... *//** Prevents any default processing built into the target node from ... */// REVISIT: The DOM Level 2 PR has a bug: the init method should let this// attribute be specified. Since it doesn't we have to give write access.// NON-DOM CONSTANTS: Storage efficiency, avoid risk of typos./** <code>attrChange</code> indicates the type of change which triggered ... *//** Initialize a mutation event, or overwrite the event's current ... *//* Copyright (c) 2003, 2016, Oracle and/or its affiliates. All rights reserved. *//* Copyright 2005 The Apache Software Foundation. ... */// Schema Types:// Schema features//stax properties//DOM properties/** If true, ignore DOCTYPE declaration as if it wasn't present at all. ... */// sax features/** SAX feature prefix ("http://xml.org/sax/features/"). *//** Namespace prefixes feature ("namespace-prefixes"). *//** String interning feature ("string-interning"). *//** Validation feature ("validation"). *//** External general entities feature ("external-general-entities "). *//** External parameter entities feature ("external-parameter-entities "). *//** Lexical handler parameter entities feature ("lexical-handler/parameter-entities"). *//** Is standalone feature ("is-standalone"). *//** Resolve DTD URIs feature ("resolve-dtd-uris"). *//** Use Attributes2 feature ("use-attributes2"). *//** Use Locator2 feature ("use-locator2"). *//** Use EntityResolver2 feature ("use-entity-resolver2"). *//** Unicode normalization checking feature ("unicode-normalization-checking"). *//** xmlns URIs feature ("xmlns-uris"). *//** XML 1.1 feature ("xml-1.1"). *//** Allow unparsed entity and notation declaration events to be sent after the end DTD event ("allow-dtd-events-after-endDTD") */// sax properties/** SAX property prefix ("http://xml.org/sax/properties/"). *//** Declaration handler property ("declaration-handler"). *//** Lexical handler property ("lexical-handler"). *//** DOM node property ("dom-node"). *//** XML string property ("xml-string"). *//** Document XML version property ("document-xml-version"). */// JAXP properties/** JAXP property prefix ("http://java.sun.com/xml/jaxp/properties/"). *//** JAXP schemaSource property: when used internally may include DTD sources (DOM) *//** JAXP schemaSource language: when used internally may include DTD namespace (DOM) *//** JAXP Standard property prefix ("http://javax.xml.XMLConstants/property/"). *//** FEATURE_SECURE_PROCESSING (FSP) is true by default *//** JDK property to allow printing out information from the limit analyzer */// DOM features/** Comments feature ("include-comments"). *//** Create cdata nodes feature ("create-cdata-nodes"). *//** Feature id: load as infoset. */// Constants: DOM Level 3 feature ids// REVISIT: this feature seems to have no effect for Xerces// DOM Level 3 features defined in Core:// Load and Save// DOM Properties// XSModel// xerces features/** Xerces features prefix ("http://apache.org/xml/features/"). *//** Schema validation feature ("validation/schema"). *//** Expose schema normalized values *//** Send schema default value via characters() *//** Schema full constraint checking ("validation/schema-full-checking"). *//** Augment Post-Schema-Validation-Infoset *//** Dynamic validation feature ("validation/dynamic"). *//** Warn on duplicate attribute declaration feature ("validation/warn-on-duplicate-attdef"). *//** Warn on undeclared element feature ("validation/warn-on-undeclared-elemdef"). *//** Warn on duplicate entity declaration feature ("warn-on-duplicate-entitydef"). *//** Allow Java encoding names feature ("allow-java-encodings"). *//** Disallow DOCTYPE declaration feature ("disallow-doctype-decl"). *//** Continue after fatal error feature ("continue-after-fatal-error"). *//** Load dtd grammar when nonvalidating feature ("nonvalidating/load-dtd-grammar"). *//** Load external dtd when nonvalidating feature ("nonvalidating/load-external-dtd"). *//** Defer node expansion feature ("dom/defer-node-expansion"). *//** Create entity reference nodes feature ("dom/create-entity-ref-nodes"). *//** Include ignorable whitespace feature ("dom/include-ignorable-whitespace"). *//** Default attribute values feature ("validation/default-attribute-values"). *//** Validate content models feature ("validation/validate-content-models"). *//** Validate datatypes feature ("validation/validate-datatypes"). *//** Balance syntax trees feature ("validation/balance-syntax-trees"). *//** Notify character references feature (scanner/notify-char-refs"). *//** Notify built-in (&amp;amp;, etc.) references feature (scanner/notify-builtin-refs"). *//** Standard URI conformant feature ("standard-uri-conformant"). *//** Generate synthetic annotations feature ("generate-synthetic-annotations"). *//** Validate annotations feature ("validate-annotations"). *//** Honour all schemaLocations feature ("honour-all-schemaLocations"). *//** Namespace growth feature ("namespace-growth"). *//** Tolerate duplicates feature ("internal/tolerate-duplicates"). *//** XInclude processing feature ("xinclude"). *//** XInclude fixup base URIs feature ("xinclude/fixup-base-uris"). *//** XInclude fixup language feature ("xinclude/fixup-language"). *//** Internal feature. When set to true the schema validator will only use ... *//** Internal performance related feature: ... *//** Feature to make XML Processor XInclude Aware *//** Ignore xsi:schemaLocation and xsi:noNamespaceSchemaLocation. *//** When true, the schema processor will change characters events ... */// xerces properties/** Xerces properties prefix ("http://apache.org/xml/properties/"). *//** Current element node property ("dom/current-element-node"). *//** Document class name property ("dom/document-class-name"). *//** Symbol table property ("internal/symbol-table"). *//** Error reporter property ("internal/error-reporter"). *//** Error handler property ("internal/error-handler"). *//** XInclude handler property ("internal/xinclude-handler"). *//** XPointer handler property ("internal/xpointer-handler"). *//** Entity manager property ("internal/entity-manager"). *//** Input buffer size property ("input-buffer-size"). *//** Security manager property ("security-manager"). *//** Locale property ("locale"). *//** property identifier: security manager. *//** Grammar pool property ("internal/grammar-pool"). *//** Datatype validator factory ("internal/datatype-validator-factory"). *//** Document scanner property ("internal/document-scanner"). *//** DTD scanner property ("internal/dtd-scanner"). *//** DTD processor property ("internal/dtd-processor"). *//** Validator property ("internal/validator"). *//** Validator property ("internal/validator/dtd"). *//** Validator property ("internal/validator/schema"). *//** No namespace schema location property ("schema/external-schemaLocation"). *//** Schema location property ("schema/external-noNamespaceSchemaLocation"). *//** Namespace binder property ("internal/namespace-binder"). *//** Namespace context property ("internal/namespace-context"). *//** Validation manager property ("internal/validation-manager"). *//** XPointer Schema property ("xpointer-schema"). *//** Schema element declaration for the root element in a document ("internal/validation/schema/dv-factory"). */// general constants/** Element PSVI is stored in augmentations using string "ELEMENT_PSVI" *//** Attribute PSVI is stored in augmentations using string "ATTRIBUTE_PSVI" *//** Boolean indicating whether an attribute is declared in the DTD is stored ... *//** {@link org.w3c.dom.TypeInfo} associated with current element/attribute ... *//** Whether an attribute is an id or not is stored in augmentations ... */// XML version constants/** Boolean indicating whether an entity referenced in the document has ... *//** Boolean indicating whether a character is a probable white space ... *//** Boolean indicating if this entity is the last opened entity. ... */// DOM related constants// Constant to enable Schema 1.1 support// private/** SAX features. *//** SAX properties. *//** Xerces features. *///DEFER_NODE_EXPANSION_FEATURE,//GRAMMAR_ACCESS_FEATURE,/** Xerces properties. *//** Empty enumeration. *//** This class cannot be instantiated. */// sax/** Returns an enumeration of the SAX features. */// getSAXFeatures():Enumeration/** Returns an enumeration of the SAX properties. */// getSAXProperties():Enumeration// xerces/** Returns an enumeration of the Xerces features. */// getXercesFeatures():Enumeration/** Returns an enumeration of the Xerces properties. */// getXercesProperties():Enumeration/** An array enumeration. ... *//** Array. *//** Index. *//** Constructs an array enumeration. */// <init>(Object[])// Enumeration methods/** Tests if this enumeration contains more elements. ... */// hasMoreElement():boolean/** Returns the next element of this enumeration. ... */// nextElement():Object// class ArrayEnumeration// MAIN/** Prints all of the constants to standard output. */// main(String[])/** Prints a list of features/properties. */// print(String,String,Object[])/** <p>This interface extends <code>XMLEntityResolver</code> providing ... */// ExternalSubsetResolver methods/** <p>Locates an external subset for documents which do not explicitly ... */// interface ExternalSubsetResolver/** This class manages different properties related to Stax specification and its implementation. ... *//** Creates a new instance of PropertyManager *//** Initialize this object with the properties taken from passed PropertyManager object. *//** Important point: ... *///spec default values//zephyr (implementation) specific properties which can be set by the application.//interning is always done//recognizing java encoding names by default//in stax mode, namespace declarations are not added as attributes//default value of escaping characters is 'true'/** public void reset(){ ... *///add internal stax property/** It's possible for users to set a security manager through the interface. ... *///check if the property is managed by security manager//check if the property is managed by security property manager//fall back to the existing property manager//PropertyManager/** DOM Revalidation handler adds additional functionality to XMLDocumentHandler ... */// interface DOMRevalidationHandler/* The Apache Software License, Version 1.1 ... *//** This class defines the version number of the parser. ... *//** Version string. ... *//* Print out the version information. ... */// getVersion():  String/** Prints out the version number to System.out. This is needed ... */// class Version/** This class is responsible for scanning the declarations found ... *//** String buffer. *//** Constructor for he use of non-XMLComponentManagers. */// XMLDTDScanner methods// XMLScanner methods// NOTE:  this is a carbon copy of the code in XML11DocumentScannerImpl;// we need to override these methods in both places.  Ah for// multiple inheritance...// This needs to be refactored!!!  - NG/** Scans public ID literal. ... */// skip leading whitespace// REVISIT:  it could really only be \n or 0x20; all else is normalized, no?  - neilg// take the first whitespace as a space and skip the others// if we finished on a space let's trim it/** Normalize whitespace in an XMLString converting all whitespace ... *//** Checks whether this string would be unchanged by normalization. ... */// returns true if the given character is not// valid with respect to the version of// XML understood by this scanner.// isInvalid(int):  boolean// valid or may not be used outside a character reference// with respect to the version of XML understood by this scanner.// isInvalidLiteral(int):  boolean// returns true if the given character is// a valid nameChar with respect to the version of// isValidNameChar(int):  boolean// a valid nameStartChar with respect to the version of// isValidNameStartChar(int):  boolean// a valid NCName character with respect to the version of// isValidNCName(int):  boolean// a valid high surrogate for a nameStartChar// with respect to the version of XML understood// by this scanner.// isValidNameStartHighSurrogate(int):  boolean// note that, according to 4.3.4 of the XML 1.1 spec, XML 1.1// documents may invoke 1.0 entities; thus either version decl (or none!)// is allowed to appear in this context// versionSupported(String):  boolean// returns the error message key for unsupported// versions of XML with respect to the version of// getVersionNotSupportedKey: String// class XML11DTDScannerImpl/** This class is responsible for scanning XML document structure ... */// overridden methods// XMLDocumentFragmentImpl methods/** Scans element content. ... */// happens when there is the character reference &#13;// but scanContent doesn't do entity expansions...// is this *really* necessary???  - NG/* if (fDocumentHandler != null && content.length > 0) { ... */// remember where we are in case we get an endEntity before we// could flush the buffer out - this happens when we're parsing an// entity which ends with a ]// We work on a single character basis to handle cases such as:// ']]]>' which we might otherwise miss./* if (fDocumentHandler != null && fStringBuffer.length != 0) { ... */// scanContent():int/** Scans an attribute value and normalizes whitespace converting all ... */// quote/** Both the non-normalized and normalized attribute values are equal. * *///WFC & VC: Entity Declared// note that none of these characters should ever get through// XML11EntityScanner.  Not sure why// this check was originally necessary.  - NG// scanAttributeValue()// NOTE:  this is a carbon copy of the code in XML11DTDScannerImpl;// we need to override these methods in both places.// this needs to be refactored!!!  - NG// REVISIT:  none of these except \n and 0x20 should make it past the entity scanner// class XML11DocumentScannerImpl/** Implements the entity scanner methods in ... */// XMLEntityScanner methods/** Returns the next character on the input. ... */// load more characters, if needed// peek at character// return peeked character// peekChar():int// scan character// return character that was scanned// scanChar():int/** Returns a string matching the NMTOKEN production appearing immediately ... */// scan nmtoken// bad luck we have to resize our buffer// return nmtoken// scanNmtoken():String/** Returns a string matching the Name production appearing immediately ... */// scan name// return name// scanName():String/** Returns a string matching the NCName production appearing immediately ... */// scanNCName():String/** Scans a qualified name from the input, setting the fields of the ... */// scan qualified name//check prefix before further read//check the result: prefix//check the result: localpart// scanQName(QName):boolean/** Scans a range of parsed character data, setting the fields of the ... */// normalize newlines/** * NEWLINE NORMALIZATION ** */// inner loop, scanning for content// In internal entities control characters are allowed to appear unescaped.// return next character// REVISIT: Does this need to be updated to fix the//          #x0D ^#x0A newline normalization problem? -Ac// scanContent(XMLString):int/** Scans a range of attribute value data, setting the fields of the ... */// scan literal value// NOTE: We don't want to accidentally signal the//       end of the literal if we're expanding an//       entity appearing in the literal. -Ac// scanLiteral(int,XMLString):int/** Scans a range of character data up to the specicied delimiter, ... */// something must be wrong with the input:  e.g., file ends  an unterminated comment// iterate over buffer looking for delimiter// looks like we just hit the delimiter// In external entities control characters cannot appear// as literals so do not skip over them.// Control characters are allowed to appear as literals// in internal entities.// return true if string was skipped// scanData(String,XMLString)/** Skips a character appearing immediately on the input. ... */// skip character// handle newlines// character was not skipped// skipChar(int):boolean/** Skips space characters appearing immediately on the input. ... *///we are doing this check only in skipSpace() because it is called by//fMiscDispatcher and we want the parser to exit gracefully when document//is well-formed.//it is possible that end of document is reached and//fCurrentEntity becomes null//nothing was read so entity changed  'false' should be returned.// skip spaces// External --  Match: S + 0x85 + 0x2028, and perform end of line normalization// the load change the position to be 1,// need to restore it when entity not changed//If this is a general entity, spaces within a start element should be counted// Internal -- Match: S (only)// no spaces were found// skipSpaces():boolean/** Skips the specified string appearing immediately on the input. ... */// skip string// REVISIT: Can a string to be skipped cross an//          entity boundary? -Ac// skipString(String):boolean// class XML11EntityScanner/** The scanner acts as the source for the document ... *//** If is true, the dtd validator is no longer in the pipeline ... *//** If validating parser, make sure we report an error in the ... *//** DTD validator *//** Saw spaces after element name or between attributes. ... *//** The scanner is responsible for removing DTD validator ... *//** Scans a start element. This method will handle the binding of ... */// Note: namespace processing is on by default// REVISIT - [Q] Why do we need this local variable? -- mrglavas// push element stack// spaces// end tag?// Second chance. Check if this character is a high// surrogate of a valid name start character.// REVISIT: is it required? forbit xmlns prefix for element// bind the element// assign uri to the element// make sure that object in the element stack is updated as well// making sure that the object in the element stack is updated too.// bind attributes (xmlns are already bound bellow)// REVISIT: try removing the first "if" and see if it is faster.//decrease the markup depth..// check that this element was opened in the same entity/* if (fBindNamespaces) { ... *///pop the element off the stack..// scanStartElement():boolean/** Scans the name of an element in a start or empty tag. ... */// Must skip spaces here because the DTD scanner// would consume them at the end of the external subset.// scanStartElementName()/** Scans the remainder of a start or empty tag after the element name. ... */// scanStartElementAfterName()/** Scans an attribute. ... *//** Determine whether this is a namespace declaration that will be subject ... */// record namespace declarations if any.// get the internalized value of this attribute// 1. "xmlns" can't be bound to any namespace// 2. the namespace for "xmlns" can't be bound to any prefix// 3. "xml" can't be bound to any other namespace than it's own// 4. the namespace for "xml" can't be bound to any other prefix// Declare prefix in context. Removing the association between a prefix and a// namespace name is permitted in XML 1.1, so if the uri value is the empty string,// the prefix is being unbound. -- mrglavas// bind namespace attribute to a namespace// attempt to bind attribute// scanAttribute(XMLAttributes)/** Scans an end element. ... */// pop context// Take advantage of the fact that next string _should_ be "fElementQName.rawName",//In scanners most of the time is consumed on checks done for XML characters, we can// optimize on it and avoid the checks done for endElement,//we will also avoid symbol table lookup - neeraj.bajaj@sun.com// this should work both for namespace processing true or false...//REVISIT: if the string is not the same as expected.. we need to do better error handling..//We can skip this for now... In any case if the string doesn't match -- document is not well formed.// end//we have increased the depth for two markup "<" characters// scanEndElement():int/** Creates a content Driver. */// createContentDriver():Driver/** return the next state on the input ... *///since namespace context should still be valid when the parser is at the end element state therefore//we pop the context only when next() has been called after the end element state was encountered. - nb./** Driver to handle content scanning. *//** Scan for root element hook. This method is a hook for ... */// scanRootElementHook():boolean/** Re-configures pipeline by removing the DTD validator ... */// re-configure pipeline// reconfigurePipeline()/** This class performs namespace binding on the startElement and endElement ... */// returns true iff the given prefix is bound to "" *and*// this is disallowed by the version of XML namespaces in use.// prefixBoundToNullURI(String, String):  boolean// class XML11NamespaceBinder/* Copyright (c) 2003, 2017, Oracle and/or its affiliates. All rights reserved. */// scanner states/** Scanner state: end of input. *//** Scanner state: text declaration. *//** Scanner state: markup declaration. */// recognized features and properties/** Recognized features. *//** Feature defaults. *//** Recognized properties. *//** Property defaults. *//** Debug scanner state. */// handlers/** DTD handler. *//** DTD content model handler. *//** Scanner state. *//** Standalone. *//** Seen external DTD. *//** Seen external parameter entity. *//** Start DTD called. *//** Default attribute *//** Stack of content operators (either '|' or ',') in children ... *//** Size of content stack. *//** Parameter entity stack to check well-formedness. *//** Parameter entity stack to report start/end entity calls. *//** Number of opened parameter entities. *//** Markup depth. *//** Number of opened external entities. *//** Number of opened include sections. */// temporary variables/** Array of 3 strings. *//** String. *//** Literal text. *//** Enumeration values. *//** Enumeration values count. *//** Ignore conditional section buffer. *//** Object contains grammar information for a non-validaing parser. *//** Sets the input source. ... */// no system id was available// setInputSource(XMLInputSource)/** Scans the external subset of the document. ... */// next state is markup decls regardless of whether there// is a TextDecl or not// keep dispatching "events"// return that there is more to scan// scanDTDExternalSubset(boolean):boolean/** Scans the internal subset of the document. ... */// reset entity scanner//xxx:stax getText() is supposed to return only DTD internal subset//shouldn't we record position here before we go ahead ??//System.out.println("state"+fScannerState);// set starting state for internal subset// we're done, set starting state for external subset// we're done scanning DTD.// scanDTDInternalSubset(boolean,boolean,boolean):boolean/** Skip the DTD if javax.xml.stream.supportDTD is false. ... */// XMLComponent methods/** reset ... */// reset(XMLComponentManager)// this is made for something like XMLDTDLoader--XMLComponentManager-free operation...//Revisit : Create new grammar until we implement GrammarPool./** Returns a list of feature identifiers that are recognized by ... */// getRecognizedFeatures():String[]/** Returns a list of property identifiers that are recognized by ... */// getRecognizedProperties():String[]/** Returns the default state for a feature, or null if this ... */// getFeatureDefault(String):Boolean/** Returns the default state for a property, or null if this ... */// getPropertyDefault(String):Object// XMLDTDSource methods/** setDTDHandler ... *//** getDTDHandler ... */// getDTDHandler():  XMLDTDHandler// XMLDTDContentModelSource methods/** setDTDContentModelHandler ... */// setDTDContentModelHandler/** getDTDContentModelHandler ... */// XMLEntityHandler methods/** This method notifies of the start of an entity. The DTD has the ... */// startEntity(String,XMLResourceIdentifier,String)/** This method notifies the end of an entity. The DTD has the pseudo-name ... */// if there is no data after the doctype// Handle end of PE// check well-formedness of the enity// throw fatalError if this entity was incomplete and// was a freestanding decl// Proper nesting of parameter entities is a Validity Constraint// and must not be enforced when validation is off// end DTD//XML (Document Entity) is the last opened entity, however//if for some reason DTD Scanner receives this callback//there is something wrong (probably invalid XML), throw exception.//or//For standalone DTD loader, it might be the last opened entity//and if this is the last opened entity and fMarkUpDepth != 0 or//fIncludeSectDepth != 0 or fExtEntityDepth != 0 throw Exception// endEntity(String)// helper methods/** Sets the scanner state. ... *///System.out.println();// setScannerState(int)/** Returns the scanner state name. */// getScannerStateName(int):String/** start a parameter entity dealing with the textdecl if there is any ... */// if we actually got a new entity and it's external// parse text decl if there is any/** Dispatch an XML "event". ... */// scan XMLDecl// NOTE: special case where document starts with a PI//       whose name starts with "xml" (e.g. "xmlfoo")// standard Text declaration// pseudo-attribute values// scanTextDecl(boolean):boolean/** Scans a processing data. This is needed to handle the situation ... *///Venu REVISIT//      super.scanPIData(target, data);// scanPIData(String)/** Scans a comment. ... */// scanComment()/** Scans an element declaration ... */// element name// content model// Mixed content model// children content// scanElementDecl()/** scan Mixed content model ... */// The following check must be done in a single call (as opposed to one// for ')' and then one for '*') to guarantee that callbacks are// properly nested. We do not want to trigger endEntity too early in// case we cross the boundary of an entity between the two characters.// we are done/** scan children content model ... */// push current op on stack and reset it// restore previous op// The following checks must be done in a single call (as// opposed to one for ')' and then one for '?', '*', and '+')// to guarantee that callbacks are properly nested. We do not// want to trigger endEntity too early in case we cross the// boundary of an entity between the two characters.// no occurrence specified/** Scans an attlist declaration ... */// no space, is it the end yet?// yes, stop here// definitions// type// default decl// REVISIT: Should we do anything with the non-normalized//          default attribute value? -Ac// yes--according to bug 5073.  - neilg// Determine whether the default value to be passed should be null.// REVISIT: should probably check whether fLiteral.ch is null instead. LM.// scanAttlistDecl()/** Scans an attribute type definition ... *//* Watchout: the order here is important: when a string happens to ... */// open paren// Enumeration//                       "OPEN_PAREN_REQUIRED_BEFORE_ENUMERATION_IN_ATTRDECL",// scanAttType():String/** Scans an attribute default declaration ... */// AttValue// ScanAttDefaultDecl/** Scans an entity declaration ... */// <!ENTITY x "x">// <!ENTITY % x "x">// <!ENTITY %%x; "x"> is legal// <!ENTITY[^ ]...> or <!ENTITY[^ %]...>// <!ENTITY% ...>// external id// NDATA// check whether there was space before NDATA// internal entity// since we need it's value anyway, let's snag it so it doesn't get corrupted// if a new load takes place before we store the entity values// skip possible trailing space// register entity and make callback//Venu Revisit : why false has been removed in expandSYstem// scanEntityDecl()/** Scans an entity value. ... */// store at which depth of entities we start// REVISIT: [Q] Why do we skip spaces here? -Ac// REVISIT: This will make returning the non-//          normalized value harder. -Ac// if it's not the delimiting quote or if it is but from a// different entity than the one this literal started from,// simply append the character to our buffer// scanEntityValue(XMLString,XMLString):void/** Scans a notation declaration ... */// notation name//Venu Revisit wby false has been removed.//fResourceIdentifier.setValues(publicId, systemId, baseSystemId, XMLEntityManager.expandSystemId(systemId, baseSystemId, false));// scanNotationDecl()/** Scans a conditional section. If it's a section to ignore the whole ... */// just stop there and go back to the main loop// These tests are split so that we handle cases like// '<<![' and '<!<![' which we might otherwise miss.// The same thing goes for ']<![' and '<]]>', etc./* empty loop body */// scanConditionalSect()//System.out.println("scanDecls"+fScannerState);// we're done with this decl// end of conditional section?// decreaseMarkupDepth();// this is the end of the internal subset, let's stop here// simply skip/** Skip separator. This is typically just whitespace but it can also be one ... *//* Element Children Content Stack *//* Parameter Entity Stack */// report end/start calls/** pop the stack *//** look at the top of the stack *//* Utility method */// reset state related data// set starting state//new SymbolTable());// class XMLDTDScannerImpl/** This class is responsible for scanning the structure and content ... *//** External subset resolver. * *///XXX this should be divided into more states./** Scanner state: start of markup. *//** Scanner state: content. *//** Scanner state: processing instruction. *//** Scanner state: DOCTYPE. *//** Scanner state: XML Declaration *//** Scanner state: root element. *//** Scanner state: comment. *//** Scanner state: reference. */// <book type="hard"> reading attribute name 'type'// <book type="hard"> //reading attribute value./** Scanner state: trailing misc. USED BY DOCUMENT_SCANNER_IMPL *///protected static final int SCANNER_STATE_TRAILING_MISC = 32;/** Scanner state: terminated. *//** Scanner state: CDATA section. *//** Scanner state: Text declaration. *///<book type="hard">foo</book>//<book type="hard">foo</book> reading </book>/** Feature identifier: notify built-in refereces. *//** Feature identifier: standard uri conformant *//** access external dtd: file protocol ... */// private static final char [] endTag = {'<','/'};/** Debug driver. *//** Debug content driver scanning. *//** Debug driver next */// protected data/** Document handler. *//** Entity Storage *//** Entity stack. *///is the element empty//track if we are reading attributes, this is usefule while//there is a callback/** SubScanner state: inside scanContent method. *//** has external dtd */// element information/** Current element. *//** Element stack. */// other info/** Document system identifier. ... *///xxx do we need to create an extra XMLString object... look for using fTempString for collecting all the data values// features/** Notify built-in references. *///STAX related properties//defaultValues./** Xerces Feature: Disallow doctype declaration. *//** comma-delimited list of protocols that are allowed for the purpose ... *//** standard uri conformant (strict uri). ... */// drivers/** Active driver. *//** Content driver. *//** Element QName. *//** Attribute QName. *//** CHANGED: Using XMLAttributesIteratorImpl instead of XMLAttributesImpl. This class ... *//** Making the buffer accesible to derived class -- String buffer. *//** stores character data. *//** Making the buffer accesible to derived class -- stores PI data *//** Single character array. */// New members//skip element algorithm//create a elemnet array of length equal to ELEMENT_ARRAY_LENGTH//pointer location where last element was skipped//2D array to store pointer info/** Reusable Augmentations. */// XMLDocumentScanner methods// fDocumentSystemId = fEntityManager.expandSystemId(inputSource.getSystemId());/** Scans a document. ... *///System.out.println(" get Document Handler in NSDocumentHandler " + fDocumentHandler );//fDocumentHandler.startDocument(fEntityManager.getEntityScanner(),fEntityManager.getEntityScanner().getVersion(),fNamespaceContext,null);// not able to get//System.out.println(" in scann element");//fDocumentHandler.startElement(getElementQName(),fAttributes,null);//check if getCharacterData() is the right function to retrieve ignorableWhitespace information.//System.out.println("in the space");//fDocumentHandler.ignorableWhitespace(getCharacterData(), null);//entity reference callback are given in startEntity//all DTD related callbacks are handled in DTDScanner.//1. Stax doesn't define DTD states as it does for XML Document.//therefore we don't need to take care of anything here. So Just break;//xxx: check if CDATA values comes from getCharacterData() function//System.out.println(" in CDATA of the XMLNSDocumentScannerImpl");//do not give callback here.//this callback is given in scanEndElement function.//fDocumentHandler.endElement(getElementQName(),null);//System.out.println("here in before calling next");//System.out.println("here in after calling next");// scanDocument(boolean):boolean/** Resets the component. The component can query the component manager ... */// other settings// fDocumentSystemId = null;//fAttributes.setNamespaces(fNamespaces);//attribute//xxx: external entities are supported in Xerces// it would be good to define feature for this case// setup Driver// JAXP 1.5 features and properties//fEntityManager.test();//fElementStack2.clear();//fReplaceEntityReferences = true;//fSupportExternalEntities = true;//if fIsCoalesce is set to true, set the value of fReplaceEntityReferences to true,//if fIsCoalesce is set to false, take the value of fReplaceEntityReferences as set by application//we dont need to do this -- nb.//setScannerState(SCANNER_STATE_CONTENT);//setDriver(fContentDriver);// initialize vars//skipping algorithm/** Sets the state of a feature. This method is called by the component ... */// Xerces properties/** Sets the value of a property. This method is called by the component ... *///JAXP 1.5 properties// XMLDocumentSource methods/** setDocumentHandler ... *///System.out.println(" In Set DOCUMENT HANDLER" + fDocumentHandler + " scanner =" + this);/** Returns the document handler */// keep track of this entity before fEntityDepth is increased// WFC:  entity declared in external subset in standalone doc/** we are not calling the handlers yet.. *//** // flush possible pending output buffer - see scanContent ... */// make sure markup is properly balanced/** / ... */// scanning methods/** Scans an XML or text declaration. ... */// scan decl// set standalone///xxx see where its used.. this is not used anywhere. it may be useful for entity to store this information//but this information is only related with Document Entity.// set encoding on reader, only if encoding was not specified by the application explicitly// scanXMLDeclOrTextDecl(boolean)//XXX: why not this function behave as per the state of the parser?//set the PI target and values//getTextCharacters can also be called for reading comments//xxx value returned by this function may not remain valid if another event is scanned.//storing element raw name in a linear list of array//storing elemnetPointer for particular element depth//store pointer information only when element depth is less MAX_DEPTH_LIMIT//identity comparison shouldn't take much time and we can rely on this//since its guaranteed to have same object id for same string.//reset the things and return.//returns column information at which pointer was stored.//Stores element pointer locations at particular depth , only 4 pointer locations//are stored at particular depth for now.//else//pointer was not stored because we reached the limit//colum = 0 , means first element at particular depth//column = 1, means second element at particular depth//        calle should make sure that it doesn't call for value outside allowed co-ordinates//this function assumes that string passed is not null and skips//the following string from the buffer this makes sure//If the start element was completely skipped we should encounter either ' '(space),//or '/' (in case of empty element)  or '>'//if this character is still valid element name -- this means string can't match//Look at the next element stored in the array list.. we might just get a match.//reset it back to zero... we haven't got the correct subset yet.//xxx: we can put some logic here as from what column it should start looking//for now we always start at 0//fallback to tolerant algorithm, it would look for differnt element stored at different//depth and get us the pointer location.//start of the column at which it should try searching// fElementQName will have the details of element just read..// fAttributes will have the details of all the attributes.//when skipping is true and no more elements should be added//get the stored element -- if everything goes right this should match the//token in the buffer//Be conservative -- if skipping fails -- stop.//if skipping fails reposition the stack or fallback to normal way of processing//we are still at the stage of adding elements//the elements were not matched or//fSkip is not set to true//get the next element from the stack//when the elements are being added , we need to check if we are set for skipping the elements//this sets the value of fAdd variable//xxx: We dont need another pointer, fCurrentElement, we can use fElementQName//We should not be popping out the context here in endELement becaause the namespace context is still//valid when parser is at the endElement state.//if (fNamespaces) {//  fNamespaceContext.popContext();//complete element and attributes are traversed in this function so we can send a callback//here.//<strong>we shouldn't be sending callback in scanDocument()</strong>/** Looks for the close of start tag, i.e. if it finds '>' or '/>' ... *//** protected void scanAttribute(AttributeIteratorImpl attributes) ... *//** xxx there is one check of duplicate attribute that has been removed. ... *//* //REVISIT: one more case needs to be included: external PE and standalone is no ... *//** return the attribute iterator implementation *//** return if standalone is set *//** return if the doucment is standalone *//** Scans an attribute name value pair. ... *///fTempString would store attribute value///fTempString2 would store attribute non-normalized value//this function doesn't use 'attIndex'. We are adding the attribute later//after we have figured out that current attribute is not namespace declaration//since scanAttributeValue doesn't use attIndex parameter therefore we//can safely add the attribute later..//if the attribute name already exists.. new value is replaced with old value//attributes count will be same if the current attribute  name already exists for this element name.//this means there are two duplicate attributes.//tmpString contains attribute value//we are passing null as the attribute value///xxx: nonNormalizedValue is not being set as it is not required by SAX & DOM//CHANGED://EARLIER: scanContent()//NOW: scanContent(XMLStringBuffer)//It makes things easy if this functions takes XMLStringBuffer as parameter..//this function appends the data to the buffer.//set the fTempString length to 0 before passing it on to scanContent//scanContent sets the correct co-ordinates as per the content read//xxx: We know the next chracter.. we should just skip it and add ']' directlry//fStringBuffer.clear();//fDocumentHandler.characters(content, null);/** Scans a CDATA section. ... *///fDocumentHandler.startCDATA(null);//scanData will fill the contentBuffer/** We dont need all this code if we pass ']]>' as delimeter.. ... *///scan surrogates if any....//by this time we have also read surrogate contents if any...//fDocumentHandler.characters(contentBuffer, null);//fDocumentHandler.endCDATA(null);// scanCDATASection(XMLStringBuffer, boolean):boolean//end element is scanned in this function so we can send a callback/** Scans a character reference. ... *///xxx: How do we deal with this - how to return charReferenceValues//now this is being commented because this is taken care in scanDocument()//fDocumentHandler.characters(fStringBuffer2, null);// scanCharReference()/** Scans an entity reference. ... */// handle built-in entities//1. if the entity is external and support to external entities is not required// 2. or entities should not be replaced//3. or if it is built in entity reference.// start general entity//SUPPORT_DTD=false && ReplaceEntityReferences should throw exception//we are starting the entity even if the entity was not declared//if that was the case it its taken care in XMLEntityManager.startEntity()//we immediately call the endEntity. Application gets to know if there was//any entity that was not declared.//set the scaner state to content.. parser will automatically revive itself at any point of time.//return true ;// scanEntityReference()/** Check if the depth exceeds the maxElementDepth limit ... *//** Calls document handler with a single character resulting from ... *///fDocumentHandler.characters(fTempString, null);// handleCharacter(char)//System.out.print(fScannerState);/** Sets the Driver. ... *///return the cached name/** Returns the driver name. */// getDriverName():String/** Symbol. *///raw name stored as characters/** The next Element entry. *//** Constructs a new Element from the given QName and next Element ... */// class Element/** Element stack. ... *//** The stack data. *///Element depth//total number of elements//current position//Mark refers to the position/** int length = fElements.length; ... *///resize QNames/** Check if the element scanned during the start element ... *///last depth is the depth when last elemnt was pushed//if last depth is greater than current depth//mark this position//decrease the depth by 1 as arrays are 0 based//we found the match and from next element skipping will start, add 1//Once we get match decrease the count -- this was increased by nextElement()//store the last depth// pushElement(QName):QName/** This function doesn't increase depth. The function in this function is ... *///if number of elements becomes equal to the length of array -- stop the skipping//xxx: this is not correct, we are returning the last element//this wont make any difference since flag has been set to 'false'/** Note that this function is considerably different than nextElement() ... *///when position reaches number of elements in the list..//set the position back to mark,  making it a circular linked list./** returns the current depth *//** Clears the stack without throwing away existing QName objects. */// clear()// class ElementStack/** Element stack. This stack operates without synchronization, error ... *//** Pushes an element on the stack. ... *///XXX: THIS FUNCTION IS NOT USED//store the position of last opened tag at particular depth//fInt[++fDepth] = fPosition;//return fElements[fPosition++];/** This function should be called only when element was skipped sucessfully. ... *///if(DEBUG_SKIP_ALGORITHM){//   System.out.println("Check if the element " + element.rawname + " matches");//  System.out.println("fLastDepth = " + fLastDepth);// System.out.println("fDepth = " + fDepth);//we found the match//store the position for the current depth//when we are adding the elements, when skipping//starts even then this should be tracked ie. when//calling getNext()//from next element skipping will start, add 1//sicne fInt[fDepth] contains pointer to the element array which are 0 based.//xxx: should we do "fCount == fInt.length"//reposition the stack -- it seems to be too complex document and there is no symmerty in structure// matchElement(QName):QName/** Returns the next element on the stack. ... *///boundary checks are done in matchElement()/** Pops an element off of the stack by setting the values of ... *///return the same object that was pushed -- this would avoid//setting the values for every end element.//STRONG: this object is read only -- this object reference shouldn't be stored.//element.setValues(fElements[--fDepth]);// popElement(QName)/** Reposition the stack. fInt [] contains all the opened tags at particular depth. ... *//** This function is as a result of optimization done for endElement -- ... *//** Drives the parser to the next state/event on the input. Parser is guaranteed ... */// interface Driver/** Driver to handle content scanning. This driver is capable of reading ... */// Driver methods/** decides the appropriate state of the parser *///startOfMarkup//XMLEvent.ENTITY_REFERENCE ); //SCANNER_STATE_REFERENCE//element content is there..//startOfContent/** SCANNER_STATE_CONTENT and SCANNER_STATE_START_OF_MARKUP are two super states of the parser. ... *///decideSubState//decide the actual sub state of the scanner.For more information refer to the javadoc of//decideSubState.//case: SCANNER_STATE_START_OF_MARKUP//decideSubState() ;//do some special handling if isCoalesce is set to true.//if the last section was character data//if we dont encounter any CDATA or ENITY REFERENCE and current state is also not SCANNER_STATE_CHARACTER_DATA//return the last scanned charactrer data.//if last section was CDATA or ENTITY REFERENCE//xxx: there might be another entity reference or CDATA after this//<foo>blah blah &amp;&lt;<![CDATA[[aa]]>blah blah</foo>//and current state is not SCANNER_STATE_CHARACTER_DATA//or SCANNER_STATE_CDATA or SCANNER_STATE_REFERENCE//this means there is nothing more to be coalesced.//return the CHARACTERS event.//xxx this function returns true when element is empty.. can be linked to end element event.//returns true if the element is empty//if the element is empty the next event is "end element"//set the next possible state//if last section was either entity reference or cdata or character data we should be using buffer//When coalesce is set to true and last state was REFERENCE or CDATA or CHARACTER_DATA, buffer should not be cleared.//clear the buffer//check if we have reached end of element//increase the mark up depth//check if its start of new element//there can be cdata ahead if coalesce is true we should call again//in case last section was either entity reference or cdata or character data -- we should be using buffer//xxx: we should be using only one buffer..// we need not to grow the buffer only when isCoalesce() is not true;//xxx what should be the behavior if entity reference is present in the content ?///xxx since this part is also characters, it should be merged...// special case: surrogates//xxx: scanContent also gives character callback.//we should not be iterating again if fIsCoalesce is not set to true//if (fDocumentHandler != null) {//  fDocumentHandler.characters(fContentBuffer, null);//if fIsCoalesce is true there might be more data so call fDriver.next()//set it back to false.//check the case when there is comment after single element document//<foo/> and some comment after this//It is last element of the document//if element depth is zero , it indicates the end of the document//the state shouldn't be set, because it is set by elementDepthIsZeroHook() function//xxx understand this point once again..//SCANNER_STATE_COMMENT://SCANNER_STATE_PI: {//clear the buffer first//xxx: which buffer should be passed. Ideally we shouldn't have//more than two buffers --//xxx: where should we add the switch for buffering.//SCANNER_STATE_CDATA: {//xxx: What if CDATA is the first event//<foo><![CDATA[hello<><>]]>append</foo>//we should not clear the buffer only when the last state was either SCANNER_STATE_REFERENCE or//SCANNER_STATE_CHARACTER_DATA or SCANNER_STATE_REFERENCE//if we dont need to coalesce clear the buffer//CDATA section is completely read in all the case.//1. if fIsCoalesce is set to true we set the variable fLastSectionWasCData to true//and just call fDispatche.next(). Since we have set the scanner state to//SCANNER_STATE_CONTENT (super state) parser will automatically recover and//behave appropriately. When isCoalesce is set to true we dont need to reportCDATA event//2. Check if application has set for reporting CDATA event//3. if the application has neither set the fIsCoalesce to true nor fReportCdataEvent//return the cdata event as characters.//there might be more data to coalesce.//we should not clear the buffer only when the last state was either CDATA or//fLastSectionWasEntityReference or fLastSectionWasCData are only//used when fIsCoalesce is set to true.//take care of character reference// this function also starts new entity//if there was built-in entity reference & coalesce is not true//return CHARACTERS//if there was a text declaration, call next() it will be taken care.// Skip the entity reference, we don't care//Wether it was character reference, entity reference or built-in entity//set the next possible state to SCANNER_STATE_CONTENT// scan text decl// NOTE: special case where entity starts with a PI// standard text declaration//xxx: this function gives callback// now that we've straightened out the readers, we can read in chunks://xxx: we don't return any state, so how do we get to know about TEXT declarations.//it seems we have to careful when to allow function issue a callback//and when to allow adapter issue a callback.//rest would be taken care by fTrailingMiscDriver set by scanRootElementHook//switch// premature end of file//while loop//next// hooks// NOTE: These hook methods are added so that the full document//       scanner can share the majority of code with this class./** Scan for DOCTYPE hook. This method is a hook for subclasses ... */// scanForDoctypeHook():boolean/** Element depth iz zero. This methos is a hook for subclasses ... */// elementDepthIsZeroHook():boolean/** End of file hook. This method is a hook for subclasses to ... */// NOTE: An end of file is only only an error if we were//       in the middle of scanning some markup. -Ac// endOfFileHook()// class FragmentContentDriver/** this function gets an XMLString (which is used to store the attribute value) from the special pool ... *//** Implements XMLBufferListener interface. *//** receives callbacks from {@link XMLEntityReader } when buffer ... *///If you are reading attributes and you got a callback//cache available attributes.//since fTempString directly matches to the underlying main buffer//store the data into buffer//clear the XMLString so that data can't be added again.// class XMLDocumentFragmentScannerImpl/** Scanner state: XML declaration. *//** Scanner state: prolog. *//** Scanner state: trailing misc. *//** Scanner state: DTD internal declarations. *//** Scanner state: open DTD external subset. *//** Scanner state: DTD external declarations. *//** Scanner state: NO MORE ELEMENTS. *//** Property identifier document scanner: *//** Feature identifier: load external DTD. *//** Property identifier: DTD scanner. */// property identifier:  ValidationManager/** property identifier:  NamespaceContext */// Data((Boolean)propertyManager.getProperty(XMLInputFactory.IS_NAMESPACE_AWARE)).booleanValue();/** DTD scanner. *//** Validation manager . *///xxx: fValidationManager code needs to be added yet!/** Doctype name. *//** Doctype declaration public identifier. *//** Doctype declaration system identifier. *//** Namespace support. *//** Load external DTD. *//** Seen doctype declaration. *///protected int fScannerLastState ;/** XML declaration driver. *//** Prolog driver. *//** DTD driver. *//** Trailing miscellaneous section driver. *//** External subset source. *//** A DTD Description. *///this starts a new entity and sets the current entity to the document entity./** return the state of the scanner *///fEntityScanner.registerListener((XMLBufferListener)componentManager.getProperty(DOCUMENT_SCANNER));// setup driver//register current document scanner as a listener for XMLEntityScanner// prepare to look for a TextDecl if external general entity// Don't do this if we're skipping the entity!/** comment this part.. LOCATOR problem.. */// startEntity(String,identifier,String)//if fMarkupDepth has reached 0.//and driver is fTrailingMiscDriver (which//handles end of document in normal case)//set the scanner state of SCANNER_STATE_TERMINATED//set the scanner set to SCANNER_STATE_TERMINATED//else we have reached the end of document prematurely//so throw EOFException.//this is taken care in wrapper which generates XNI callbacks, There are no next events//fDocumentHandler.endDocument(null);//getNamespaceContext// driver factory methods/** Creates a content driver. *//** Scans a doctype declaration. */// root element name// Attempt to locate an external subset with an external subset resolver.// NOTE: I don't like calling the doctypeDecl callback until//       end of the *full* doctype line (including internal//       subset) is parsed correctly but SAX2 requires that//       it knows the root element name and public and system//       identifier for the startDTD call. -Ac// is there an internal subset?// scanDoctypeDecl():boolean/** Set the scanner state after scanning DTD *//** Driver to handle XMLDecl scanning. ... */// next driver is prolog regardless of whether there// is an XMLDecl in this document//System.out.println("fEntityScanner = " + fEntityScanner);//this function should fill the data.. and set the fEvent object to this event.//REVISIT:where else we can set this value to 'true'//return PI event since PI was encountered// standard XML declaration//In both case return the START_DOCUMENT. ony difference is that first block will//cosume the XML declaration if any.//START_OF_THE_DOCUMENT// class XMLDeclDriver/** Driver to handle prolog scanning. ... *///System.out.println("here in next");/** //this part is handled by FragmentContentHandler ... *///this function fills the data..//setScannerState(SCANNER_STATE_PROLOG);// scanDoctypeDecl() sends XNI doctypeDecl event that// in SAX is converted to startDTD() event.//allow parsing of entity decls to continue in order to stay well-formed//always return DTD event, the event however, will not contain any entities// handle external subset// This handles the case of a DOCTYPE that had neither an internal subset or an external subset.// Send endDTD() call if:// a) systemId is null or if an external subset resolver could not locate an external subset.// b) "load-external-dtd" and validation are false// c) DTD grammar is cached// in XNI this results in 3 events:  doctypeDecl, startDTD, endDTD// in SAX this results in 2 events: startDTD, endDTD/** if (complete) { ... *///xxx  what should be returned here.... ???// class PrologDriver/** Driver to handle the internal and external DTD subsets. ... */// throw new XNIException("DTD Parsing is currently not supported");//xxx: remove this hack and align this with reusing DTD components//currently this routine will only be executed from Stax// REVISIT: Should there be a feature for//          the "complete" parameter?// end doctype declaration//simply reset the entity store without having to mess around//with the DTD Scanner code// scan external subset next unless we are ignoring DTDs/** fDTDDescription.setValues(fDoctypePublicId, fDoctypeSystemId, null, null); ... */// Check access permission. If the source is resolved by a resolver, the check is skipped.// skip entity decls// cleanup// dispatch(boolean):boolean// class DTDDriver/** Driver to handle content scanning. ... *///                fEntityScanner.markStartOfDTD();// in case continue-after-fatal-error set, should not do this...// call document handler// This inserts a doctypeDecl event into the stream though no// DOCTYPE existed in the instance document.// resolveExternalSubsetAndRead()// class ContentDriver/** Driver to handle trailing miscellaneous section scanning. ... *///this could for cases like <foo/>//look at scanRootElementHook//we should have reached the end of the document in//most cases.//there can't be any element after SCANNER_STATE_TERMINATED or when the parser//has reached the end of document//xxx what to do when the scanner has reached the terminating state.// NOTE: This is the only place we're allowed to reach//       the real end of the document stream. Unless the//       end of file was reached prematurely.//System.out.println("EOFException thrown") ;// class TrailingMiscDriver// class XMLDocumentScannerImpl/** <p>This interface describes the properties of entities--their ... *//** Sets the name of the entity. ... *//** Returns the name of the entity. ... */// XMLEntityDescription/** The entity handler interface defines methods to report information ... */// interface XMLEntityHandler/** Will keep track of current entity. ... *//** Default buffer size (2048). *//** Default buffer size before we've finished with the XMLDecl: *//** Default internal entity buffer size (1024). *//** Feature identifier: external general entities. *//** Feature identifier: external parameter entities. *//** Feature identifier: allow Java encodings. *//** Feature identifier: warn on duplicate EntityDef *//** property identifier: buffer size. *//** access external dtd: file protocol *//** Debug printing of buffer. This debugging flag works best when you ... *//** warn on duplicate Entity declaration. ... *//** Debug some basic entities. *//** Debug switching readers for encodings. */// should be diplayed trace resolving messages/** Validation. This feature identifier is: ... *//** External general entities. This feature identifier is: ... *//** External parameter entities. This feature identifier is: ... *//** Allow Java encoding names. This feature identifier is: ... *//** Symbol table. This property identifier is: ... *//** Error reporter. This property identifier is: ... *//** Entity resolver. This property identifier is: ... *//** Stax Entity Resolver. This property identifier is XMLInputFactory.ENTITY_RESOLVER *//** Property Manager. This is used from Stax *//** StAX properties *//** used to restrict external access */// settings/** Validation manager. This property identifier is: ... *//** Buffer size. We get this value from a property. The default size ... *//** Security Manager *//** True if the document entity is standalone. This should really ... */// are the entities being parsed in the external subset?// NOTE:  this *is not* the same as whether they're external entities!/** Entity handler. *//** Current entity scanner *//** XML 1.0 entity scanner. *//** XML 1.1 entity scanner. *//** count of entities expanded: */// entities/** Current entity. *//** identify if the InputSource is created by a resolver */// shared context// temp vars/** Resource identifer. *//** Augmentations for entities. *//** Pool of character buffers. *//** If this constructor is used to create the object, reset() should be invoked on this object *///for entity managers not created by parsers//pass a reference to current entity being scanned//fEntityStorage = new XMLEntityStorage(fCurrentEntity) ;/** Adds an internal entity declaration. ... */// addInternalEntity(String,String)/** Adds an external entity declaration. ... */// search for the first external entity on the stack// addExternalEntity(String,String,String,String)/** Adds an unparsed entity declaration. ... */// addUnparsedEntity(String,String,String,String)/** get the entity storage object from entity manager *//** return the entity responsible for reading the entity */// default to 1.0/** This method uses the passed-in XMLInputSource to make ... */// get information// create reader// First chance checking strict URI// setup URLConnection if we have an HTTPInputSource// set request properties// set preference for redirection// REVISIT: If the URLConnection has external encoding// information, we should be reading it here. It's located// in the charset parameter of Content-Type. -- mrglavas// E43: Check if the URL was redirected, and then// update literal and expanded system IDs if needed.// wrap this stream in RewindableInputStream// perform auto-detect of encoding if necessary// read first four bytes and determine encoding// Special case UTF-8 files with BOM created by Microsoft// tools. It's more efficient to consume the BOM than make// the reader perform extra checks. -Ac// ignore first three bytes...// use specified encoding// If encoding is UTF-8, consume BOM if one is present.// First three bytes are not BOM, so reset.// If encoding is UTF-16, we still need to read the first four bytes// in order to discover the byte order.// UTF-16, big-endian// UTF-16, little-endian// UTF-16, big-endian, no BOM// UTF-16, little-endian, no BOM// If encoding is UCS-4, we still need to read the first four bytes// Ignore unusual octet order for now.// UCS-4, big endian (1234)// UCS-4, little endian (1234)// If encoding is UCS-2, we still need to read the first four bytes// UCS-2, big endian// UCS-2, little endian// read one character at a time so we don't jump too far// ahead, converting characters from the byte stream in// the wrong encoding//reader = new OneCharReader(reader);// We've seen a new Reader.// Push it on the stack so we can close it later.//fOwnReaders.add(reader);// push entity on stack// create entity/* if encoding is specified externally, 'encoding' information present ... *///setupCurrentEntity(String, XMLInputSource, boolean, boolean):  String/** Checks whether an entity given by name is external. ... *//** Checks whether the declaration of an entity given by name is ... *//** Sets whether the document entity is standalone. ... */// setStandalone(boolean)/** Returns true if the document entity is standalone. *///isStandalone():boolean// this simply returns the fResourceIdentifier object;// this should only be used with caution by callers that// carefully manage the entity manager's behaviour, so that// this doesn't returning meaningless or misleading data.// @return  a reference to the current fResourceIdentifier object/** Sets the entity handler. When an entity starts and ends, the ... */// setEntityHandler(XMLEntityHandler)//this function returns StaxXMLInputSource// if no base systemId given, assume that it's relative// to the systemId of the current scanned entity// Sometimes the system id is not (properly) expanded.// We need to expand the system id if:// a. the expanded one was null; or// b. the base system id was null, but becomes non-null from the current entity.// REVISIT:  why would the baseSystemId ever be null?  if we// didn't have to make this check we wouldn't have to reuse the// fXMLResourceIdentifier object...// give the entity resolver a chance//either of Stax or Xerces would be null//wrap this XMLInputSource to StaxInputSource// do default resolution//this works for both stax & Xerces, if staxInputSource is null, it means parser need to revert to default resolution// REVISIT: when systemId is null, I think we should return null.//          is this the right solution? -SG//if (systemId != null)//Waiting for the clarification from EG. - nb/** Resolves the specified public and system identifiers. This ... */// REVISIT: what's the correct behavior if the user provided an entity// resolver (fEntityResolver != null), but resolveEntity doesn't return// an input source (xmlInputSource == null)?// do we do default resolution, or do we just return null? -SG// resolveEntity(XMLResourceIdentifier):XMLInputSource/** Starts a named entity. ... */// was entity declared?// should we skip external entities?// is entity recursive?// resolve external entity/** xxx:  Waiting from the EG ... *///let the not-LoadExternalDTD or not-SupportDTD process to handle the situation// wrap internal entity// start the entity// startEntity(String,boolean)/** Starts the document entity. The document entity has the "[xml]" ... */// startDocumentEntity(XMLInputSource)//xxx these methods are not required./** Starts the DTD entity. The DTD entity has the "[dtd]" ... */// startDTDEntity(XMLInputSource)// indicate start of external subset so that// location of entity decls can be tracked/** Starts an entity. ... *///when entity expansion limit is set by the Application, we need to//check for the entity expansion limit set by the parser, if number of entity//expansions exceeds the entity expansion limit, parser will throw fatal error.// Note that this represents the nesting level of open entities.// is there anything better to do than reset the counter?// at least one can envision debugging applications where this might// be useful...// startEntity(String,XMLInputSource)/** Return the current entity being scanned. Current entity is SET using startEntity function. ... *//** Return the top level entity handled by this manager, or null ... *//** Close all opened InputStreams and Readers opened by this parser. *//** this call actually does nothing, readers are closed in the endEntity method ... *///pop the entity from the stack/** need to close the reader first since the program can end ... *///close the reader//so this is the last opened entity, signal it to current fEntityHandler using Augmentation//check if it is a document entity//set popped entity as current entity//check if there are any entity left in the stack -- if there are//no entries EOF has been reached.// throw exception when it is the last entity but it is not a document entity// endEntity()// Zephyr feature ignore-external-dtd is the opposite of Xerces' load-external-dtd// JAXP 1.5 feature//reset fEntityStorage//reset XMLEntityReaderImpl// initialize state//fStandalone = false;// parser settings have not been changed//StAX Property//reset general state// reset general state.  Should not be called other than by// a class acting as a component manager but not// implementing that interface for whatever reason.// reset scanner// should never happen//if(fEntityScanner!=null)//  fEntityScanner.reset(fSymbolTable, this,fErrorReporter);/** Expands a system id and returns the system id as a URI, if ... */// expandSystemId(String):String// current value of the "user.dir" property// cached URI object for the current value of the escaped "user.dir" property stored as a URI// which ASCII characters need to be escaped// the first hex character if a character needs to be escaped// the second hex character if a character needs to be escaped// initialize the above 3 arrays// To escape the "user.dir" system property, by using %HH to represent// special ASCII characters: 0x00~0x1F, 0x7F, ' ', '<', '>', '#', '%'// and '"'. It's a static method, so needs to be synchronized.// this method looks heavy, but since the system property isn't expected// to change often, so in most cases, we only need to return the URI// that was escaped before.// According to the URI spec, non-ASCII characters (whose value >= 128)// need to be escaped too.// REVISIT: don't know how to escape non-ASCII characters, especially// which encoding to use. Leave them for now.// get the user.dir property// return empty string if property value is empty string.// compute the new escaped value if the new property value doesn't// match the previous one// record the new value as the global property value// change C:/blah to /C:/blah// for each character in the path// if it's not an ASCII character, break here, and use UTF-8 encoding// record the fact that it's escaped// we saw some non-ascii character// get UTF-8 bytes for the remaining sub-string// for each byte// for non-ascii character: make it positive, then escape// change blah/blah to blah/blah//** Absolutizes a URI using the current value ... */// check for bad parameters id// if id already expanded, return// continue on...// normalize id// normalize base// for xml schemas we might have baseURI with// a specified drive// expand id// let it go through// expandSystemId(String,String):String// check if there is a system id before// trying to expand it.// system id has to be a valid URI// if it's already an absolute one, return it// if there isn't a base uri, use the working directory// otherwise, use the base uri// assume "base" is also a relative uri// absolutize the system id using the base// return the string rep of the new uri (an absolute one)// if any exception is thrown, it'll get thrown to the caller.// Assume the URIs are well-formed. If it turns out they're not, try fixing them up./** Xerces URI rejects unicode, try java.net.URI ... */// expandSystemId(String,String,boolean):String/** Helper method for expandSystemId(String,String,boolean):String */// If it's already an absolute one, return it// If there isn't a base URI, use the working directory// absolutize the system identifier using the base URI// expandSystemIdStrictOn(String,String):String/** Attempt to set whether redirects will be followed for an <code>HttpURLConnection</code>. ... */// setInstanceFollowRedirects doesn't exist./** If the scheme's length is only one character, ... */// expandSystemIdStrictOff(String,String):String//        systemURI.absolutize(baseURI);/** Returns the IANA encoding name that is auto-detected from ... */// UTF-16, with BOM// default to UTF-8 if we don't have enough bytes to make a// good determination of the encoding// UTF-8 with a BOM// other encodings// UCS-4, little endian (4321)// UCS-4, unusual octet order (2143)// REVISIT: What should this be?// UCS-4, unusual octect order (3412)// (or could turn out to be UCS-2...// EBCDIC// a la xerces1, return CP037 instead of EBCDIC here// getEncodingName(byte[],int):Object[]/** Creates a reader capable of reading the given input stream in ... */// normalize encoding name// try to use an optimized reader// sould never happen with this encoding...// check for valid name// NOTE: AndyH suggested that, on failure, we use ISO Latin 1//       because every byte is a valid ISO Latin 1 character.//       It may not translate correctly but if we failed on//       the encoding anyway, then we're expecting the content//       of the document to be bad. This will just prevent an//       invalid UTF-8 sequence to be detected. This is only//       important when continue-after-fatal-error is turned//       on. -Ac// try to use a Java reader// see comment above.// createReader(InputStream,String, Boolean): Reader/** Return the public identifier for the current document event. ... *//** Return the expanded system identifier for the current document event. ... */// getExpandedSystemId():String/** Return the literal system identifier for the current document event. ... */// getLiteralSystemId():String/** Return the line number where the current document event ends. ... */// getLineNumber():int/** Return the column number where the current document event ends. ... */// getColumnNumber():int// Protected static methods/** Fixes a platform dependent filename to standard URI form. ... */// handle platform dependent strings// Windows fix// change "C:blah" to "/C:blah"// change "//blah" to "file://blah"// replace spaces in file names with %20.// Original comment from JDK5: the following algorithm might not be// very performant, but people who want to use invalid URI's have to// pay the price.// put characters before ' ' into the string builder// and %20 for the space// for the remamining part, also convert ' ' to "%20".// fixURI(String):String// Package visible methods/** Prints the contents of the buffer. *//** Buffer used in entity manager to reuse character arrays instead ... *//** character buffer *//** whether the buffer is for an external or internal scanned entity *//** Stores a number of character buffers and provides it to the entity ... *//** Initializes buffer pool. * *//** Retrieves buffer from pool. * *//** Returns buffer to pool. * *//** Sets the size of external buffers and dumps the old pool. * *//** This class wraps the byte inputstreams we're presented with. ... *//** //System.out.println("fCurrentEntitty = " + fCurrentEntity ); ... *//* In a manner of speaking, when this class isn't permitting more ... *///test();// end of RewindableInputStream class//System.out.println("TESTING: Added familytree to entityManager");//Usecase1//Usecase2// class XMLEntityManager/** Implements the entity scanner methods. ... *//** Security manager. *//** Limit analyzer. *//** Listeners which should know when load is being called *//** To signal the end of the document entity, this exception will be thrown. *///Will be used only during internal subsets.//for appending data.// Remember, that the XML version has explicitly been set,// so that XMLStreamReader.getVersion() can find that out.// indicates that the operation is for detecting XML version/** private constructor, this class can only be instantiated within this class. Instance of this class should ... */// set buffer size:// REVISIT: Buffer size passed to entity scanner// was not being kept in synch with the actual size// of the buffers in each scanned entity. If any// of the buffers were actually resized, it was possible// that the parser would throw an ArrayIndexOutOfBoundsException// for documents which contained names which are longer than// the current buffer size. Conceivably the buffer size passed// to entity scanner could be used to determine a minimum size// for resizing, if doubling its size is smaller than this// minimum. -- mrglavas/** Resets the components. *///xerces properties/** Returns the XML version of the current entity. This will normally be the ... */// getXMLVersion():String/** Sets the XML version. This method is used by the ... */// setXMLVersion(String)/** set the instance of current scanned entity. ... */// XMLEntityReader methods/** Returns the base system identifier of the currently scanned ... */// getBaseSystemId():String///////////// Locator methods start.//if the entity is closed, we should return -1//xxx at first place why such call should be there.../** Returns the expanded system identifier. *//** Returns the literal system identifier. *//** Returns the public identifier. *////////////////// Locator methods finished./** the version of the current entity being scanned *//** Returns the encoding of the current entity. ... */// getEncoding():String/** Sets the encoding of the scanner. This method is used by the ... */// if the encoding is the same, don't change the reader and// re-use the original reader used by the OneCharReader// NOTE: Besides saving an object, this overcomes deficiencies//       in the UTF-16 reader supplied with the standard Java//       distribution (up to and including 1.3). The UTF-16//       decoder buffers 8K blocks even when only asked to read//       a single char! -Ac// UTF-16 is a bit of a special case.  If the encoding is UTF-16,// and we know the endian-ness, we shouldn't change readers.// If it's ISO-10646-UCS-(2|4), then we'll have to deduce// the endian-ness from the encoding we presently have.// wrap a new reader around the input stream, changing// the encoding//fCurrentEntity.stream.reset();// setEncoding(String)/** Returns true if the current entity being scanned is external. */// isExternal():boolean//getChar()//while (XMLChar.isName(fCurrentEntity.ch[fCurrentEntity.position])) {//XMLChar.isName(fCurrentEntity.ch[fCurrentEntity.position])) ;//making a check if if the specified character is a valid name start character//as defined by production [5] in the XML 1.0 specification.// Name ::= (Letter | '_' | ':') (NameChar)*//adding into symbol table.//XXX We are trying to add single character in SymbolTable??????// no qualified name found/** Checks whether the end of the entity buffer has been reached. If yes, ... *///check limit before loading more data/** If the current entity is an Entity reference, check the accumulated size ... *//** If the current entity is an Entity reference, counts the total nodes in ... *//** Checks whether the value of the specified Limit exceeds its limit ... *//** CHANGED: ... *///CHANGED: dont replace the value.. append to the buffer. This gives control to the callee//on buffering the data..//content.append(fCurrentEntity.ch, offset, length);/** * NEWLINE NORMALIZATION *** ... *//** Save whitespace information. Increase the whitespace buffer by 100 ... *//** Scans a range of character data up to the specified delimiter, ... */// something must be wrong with the input:  e.g., file ends in an unterminated comment// scanData(String, XMLStringBuffer)//boolean entityChanged = false;//check if the capacity is availble in the current buffer//count is no. of characters in the buffer   [x][m][l]//position is '0' based//System.out.println("fCurrent Entity " + fCurrentEntity);//load more characters -- this function shouldn't change the entity//load changes the position.. set it back to the point where we started.//after loading check again.//first make sure that required capacity is avaible//s.charAt() indexes are 0 to 'Length -1' based.//check from reverse// Locator methods/** Loads a chunk of text. ... *///maintaing the count till last load// read characters// reset count and position// record the last count// end of this entity//notify the entity manager about the end of entity//return if the current entity becomes null// handle the trailing edges// load(int, boolean):boolean// default encoding/** xxx not removing endEntity() so that i remember that we need to implement it. ... *//** Registers the listener object and provides callback. ... *//** Skips space characters appearing immediately on the input that would ... *///XMLEntityManager.print(fCurrentEntity);//  XMLEntityManager.print(fCurrentEntity);// skipDeclSpaces():boolean// class XMLEntityScanner/** This class is a common element of all parser configurations and is ... */// severity/** Severity: warning. Warnings represent informational messages only ... *//** Severity: error. Common causes of errors are document structure and/or ... *//** Severity: fatal error. Fatal errors are errors in the syntax of the ... *//** Feature identifier: continue after fatal error. *//** The locale to be used to format error messages. *//** Mapping of Message formatters for domains. *//** Error handler. *//** Document locator. *//** Continue after fatal error feature. *//** Default error handler. This error handler is only used in the ... *//** A SAX proxy to the error handler contained in this error reporter. *//** Constructs an error reporter with a locator. */// REVISIT: [Q] Should the locator be passed to the reportError//              method? Otherwise, there is no way for a parser//              component to store information about where an//              error occurred so as to report it later.//              An example would be to record the location of//              IDREFs so that, at the end of the document, if//              there is no associated ID declared, the error//              could report the location information of the//              reference. -Ac// NOTE: I added another reportError method that allows the//       caller to specify the location of the error being//       reported. -Ac// Methods/** Sets the current locale. ... *//** Gets the current locale. ... */// getLocale():  Locale/** Sets the document locator. ... */// setDocumentLocator(XMLLocator)/** Registers a message formatter for the specified domain. ... */// putMessageFormatter(String,MessageFormatter)/** Returns the message formatter associated with the specified domain, ... */// getMessageFormatter(String):MessageFormatter/** Removes the message formatter for the specified domain and ... */// removeMessageFormatter(String):MessageFormatter/** Reports an error. The error message passed to the error handler ... */// reportError(String,String,Object[],short):String// reportError(String,String,Object[],short,Exception):String/** Reports an error at a specific location. ... */// reportError(XMLLocator,String,String,Object[],short):String// REVISIT: [Q] Should we do anything about invalid severity//              parameter? -Ac// format error message and create parse exception// get error handler// call error handler// reportError(XMLLocator,String,String,Object[],short,Exception):String// Xerces features// http://apache.org/xml/features/continue-after-fatal-error//   Allows the parser to continue after a fatal error.//   Normally, a fatal error would stop the parse.// return state of given feature or false if unsupported./** Get the internal XMLErrrorHandler. *//** Gets the internal XMLErrorHandler ... */// class XMLErrorReporter/** This class adds the functionality of namespace processing. ... *//** Default value of this feature is false, when in Stax mode this should be true *//** xmlns, default Namespace, declared *//** Resets the fields of this scanner. */// skipQElement(name);// There are two variables,fNamespaces and fBindNamespaces//StAX uses XMLNSDocumentScannerImpl so this distinction needs to be maintained// fLength = 0; //initialize structure// checkDuplicates(fAttributeQName, fAttributes);//if (fBindNamespaces) {// REVISIT: it seems that this function should not take attributes, and length//fTempString.toString();//check the length of URI//set it equal to XMLSymbols.PREFIX_XMLNS when namespace declaration// is of type xmlns = "..", in this case prefix = "" and localname = XMLSymbols.PREFIX_XMLNS//this special behavior is because of dependency on this behavior in DOM components// http://www.w3.org/TR/1999/REC-xml-names-19990114/#dt-prefix// We should only report an error if there is a prefix,// that is, the local part is not "xmlns". -SG// check for duplicate prefix bindings// declare prefix in context// check for duplicate xmlns declarations// by convention, prefix == "xmlns" | "xml"// error if duplicate declaration// xmlns declared//xerces internals (XSAttributeChecker) has dependency on namespace declaration returned//as part of XMLAttributes.//addition of namespace declaration to the attribute list is controlled by fNotAddNSDeclAsAttribute//feature. This is required in Stax where namespace declarations are not considered as attribute//add the attributes to the list of attributes//attributes.setNonNormalizedValue(attrIndex, fTempString2.toString());//removing  as we are not using non-normalized values . -Venu//fDTDValidator will be null in Stax mode// re-configure pipeline by removing DTDValidator// class XMLNSDocumentScannerImpl/** Namespaces. *//** Error reporter. *//** Only pass start and end prefix mapping events. *//** Namespace context. *//** Sets whether the namespace binder only passes the prefix mapping ... */// setOnlyPassPrefixMappingEvents(boolean)/** Returns true if the namespace binder only passes the prefix mapping ... */// getOnlyPassPrefixMappingEvents():boolean/** Sets the value of a property during parsing. ... *//** Sets the document handler to receive information about the document. *//** Sets the document source */// setDocumentSource/** Returns the document source */// getDocumentSource// startEntity(String,String,String,String,String)// textDecl(String,String)// startDocument(XMLLocator,String)// xmlDecl(String,String,String)// doctypeDecl(String,String,String)// comment(XMLString)// processingInstruction(String,XMLString)/** Binds the namespaces. This method will handle calling the ... */// startElement(QName,XMLAttributes)// emptyElement(QName,XMLAttributes)// characters(XMLString)// ignorableWhitespace(XMLString)// endElement(QName)// startCDATA()// endCDATA()// endDocument()/** Handles start element. */// add new namespace context// search for new namespace bindings// when it's of form xmlns="..." or xmlns:prefix="...",// it's a namespace declaration. but prefix:xmlns="..." isn't.// Since this is an error condition in XML 1.0,// and should be relatively uncommon in XML 1.1,// making this test into a method call to reuse code// should be acceptable.  - NG// bind the attributes// verify that duplicate attributes don't exist// Example: <foo xmlns:a='NS' xmlns:b='NS' a:attr='v1' b:attr='v2'/>// handleStartElement(QName,XMLAttributes,boolean)/** Handles end element. */// bind element// call handlers// handleEndElement(QName,boolean)// class XMLNamespaceBinder//import com.sun.xml.stream.XMLEntityManager;//import com.sun.org.apache.xerces.internal.impl.XMLErrorReporter;/** This class is responsible for holding scanning methods common to ... *//** Feature identifier: notify character references. *//** Debug attribute normalization. *//** Type of names *///xxx: setting the default value as false, as we dont need to calculate this value//we should have a feature when set to true computes this value/** Character references notification. *//** Internal parser-settings feature *//** Entity manager. *///protected XMLEntityManager fEntityManager = PropertyManager.getEntityManager();/** xxx this should be available from EntityManager Entity storage *//** event type *//** Entity scanner, this always works on last entity that was opened. *//** Entity depth. *//** Literal value of the last character reference scanned. *//** Scanning attribute. *//** Report entity boundary. */// symbols/** Symbol: "version". *//** Symbol: "encoding". *//** Symbol: "standalone". *//** Symbol: "amp". *//** Symbol: "lt". *//** Symbol: "gt". *//** Symbol: "quot". *//** Symbol: "apos". */// NOTE: These objects are private to help prevent accidental modification//       of values by a subclass. If there were protected *and* the sub-//       modified the values, it would be difficult to track down the real//       cause of the bug. By making these private, we avoid this//       possibility.// temporary location for Resource identification information.//this step is extra because we have separated the storage of entity/* else if(propertyId.equals(Constants.STAX_PROPERTIES)){ ... *//* Sets the feature of the scanner. *//* Gets the state of the feature of the scanner. */// anybody calling this had better have set Symtoltable!// DTD preparsing defaults://fEntityManager.reset();// common scanning methods// scan pseudo-attributes// since pseudoattributes are *not* attributes,// their quotes don't need to be preserved in external parameter entities.// the XMLEntityScanner#scanLiteral method will continue to// emit -1 in such cases when it finds a quote; this is// fine for other methods that parse scanned entities,// but not for the scanning of pseudoattributes.  So,// temporarily, we must mark the current entity as not being "literal"// TODO: check encoding name; set encoding on//       entity scanner// restore original literal value// REVISIT: should we remove this error reporting?// If there is no data in the xml or text decl then we fail to report error// for version or encoding info above.// fill in return array/** Scans a pseudo attribute. ... */// XMLEntityManager.print(fEntityManager.getCurrentEntity());// scanPseudoAttribute(XMLString):String/** Scans the name of a pseudo attribute. The only legal names ... */// scanPseudoAttributeName()/** Scans a processing instruction. ... *///EARLIER: scanPI()//NOW: scanPI(XMLStringBuffer)//it makes things more easy if XMLStringBUffer is passed. Motivation for this change is same// as that for scanContent()// target// scan data// scanPI(XMLStringBuffer)//Earlier:This method uses the fStringBuffer and later buffer values are set to//the supplied XMLString....//Now: Changed the signature of this function to pass XMLStringBuffer.. and data would//be appended to that buffer// check target// we found the end, there is no data just return// if there is data there should be some space// since scanData appends the parsed data to the buffer passed// a while loop would append the whole of parsed data to the buffer(data:XMLStringBuffer)//until all of the data is buffered.// scanPIData(String,XMLString)//System.out.println( "XMLScanner#scanComment# In Scan Comment" );// text// REVISIT: handle invalid character, eof//System.out.println( "XMLScanner#scanComment#text.toString() == " + text.toString() );//System.out.println( "XMLScanner#scanComment#c == " + c );//Todo ::Move this check  to Attributes , do conversion//only if attribute is being accessed. -Venu/** Resolves character entity references. ... *//** entityNames (symbols) are interned. The equals method would do the same, ... *//** Scans External ID and return the public and system IDs. ... */// looks like we don't have any system id// simply return the public id// store result in array/** This method notifies of the start of an entity. The document entity ... */// keep track of the entity depth// must reset entity scanner/** This method notifies the end of an entity. The document entity has ... *//** Scans a character reference and append the corresponding chars to the ... */// scan hexadecimal value// scan decimal value// convert string to number// character reference must be a valid XML character// Conversion failed, let -1 value drop through.// If we end up here, the character reference was invalid.// append corresponding chars to the given buffer// character is supplemental, split it into surrogate chars// char refs notification code// version Supported/** Scans surrogates and append them to the specified buffer. ... */// convert surrogates to supplemental character// supplemental character must be a valid XML character// fill in the buffer// scanSurrogates():boolean/** Convenience function used in all XML scanners. */// initialize scanner/** Add the count of the content buffer and check if the accumulated ... *//** Add the count and check limit ... */// class XMLScanner/** the very issue around a long discussion. but since we must pass the TCK, we have to allow ... *//** Creates a new instance of XMLStreamFilterImpl *///this is debatable to initiate at an acceptable event,//but it's neccessary in order to pass the TCK and yet avoid skipping element/** @throws ... *///although it seems that IllegalStateException should be thrown when next() is called//on a stream that has no more items, we have to assume END_DOCUMENT is always accepted//in order to pass the TCK/** @throws *//* Copyright (c) 2005, 2017, Oracle and/or its affiliates. All rights reserved. ... *//** This class implements javax.xml.stream.XMLStreamReader. It makes use of XML*Scanner classes to ... *//** Property identifier: Error Reporter. *//** Property identifier: Symbol table. *//** Document scanner. *///make Global NamespaceContextWrapper object,  fScanner.getNamespaceContext() is dynamic object and ita value changes//as per the state of the parser./** Entity scanner, this alwasy works on last entity that was opened. *//** Input Source *//** Store properties *//** current event type *//** debug flag *//** more to scan *///publicId, systemid, baseSystemId, inputStream, enocding//pass the input source to document scanner impl.//xxx: Using buffered reader//once setInputSource() is called this instance is busy parsing the inputsource supplied//this instances is free for reuse if parser has reached END_DOCUMENT state or application has//called close()//XMLStreamReader should be in defined state//Issue 56 XNIException not caught//setInputSource//set Stax internal properties -- Note that these instances are being created in XMLReaderImpl.//1.SymbolTable//2.XMLMessageFormatter//3.XMLEntityManager//4. call reset()//1.//2.//3.//4./** This function tells if this instances is available for reuse. ... *///when parsing begins, fReuse is set to false//fReuse is set to 'true' when application calls close()/** Resets this instance so that this instance is ready for reuse. *///reset entity manager//reset the scanner//REVISIT:this is too ugly -- we are getting XMLEntityManager and XMLEntityReader from//property manager, it should be only XMLEntityManager//default value for this property is true. However, this should be false when using XMLEventReader... Ugh..//because XMLEventReader should not have defined state./** Frees any resources associated with this Reader. This method does not close the underlying input source. ... *///xxx: Check what this function is intended to do.//reset();/** Returns the character encoding declared on the xml declaration Returns null if none was declared ... *///getColumnNumber/** Return input encoding if known or null if unknown. ... *///getEncoding/** Returns the current value of the parse event as a string, this returns the string value of a CHARACTERS event, returns the value of a COMMENT, the replacement value for an ENTITY_REFERENCE, the string value of a CDATA section, the string value for a SPACE event, or the String value of the internal subset of the DTD. If an ENTITY_REFERENCE has been resolved, any character data will be reported as CHARACTERS events. ... *///getEventType//getLineNumber//xxx check whats the value of fCurrentElement//getLocalName()//doesn't take care of Attribute as separte event//getNamespaceURI/** Get the data section of a processing instruction ... *///getPIData/** Get the target of a processing instruction ... *///getPITarget//getPrefix()//getValue()/** Get the XML language version of the current document being parsed *///apply SAP's patch: the default version in the scanner was set to 1.0 because of DOM and SAX//so this patch is a workaround of the difference between StAX and DOM// SAPJVM: Return null if the XML version has not been declared (as specified in the JavaDoc)./** this Funtion returns true if the current event has name *///hasName()//the scanner returns -1 when it detects a broken stream//we can check in scanners if the scanner state is not set to//terminating, we still have more events./** Returns true if the cursor points to a character data event that consists of all whitespace ... */// if this error occured trying to resolve the external DTD subset// and IS_VALIDATING == false, then this is not an XML error// ignore the error, set scanner to known state// else real error//next()//get the new scanner state to old scanner's previous state/** Returns the count of attributes on this START_ELEMENT, ... *///xxx: recognize SAX properties namespace, namespace-prefix to get XML Namespace declarations//does length includes namespace declarations ?//State should be either START_ELEMENT or ATTRIBUTE//getAttributeCount/** Returns the localName of the attribute at the provided ... *///getAttributeName/** Returns the namespace of the attribute at the provided ... *///getAttributeNamespace/** Returns the prefix of this attribute at the ... *///getAttributePrefix/** Returns the qname of the attribute at the provided index ... */// create new object at runtime..//getAttributeQName/** Returns the XML type of the attribute at the provided ... *///getAttributeType/** Returns the value of the attribute at the ... *///getAttributeValue//sjsxp issue 70/** Reads the content of a text-only element. Precondition: ... *//** Return the current location of the processor. ... *//** Returns a QName for the current START_ELEMENT or END_ELEMENT event ... *//** Returns a read only namespace context for the current ... *//** Returns the count of namespaces declared on this START_ELEMENT or END_ELEMENT, ... *///namespaceContext is dynamic object.//REVISIT: check if it specifies all conditions mentioned in the javadoc/** Returns the prefix for the namespace declared at the ... *//** Returns the uri for the namespace declared at the ... *//** Get the value of a feature/property from the underlying implementation ... *//** Returns the current value of the parse event as a string, ... *///this requires creation of new string//fEventType == XMLEvent.ENTITY_REFERENCE//getText/** Test if the current event is of the given type and if the namespace and name match the current namespace and name of the current event. ... *//** Gets the the text associated with a CHARACTERS, SPACE or CDATA event. ... *///getTextStart() + sourceStart should not be greater than the lenght of number of characters//present//int presentDataLen = getTextLength() - (getTextStart()+sourceStart);/** Return true if the current event has text, false otherwise ... *//** Returns a boolean which indicates if this ... *///check that current state should be either START_ELEMENT or ATTRIBUTE/** Returns true if the cursor points to a character data event ... *//** Skips any insignificant events (COMMENT and PROCESSING_INSTRUCTION) ... *//** Checks if standalone was set in the document ... *///xxx: it requires if the standalone was set in the document ? This is different that if the document// is standalone//xxx: prefix definition ?/** Return the uri for the given prefix. ... *///first add the string to symbol table.. since internally identity comparisons are done.//xxx: this function is not being used.//REVISIT: we were supplying hashmap ealier//XMLReaderImpl/** This class scans the version of the document to determine ... */// symbol:  [xml]:/** Reset the reference to the appropriate scanner given the version of the ... */// Make sure the locator used by the error reporter is the current entity scanner.// Note: above we reset fEntityScanner in the entity manager, thus in startEntity// in each scanner fEntityScanner field must be reset to reflect the change./** This methods scans the XML declaration to find out the version ... */// Must use XML 1.0 scanner to handle whitespace correctly// in the XML declaration.// definitely not a well-formed 1.1 doc!// Check if the next character is '='. If it is then consume it.// REVISIT:  should we check whether this equals quoteChar?// This method prepends "length" chars from the char array,// from offset 0, to the manager's fCurrentEntity.ch.//resize array; this case is hard to imagine...// have to move sensitive stuff out of the way...// have to reintroduce some whitespace so this parses:// prepend contents...// class XMLVersionDetector/** <p>A DTD grammar that produces balanced syntax trees.</p> ... *//** Mixed. *//** Stack depth *//** Children content model operation stack. *//** Holder for choice/sequence/leaf groups at each depth. *//** Sizes of the allocated portions of each int[] in fGroupIndexStack. */// BalancedDTDGrammar(SymbolTable,XMLDTDDescription)/** The start of a content model. Depending on the type of the content ... */// startContentModel(String)/** A start of either a mixed or children content model. A mixed ... */// startGroup()/** The appearance of "#PCDATA" within a group signifying a ... */// pcdata()/** A referenced element in a mixed or children content model. ... */// element(String)/** The separator between choices or sequences of a mixed or children ... */// separator(short)/** The occurrence count for a child in a children content model or ... */// occurrence(short)/** The end of a group for mixed or children content models. ... */// endGroup()/** The end of the DTD. ... */// endDTD()/** Adds the content spec to the given element declaration. *//** Creates a subtree from the leaf nodes at the current depth. */// addContentSpecNodes(int,int)/** Initialize the stacks which temporarily hold content models. */// initializeContentModelStacks()/** Add XMLContentSpec to the current group. ... */// addToCurrentGroup(int)// class BalancedDTDGrammar/** A DTD grammar. This class implements the XNI handler interfaces ... *//** Top level scope (-1). *//** Chunk shift (8). *//** Chunk size (1 << CHUNK_SHIFT). *//** Chunk mask (CHUNK_SIZE - 1). *//** Initial chunk count (1 << (10 - CHUNK_SHIFT)). */// 2^10 = 1k/** List flag (0x80). *//** List mask (~LIST_FLAG). *//** Debug DTDGrammar. *//** Current element index. *//** Current attribute index. *//** fReadingExternalDTD */// The XMLDTDDescription with which this Grammar is associated// element declarations/** Number of element declarations. *//** Element declaration name. *//** Element declaration type. ... *//** Element declaration content spec index. This index value is used ... *//** Element declaration content model validator. This validator is ... *//** First attribute declaration of an element declaration. *//** Last attribute declaration of an element declaration. */// attribute declarations/** Number of attribute declarations. *//** Attribute declaration name. */// is this grammar immutable?  (fully constructed and not changeable)/** Attribute declaration type. ... *//** Attribute declaration enumeration values. */// content specs// here saves the content spec binary trees for element decls,// each element with a content model will hold a pointer which is// the index of the head node of the content spec tree.// other information/** Element index mapping table. *//** Entity index mapping table. *//** Notation index mapping table. */// temp variables/** Temporary qualified name. *//** Temporary Attribute decl. */// for buildSyntaxTree method/** Element declaration. *//** Entity declaration. *//** Simple type. *//** Content spec node. *//** table of XMLElementDecl *//** Children content model index stack. *//** Children content model previous node index stack. */// additional fields(columns) for the element Decl pool in the Grammar/** flag if the elementDecl is External. */// additional fields(columns) for the attribute Decl pool in the Grammar/** flag if the AttributeDecl is External. */// for mixedElement method// Grammar methods// return the XMLDTDDescription object with which this is associated// getGrammarDescription():  XMLGrammarDescription/** Returns true if the specified element declaration is external. ... */// getElementDeclIsExternal(int):boolean/** Returns true if the specified attribute declaration is external. ... */// getAttributeDeclIndex (int,QName)// XMLDTDHandler methods/** The start of the DTD. ... *///Initialize stack// startDTD(XMLLocator)// startParameterEntity(String,XMLResourceIdentifier,String,Augmentations)/** The start of the DTD external subset. ... */// startExternalSubset(Augmentations)// endParameterEntity(String,Augmentations)/** The end of the DTD external subset. ... */// endExternalSubset(Augmentations)/** An element declaration. ... */// check if it is already defined// duplicate element, ignored.//create element decl//add(or set) this elementDecl to the local cache//set internal structure// elementDecl(String,String)/** An attribute declaration. ... *///if ElementDecl has already being created in the Grammar then remove from table,//this.fElementDeclTab.remove( (String) elementName );// then it is forward reference to a element decl, create the elementDecl first.//Get Grammar index to grammar array//return, when more than one definition is provided for the same attribute of given element type//only the first declaration is binding and later declarations are ignored// Create current Attribute Decl// REVISIT: Report error message. -Ac// REVISIT: The datatype should be stored with the attribute value//          and not special-cased in the XMLValidator. -Ac//fSimpleType.datatypeValidator = fDatatypeValidatorFactory.createDatatypeValidator(type, null, facets, fSimpleType.list);// attributeDecl(String,String,String,String[],String,XMLString,XMLString, Augmentations)/** An internal entity declaration. ... */// internalEntityDecl(String,XMLString,XMLString)/** An external entity declaration. ... */// externalEntityDecl(String, XMLResourceIdentifier, Augmentations)/** An unparsed entity declaration. ... */// unparsedEntityDecl(String,StringXMLResourceIdentifier,Augmentations)/** A notation declaration ... */// notationDecl(String,XMLResourceIdentifier,Augmentations)// make sure our description contains useful stuff...// we don't know what the root is; so use possibleRoots...// sets the source of this handler// setDTDSource(XMLDTDSource)// returns the source of this handler// getDTDSource():  XMLDTDSource// no-op methods/** The start of an attribute list. ... *//** The end of an attribute list. ... *//** The start of a conditional section. ... *//** Characters within an IGNORE conditional section. ... *//** The end of a conditional section. ... */// XMLDTDContentModelHandler methods// set content model source// get content model source/** A content model of ANY. ... *//** A content model of EMPTY. ... *//** The end of a content model. ... *//** Returns true if this grammar is namespace aware. */// isNamespaceAware():boolean/** Returns the symbol table. */// getSymbolTable():SymbolTable/** Returns the index of the first element declaration. This index ... */// getFirstElementDeclIndex():int/** Returns the next index of the element declaration following the ... */// getNextElementDeclIndex(int):int/** getElementDeclIndex ... *///System.out.println("getElementDeclIndex("+elementDeclName+") -> "+mapping);// getElementDeclIndex(String):int/** Returns the element decl index. ... */// getElementDeclIndex(QName):int/** make separate function for getting contentSpecType of element. ... *///getContentSpecType/** getElementDecl ... *//* Validators are null until we add that code */// getElementDecl(int,XMLElementDecl):boolean// REVISIT: Make this getAttributeDeclCount/getAttributeDeclAt. -Ac/** getFirstAttributeDeclIndex ... */// getFirstAttributeDeclIndex/** getNextAttributeDeclIndex ... */// getNextAttributeDeclIndex/** getAttributeDecl ... */// getAttributeDecl/** Returns whether the given attribute is of type CDATA or not ... *//** getEntityDeclIndex ... */// getEntityDeclIndex/** getEntityDecl ... */// getEntityDecl/** getNotationDeclIndex ... */// getNotationDeclIndex/** getNotationDecl ... */// getNotationDecl/** getContentSpec ... *//** Returns the index to the content spec for the given element ... *//** getContentSpecAsString ... */// lookup content spec node// build string// switch type// return string// getContentSpecAsString(int):String//                   ", "+ elementDecl.contentModelValidator.toString());/** getElementContentModelValidator ... */// If we have one, just return that. Otherwise, gotta create one// Get the type of content this element has// And create the content model according to the spec type//  Just create a mixel content model object. This type of//  content model is optimized for mixed content validation.//  This method will create an optimal model for the complexity//  of the element's defined model. If its simple, it will create//  a SimpleContentModel object. If its a simple list, it will//  create a SimpleListContentModel object. If its complex, it//  will create a DFAContentModel object.// Add the new model to the content model for this element// getElementContentModelValidator(int):ContentModelValidator/** Create an XMLContentSpec for a single non-leaf ... */// create content spec node// set content spec node values// return index// addContentSpecNode(short,String):int/** create an XMLContentSpec for a leaf ... */// addUniqueLeafNode(String):int/** Create an XMLContentSpec for a two child leaf ... */// addContentSpecNode(short,int,int):int/** Initialize content model stack. */// initializeContentModelStack()// appendContentSpec(XMLContentSpec.Provider,StringPool,XMLContentSpec,StringBuffer,boolean)// printAttribute(int)// content models/** When the element has a 'CHILDREN' model, this method is called to ... *///  Get the content spec node for the element we are working on.//  This will tell us what kind of node it is, which tells us what//  kind of model we will try to create.// let fall through to build a DFAContentModel//  Check that the left value is not -1, since any content model//  with PCDATA should be MIXED, so we should not have gotten here.//  Its a single leaf, so its an 'a' type of content model, i.e.//  just one instance of one element. That one is definitely a//  simple content model.//  Lets see if both of the children are leafs. If so, then it//  it has to be a simple content model//  Its a simple choice or sequence, so we can do a simple//  content model for it.//  Its a repetition, so see if its one child is a leaf. If so//  its a repetition of a single element, so we can do a simple//  content model for that.//  It is, so we can create a simple content model here that//  will check for this repetition. We pass -1 for the unused//  right node.//  Its not a simple content model, so here we have to create a DFA//  for this element. So we create a DFAContentModel object. He//  encapsulates all of the work to create the DFA.//int leafCount = countLeaves(contentSpecIndex);// REVISIT: has to be fLeafCount because we convert x+ to x,x*, one more leaf// createChildModel(int):ContentModelValidator// We will build a node at this level for the new tree//nodeRet = new CMAny(contentSpec.type, -1, fLeafCount++);//  If this node is a leaf, then its an easy one. We just add it//  to the tree.//  Create a new leaf node, and pass it the current leaf count,//  which is its DFA state position. Bump the leaf count after//  storing it. This makes the positions zero based since we//  store first and then increment.//  Its not a leaf, so we have to recurse its left and maybe right//  nodes. Save both values before we recurse and trash the node.//  Recurse on both children, and return a binary op node//  with the two created sub nodes as its children. The node//  type is the same type as the source.// And return our new node for this level/** Build a vector of valid QNames from Content Spec ... */// Handle any and leaf nodes// resize arrays, if needed// save values and return length// contentSpecTree(int,XMLContentSpec,ChildrenList)// Private static methods// resize chunks/** Children list for <code>contentSpecTree</code> method. ... *//** Length. */// NOTE: The following set of data is mutually exclusive. It is//       written this way because Java doesn't have a native//       union data structure. -Ac/** Left and right children names. *//** Left and right children types. */// class ChildrenList// EntityState methods//for unparsed entity notation!=null// class DTDGrammar/** This very simple class is the skeleton of what the DTDValidator could use ... */// REVISIT:  make this class smarter and *way* more complete!/** Grammars associated with element root name. */// the unique grammar from fGrammars (or that we're// building) that is used in validation.// is the "active" grammar standalone?/** Puts the specified grammar into the grammar pool and associate it to ... */// putGrammar(DTDGrammar)// retrieve a DTDGrammar given an XMLDTDDescription// is the active grammar standalone?  This must live here because// at the time the validator discovers this we don't yet know// what the active grammar should be (no info about root)// set the "active" grammar:// class DTDGrammarBucket/** This class extends XMLDTDProcessor by giving it ... */// constructors// init(SymbolTable)// init(SymbolTable, XMLGrammarPool)// init(SymbolTable, XMLGrammarPool, XMLErrorReporter, XMLEntityResolver)// isValidNmtoken(String):  boolean// createDTDScanner(SymbolTable, XMLErrorReporter, XMLEntityManager) : XMLDTDScannerImpl// getScannerVersion() : short// class XML11DTDProcessor/** This allows the validator to correctlyhandle XML 1.1 ... */// overridden so that this class has access to the same// grammarBucket as the corresponding DTDProcessor// will try and use...//reset(XMLComponentManager)// now overwrite some entries in parent:// init()// class XML11DTDValidator/** The DTD validator. The validator implements a document ... *//** Bind namespaces */// startNamespaceScope(QName,XMLAttributes)// endNamespaceScope(QName,boolean)/** name *//** simpleType *//** optional *//** setValues ... */// setValues/** clear */// clear// class XMLAttributeDecl/** ContentSpec really exists to aid the parser classes in implementing ... *//** Name or #PCDATA. Leaf nodes that represent parsed character ... *//** Represents a zero or one occurence count, '?'. *//** Represents a zero or more occurence count, '*'. *//** Represents a one or more occurence count, '+'. *//** Represents choice, '|'. *//** Represents sequence, ','. *//** Represents any namespace specified namespace. When the element ... *//** Represents any other namespace (XML Schema: ##other). ... *//** Represents any local element (XML Schema: ##local). *//** prcessContent is 'lax' * *//** processContent is 'skip' * *//** The content spec node type. ... *//** The "left hand" value object of the content spec node. ... *//** The "right hand" value of the content spec node. ... *//** Constructs a content spec with the specified values. *//** Constructs a content spec from the values in the specified content spec. *//** Constructs a content spec from the values specified by the given ... *//** Clears the values. *//** Sets the values. *//** Sets the values of the specified content spec. *//** Sets the values from the values specified by the given content spec ... *//** Returns a hash code for this node. *//** Returns true if the two objects are equal. */// Interfaces/** Provides a means for walking the structure built out of ... */// XMLContentSpec.Provider methods/** Fills in the provided content spec structure with content spec ... */// interface Provider// class XMLContentSpec/** All information specific to DTD grammars. ... */// pieces of information needed to make this usable as a Grammar key// if we know the root of this grammar, here's its name:// if we don't know the root name, this stores all elements that// could serve; fPossibleRoots and fRootName cannot both be non-null// Constructors:// init(XMLResourceIdentifier, String)// init(String, String, String, String, String)// init(XMLInputSource)// XMLGrammarDescription methods// getGrammarType():  String// getRootName():  String/** Set the root name * *//** Set possible roots * *//** Compares this grammar with the given grammar. Currently, we compare ... */// assume it's a DTDDescription// if we got this far we've got a root match... try other two fields,// since so many different DTD's have roots in common:/** Returns the hash code of this grammar ... */// give up; hope .equals can handle it:// class XMLDTDDescription/** The DTD loader. The loader knows how to build grammars from XMLInputSources. ... *//** Feature identifier: standard uri conformant feature. *//** Feature identifier: balance syntax trees. */// recognized features:/** Property identifier: locale. */// enforcing strict uri?/** Controls whether the DTD grammar produces balanced syntax trees. *//** Entity resolver . */// the scanner we use to actually read the DTD// the entity manager the scanner needs.// what's our Locale?/** Deny default construction; we need a SymtolTable! */// Add XML message formatter if there isn't one.// XMLGrammarLoader methods/** Returns the state of a property. ... */// getProperty(String):  Object/** Returns the state of a feature. ... *///getFeature(String):  boolean/** Return the Locale the XMLGrammarLoader is using. *//** Sets the error handler. ... *//** Returns the registered error handler. */// getErrorHandler():  XMLErrorHandler/** Sets the entity resolver. ... *//** Returns the registered entity resolver. */// getEntityResolver():  XMLEntityResolver/** Returns a Grammar object by parsing the contents of the ... */// no reason to use grammar bucket's "put" method--we// know which grammar it is, and we don't know the root name anyway...// actually start the parsing!// expected behaviour...// Close all streams opened by the parser.// loadGrammar(XMLInputSource):  Grammar/** Parse a DTD internal and/or external subset and insert the content ... */// process internal subset// To get the DTD scanner to end at the right place we have to fool// it into thinking that it reached the end of the internal subset// in a real document.// process external subset// loadGrammarWithContext(XMLDTDValidator, String, String, String, String, String)// reset all the components that we rely upon// class XMLDTDLoader/** The DTD processor. The processor implements a DTD ... *//** Feature identifier: warn on duplicate attdef *//** Feature identifier: warn on undeclared element referenced in content model. *//** Property identifier: grammar pool. *//** Property identifier: validator . *//** Validation. *//** Validation against only DTD *//** warn on duplicate attribute definition, this feature works only when validation is true *//** warn on undeclared element referenced in content model, this feature only works when valiation is true *//** Grammar bucket. */// the validator to which we look for our grammar bucket (the// validator needs to hold the bucket so that it can initialize// the grammar with details like whether it's for a standalone document...// the grammar pool we'll try to add the grammar to:/** DTD source. *//** DTD content model source. */// grammars/** DTD Grammar. *//** Perform validation. *//** True if in an ignore conditional section of the DTD. */// information regarding the current element// validation states/** Temporary entity declaration. *//** Notation declaration hash. *//** DTD element declaration name. *//** Mixed element type "hash". *//** Element declarations in DTD. */// to check for duplicate ID or ANNOTATION attribute declare in// ATTLIST, and misc VCs/** ID attribute names. *//** NOTATION attribute names. *//** NOTATION enumeration values. */// initialize data/* Resets the component. The component can query the component manager ... */// get needed components// we get our grammarBucket from the validator...// clear grammars// datatype validators/** Returns the DTD handler. ... *//** Gets the DTD content model handler. ... */// getDTDContentModelHandler():  XMLDTDContentModelHandler// XMLDTDContentModelHandler and XMLDTDHandler methods/** Check standalone entity reference. ... */// check VC: Standalone Document Declartion, entities references appear in the document.// the grammar bucket's DTDGrammar will now be the// one we want, whether we're constructing it or not.// if we're not constructing it, then we should not have a reference// to it!// ignored characters in DTD/** This method notifies of the start of a parameter entity. The parameter ... *//** This method notifies the end of a parameter entity. Parameter entity ... *///check VC: Unique Element Declaration// startAttlist(String)//more than one attribute definition is provided for the same attribute of a given element type.//this feature works only when validation is true.// a) VC: One ID per Element Type, If duplicate ID attribute// b) VC: ID attribute Default. if there is a declareared attribute//        default for ID it should be of type #IMPLIED or #REQUIRED//we should not report an error, when there is duplicate attribute definition for given element type//according to XML 1.0 spec, When more than one definition is provided for the same attribute of a given//element type, the first declaration is binding and later declaration are *ignored*. So processor should//ignore the second declarations, however an application would be warned of the duplicate attribute defintion// if http://apache.org/xml/features/validation/warn-on-duplicate-attdef feature is set to true,// one typical case where this could be a  problem, when any XML file// provide the ID type information through internal subset so that it is available to the parser which read//only internal subset. Now that attribute declaration(ID Type) can again be part of external parsed entity//referenced. At that time if parser doesn't make this distinction it will throw an error for VC One ID per//Element Type, which (second defintion) actually should be ignored. Application behavior may differ on the//basis of error or warning thrown. - nb.//rule a)//  VC: One Notation Per Element Type, should check if there is a//      duplicate NOTATION attribute// VC: Notation Attributes: all notation names in the//     (attribute) declaration must be declared.//ignore the second declarations, however an application would be warned of the duplicate attribute definition// if http://apache.org/xml/features/validation/warn-on-duplicate-attdef feature is set to true, Application behavior may differ on the basis of error or//warning thrown. - nb.// VC: No Duplicate Tokens// XML 1.0 SE Errata - E2// Only report the first uniqueness violation. There could be others,// but additional overhead would be incurred tracking unique tokens// that have already been encountered. -- mrglavas// VC: Attribute Default Legal// attributeDecl(String,String,String,String[],String,XMLString, XMLString, Augmentations)// endAttlist()//If the same entity is declared more than once, the first declaration//encountered is binding, SAX requires only effective(first) declaration//to be reported to the application//REVISIT: Does it make sense to pass duplicate Entity information across//the pipeline -- nb?//its a new entity and hasn't been declared.//store internal entity declaration in grammar//REVISIT: Does it make sense to pass duplicate entity information across//store external entity declaration in grammar// externalEntityDecl(String,XMLResourceIdentifier, Augmentations)// VC: Notation declared,  in the production of NDataDecl// unparsedEntityDecl(String,XMLResourceIdentifier,String,Augmentations)// VC: Unique Notation Name// notationDecl(String,XMLResourceIdentifier, Augmentations)// set state// startConditional(short)// endConditional()// save grammar// VC : Notation Declared. for external entity declaration [Production 76].// VC: Notation Attributes://     all notation names in the (attribute) declaration must be declared.// VC: No Notation on Empty Element// An attribute of type NOTATION must not be declared on an element declared EMPTY.// should be safe to release these references// check whether each element referenced in a content model is declared// sets the XMLDTDSource of this handler// returns the XMLDTDSource of this handler// sets the XMLContentModelDTDSource of this handler// setDTDContentModelSource(XMLDTDContentModelSource)// getDTDContentModelSource():  XMLDTDContentModelSource// any()// empty()// check VC: No duplicate Types, in a single mixed-content declaration// childrenElement(String)// endContentModel()/** Normalize the attribute value of a non CDATA default attribute ... */// skip leading spaces// just skip it.// simply shift non space chars if needed// if we finished on a space trim it// set the new value length// isValidName(String):  boolean/** Checks that all elements referenced in content models have ... *//** Does a recursive (if necessary) check on the specified element's ... */// It's not a leaf, so we have to recurse its left and maybe right// nodes. Save both values before we recurse and trash the node.//  Recurse on both children.// class XMLDTDProcessor/** Symbol: "&lt;&lt;datatypes>>". *//** Feature identifier: dynamic validation. *//** Property identifier: datatype validator factory. *//** Compile to true to debug attributes. *//** Compile to true to debug element children. */// updated during reset// validation state/** Dynamic validation. This state of this feature is only useful when ... */// the grammar pool/* location of the document as passed in from startDocument call *//** Datatype validator factory. *//** True if seen DOCTYPE declaration. *//** Schema type: None, DTD, Schema *//** Current element name. *//** Current content spec type. *//** The root element name. */// element stack/** Element index stack. *//** Content spec type stack. *//** Element name stack. */// children list and offset stack/** Element children. This data structure is a growing stack that ... *//** Element children count. *//** Element children offset stack. This stack refers to offsets ... *//** Element depth. *//** True if seen the root element. *//** True if inside of element content. *//** Temporary element declaration. *//** Temporary atribute declaration. *//** Temporary string buffers. */// symbols: general// attribute validators/** Datatype validator: ID. *//** Datatype validator: IDREF. *//** Datatype validator: IDREFS. *//** Datatype validator: ENTITY. *//** Datatype validator: ENTITIES. *//** Datatype validator: NMTOKEN. *//** Datatype validator: NMTOKENS. *//** Datatype validator: NOTATION. */// getGrammarBucket():  DTDGrammarBucket// getDocumentHandler():  XMLDocumentHandler// get initial grammars// save standalone state// save root element state// find or create grammar:// give grammar pool a chance...// Do not bother checking the pool if no public or system identifier was provided.// Since so many different DTDs have roots in common, using only a root name as the// key may cause an unexpected grammar to be retrieved from the grammar pool. This scenario// would occur when an ExternalSubsetResolver has been queried and the// XMLInputSource returned contains an input stream but no external identifier.// This can never happen when the instance document specified a DOCTYPE. -- mrglavas// we'll have to create it...// we've found a cached one;so let's make sure not to read// any external subset!// doctypeDecl(String,String,String, Augmentations)// REVISIT: [Q] Is there a more efficient way of doing this?//          Perhaps if the scanner told us so we don't have to//          look at the characters again. -Ac// call the ignoreableWhiteSpace callback// never call ignorableWhitespace if we are in cdata section// validate// For E15.2// fixes E15.1// Do validation if all of the following are true:// 1. The JAXP Schema Language property is not XML Schema//    REVISIT: since only DTD and Schema are supported at this time,//             such checking is sufficient. but if more schema types//             are introduced in the future, we'll need to change it//             to something like//             (fSchemaType == null || fSchemaType == NS_XML_DTD)// 2. One of the following is true (validation features)// 2.1 Dynamic validation is off, and validation is on// 2.2 Dynamic validation is on, and DOCTYPE was seen// 3 Xerces schema validation feature is off, or DOCTYPE was seen.//REVISIT:we can convert into functions.. adding default attribute values.. and one validating./** Add default attributes and validate. */// Check after all specified attrs are scanned// (1) report error for REQUIRED attrs that are missing (V_TAGc)// (2) add default attrs (FIXED and NOT_FIXED)// add namespace information// add attribute// get next att decl in the Grammar for this element// now iterate through the expanded attributes for// 1. if every attribute seen is declared in the DTD// 2. check if the VC: default_fixed holds// 3. validate every attribute.// check VC: Standalone Document Declaration, entities// references appear in the document.// REVISIT: this can be combined to a single check in// startEntity if we add one more argument in// startEnity, inAttrValue// found the match att decl,// REVISIT - cache the elem/attr tuple so that we only// give this error once for each unique occurrence// attribute is declared// fTempAttDecl should have the right value set now, so// the following is not needed// fGrammar.getAttributeDecl(attDefIndex,fTempAttDecl);// check VC: Standalone Document Declaration// for all attributes// addDTDDefaultAttrsAndValidate(int,XMLAttrList)/** Checks entities in attribute values for standalone VC. */// isExternalEntityRefInAttrValue(String):String/** Validate attributes in DTD fashion. */// NOTE: Save this information because invalidStandaloneAttDef//Caveat - Save this information because invalidStandaloneAttDef//changes fTempAttDef// validateDTDattribute(QName,String,XMLAttributeDecl)/** Returns true if invalid standalone attribute definition. */// REVISIT: This obviously needs to be fixed! -Ac/* if (fStandaloneReader == -1) { ... *//** Normalize the attribute value of a non CDATA attributes collapsing ... */// vars// now the tricky part/** * BUG #3512 *** ... */// check if the last appended character is a space./** Root element specified. */// rootElementSpecified(QName)/** Check that the content of an element is valid. ... */// Get the element name index from the element// Get out the content spec for this element//  Deal with the possible types of content. We try to optimized here//  by dealing specially with content models that don't require the//  full DFA treatment.//  If the child count is greater than zero, then this is//  an error right off the bat at index 0.//  This one is open game so we don't pass any judgement on it//  at all. Its assumed to fine since it can hold anything.// Get the content model for this element, faulting it in if needed/** ** ... */// this should never be reached in the case of DTD validation.// We succeeded// checkContent(int,int,QName[]):int/** Returns the content spec type for an element index. *//** Character data in content. */// charDataInCount()/** convert attribute type from ints to strings */// getAttributeTypeName(XMLAttributeDecl):String/** initialization *///REVISIT: datatypeRegistry + initialization of datatype//         why do we cast to ListDatatypeValidator?/** ensure element stack capacity */// ensureStackCapacity/** Handle element ... */// VC: Root Element Type// see if the root element's name matches the one in DoctypeDecl// REVISIT: Here are current assumptions about validation features//          given that XMLSchema validator is in the pipeline// http://xml.org/sax/features/validation = true// http://apache.org/xml/features/validation/schema = true// [1] XML instance document only has reference to a DTD//  Outcome: report validation errors only against dtd.// [2] XML instance document has only XML Schema grammars://  Outcome: report validation errors only against schemas (no errors produced from DTD validator)// [3] XML instance document has DTD and XML schemas:// [a] if schema language is not set outcome - validation errors reported against both grammars: DTD and schemas.// [b] if schema language is set to XML Schema - do not report validation errors// if dynamic validation is on//            validate only against grammar we've found (depending on settings//            for schema feature)// modify pipeline//  resolve the element//changed here.. new function for getContentSpecType//  0. insert default attributes//  1. normalize the attributes//  2. validate the attrivute list.// TO DO://changed here.. also pass element name,// set element content state// increment the element depth, add this element's// QName to its enclosing element 's children list// push current length onto stack// add this element to children// save current element information// handleStartElement(QName,XMLAttributes)/** Handle end element. */// decrease element depth// now pop this element off the top of the element stack// TO DO : fix this// Check after document is fully parsed// (1) check that there was an element with a matching id for every//   IDREF and IDREFS attr (V_IDREF0)// If Namespace enable then localName != rawName// NOTE: The binding of the element doesn't actually happen//       yet because the namespace binder does that. However,//       if it does it before this point, then the endPrefix-//       Mapping calls get made too soon! As long as the//       rawnames match, we know it'll have a good binding,//       so we can just use the current element. -Ac// returns whether a character is space according to the// version of XML this validator supports.// isSpace(int):  boolean// class XMLDTDValidator/** Defines a DTD Validator filter to allow ... *//** Returns true if the validator has a DTD grammar ... *//** Return true if validator must validate the document ... */// interface XMLDTDValidatorFilter/** TYPE_ANY *//** TYPE_EMPTY *//** TYPE_MIXED *//** TYPE_CHILDREN *//** TYPE_SIMPLE *//** scope *//** type *//** contentModelValidator */// class XMLElementDecl/** publicId *//** systemId *//** baseSystemId *//** notation *//** isPE *//** inExternal *//** <strong>Note:</strong> flag of where the entity is defined, not whether it is a external entity *//** Value. */// setValues(String,String,String,String,String,boolean,boolean)// class XMLEntityDecl/** base systemId */// class XMLNotationDecl/** TYPE_CDATA *//** TYPE_ENTITY *//** TYPE_ENUMERATION *//** TYPE_ID *//** TYPE_IDREF *//** TYPE_NMTOKEN *//** TYPE_NOTATION *//** TYPE_NAMED *//** DEFAULT_TYPE_DEFAULT *//** DEFAULT_TYPE_FIXED *//** DEFAULT_TYPE_IMPLIED *//** DEFAULT_TYPE_REQUIRED *//** enumeration *//** list *//** defaultType *//** defaultValue *//** non-normalized defaultValue *//** datatypeValidator */// REVISIT: Should this be a copy? -Ac// setValues(short,String,String[],boolean,short,String,String,DatatypeValidator)/** Set values. */// setValues(XMLSimpleType)// class XMLSimpleType/** Content model any node. ... *//** The any content model type. This value is one of the following: ... *//** URI of the any content model. This value is set if the type is ... *//** Part of the algorithm to convert a regex directly to a DFA ... *//** Constructs a content model any. */// Store the information// CMNode methods// package// Leaf nodes are never nullable unless its an epsilon node// If we are an epsilon node, then the first pos is an empty set// Otherwise, its just the one bit of our position// If we are an epsilon node, then the last pos is an empty set// class CMAny/** Content model Bin-Op node. ... *///  Constructors// Insure that its one of the types we require// Store the nodes and init any data that needs it//  Package, final methods//  Package, inherited methods//  If its an alternation, then if either child is nullable then//  this node is nullable. If its a concatenation, then both of//  them have to be nullable.//  Protected, inherited methods// Its the the union of the first positions of our children.//  If our left child is nullable, then its the union of our//  children's first positions. Else is our left child's first//  positions.//  If our right child is nullable, then its the union of our//  children's last positions. Else is our right child's last//  Private data members//  fLeftChild//  fRightChild//      These are the references to the two nodes that are on either//      side of this binary operation./** Content model leaf node. ... *//** This is the element that this leaf represents. *//** Constructs a content model leaf. */// Store the element index and position// class CMLeaf/** A content model node. ... *///  Package, abstract methods// made this public so it could be implemented and used outside this package -neilg.//  Package final methods/** Allows the user to set arbitrary data on this content model ... *//** Allows the user to get arbitrary data set on this content ... *///  Protected, abstract methods//  fType//      The type of node. This indicates whether its a leaf or an//      operation. Though we also do derived classes for these types,//      it is too expensive to use runtime typing to find this out.//      This is one of the ContentSpecNode.NODE_XXX types.//  fFirstPos//      The set of NFA states that represent the entry states of this//      node in the DFA.//  fFollowPos//      The set of NFA states that can be gotten to from from this//  fLastPos//      The set of NFA states that represent the final states of this//  fMaxStates//      The maximum number of states that the NFA has, which means the//      max number of NFA states that have to be traced in the state//      sets during the building of the DFA. Its unfortunate that it//      has to be stored redundantly, but we need to fault in the//      state set members and they have to be sized to this size. We//      init to to -1 so it will cause an error if its used without//      being initialized./** This class is a very simple bitset class. The DFA content model code needs ... */// made this class public so it can be accessed by// the XS content models from the schema package -neilg.// Store the required bit count and insure its legal//  See if we need to allocate the byte array or whether we can live//  within the 64 bit high performance scheme.// Init all the bits to zero//  Public inherited methods//  We know this won't happen but we have to catch it to avoid it//  having to be in our 'throws' list.// Create the mask and byte values// And access the right bit and byte// They have to be the same size// had to make this method public so it could be accessed from// schema package - neilg.//  fBitCount//      The count of bits that the outside world wants to support,//      so its the max bit index plus one.//  fByteCount//      If the bit count is > 64, then we use the fByteArray member to//      store the bits, and this indicates its size in bytes. Otherwise//      its value is meaningless.//  fBits1//  fBits2//      When the bit count is < 64 (very common), these hold the bits.//      Otherwise, the fByteArray member holds htem./* Optimization(Jan, 2001) *//** Content model Uni-Op node. ... */// Store the node and init any data that needs it//  For debugging purposes, make sure we got rid of all non '*'//  repetitions. Otherwise, '*' style nodes are always nullable.// Its just based on our child node's first pos// Its just based on our child node's last pos//  fChild//      This is the reference to the one child that we have for this//      unary operation./** validate ... */// interface ContentModelValidator// special strings/** Epsilon string. *//** End-of-content string. *//** initializing static members * *//** Set to true to debug content model validation. *//* this is the EquivClassComparator object *///private EquivClassComparator comparator = null;/** This is the map of unique input symbol elements to indices into ... *//** This is a map of whether the element map contains information ... *//** The element map size. *//** Boolean to distinguish Schema Mixed Content *//** The NFA position of the special EOC (end of content) node. This ... *//** This is an array of booleans, one per state (there are ... *//** The list of follow positions for each NFA position (i.e. for each ... *//** This is the head node of our intermediate representation. It is ... *//** The count of leaf nodes. This is an important number that set some ... *//** An array of non-epsilon leaf nodes, which is used during the DFA ... *//** Array mapping ANY types to the leaf list. *///private ContentLeafNameTypeVector fLeafNameTypeVector = null;/** The string pool of our parser session. This is set during construction ... *///private StringPool fStringPool = null;/** This is the transition table that is the main by product of all ... *//** The number of valid entries in the transition table, and in the other ... *//** Flag that indicates that even though we have a "complicated" ... *//** Constructs a DFA content model. ... */// Store away our index and pools in members//fStringPool = stringPool;// this is for Schema Mixed Content//  Ok, so lets grind through the building of the DFA. This method//  handles the high level logic of the algorithm, but it uses a//  number of helper classes to do its thing.//  In order to avoid having hundreds of references to the error and//  string handlers around, this guy and all of his helper classes//  just throw a simple exception and we then pass it along.// ContentModelValidator methods/** Check that the specified content is valid according to this ... */// A DFA content model must *always* have at least 1 child// so a failure is given if no children present.// Defect 782: This is an incorrect statement because a DFA// content model is also used for constructions such as://     (Optional*,NotRequired?)// where a perfectly valid content would be NO CHILDREN.// Therefore, if there are no children, we must check to// see if the CMNODE_EOC marker is a valid start state! -Ac// if child count == 0//  Lets loop through the children in the array and move our way//  through the states. Note that we use the fElemMap array to map//  an element index to a state index.// Get the current element index out// ignore mixed text// Look up this child in our element map//System.out.println("fElemMap["+elemIndex+"]: "+fElemMap[elemIndex]);// If we didn't find it, then obviously not valid//  Look up the next state for this input symbol when in the//  current state.// If its not a legal transition, then invalid//  We transitioned all the way through the input list. However, that//  does not mean that we ended in a final state. So check whether//  our ending state is a final state./** Builds the internal DFA transition table from the given syntax tree. ... *///  The first step we need to take is to rewrite the content model//  using our CMNode objects, and in the process get rid of any//  repetition short cuts, converting them into '*' style repetitions//  or getting rid of repetitions altogether.//  The conversions done are://  x+ -> (x|x*)//  x? -> (x|epsilon)//  This is a relatively complex scenario. What is happening is that//  we create a top level binary node of which the special EOC value//  is set as the right side node. The the left side is set to the//  rewritten syntax tree. The source is the original content model//  info from the decl pool. The rewrite is done by buildSyntaxTree()//  which recurses the decl pool's content of the element and builds//  a new tree in the process.//  Note that, during this operation, we set each non-epsilon leaf//  node's DFA state position and count the number of such leafs, which//  is left in the fLeafCount member.//  The nodeTmp object is passed in just as a temp node to use during//  the recursion. Otherwise, we'd have to create a new node on every//  level of recursion, which would be piggy in Java (as is everything//  for that matter.)/* MODIFIED (Jan, 2001) ... *///  And handle specially the EOC node, which also must be numbered//  and counted as a non-epsilon leaf node. It could not be handled//  in the above tree build because it was created before all that//  started. We save the EOC position since its used during the DFA//  building loop.//  Ok, so now we have to iterate the new tree and do a little more//  work now that we know the leaf count. One thing we need to do is//  to calculate the first and last position sets of each node. This//  is cached away in each of the nodes.//  Along the way we also set the leaf count in each node as the//  maximum state count. They must know this in order to create their//  first/last pos sets.//  We also need to build an array of references to the non-epsilon//  leaf nodes. Since we iterate it in the same way as before, this//  will put them in the array according to their position values.//  And, moving onward... We now need to build the follow position//  sets for all the nodes. So we allocate an array of state sets,//  one for each leaf node (i.e. each DFA position.)//  And finally the big push... Now we build the DFA using all the//  states and the tree we've built up. First we set up the various//  data structures we are going to use while we do this.//  First of all we need an array of unique element names in our//  content model. For each transition table entry, we need a set of//  contiguous indices to represent the transitions for a particular//  input element. So we need to a zero based range of indexes that//  map to element types. This element map provides that mapping.// Get the current leaf's element index// See if the current leaf node's element index is in the list// If it was not in the list, then add it, if not the EOC node// set up the fLeafNameTypeVector object if there is one./** *** ... *///  Next lets create some arrays, some that that hold transient//  information during the DFA build and some that are permament.//  These are kind of sticky since we cannot know how big they will//  get, but we don't want to use any Java collections because of//  performance.//  Basically they will probably be about fLeafCount*2 on average,//  but can be as large as 2^(fLeafCount*2), worst case. So we start//  with fLeafCount*4 as a middle ground. This will be very unlikely//  to ever have to expand, though it if does, the overhead will be//  somewhat ugly.//  Ok we start with the initial set as the first pos set of the//  head node (which is the seq node that holds the content model//  and the EOC node.)//  Init our two state flags. Basically the unmarked state counter//  is always chasing the current state counter. When it catches up,//  that means we made a pass through that did not add any new states//  to the lists, at which time we are done. We could have used a//  expanding array of flags which we used to mark off states as we//  complete them, but this is easier though less readable maybe.//  Init the first transition table entry, and put the initial state//  into the states to do list, then bump the current state./* Optimization(Jan, 2001); This is faster for ... *///  Ok, almost done with the algorithm... We now enter the//  loop where we go until the states done counter catches up with//  the states to do counter.//  Get the first unmarked state out of the list of states to do.//  And get the associated transition table entry.// Mark this one final if it contains the EOC state// Bump up the unmarked state count, marking this state done// Loop through each possible input symbol in the element map//  Build up a set of states which is the union of all of//  the follow sets of DFA positions that are in the current//  state. If we gave away the new set last time through then//  create a new one. Otherwise, zero out the existing one.// If this leaf index (DFA position) is in the current set...//  If this leaf is the current input symbol, then we//  want to add its follow list to the set of states to//  transition to from the current state.//  If this new set is not empty, then see if its in the list//  of states to do. If not, then add it.//  Search the 'states to do' list to see if this new//  state set is already in there.// If we did not find it, then add it//  Put this new state into the states to do and init//  a new entry at the same index in the transition//  table.// We now have a new state to do so bump the count//  Null out the new set to indicate we adopted it.//  This will cause the creation of a new set on the//  next time around the loop.//  Now set this state in the transition table's entry//  for this element (using its index), with the DFA//  state we will move to from the current state when we//  see this input element.// Expand the arrays if we're full//  Yikes, we overflowed the initial array size, so//  we've got to expand all of these arrays. So adjust//  up the size by 50% and allocate new arrays.// Copy over all of the existing content// Store the new array size// Check to see if we can set the fEmptyContentIsValid flag.//  And now we can say bye bye to the temp representation since we've//  built the DFA./** Calculates the follow list of the current node. ... */// Recurse as required// Recurse only//  Now handle our level. We use our left child's last pos//  set and our right child's first pos set, so go ahead and//  get them ahead of time.//  Now, for every position which is in our left child's last set//  add all of the states in our right child's first set to the//  follow set for that position./** Dumps the tree of the current node to standard output. ... *//** -1 is used to represent bad transitions in the transition table ... *//** Post tree build initialization. */// Set the maximum states on this node// REVISIT: Don't waste these structures.//  Put this node in the leaf list at the current index if its//  a non-epsilon leaf.// class DFAContentModel/** MixedContentModel is a derivative of the abstract content model base ... *//** The count of possible children that we have to deal with. *//** The list of possible children that we have to accept. *//** The type of the children to support ANY. *//** True if mixed content model is ordered. DTD mixed content models ... *//** Constructs a mixed content model. ... */// Make our own copy now, which is exactly the right size// must match order// element must match// advance index// can appear in any order// Get the current child out of the source index// If its PCDATA, then we just accept that// And try to find it in our list// REVISIT: What about checking for multiple ANY matches?//          The content model ambiguity *could* be checked//          by the caller before constructing the mixed//          content model.// We did not find this one, so the validation failed// Everything seems to be in order, so return success// class MixedContentModel/** SimpleContentModel is a derivative of the abstract content model base ... *//** CHOICE *//** SEQUENCE *//** The element decl pool indices of the first (and optional second) ... *//** The operation that this object represents. Since this class only ... *//** Constructs a simple content model. ... *///  Store away the children and operation. This is all we need to//  do the content model check.//  The operation is one of the ContentSpecNode.NODE_XXX values!//  According to the type of operation, we do the correct type of//  content check.// If there is not a child, then report an error at index 0// If the 0th child is not the right kind, report an error at 0// If more than one child, report an error at index 1//  If there is one child, make sure its the right type. If not,//  then its an error at index 0.//  If the child count is greater than one, then obviously//  bad, so report an error at index 1.//  If the child count is zero, that's fine. If its more than//  zero, then make sure that all children are of the element//  type that we stored. If not, report the index of the first//  failed one.//  If the child count is zero, that's an error so report//  an error at index 0.//  Otherwise we have to check them all to make sure that they//  are of the correct child type. If not, then report the index//  of the first one that is not.//  There must be one and only one child, so if the element count//  is zero, return an error at index 0.// If the zeroth element isn't one of our choices, error at 0// If there is more than one element, then an error at 1//  There must be two children and they must be the two values//  we stored, in the stored order.// We survived, so return success status// class SimpleContentModel/** The factory to create and return DTD types. The implementation should ... *//** Get an instance of the default DTDDVFactory implementation. ... *//** Get an instance of DTDDVFactory implementation. ... *///fall back for compatibility// can't create a new object of this class/** return a dtd type of the given name ... *//** get all built-in DVs, which are stored in a map keyed by the name ... *//** A runtime exception that's thrown if an error happens when the application ... *//** Base class for datatype exceptions. For DTD types, the exception can be ... */// used to store error code and error substitution arguments/** Create a new datatype exception by providing an error code and a list ... *//** Return the error code ... *//** Return the list of error arguments ... *//** Overrides this method to get the formatted&localized error message. ... *//** The interface that a DTD datatype must implement. The implementation of this ... *//** validate a given string against this DV ... *//** Datatype exception for invalid facet. This exception is only used by ... *//** Datatype exception for invalid values. ... *//** Defines a factory API that enables applications to <p> ... *//** Get a default instance of SchemaDVFactory implementation. ... *///getInstance():  SchemaDVFactory/** Get an instance of SchemaDVFactory implementation. ... */// if the class name is not specified, use the default one/** Get a built-in simple type of the given name ... *//** get all built-in simple types, which are stored in a SymbolHash keyed by ... *//** Create a new simple type which is derived by restriction from another ... *//** Create a new simple type which is derived by list from another simple ... *//** Create a new simple type which is derived by union from a list of other ... *//** Class to get the information back after content is validated. This info ... *//** The normalized value of a string value *//** The actual value from a string value (QName, Boolean, etc.) ... *//** The type of the actual value. It's one of the _DT constants ... *//** If the type is a union type, then the member type which ... *//** If ... *//** In the case the value is a list or a list of unions, this value ... *//** reset the state of this object *//** Return a string representation of the value. If there is an actual ... *//** ValidationContext has all the information required for the ... */// whether to validate against facets// whether to do extra id/idref/entity checking// whether we need to normalize the value that is passed!// are namespaces relevant in this context?// entity// id// idref// get symbol from symbol table// qname// Locale/** The class used to pass all facets to {@link XSSimpleType#applyFacets}. ... *//** value of length facet. *//** value of minLength facet. *//** value of maxLength facet. *//** value of whiteSpace facet. *//** value of totalDigits facet. *//** value of fractionDigits facet. *//** string containing value of pattern facet, for multiple patterns values ... *//** Vector containing values of Enumeration facet, as String's. *//** An array parallel to "Vector enumeration". It contains namespace context ... *//** value of maxInclusive facet. *//** value of maxExclusive facet. *//** value of minInclusive facet. *//** value of minExclusive facet. *//** This interface <code>XSSimpleType</code> represents the simple type ... *//** constants defined for the values of 'whitespace' facet. ... *//** preserve the white spaces *//** replace the white spaces *//** collapse the white spaces *//** Constant defined for the primitive built-in simple tpyes. ... *//** "string" type *//** "boolean" type *//** "decimal" type *//** "float" type *//** "double" type *//** "duration" type *//** "dataTime" type *//** "time" type *//** "date" type *//** "gYearMonth" type *//** "gYear" type *//** "gMonthDay" type *//** "gDay" type *//** "gMonth" type *//** "hexBinary" type *//** "base64Binary" type *//** "anyURI" type *//** "QName" type *//** "precisionDecimal" type *//** "NOTATION" type *//** return an ID representing the built-in primitive base type. ... *//** validate a given string against this simple type. ... *//** validate a given string value, represented by content.toString(). ... *//** Validate an actual value against this simple type. ... *//** If this type is created from restriction, then some facets can be applied ... *//** Check whether two actual values are equal. ... *//** Check the order of the two actual values. (May not be supported by all ... *///public short compare(Object value1, Object value2);/** Check whether this type is or is derived from ID. ... *//** Return the whitespace corresponding to this datatype. ... *//** the factory to create/return built-in schema DVs and create user-defined DVs ... *//** get all built-in DVs, which are stored in a Map keyed by the name ... */// DTDDVFactoryImpl/** <P>ENTITYDatatypeValidator implements the ... */// construct an ENTITY datatype validator/** Checks that "content" string is valid ID value. ... *//** <P>IDDatatypeValidator - ID represents the ID attribute ... */// construct an ID datatype validator//Check if is valid key-[81] EncName ::= [A-Za-z] ([A-Za-z0-9._] | '-')*/** <P>IDREFDatatypeValidator - represents the IDREFS ... */// construct an IDREF datatype validator/** Checks that "content" string is valid IDREF value. ... *//** For list types: ENTITIES, IDREFS, NMTOKENS. ... */// the type of items in the list// construct a list datatype validator/** Checks that "content" string is valid. ... *///Check each token in list against base type/** NMTOKEN datatype validator. ... */// construct a NMTOKEN datatype validator/** Checks that "content" string is valid NMTOKEN value. ... */// class NMTOKENDatatypeValidator/** NOTATIONValidator defines the interface that data type validators must obey. ... */// construct a NOTATION datatype validator/** Checks that "content" string is valid NOTATION value. ... *//** <P>StringValidator validates that XML content is a W3C string type.</P> ... */// construct a string datatype validator/** Checks that "content" string is valid string value. ... *//** the factory to create/return built-in XML 1.1 DVs and create user-defined DVs ... */// <clinit>//XML11DTDDVFactoryImpl/** NMTOKEN datatype validator for NMTokens from XML 1.1. ... */// class XML11NMTOKENDatatypeValidator/** This class provides encode/decode for RFC 2045 Base64 as ... *//** Encodes hex octects into Base64 ... */// form integral number of 6-bit groups/** Decodes Base64 data into octects ... */// remove white spaces//should be divisible by four//if found "no data" just return null//Check if they are PAD characters//Two PAD e.g. 3c[Pad][Pad]//last 4 bits should be zero//One PAD  e.g. 3cQ[Pad]//last 2 bits should be zero//an error  like "3c[Pad]r", "3cdX", "3cXd", "3cXX" where X is non data//No PAD e.g 3cQl/** remove WhiteSpace from MIME containing encoded Base64 data. ... */// count characters that's not whitespace/* Copyright 2004 The Apache Software Foundation. ... *//** Implementation of <code>com.sun.org.apache.xerces.internal.xs.datatypes.ByteList</code>. ... */// actually data stored in a byte array// canonical representation of the data/** The number of <code>byte</code>s in the list. The range of ... *//** Checks if the <code>byte</code> <code>item</code> is a ... *//** Returns the <code>index</code>th item in the collection. The index ... *//* List methods *//** format validation ... *//** Encode a byte array to hex string ... *//** Decode hex string to a byte array ... *//** This is the base class of all date/time datatype validators. ... *///debugging//define shared variables for date/time//define constants to be used in assigning default values for//all date/time excluding duration//getAllowedFacets()// distinguishes between identity and equality for date/time values// ie: two values representing the same "moment in time" but with different// remembered timezones are now equal but not identical.// original timezones must be the same in addition to date/time values// being 'equal'//isIdentical()// the parameters are in compiled form (from getActualValue)//compare()/** Compare algorithm described in dateDime (3.2.7). Duration datatype ... *///compare date1<=date1<=(date2 with time zone -14)//clones date1 value to global temporary storage: fTempDate//compare date1>=(date2 with time zone +14)//clones date1 value to global temporary storage: tempDate//compare (date1 with time zone -14)<=date2//compare (date1 with time zone +14)<=date2/** Given normalized values, determines order-relation between give date/time ... *//** Parses time hh:mm:ss.sss and time zone if any ... *///get hours (hh)//get minutes (mm)//get seconds (ss)//find UTC sign if any//get seconds (ms)//parse UTC time zone (hh:mm)/** Parses date CCYY-MM-DD ... *//** Parses date CCYY-MM ... */// REVISIT: date starts with preceding '-' sign//          do we have to do anything with it?//fStart points right after the MONTH/** Shared code from Date and YearMonth datatypes. Finds if time zone sign is ... *///fStart points right after the date/** Parses time zone: 'Z' or {+,-} followed by hh:mm ... *///parse hr//parse min/** Computes index of given char within StringBuffer ... *//** Validates given date/time object accoring to W3C PR Schema [D.1 ISO 8601 ... *///REVISIT: should we throw an exception for not valid dates//          or reporting an error message should be sufficient?/** XML Schema 1.1 - RQ-123: Allow year 0000 in date related types. *///validate days//validate hours//validate/** Return index of UTC char: 'Z', '+', '-' ... *//** Returns ... *//** Given start and end position, parses string value ... *///REVISIT: more testing on this parsing needs to be done.// parse Year differently to support negative value./** If timezone present - normalize dateTime [E Adding durations to ... */// REVISIT: we have common code in addDuration() for durations//          should consider reorganizing it.//add minutes (from time zone)//add hours/** Resets object representation of date/time ... *//** Given {year,month} computes maximum number of days for given month ... *///REVISIT: should we take care about Julian calendar?// help function described in W3C PR Schema [E Adding durations to dateTimes]//modulo(a, b) = a - fQuotient(a,b)*b//fQuotient(a, b) = the greatest integer less than or equal to a/b//modulo(a - low, high - low) + low//fQuotient(a - low, high - low)// Need to convert from scientific notation of the form// n.nnn...E-N (N >= 4) to a normal decimal value.// It's only possible if String.valueOf(double) is broken.// Remove trailing zeros.// Now append the digits to the end. Skip over the decimal point.// n.nnn...EN (N >= 7) to a normal decimal value.// Append trailing zeroes if necessary.//Private help functions/** Represents date time data */// used for comparisons - to decide the 'interesting' portions of// a date/time based data type.// a pointer to the type that was used go generate this data// note that this is not the actual simple type, but one of the// statically created XXXDV objects, so this won't cause any GC problem.// If two DateTimeData are equals - then they should have the same// hashcode. This means we need to convert the date to UTC before// we return its hashcode.// The DateTimeData is unfortunately mutable - so we cannot// cache the result of the conversion.../** Represent the schema type "anyAtomicType" ... */// class AnyAtomicDV/** Represent the schema type "anySimpleType" ... */// anySimpleType doesn't allow any facet, not even whiteSpace// class AnySimpleDV/** Represent the schema type "anyURI" ... */// before we return string we have to make sure it is correct URI as per spec.// for some types (string and derived), they just return the string itself// check 3.2.17.c0 must: URI (rfc 2396/2723)// encode special characters using XLink 5.4 algorithm// Support for relative URLs// According to Java 1.1: URLs may also be specified with a// String and the URL object that it is related to.// REVISIT: do we need to return the new URI object?// To encode special characters in anyURI, by using %HH to represent// special ASCII characters: 0x00~0x1F, 0x7F, ' ', '<', '>', etc.// and non-ASCII characters (whose value >= 128).// for each character in the anyURI// If encoding happened, create a new string;// otherwise, return the orginal one.// class AnyURIDV/** Represent the schema type "base64Binary" ... */// length of a binary type is the number of bytes/** represent base64 data */// class Base64BinaryDV// there are 27 types. 53 is the closest prime number to 27*2=54./** get all built-in simple types, which are stored in a hashtable keyed by ... */// create all built-in types// base schema simple type names//createBuiltInTypes(SymbolHash)//BaseDVFactory/** the base factory to create/return built-in schema DVs and create user-defined DVs ... */// create common built-in types// all schema simple type names//createBuiltInTypes()/** Implementation internal * *///BaseSchemaDVFactory/** Represent the schema type "boolean" ... */// class BooleanDV/** Validator for <date> datatype (W3C Schema datatypes) ... *//** Parses, validates and computes normalized version of dateTime object ... *///validate and normalize//REVISIT: do we need SchemaDateTimeException?//save unnormalized values/** Validator for &lt;dateTime&gt; datatype (W3C Schema Datatypes) ... */// both time and date//Check the separator character between Date and Time/** Validator for &lt;gDay&gt; datatype (W3C Schema datatypes) ... *///size without time zone: ---09/** Parses, validates and computes normalized version of gDay object ... *///initialize values/** Converts gDay object representation to String ... *//** Used to validate the <dayTimeDuration> type ... *//** Represent the schema type "decimal" ... */// Avoid using the heavy-weight java.math.BigDecimal// sign: 0 for vlaue 0; 1 for positive values; -1 for negative values// total digits. >= 1// integer digits when sign != 0// fraction digits when sign != 0// the string representing the integer part// the string representing the fraction part// whether the canonical form contains decimal point// these 4 variables are used to indicate where the integre/fraction// parts start/end.// Deal with leading sign symbol if present// skip '+', so intStart should be 1// keep '-', so intStart is stil 0// skip leading zeroes in integer part// Find the ending position of the integer part// Not reached the end yet// the remaining part is not ".DDD", error// fraction part starts after '.', and ends at the end of the input// no integer part, no fraction part, error.// ignore trailing zeroes in fraction part// check whether there is non-digit characters in the fraction part// ".00", treat it as "0"// these 2 variables are used to indicate where the integre start/end.// Not reached the end yet, error// no integer part, error.// "00", treat it as "0"// for -0.1, total digits is 1, so we need 3 extra spots// class DecimalDV/** Represent the schema type "double" ... *///convert a String to Double form, we have to take care of cases specified in spec like INF, -INF and NaN//getActualValue()// Can't call Double#compareTo method, because it's introduced in jdk 1.2//distinguishes between identity and equality for double datatype//0.0 is equal but not identical to -0.0/** Returns true if it's possible that the given ... */// NOTE: we don't distinguish 0.0 from -0.0// This check is necessary because doubleToLongBits(+0) != doubleToLongBits(-0)// NOTE: 0.0 is equal but not identical to -0.0// this < other// this > other// this == other// one of the 2 values or both is/are NaN(s)// this = NaN = other// this is NaN <> other// other is NaN <> this// REVISIT: use the java algorithm for now, because we// don't know what to output for 1.1d (which is no// actually 1.1)// if it contains 'E', then it should be a valid schema// canonical representation// at most 3 longer: E, -, 9// expected decimal point position// for non-zero integer part// decimal point position// move the digits: ddd.d --> d.ddd// trim trailing zeros: d00.0 --> d.000 --> d.// add the last zero if necessary: d. --> d.0// append E: d.dd --> d.ddE// how far we shifted the decimal point// append the exponent --> d.ddEd// the exponent is at most 7// non-zero digit point// skip zeros: 0.003// put the first non-zero digit to the left of '.'// move other digits (non-zero) to the right of '.'// adjust the length// append 0 if nessary: 0.03 --> 3. --> 3.0// append E-: d.dd --> d.ddE-// the exponent is at most 3// class DoubleDV/** Validator for &lt;duration&gt; datatype (W3C Schema Datatypes) ... */// order-relation on duration is a partial order. The dates below are used to// for comparison of 2 durations, based on the fact that// duration x and y is x<=y iff s+x<=s+y// see 3.2.6 duration W3C schema datatype specs// the dates are in format: {CCYY,MM,DD, H, S, M, MS, timezone}/** Parses, validates and computes normalized version of duration object ... *///negative duration//at least one number and designator must be seen after P//find 'Y'//scan year//scan month//scan day//scan hours, minutes, seconds//REVISIT: can any item include a decimal fraction or only seconds?//scan hours//scan min//scan seconds// no additional data shouls appear after last item// P1Y1M1DT is illigal value as well/** Compares 2 given durations. (refer to W3C Schema Datatypes "3.2.6 duration") ... *///REVISIT: this is unoptimazed vs of comparing 2 durations//         Algorithm is described in 3.2.6.2 W3C Schema Datatype specs//add constA to both durations//try and see if the objects are equal//long comparison algorithm is required//REVISIT: some code could be shared between normalize() and this method,//         however is it worth moving it? The structures are different...//add months (may be modified additionaly below)//add years (may be modified additionaly below)//add seconds//add minutes//original duration was negative/** Represent the schema type "entity" ... */// class EntityDV/** A special factory to create/return built-in schema DVs and create user-defined DVs ... */// add anyAtomicType// add 2 duration types/** Represent the schema type "float" ... *///convert a String to Float form, we have to take care of cases specified in spec like INF, -INF and NaN// Can't call Float#compareTo method, because it's introduced in jdk 1.2//distinguishes between identity and equality for float datatype// This check is necessary because floatToIntBits(+0) != floatToIntBits(-0)// don't know what to output for 1.1f (which is no// class FloatDV// there are 45 types. 89 is the closest prime number to 45*2=90.// create base types first// full schema simple type names//XFormsDVFactory/** Represent the schema type "hexBinary" ... *//** Represent the schema type "ID" ... */// class IDDV/** Represent the schema type "IDREF" ... *///IDREF class/** Represent the schema type "integer" ... *//** Represent the schema list types ... */// this method should never be called: XSSimpleTypeDecl is responsible for// calling the item type for the convertion// length of a list type is the number of items in the list//end of loop//everything went fine.// class ListDV/** Validator for &lt;gMonth&gt; datatype (W3C Schema Datatypes) ... *//** Convert a string to a compiled form ... *//** Parses, validates and computes normalized version of gMonth object ... *///set constants// REVISIT: allow both --MM and --MM-- now.// need to remove the following 4 lines to disallow --MM--// when the errata is offically in the rec./** Overwrite compare algorithm to optimize month comparison ... *//* protected  short compareDates(DateTimeData date1, DateTimeData date2) { ... *//** Converts month object representation to String ... *//** Validator for &lt;gMonthDay&gt; datatype (W3C Schema Datatypes) ... *///size without time zone: --MM-DD/** Parses, validates and computes normalized version of gMonthDay object ... *//** Converts gMonthDay object representation to String ... *//** Validator for <precisionDecimal> datatype (W3C Schema 1.1) ... */// sign: 0 for absent; 1 for positive values; -1 for negative values (except in case of INF, -INF)//precision//int precision = 0;// the remaining part is not ".DDD" or "EDDD" or "eDDD", error// find location of E or e (if present)// Find the ending position of the fracion part/* while (fracEnd > fracStart && content.charAt(fracEnd-1) == '0') { ... */// Construct a canonical String representation of this number// for the purpose of deriving a hashCode value compliant with// equals.// The toString representation will be:// NaN for NaN, INF for +infinity, -INF for -infinity, 0 for zero,// and [1-9].[0-9]*[1-9]?(E[1-9][0-9]*)? for other numbers.// There's nothing else we can use easily, because equals could// return true for widely different representation of the// same number - and we don't have any canonical representation.// The problem here is that we must ensure that if two numbers// are equals then their hash code must also be equals.// hashCode for 1.01E1 should be the same as hashCode for 0.101E2// So we call cannonicalToStringForHashCode - which implements an// algorithm that invents a normalized string representation// for this number, and we return a hash for that.// seen NaN//INF is greater than everything and equal to itself//-INF is smaller than everything and equal itself// To enable comparison - the exponent part of the decimal will be limited// to the max value of int.//otherwise the 2 combined values are the same// REVISIT: to be determined by working group/** Represent the schema type "QName" and "NOTATION" ... */// get prefix and local part out of content// both prefix (if any) a nd localpart must be valid NCName// resove prefix to a uri, report an error if failed// REVISIT: qname and notation shouldn't support length facets.//          now we just return the length of the rawname/** represent QName data *//** Constructs a QName with the specified values. */// <init>(String,String,String,String)// equals(Object):boolean// class QNameDVDV// TODO: move specific 1.0 DV implementation from base//SchemaDVFactoryImpl/** Represent the schema type "string" ... */// class StringDV/** Validator for &lt;time&gt; datatype (W3C Schema Datatypes) ... *//** Parses, validates and computes normalized version of time object ... */// time// initialize to default values/** Converts time object representation to String ... *//** All primitive types plus ID/IDREF/ENTITY/INTEGER are derived from this abstract ... */// which facets are allowed for this type// convert a string to an actual value. for example,// for number types (decimal, double, float, and types derived from them),// get the BigDecimal, Double, Flout object.// for ID/IDREF/ENTITY types, do some extra checking after the value is// checked to be valid with respect to both lexical representation and// facets// the following methods might not be supported by every DV.// but XSSimpleTypeDecl should know which type supports which methods,// and it's an *internal* error if a method is called on a DV that// doesn't support it.//order constants// where there is distinction between identity and equality, this method// will be overwritten// checks whether the two values are identical; for ex, this distinguishes// -0.0 from 0.0// check the order relation between the two values// get the length of the value// get the number of digits of the value// get the number of fraction digits of the value// check whether the character is in the range 0x30 ~ 0x39// if the character is in the range 0x30 ~ 0x39, return its int value (0~9),// otherwise, return -1// interface TypeValidator/** Represent the schema union types ... */// calling the member types for the convertion// class UnionDV/* Copyright 2001-2005 The Apache Software Foundation. ... *//** @xerces.internal ... */// XML Schema 1.1 type// notation use the same one as qname//AnySimpleDV(),//StringDV(),//BooleanDV(),//DecimalDV(),//FloatDV(),//DoubleDV(),//DurationDV(),//DateTimeDV(),//TimeDV(),//DateDV(),//YearMonthDV(),//YearDV(),//MonthDayDV(),//DayDV(),//MonthDV(),//HexBinaryDV(),//Base64BinaryDV(),  // Base64 know how to deal with spaces//AnyURIDV(),//QNameDV(),//PrecisionDecimalDV() (Schema 1.1)//QNameDV(),   // notation//IDDV(),//IDREFDV(),//EntityDV(),//IntegerDV(),//ListDV(),//UnionDV(),//YearMonthDurationDV() (Schema 1.1)//DayTimeDurationDV() (Schema 1.1)//AnyAtomicDV() (Schema 1.1)// XML Schema 1.1 type constants// DOM Level 3 TypeInfo Derivation Method constants// this will be true if this is a static XSSimpleTypeDecl// and hence must remain immutable (i.e., applyFacets// may not be permitted to have any effect).// The most specific built-in type kind.//for constraining facets// used in case fenumerationType value is LIST or LISTOFUNION// annotations for constraining facets// facets as objects// enumeration and pattern facets// simpleType annotations// for fundamental facets// The namespace schema information item corresponding to the target namespace// of the simple type definition, if it is globally declared; or null otherwise.// default constructor//Create a new built-in primitive types (and id/idref/entity/integer/yearMonthDuration)// To simplify the code for anySimpleType, we treat it as an atomic type// Specify the build in kind for this primitive type//Create a new simple type for restriction for built-in types// Specify the build in kind for this built-in type//Create a new simple type for restriction.// always inherit facets from the base.// in case a type is created, but applyFacets is not called// always inherit facet annotations in case applyFacets is not called.//we also set fundamental facets information in case applyFacets is not called.// Inherit from the base type//Create a new simple type for list.//setting fundamental facets// Values of this type are lists//Create a new simple type for union.// even for union, we set whitespace to something// this will never be used, but we can use fFacetsDefined to check// whether applyFacets() is allwwed: it's not allowed// if fFacetsDefined != 0// none of the schema-defined types are unions, so just set// fIsImmutable to false.// No value can be of this type, so it's unavailable.//set values for restriction.//decline to do anything if the object is immutable.//set values for list.//set values for union.// for anySimpleType, return absent variaty// REVISIT: error situation. runtime exception?/** Returns the closest built-in type category this type represents or ... *//** If variety is <code>atomic</code> the primitive type definition (a ... */// recursively get base, until we reach anySimpleType/** If variety is <code>list</code> the item type definition (an atomic or ... *//** If variety is <code>union</code> the list of member type definitions (a ... *//** If <restriction> is chosen *//** built-in derived types by restriction */// should never gets here, internel error// we've now applied facets; so lock this object:/** If <restriction> is chosen, or built-in derived types by restriction */// if the object is immutable, should not apply facets...// clear facets. because we always inherit facets in the constructor// REVISIT: in fact, we don't need to clear them.// we can convert 5 string values (4 bounds + 1 enum) to actual values,// store them somewhere, then do facet checking at once, instead of// going through the following steps. (lots of checking are redundant:// for example, ((presentFacet & FACET_XXX) != 0))// step 1: parse present facets// length// minLength// maxLength// pattern// whiteSpace// enumeration// check 4.3.5.c0 must: enumeration values from the value space of base// maxInclusive// check against fixed value in base// maxInclusive from base// maxExclusive// maxExclusive from base// If maxExclusive == base.maxExclusive, then we only need to check// maxExclusive <= base.maxInclusive// minExclusive// minExclusive from base// If minExclusive == base.minExclusive, then we only need to check// minExclusive >= base.minInclusive// minInclusive// minInclusive from base// totalDigits// fractionDigits// token type: internal use, so do less checking// step 2: check facets against each other: length, bounds// check 4.3.2.c1 must: minLength <= maxLength// check 4.3.8.c1 error: maxInclusive + maxExclusive// check 4.3.9.c1 error: minInclusive + minExclusive// check 4.3.7.c1 must: minInclusive <= maxInclusive// check 4.3.8.c2 must: minExclusive <= maxExclusive ??? minExclusive < maxExclusive// check 4.3.9.c2 must: minExclusive < maxInclusive// check 4.3.10.c1 must: minInclusive < maxExclusive// check 4.3.12.c1 must: fractionDigits <= totalDigits// step 3: check facets against base// check 4.3.1.c1 error: length & (fBase.maxLength | fBase.minLength)// length, fBase.minLength and fBase.maxLength defined// length and fBase.maxLength defined// check 4.3.1.c2 error: length != fBase.length// check 4.3.1.c1 error: fBase.length & (maxLength | minLength)// fBase.length, minLength and maxLength defined// check 4.3.2.c1 must: minLength <= fBase.maxLength// check 4.3.2.c2 error: minLength < fBase.minLength// check 4.3.2.c1 must: maxLength < fBase.minLength// check 4.3.3.c1 error: maxLength > fBase.maxLength/* // check 4.3.7.c2 error: ... */// check 4.3.11.c1 error: totalDigits > fBase.totalDigits// check 4.3.12.c1 must: fractionDigits <= base.totalDigits// check 4.3.12.c2 error: fractionDigits > fBase.fractionDigits// check fixed value for fractionDigits// check 4.3.6.c1 error:// (whiteSpace = preserve || whiteSpace = replace) && fBase.whiteSpace = collapese or// whiteSpace = preserve && fBase.whiteSpace = replace//fFacetsDefined != null// step 4: inherit other facets from base (including fTokeyType)// inherit length// inherit minLength// inherit maxLength// inherit pattern// inherit whiteSpace// inherit enumeration// inherit maxExclusive// inherit maxInclusive// inherit minExclusive// inherit totalDigits// inherit fractionDigits//inherit tokeytype// step 5: mark fixed values//step 6: setting fundamental facets//applyFacets()/** validate a value, and return the compiled form */// first normalize string value, and convert it to actual value/** validate an actual value against this DV ... */// then validate the actual value against the facets// now check extra rules: for ID/IDREF/ENTITY// For QName and NOTATION types, we don't check length facets//minLength//length//enumeration//fractionDigits//totalDigits//maxinclusive//maxExclusive//minInclusive//minExclusive// (fVariety == VARIETY_ATOMIC)// (fVariety == VARIETY_UNION)// checkExtraRules()//we can still return object for internal use.// validate special kinds of token, in place of old pattern matching// PATTERN "\\c+"// PATTERN "\\i\\c*"// PATTERN "[\\i-[:]][\\c-[:]]*"// we can't call fItemType.validate(), otherwise checkExtraRules()// will be called twice: once in fItemType.validate, once in// validate method of this type.// so we take two steps to get the actual value:// 1. fItemType.getActualValue()// 2. fItemType.chekcFacets()// we can't call fMemberType[i].validate(), otherwise checkExtraRules()// will be called twice: once in fMemberType[i].validate, once in// 1. fMemberType[i].getActualValue()// 2. fMemberType[i].chekcFacets()//isEqual()// determine whether the two values are identical// normalize the string according to the whiteSpace facet// when it's replace, just replace #x9, #xa, #xd by #x20// when it's collapse// append real characters, so we passed leading ws// for whitespaces, we skip all following ws// if it's not a leading or tailing ws, then append a space// If pattern is not defined, we can skip some of the normalization.// Otherwise we have to normalize the data for correct result of// pattern validation./** Fundamental Facet: ordered. *//** Fundamental Facet: bounded. *//** Fundamental Facet: cardinality. *//** Fundamental Facet: numeric. *//** Convenience method. [Facets]: check whether a facet is defined on this ... *//** [facets]: all facets defined on this type. The value is a bit ... *//** Convenience method. [Facets]: check whether a facet is defined and ... *//** [facets]: all defined facets for this type which are fixed. *//** Convenience method. Returns a value of a single constraining facet for ... *//** A list of enumeration values if it exists, otherwise an empty ... *//** A list of actual enumeration values if it exists, otherwise an empty ... *//** A list of enumeration type values (as a list of ShortList objects) if it exists, otherwise returns ... *//** A list of pattern values if it exists, otherwise an empty ... *//** [annotations]: a set of annotations for this simple type component if ... */// When {variety} is atomic, {value} is inherited from {value} of {base type definition}. For all "primitive" types {value} is as specified in the table in Fundamental Facets (C.1).// When {variety} is list, {value} is false.// When {variety} is union, the {value} is partial unless one of the following:// 1. If every member of {member type definitions} is derived from a common ancestor other than the simple ur-type, then {value} is the same as that ancestor's ordered facet.// 2. If every member of {member type definitions} has a {value} of false for the ordered facet, then {value} is false.// REVISIT: is the length possible to be 0?// we need to process the first member type before entering the loop// for the other member types, check whether the value is false// and whether they have the same ancestor as the first one// REVISIT: all member types should have the same ordered value//          just use the first one. Can we assume this?//setOrdered//setNumeric//setBounded//specialCardinalityCheck()// (!fBase.fFinite)//setCardinality//getPrimitiveDV()// REVISIT: implement according to derivation// ancestor is null, return false// extract the actual XSTypeDefinition if the given ancestor is a delegate.// ancestor is anyType, return true// anyType is the only type whose base type is itself// recursively get base, and compare it with ancestor// compare with ancestor// reached anySimpleType// ancestor is null, retur false/** Checks if a type is derived from another by restriction, given the name ... */// restriction// list// extension// If the value of the parameter is 0 i.e. no bit (corresponding to// restriction, list, extension or union) is set to 1 for the// derivationMethod parameter./** Checks if a type is derived from another by any combination of restriction, list ir union. See: ... */// for each base, item or member type// If the ancestor type is reached or is the same as this type.// check if derived by restriction or list or union// get the base, item or member type depending on the variety/** Checks if a type is derived from another by list. See: ... */// If the variety is union// get the {item type}// T2 is the {item type definition}// T2 is derived from the other type definition by DERIVATION_RESTRICTION/** Checks if a type is derived from another by union.  See: ... */// get member types// One of the {member type definitions} is T2./** Validation context used to validate facet values. *//** A wrapper of ValidationContext, to provide a way of switching to a ... */// schema validation is predicated upon namespaces// if it's immutable, can't be reset:// REVISIT: reset for fundamental facets/** A list of constraining facets if it exists, otherwise an empty ... *//** A list of enumeration and pattern constraining facets if it exists, ... *//** Optional. Annotation. *//** Optional. Annotations. *//** Primitive datatypes. *//** Types derived from string. *//** Types derived from decimal. *//** Other types. */// class XSSimpleTypeDecl/** Base class for XSSimpleType wrapper implementations. ... *//** Validator for &lt;gYear&gt; datatype (W3C Schema Datatypes) ... *//** Parses, validates and computes normalized version of gYear object ... */// check for preceding '-' sign/** Converts year object representation to String ... *//** Validator for &lt;gYearMonth&gt; datatype (W3C Schema Datatypes) ... *//** Parses, validates and computes normalized version of gYearMonth object ... */// get date/** Used to validate the <yearMonthDuration> type ... *//** A simple ASCII byte reader. This is an optimized reader for reading ... *//** Default byte buffer size (2048). *//** Input stream. *//** Byte buffer. */// message formatter; used to produce localized// exception messages//Locale to use for messages/** Constructs an ASCII reader from the specified input stream ... */// <init>(InputStream, MessageFormatter, Locale)// <init>(InputStream,int, MessageFormatter, Locale)// Reader methods/** Read a single character.  This method will block until a character is ... */// read():int/** Read characters into a portion of an array.  This method will block ... */// read(char[],int,int)/** Skip characters.  This method will block until some characters are ... */// skip(long):long/** Tell whether this stream is ready to be read. ... */// ready()/** Tell whether this stream supports the mark() operation. */// markSupported()/** Mark the present position in the stream.  Subsequent calls to reset() ... */// mark(int)/** Reset the stream.  If the stream has been marked, then attempt to ... *//** Close the stream.  Once a stream has been closed, further read(), ... */// close()// class ASCIIReader/** <p>Signals that a malformed byte sequence was detected ... *//** message formatter * *//** locale for error message * *//** error domain * *//** key for the error message * *//** replacement arguements for the error message * *//** message text for this message, initially null * *//** Constructs a MalformedByteSequenceException with the given ... */// <init>(MessageFormatter, Locale, String, String, Object[])/** <p>Returns the error domain of the error message.</p> ... */// getDomain/** <p>Returns the key of the error message.</p> ... */// getKey()/** <p>Returns the replacement arguments for the error ... */// getArguments();/** <p>Returns the localized message for this exception.</p> ... */// The references to the message formatter and locale// aren't needed anymore so null them.// getMessage()// MalformedByteSequenceException/** Reader for UCS-2 and UCS-4 encodings. ... *//** Default byte buffer size (8192, larger than that of ASCIIReader ... */// what kind of data we're dealing with// <init>(InputStream, short)// <init>(InputStream,int,short)// UCS-2// try and make count be a multiple of the number of bytes we're looking for// BigEndian// this looks ugly, but it avoids an if at any rate...// end of input; something likely went wrong!A  Pad buffer with nulls.// now count is a multiple of the right number of bytes// charWidth will represent the number of bits to move// n leftward to get num of bytes to skip, and then move the result rightward// to get num of chars effectively skipped.// The trick with &'ing, as with elsewhere in this dcode, is// intended to avoid an expensive use of / that might not be optimized// away.// class UCSReader/** <p>A UTF-8 reader.</p> ... *//** Debug read. *//** Offset into buffer. *//** Surrogate character. *//** Constructs a UTF-8 reader from the specified input stream ... */// <init>(InputStream, MessageFormatter)/** Constructs a UTF-8 reader from the specified input stream, ... */// <init>(InputStream, int, MessageFormatter, Locale)// decode character// NOTE: We use the index into the buffer if there are remaining//       bytes from the last block read. -Ac// get first byte// UTF-8:   [0xxx xxxx]// Unicode: [0000 0000] [0xxx xxxx]// UTF-8:   [110y yyyy] [10xx xxxx]// Unicode: [0000 0yyy] [yyxx xxxx]// UTF-8:   [1110 zzzz] [10yy yyyy] [10xx xxxx]// Unicode: [zzzz yyyy] [yyxx xxxx]// UTF-8:   [1111 0uuu] [10uu zzzz] [10yy yyyy] [10xx xxxx]*// Unicode: [1101 10ww] [wwzz zzyy] (high surrogate)//          [1101 11yy] [yyxx xxxx] (low surrogate)//          * uuuuu = wwww + 1// use surrogate// return character// handle surrogate// read bytes// adjust length to read// perform read operation// skip read; last character was in error// NOTE: Having an offset value other than zero means that there was//       an error in the last character read. In this case, we have//       skipped the read so we don't consume any bytes past the//       error. By signalling the error on the next block read we//       allow the method to return the most valid characters that//       it can on the previous block read. -Ac// convert bytes to characters// check if output buffer is large enough to hold 2 surrogate chars// decode bytes into surrogate characters// set characters// return number of characters converted/** Throws an exception for expected byte. */// expectedByte(int,int)/** Throws an exception for invalid byte. */// invalidByte(int,int,int)/** Throws an exception for invalid surrogate bits. */// invalidSurrogate(int)// class UTF8Reader/** XMLMessageFormatter provides error messages for the XML 1.0 Recommendation and for ... *//** The domain of messages concerning the XML 1.0 specification. */// private objects to cache the locale and resource bundle// MessageFormatter methods// memorize the most-recent locale/** The entity state interface defines methods that must be implemented ... *//** Query method to check if entity with this name was declared. ... *//** Query method to check if entity is unparsed. ... *//** ValidationManager is a coordinator property for validators in the ... */// used by the DTD validator to tell other components that it has a// cached DTD in hand so there's no reason to// scan external subset or entity decls./** Each validator should call this method to add its ValidationState into ... *//** Set the information required to validate entity values. */// setCachedDTD(boolean)// isCachedDTD():  boolean/** Implementation of ValidationContext inteface. Used to establish an ... *//** return null if all IDREF values have a corresponding ID value; ... *//** The same validation state can be used to validate more than one (schema) ... */// implementation of ValidationContext methods// get symbols// if there is no symbol table, we return java-internalized string,// because symbol table strings are also java-internalzied.// this guarantees that the returned string from this method can be// compared by reference with other symbol table string. -SG// qname, notation/** Bare minimum XPath parser. ... *//** Expression. *//** Location paths. *//** Constructs an XPath object from the specified expression. */// <init>(String,SymbolTable,NamespaceContext)/** Returns a representation of all location paths for this XPath. ... */// getLocationPath(LocationPath)/** Returns a representation of the first location path for this XPath. *//** Returns a string representation of this object. */// toString():String/** Used by the {@link #parseExpression(NamespaceContext)} method ... *//** This method is implemented by using the XPathExprScanner and ... */// tokens// scanner//fTokens.dumpTokens();// true when the next token should be 'Step' (as defined in// the production rule [3] of XML Schema P1 section 3.11.6// if false, we are expecting either '|' or '/'.// this is to make sure we can detect a token list like// 'abc' '/' '/' 'def' 'ghi'// unless this is the first step in this location path,// there's really no reason to keep them in LocationPath.// This amounts to shorten "a/././b/./c" to "a/b/c".// Also, the matcher fails to work correctly if XPath// has those redundant dots.// build step// consume '//'// this cannot appear in arbitrary position.// it is only allowed right after '.' when// '.' is the first token of a location path.// we should have covered all the tokens that we can possibly see.// save location path// parseExpression(SymbolTable,NamespaceContext)/** Used by {@link #parseExpression} to parse a node test ... */// consume QName token// assertion error// location path information/** A location path representation for an XPath expression. ... *//** List of steps. *//** Creates a location path from a series of steps. */// <init>(Step[])/** Copy constructor. */// <init>(LocationPath)// DEBUG: This code is just for debugging and should *not*//        be left in because it will mess up hashcodes of//        serialized versions of this object. -Ac/** Returns a clone of this object. */// clone():Object// class locationPath/** A location path step comprised of an axis and node test. ... *//** Axis. *//** Node test. *//** Constructs a step from an axis and node test. */// <init>(Axis,NodeTest)// <init>(Step)// class Step/** Axis. ... *//** Type: child. *//** Type: attribute. *//** Type: self. *//** Type: descendant. *//** Axis type. *//** Constructs an axis with the specified type. */// <init>(short)// <init>(Axis)// class Axis/** Node test. ... *//** Type: qualified name. *//** Type: wildcard. *//** Type: node. *//** Type: namespace *//** Node test type. *//** Node qualified name. *//** Constructs a node test of type WILDCARD or NODE. */// <init>(int)/** Constructs a node test of type QName. */// <init>(QName)/** Constructs a node test of type Namespace. */// <init>(String,String)// <init>(NodeTest)// class NodeTest// xpath implementation// NOTE: The XPath implementation classes are kept internal because//       this implementation is just a temporary hack until a better//       and/or more appropriate implementation can be written.//       keeping the code in separate source files would "muddy" the//       CVS directory when it's not needed. -Ac/** List of tokens. ... *//** [28] ExprToken ::= '(' | ')' | '[' | ']' | '.' | '..' | '@' | ',' | '::' ... */// [37] NameTest ::= '*' | NCName ':' '*' | QName// followed by symbol handle of NCName or QName// [38] NodeType ::= 'comment' | 'text' | 'processing-instruction' | 'node'// [32] Operator ::= OperatorName//                 | MultiplyOperator//                 | '/' | '//' | '|' | '+' | '-' | '=' | '!=' | '<' | '<=' | '>' | '>='// [33] OperatorName ::= 'and' | 'or' | 'mod' | 'div'// [34] MultiplyOperator ::= '*'//EXPRTOKEN_FIRST_OPERATOR                = EXPRTOKEN_OPERATOR_AND,//EXPRTOKEN_LAST_OPERATOR                 = EXPRTOKEN_OPERATOR_GREATER_EQUAL,// [35] FunctionName ::= QName - NodeType// followed by symbol handle// [6] AxisName ::= 'ancestor' | 'ancestor-or-self'//                | 'attribute'//                | 'child'//                | 'descendant' | 'descendant-or-self'//                | 'following' | 'following-sibling'//                | 'namespace'//                | 'parent'//                | 'preceding' | 'preceding-sibling'//                | 'self'// [29] Literal ::= '"' [^"]* '"' | "'" [^']* "'"// followed by symbol handle for literal// [30] Number ::= Digits ('.' Digits?)? | '.' Digits// [31] Digits ::= [0-9]+// followed by number handle// [36] VariableReference ::= '$' QName// followed by symbol handle for QName// for writing// REVISIT: Code something better here. -Ac/** Current position in the token list. *///        public String getTokenName(int token) {//            if (token < 0 || token >= fgTokenNames.length)//                return null;//            return fgTokenNames[token];//        public int getTokenCount() {//            return fTokenCount;//        public int getToken(int tokenIndex) {//            return fTokens[tokenIndex];/** Resets the current position to the head of the token list. *//** Returns true if the {@link #getNextToken()} method ... *//** Obtains the token at the current position, then advance ... *//** Obtains the token at the current position, without advancing ... *//** Obtains the token at the current position as a String. ... *///if (DUMP_TOKENS) {// class Tokens/** 7-bit ASCII subset ... */// invalid XML character// not special - one of "#%&;?\^`{}~" or DEL// one of "\t\n\r " (0x09, 0x0A, 0x0D, 0x20)// '!' (0x21)// '\"' or '\'' (0x22 and 0x27)// '$' (0x24)// '(' (0x28)// ')' (0x29)// '*' (0x2A)// '+' (0x2B)// ',' (0x2C)// '-' (0x2D)// '.' (0x2E)// '/' (0x2F)// '0'-'9' (0x30 to 0x39)// ':' (0x3A)// '<' (0x3C)// '=' (0x3D)// '>' (0x3E)// '@' (0x40)// 'A'-'Z' or 'a'-'z' (0x41 to 0x5A and 0x61 to 0x7A)// '[' (0x5B)// ']' (0x5D)// '_' (0x5F)// '|' (0x7C)// Non-ASCII Unicode codepoint (>= 0x80)/** Symbol literals *//** Constructs an XPath expression scanner. */// save pool and tokens// [39] ExprWhitespace ::= S// [28] ExprToken ::= '(' | ')' | '[' | ']' | '.' | '..' | '@' | ',' | '::'//                  | NameTest | NodeType | Operator | FunctionName//                  | AxisName | Literal | Number | VariableReference// '('// ')'// '['// ']'//                                         ^^^^^^^^^^// '.', '..' or '.' Digits// '..'/* , encoding */// this is legal if the next token is non-existent or |// '.'// '@'// ','// '::'// System.out.println("abort 1a");// System.out.println("abort 1b");// '/' and '//'// '//'// '|'// '+'// '-'// '='// '!='// System.out.println("abort 2a");// System.out.println("abort 2b");// '<' and '<='// '<='// '>' and '>='// '>='// '\"' or '\''// System.out.println("abort 2c");// System.out.println("abort 2d");// System.out.println("abort 3a");// System.out.println("abort 3b");// System.out.println("abort 4a");// System.out.println("abort 4b");// '*'// 3.7 Lexical Structure//  If there is a preceding token and the preceding token is not one of @, ::, (, [, , or//  an Operator, then a * must be recognized as a MultiplyOperator.// Otherwise, the token must not be recognized as a MultiplyOperator.// NCName, QName and non-terminals// possibly a valid non-ascii 'Letter' (BaseChar | Ideographic)//  an Operator, then an NCName must be recognized as an OperatorName.//  If the character following an NCName (possibly after intervening ExprWhitespace) is (,//  then the token must be recognized as a NodeType or a FunctionName.//  If the two characters following an NCName (possibly after intervening ExprWhitespace)//  are ::, then the token must be recognized as an AxisName.//  Otherwise, the token must not be recognized as an OperatorName, a NodeType, a//  FunctionName, or an AxisName.// [6] AxisName ::= (see above)// [5] NCName ::= (Letter | '_') (NCNameChar)*// [?] NCNameChar ::= Letter | Digit | '.' | '-' | '_'  (ascii subset of 'NCNameChar')// [?] QName ::= (NCName ':')? NCName// [?] Letter ::= [A-Za-z]                              (ascii subset of 'Letter')// [?] Digit ::= [0-9]                                  (ascii subset of 'Digit')// System.out.println("abort 4c");// System.out.println("abort 5");// System.out.println("abort 5b");// System.out.println("abort 6");// System.out.println("abort 7");// REVISIT - NCName:* where an OperatorName is required// System.out.println("abort 8");// REVISIT - AxisName:: where an OperatorName is required// System.out.println("abort 9");// System.out.println("abort 10");// REVISIT - "NCName:* ::" where "AxisName ::" is required// [6] NCNameChar ::= Letter | Digit | '.' | '-' | '_' | CombiningChar | Extender/** * // REVISIT: Make sure this is a negation. *** ... *//* byte[] *//* , EncodingSupport encoding *//** int start = currentOffset; * *///part = fStringPool.addSymbol(data.substring(start, currentOffset));/** This method adds the specified token to the token list. By ... */// addToken(int)// class Scanner/** Main program entry. */// class XPath/** XPath exception. ... */// hold the value of the key this Exception refers to./** Constructs an exception. *//** Constructs an exception with the specified key. */// <init>(String)// getKey():  String// class XPathException/** Boyer-Moore searcher. ... *///System.err.println("Starts at "+index);/* public static void main(String[] argv) { ... *//** @version *//* 2^10 = 1k *//* up to 0xFFFF *//** Return a list of code point characters (not including the input value) ... */// synchronized// if mapBuilt// lower/upper case value is not the same as code point/** An instance of this class has ranges captured in matching. ... *//** Creates an instance. *//** Return the number of regular expression groups. ... *//** Return a start position in the target text matched to specified regular expression group. ... *//** Return an end position in the target text matched to specified regular expression group. ... *//** Return an substring of the target text matched to specified regular expression group. ... */// Single character// [a-zA-Z]// [^a-zA-Z]// ^ $ ...// literal String// X*// X*?// X?// X??// X|Y// ( and )// \1 \2 ...// (?=...)// (?!...)// (?<=...)// (?<!...)// (?>...)// (?ims-ims:...)// (?(..)yes|no)//System.err.println("Creates UnionOp");// for UNION// for UNIoN// for CLOSURE, QUESTION// ModifierOp// CharOp  for CHAR, BACKREFERENCE, CAPTURE, ANCHOR,// RANGE, NRANGE// STRING// ================================================================/* public ParseException(String mes) { ... *//** A regular expression parser for the XML Schema. ... *///this.setLocale(Locale.getDefault());// X+ -> XX*// X? -> X|// Skips ')'/** Parses a character-class-expression, not a character-class-escape. ... */// used to detect if the last - was escaped.// '^'// Don't use 'cotinue' for this loop.// single-range | from-to-range | subtraction// \ + c// backsolidus// Subraction// Exit this loop// if not shorthands...// if regex = '[-]' then invalid// Here is no '-'.// Found '-'// Is this '-' is a from-to token??// Skips '-'// c '-' ']' -> '-' is a single-range.// if - is at the last position of the group//tok.dumpRanges();// Skips ']'// LINE FEED U+000A// CRRIAGE RETURN U+000D// HORIZONTAL TABULATION U+0009// return actucal char// Skips a white space.// Skips chracters between '#' and a line end.// Strips an escaped white space.// Other escaped character.// As is./** Sample entry. ... *//** Creates a RegularExpression instance. ... *//* Copyright 1999-2002,2004,2005 The Apache Software Foundation. ... *//** This class represents a character class such as [a-z] or a period. ... */// for RANGE or NRANGE//System.err.println("Token#addRange(): "+start+" "+end);//System.err.println("Do sorting: "+this.ranges.length);// Bubble sort// Why? -- In many cases,//         this.ranges has few elements./** this.ranges is sorted. */// Index of writing point// Index of processing point//System.err.println("Token#substractRanges(): Entry: "+this.ranges.length+", "+tok.ranges.length);// Not overlapped// src: o-----o// sub:         o-----o// res: o-----o// Reuse sub// Overlapped// src:    o--------o// sub:  o----o// sub:      o----o// sub:          o----o// sub:  o------------o// res: empty// res:       o-----o// Reuse src(=res)// res:    o-----o// res:    o-o    o-o// Reuse src(=right res)// src:          o-----o// sub: o----o// this.ranges is sorted and compacted.// src1: o-----o// src2:         o-----o// res:  empty// Reuse src2// src1:    o--------o// src2:  o----o// src2:      o----o// src2:          o----o// src2:  o------------o// res:     o--------o// res:     o--o// Reuse the rest of src1// res:           o--o// res:       o----o// src1:          o-----o// src2: o----o/** for RANGE: Creates complement. ... */// 32 is the number of bits in `int'.// s&0x1f : 0-31//for (int i = 0;  i < asize;  i ++)  System.err.println("Map: "+Integer.toString(this.map[i], 16));//case 0x0b:  ret = "\\v";  break;/** A Regular Expression Parser. ... */// '?'// '\'// '$'// '(?:'// '(?='// '(?!'// '(?<='// '(?<!'// '(?>'// '(?['// '[:' in a character class// '(?#'// '(?' [\-,a-z,A-Z]// '(?('// '-[' in a character class/* public RegularExpression createRegex(String regex, int options) throws ParseException { ... */// In a character class, this.chardata has one character, that is to say,// a pair of surrogates is composed and stored to this.chardata.// Allow character class subtraction (regardless of whether we are in// XML Schema mode or not)// Through down// Options// conditional// this.offsets points the next of '('./** regex ::= term (`|` term)* ... *//** term ::= factor+ *///tok = Token.createConcat(tok, this.parseFactor());// ----------------------------------------------------------------// this.offset points the next of '('// Parses a condition.// Points '('.// Parses yes/no-patterns.// this.offset points the next of '?'.// modifiers ::= [imsw]* ('-' [imsw]*)? ':'// '-' or ':'?// ':'?// such as (?-i)// Must be in 0x0040-0x005f/** factor ::= ('^' | '$' | '\A' | '\Z' | '\z' | '\b' | '\B' | '\<' | '\>' ... */// through down// this.offset -> next of '{'// {min,max}// assume {min,}// off -> next of '}'//System.err.println("CLOSURE: "+min+", "+max);/** atom ::= char | '.' | char-class | '(' regex ')' | '(?:' regex ')' | '\' [0-9] ... */// (?modifiers ... )// Skips '.'/** char-class ::= '[' ( '^'? range ','?)+ ']' ... */// handle category escape// POSIX Character class such as [:alnum:]/** '(?[' ... ']' (('-' | '+' | '&') '[' ... ']')? ')' */// ESCAPE U+001B// FORM FEED U+000C//case 'v':  c = 0x0b;  break; // VERTICAL TABULATION U+000B/** A regular expression matching engine using Non-deterministic Finite Automaton (NFA). ... *//** Compiles a token tree into an operation flow. *//** Converts a token to an operation. */// ret.next is null.// {n}// X{2,6} -> XX(X(X(XX?)?)?)?// Token.CLOSURE// switch (tok.type)//Public/** Checks whether the <var>target</var> text <strong>contains</strong> this pattern or not. ... *//** Checks whether the <var>target</var> text <strong>contains</strong> this pattern ... */// Need not to call setSource() because// a caller can not access this match instance.//System.err.println("DEBUG: matchEnd="+matchEnd);/* The pattern has only fixed string. ... *///System.err.println("DEBUG: fixed-only: "+this.fixedString);/* The pattern contains a fixed string. ... *///System.err.println("Non-match in fixed-string search.");/* Checks whether the expression starts with ".*". *//* Optimization against the first character. *///System.err.println("DEBUG: with firstchar-matching: "+this.firstChar);/* Straightforward matching. */// dx value is either 1 or -1// Saves current position to avoid zero-width repeats.// fall through// handle recursive operations// exhausted all the operations// Internal use only.// The @ always matches line beginnings.// switch anchor type/** A regular expression. ... *//** @serial *//** The number of parenthesis in the regular expression. ... *//** Internal representation of the regular expression. ... */// We do not check for duplicates, caller is responsible for that/** Prepares for matching.  This method is called just before starting matching. *//* if  (this.operations.type == Op.CLOSURE && this.operations.getChild().type == Op.DOT) { // .* ... */// Op.CHAR// This pattern has a fixed string of which length is more than one.//+this.fixedString/** An option. ... *//** "i" *//** "s" *//** "m" *//** "x" *//** This option redefines <span class="REGEX"><kbd>\d \D \w \W \s \S</kbd></span>. ... */// "u"// "w"/** "H" *//** "F" *//** "X". XML Schema mode. *//** ",". *//** Creates a new RegularExpression instance. ... *//** Creates a new RegularExpression instance with options. ... *//** Represents this instence in String. *//** Returns a option string. ... *//** Return true if patterns are the same and the options are equivalent. */// L// N// Mc// Cf// Mn// Cc// Legacy word characters/** This class represents a node in parse tree. ... */// Literal char// .// XY// X|Y|Z// [a-zA-Z] etc.// [^a-zA-Z] etc.// (X) or (?:X)// ^ $ \b \B \< \> \A \Z \z// *? +?// strings// back references// (?(...)yes|no)// *** It is not a bug./** A number of children. */// for CLOSURE// for STRING/** How many characters are needed? */// *******// ***** Really?// infinity// When this.child.getMaxLength() < 0,// this returns minus value// ******/* a|b|c -> FC_TERMINAL ... */// ****// **** We can not optimize./* int mylength; ... */// Ignore CHAR tokens.// **// ------------------------------------------------------// 28// 29, 30// 31-37// Schema Rec. {Datatypes} - Punctuation// Pi - initial quote// Pf - final quote//blockNames in UNICODE 3.1 that supported by XML Schema REC/* 0000..007F; *//* 0080..00FF; *//* 0100..017F; *//* 0180..024F; *//* 0250..02AF; *//* 02B0..02FF; *//* 0300..036F; *//* 0370..03FF; *//* 0400..04FF; *//* 0530..058F; *//* 0590..05FF; *//* 0600..06FF; *//* 0700..074F; *//* 0780..07BF; *//* 0900..097F; *//* 0980..09FF; *//* 0A00..0A7F; *//* 0A80..0AFF; *//* 0B00..0B7F; *//* 0B80..0BFF; *//* 0C00..0C7F; *//* 0C80..0CFF; *//* 0D00..0D7F; *//* 0D80..0DFF; *//* 0E00..0E7F; *//* 0E80..0EFF; *//* 0F00..0FFF; *//* 1000..109F; *//* 10A0..10FF; *//* 1100..11FF; *//* 1200..137F; *//* 13A0..13FF; *//* 1400..167F; *//* 1680..169F; *//* 16A0..16FF; *//* 1780..17FF; *//* 1800..18AF; *//* 1E00..1EFF; *//* 1F00..1FFF; *//* 2000..206F; *//* 2070..209F; *//* 20A0..20CF; *//* 20D0..20FF; *//* 2100..214F; *//* 2150..218F; *//* 2190..21FF; *//* 2200..22FF; *//* 2300..23FF; *//* 2400..243F; *//* 2440..245F; *//* 2460..24FF; *//* 2500..257F; *//* 2580..259F; *//* 25A0..25FF; *//* 2600..26FF; *//* 2700..27BF; *//* 2800..28FF; *//* 2E80..2EFF; *//* 2F00..2FDF; *//* 2FF0..2FFF; *//* 3000..303F; *//* 3040..309F; *//* 30A0..30FF; *//* 3100..312F; *//* 3130..318F; *//* 3190..319F; *//* 31A0..31BF; *//* 3200..32FF; *//* 3300..33FF; *//* 3400..4DB5; *//* 4E00..9FFF; *//* A000..A48F; *//* A490..A4CF; *//* AC00..D7A3; *//* E000..F8FF; *//* F900..FAFF; *//* FB00..FB4F; *//* FB50..FDFF; *//* FE20..FE2F; *//* FE30..FE4F; *//* FE50..FE6F; *//* FE70..FEFE; *//* FEFF..FEFF; *//* FF00..FFEF; *///missing Specials add manually/* 10300..1032F; */// 84/* 10330..1034F; *//* 10400..1044F; *//* 1D000..1D0FF; *//* 1D100..1D1FF; *//* 1D400..1D7FF; *//* 20000..2A6D6; *//* 2F800..2FA1F; *//* E0000..E007F; *///missing 2 private use add manually//ADD THOSE MANUALLY//F0000..FFFFD; "Private Use",//100000..10FFFD; "Private Use"//FFF0..FFFD; "Specials",//build table of Pi values//build table of Pf values// for all characters// Unassigned//REVISIT: do we really need to support block names as in Unicode 3.1//         or we can just create all the names in IsBLOCKNAME format (XML Schema REC)?//DEBUGING//System.out.println(n+" " +Integer.toHexString(rstart)//                     +"-"+ Integer.toHexString(rend));// TR#18 1.2// Lu// Ll// Lo// Lu Ll Lo// Nd// Z// Lu Ll Lo Nd// Perl extension// if null//if (tok == null) System.out.println(name);/** This method is called by only getRange(). ... */// ;DEVANAGARI SIGN VIRAMA;Mn;9;ON;;;;;N;;;;;//;BENGALI SIGN VIRAMA;Mn;9;ON;;;;;N;;;;;//;GURMUKHI SIGN VIRAMA;Mn;9;ON;;;;;N;;;;;//;GUJARATI SIGN VIRAMA;Mn;9;ON;;;;;N;;;;;//;ORIYA SIGN VIRAMA;Mn;9;ON;;;;;N;;;;;//;TAMIL SIGN VIRAMA;Mn;9;ON;;;;;N;;;;;//;TELUGU SIGN VIRAMA;Mn;9;ON;;;;;N;;;;;//;KANNADA SIGN VIRAMA;Mn;9;ON;;;;;N;;;;;//;MALAYALAM SIGN VIRAMA;Mn;9;ON;;;;;N;;;;;//;THAI CHARACTER PHINTHU;Mn;9;ON;;;;;N;THAI VOWEL SIGN PHINTHU;;;;//;TIBETAN MARK HALANTA;Mn;9;ON;;;;;N;TIBETAN VIRAMA;;;;// [{ASSIGNED}]-[{M},{C}]// hangul_medial and hangul_final// extras// base_char?/** Combing Character Sequence in Perl 5.6. */// \pM*// \PM + \pM*/** This class represents a node in parse tree. *//** (?(condition)yes-pattern|no-pattern) *//** (ims-ims: .... ) *//** @serialField */// This is CONCAT, and new child is CONCAT.// Recursion//System.err.println("Merge '"+previous+"' and '"+tok+"'.");// Replace previous token by STRING/** @serialData */// Convert List to Vector//convert Vector back to List/* Copyright 2000-2002,2004 The Apache Software Foundation. ... *//** Attribute PSV infoset augmentations implementation. ... *//** Reset() *//* Copyright 2000-2002,2004,2005 The Apache Software Foundation. ... *//** Element PSV infoset augmentations implementation. ... *//** true if the element value was provided by the schema; false otherwise. *//** deferred XSModel * *//** Reset() should be called in validator startElement(..) method. *//** This class is to hold all schema component declaration that are declared ... */// the target namespace of grammar// global decls: map from decl name to decl object// extended global decls: map from schema location + decl name to decl object// key is location,name// A global map of all global element declarations - used for substitution group computation// (handy when sharing components by reference, since we might end up with duplicate components//  that are not added to either of the global element declarations above)// the XMLGrammarDescription member// annotations associated with the "root" schema of this targetNamespace// number of annotations declared// symbol table for constructing parsers (annotation support)// parsers for annotation support// needed to make BuiltinSchemaGrammar work.// REVISIT: do we know the numbers of the following global decls// when creating this grammar? If so, we can pass the numbers in,// and use that number to initialize the following hashtables.// Extended tables// All global elements table// if we are parsing S4S, put built-in types in first// they might get overwritten by the types from S4S, but that's// considered what the application wants to do.// <init>(String, XSDDescription)// Clone an existing schema grammar//fGrammarDescription.fContextType |= XSDDescription.CONTEXT_COLLISION; // REVISIT// Annotations associated with the "root" schema of this targetNamespace// All substitution group information declared in this namespace// Array to store complex type decls for constraint checking// Groups being redefined by restriction// List of imported grammars// Locations// number of built-in XSTypes we need to create for base and full// datatype set// this class makes sure the static, built-in schema grammars// are immutable./** Special constructor to create the grammars for the schema namespaces ... */// target namespace// grammar description// no global decls other than types// no extended global decls// all global element decls table// get all built-in types// assign the built-in schema grammar as the XSNamespaceItem// for each of the built-in simple type definitions.// add anyType// no global decls other than attributes// no all global element decls// 4 attributes, so initialize the size as 4*2 = 8// xsi:type// xsi:nil// xsi:schemaLocation// xsi:noNamespaceSchemaLocation// return the XMLGrammarDescription corresponding to this// object// override these methods solely so that these// objects cannot be modified once they're created.// annotation support/** <p>A partial schema for schemas for validating annotations.</p> ... *//** Singleton instance. *//** Special constructor to create a schema ... */// no global decls other than types and// element declarations for <annotation>, <documentation> and <appinfo>.// all global element declarations// create element declarations for <annotation>, <documentation> and <appinfo>// add global element declarations// create complex type declarations for <annotation>, <documentation> and <appinfo>// set the types on their element declarations// create attribute groups for <annotation>, <documentation> and <appinfo>// fill in attribute groups// create and fill attribute uses for <annotation>, <documentation> and <appinfo>// create lax attribute wildcard for <annotation>, <documentation> and <appinfo>// add attribute uses and wildcards to attribute groups for <annotation>, <documentation> and <appinfo>// create particles for <annotation>// create wildcard particle for <documentation> and <appinfo>// fill complex types// DTDGrammar methods/** Returns this grammar's target namespace. */// getTargetNamespace():String/** register one global attribute *//** register one global attribute group *//** register one global element */// if there is a substitution group affiliation, store in an array,// for further constraint checking: UPA, PD, EDC/** register one global group *//** register one global notation *//** register one global type *//** register one global complex type *//** register one global simple type *//** register one identity constraint *//** get one global attribute *//** get one global attribute group *//** get one global element *//** get one global group *//** get one global notation *//** get one global type *//** get one identity constraint */// array to store complex type decls// an array to store groups being redefined by restriction// even-numbered elements are the derived groups, odd-numbered ones their bases// a flag to indicate whether we have checked the 3 constraints on this// grammar./** add one complex type decl: for later constraint checking *//** add a group redefined by restriction: for later constraint checking */// double array size each time./** get all complex type decls: for later constraint checking *//** get the error locator of all complex type decls *//** get all redefined groups: for later constraint checking *//** get the error locator of all redefined groups *//** after the first-round checking, some types don't need to be checked ... */// used to store all substitution group information declared in// this namespace/** get all substitution group information: for the 3 constraint checking */// anyType and anySimpleType: because there are so many places where// we need direct access to these two types// don't allow this.// null implementation// the wildcard used in anyType (content and attribute)// the spec will change strict to skip for anyType// the particle for the content wildcard// the model group of a sequence of the above particle// the content of anyType: particle of the above model group// ignore this call.// also ignore this call.// class BuiltinAttrDecl// the grammars to hold components of the schema namespace// the grammars to hold components of the schema-instance namespace// XSNamespaceItem methods// the max index / the max value of XSObject type// attribute use// attribute group// group// model group// particle// wildcard// idc// annotation// facet// multi value facet// complex type// simple type// store a certain kind of components from all namespaces// store the documents and their locations contributing to this namespace// REVISIT: use StringList and XSObjectList for there fields./** [schema namespace] ... */// REVISIT:  when schema handles XML 1.1, will need to// revisit this (and the practice of not prepending an XML decl to the annotation string// note that this should never produce errors or require// entity resolution, so just a barebones configuration with// a couple of feature  set will do fine/** [schema components]: a list of top-level components, i.e. element ... */// get the hashtable for this type of components// for complex/simple types, create a special implementation,// which take specific types out of the hash table/** Convenience method. Returns a top-level simple or complex type ... *//** Convenience method. Returns a top-level attribute declaration. ... *//** Convenience method. Returns a top-level element declaration. ... *//** Convenience method. Returns a top-level attribute group definition. ... *//** Convenience method. Returns a top-level model group definition. ... *//** Convenience method. Returns a top-level notation declaration. ... *//** [document location] ... *//** Return an <code>XSModel</code> that represents components in this schema ... */// class SchemaGrammar/** This class customizes the behaviour of the util.NamespaceSupport ... */// more effecient than NamespaceSupport(NamespaceContext)// end constructor/** This method takes a set of Strings, as stored in a ... */// expand namespace's size...// setEffectiveContext(String):void/** This method returns an array of Strings, as would be stored in ... */// the trick here is to recognize that all local contexts// happen to start at fContext[3].// context 1: empty// context 2: decls for xml and xmlns;// context 3: decls on <xs:schema>: the global ones// getEffectiveLocalContext():String// This method removes from this object all the namespaces// returned by getEffectiveLocalContext.// makeGlobal// class NamespaceSupport/** Collection of symbols used to parse a Schema Grammar. ... */// strings that's not added to the schema symbol table, because they// are not symbols in the schema document.// the validator can choose to add them by itself.// the following strings (xsi:, xsd) will be added into the// symbol table that comes with the parser// xsi attributes: in validator// schema namespace// all possible schema element names// all possible schema attribute names (and xml:lang defined on <schema> and <documentation>)// all possible schema attribute values// form qualified/unqualified// maxOccurs = "unbounded"/** To store and validate information about substitutionGroup ... */// grammar resolver// 3.9.4 Element Sequence Locally Valid (Particle) 2.3.3// check whether one element decl matches an element with the given qname// if the exemplar is not a global element decl, then it's not possible// to be substituted by another element.// if the decl blocks substitution, return false// get grammar of the element// get the decl for the element// and check by using substitutionGroup information// 3.3.6 Substitution Group OK (Transitive)// check whether element can substitute exemplar// For an element declaration (call it D) to be validly substitutable for another element declaration (call it C) subject to a blocking constraint (a subset of {substitution, extension, restriction}, the value of a {disallowed substitutions}) one of the following must be true:// 1. D and C are the same element declaration.// 2 All of the following must be true:// 2.1 The blocking constraint does not contain substitution.// 2.2 There is a chain of {substitution group affiliation}s from D to C, that is, either D's {substitution group affiliation} is C, or D's {substitution group affiliation}'s {substitution group affiliation} is C, or . . .// 2.3 The set of all {derivation method}s involved in the derivation of D's {type definition} from C's {type definition} does not intersect with the union of the blocking constraint, C's {prohibited substitutions} (if C is complex, otherwise the empty set) and the {prohibited substitutions} (respectively the empty set) of any intermediate {type definition}s in the derivation of D's {type definition} from C's {type definition}.// prepare the combination of {derivation method} and// {disallowed substitution}// "derived" should be derived from "base"// add derivation methods of derived types to devMethod;// add block of base types to blockConstraint.// type == null means the current type is anySimpleType,// whose base type should be anyType// If the base is a union, check if "derived" is allowed through any of the member types.// check whether element is in exemplar's substitution group// [Definition:]  Every element declaration (call this HEAD) in the {element declarations} of a schema defines a substitution group, a subset of those {element declarations}, as follows:// Define PSG, the potential substitution group for HEAD, as follows:// 1 The element declaration itself is in PSG;// 2 PSG is closed with respect to {substitution group affiliation}, that is, if any element declaration in the {element declarations} has a {substitution group affiliation} in PSG, then it is also in PSG itself.// HEAD's actual substitution group is then the set consisting of each member of PSG such that all of the following must be true:// 1 Its {abstract} is false.// 2 It is validly substitutable for HEAD subject to an empty blocking constraint, as defined in Substitution Group OK (Transitive) (3.3.6).// to store substitution group information// the key to the map is an element decl, and the value is// - a Vector, which contains all elements that has this element as their//   substitution group affilication// - an array of OneSubGroup, which contains its substitution group before block.// The real substitution groups (after "block")/** clear the internal registry of substitutionGroup information *//** add a list of substitution group information. */// for all elements with substitution group affiliation// check whether this an entry for this element// if not, create a new one// add to the vactor/** get all elements that can substitute the given element, ... */// If we already have sub group for this element, just return it.// Otherwise, get all potential sub group elements// (without considering "block" on this element// For each of such elements, check whether the derivation methods// overlap with "block". If not, add it to the sub group// Resize the array if necessary// Store the subgroup// Get potential sub group element (without considering "block")// substitution group for this one is empty// we've already calculated the element, just return.// we only have the *direct* substitutions// then for each of the direct substitutions, get its substitution// group, and combine the groups together.// Check whether this element is blocked. If so, ignore it.// Remember derivation methods and blocks from the types// Add this one to potential group// Get potential group for this element// For each of them, check whether it's blocked (by type)// Ignore it if it's blocked// Convert to an array// Store the potential sub group// No derivation relation, or blocked, return false// Remember the derivation methods and blocks, return true.// Record the information about how one element substitute another one// The element that substitutes another one// The combination of all derivation methods from sub's type to// the head's type// The combination of {block} of the types in the derivation chain// excluding sub's type// class SubstitutionGroupHandler/** This exception might be thrown by any constraint checking method. ... */// store a datatype error: error code plus the arguments// report an error/** This class implements xni.grammars.XMLGrammarLoader. ... */// XML Component API// Feature identifiers:/** Feature identifier: schema full checking *//** Feature identifier: allow java encodings to be recognized when parsing schema docs. *//** Feature identifier: validate annotations. *//** Feature: disallow doctype *//** Feature: generate synthetic annotations *//** Feature identifier: honour all schemaLocations *//** Feature identifier: tolerate duplicates *//** Property identifier: schema location. *//** Property identifier: no namespace schema location. *//** Property identifier: JAXP schema source. *//** Property identifier: access to external dtd *//** Property identifier: access to external schema */// recognized properties// features and properties// JAXP property: schema source// is Schema Full Checking enabled// boolean that tells whether we've tested the JAXP property.// if features/properties has not been changed, the value of this attribute is "false"// xml schema parsing//component mgr will be set later// XSLoader attributes/** DOM L3 error handler *//** DOM L3 resource resolver */// default constructor.  Create objects we absolutely need:/** This constractor is used by the XMLSchemaValidator. Additional properties, i.e. XMLEntityManager, ... */// store properties and features in configuration// make sure error reporter knows about schemas...// entity manager is null if XMLSchemaValidator creates the loader// by default augment PSVI (i.e. don't use declaration pool)// getRecognizedFeatures():  String[]// getFeature (String):  boolean/** Sets the state of a feature. ... */// setFeature(String, boolean)// getRecognizedProperties():  String[]/** Sets the state of a property. ... */// setProperty(String, Object)// REVISIT: this method should have a namespace parameter specified by// user. In this case we can easily detect if a schema asked to be loaded// is already in the local cache.// none of the other fields make sense for preparsing// Process external schema location properties.// We don't call tokenizeSchemaLocationStr here, because we also want// to check whether the values are valid URI.// NOTE: we only need to verify full checking in case the schema was not provided via JAXP// since full checking already verified for all JAXP schemas/** This method is called either from XMLGrammarLoader.loadGrammar or from XMLSchemaValidator. ... */// this should only be done once per invocation of this object;// unless application alters JAXPSource in the mean time.// loadSchema(XSDDescription, XMLInputSource):  SchemaGrammar/** This method tries to resolve location of the given schema. ... */// we consider the schema location properties for import// use empty string as the key for absent namespace// get the location hint for that namespace// if it's not import, or if the target namespace is not set// in the schema location properties, use location hint// add external schema locations to the location pairs// get the attribute decl for xsi:schemaLocation// because external schema location property has the same syntax// as xsi:schemaLocation// validation the string value to get the list of URI's// report warning (odd number of items)// report warning (not list of URI's)// similarly for no ns schema location property// report warning (not a URI)// this method takes a SchemaLocation string.// If an error is encountered, false is returned;// otherwise, true is returned.  In either case, locations// is augmented to include as many tokens as possible.// @param schemaStr     The schemaLocation string to tokenize// @param locations     HashMap mapping namespaces to LocationArray objects holding lists of locaitons// @return true if no problems; false if string could not be tokenized// error!// tokenizeSchemaLocation(String, HashMap):  boolean/** Translate the various JAXP SchemaSource property types to XNI ... */// Not an array// it is possible that we won't be able to resolve JAXP schema-source location// Not an Object[], String[], File[], InputStream[], InputSource[]// JAXP spec. allow []s of type String, File, InputStream,// InputSource also, apart from [] of type Object.//make local vector for storing targetn namespaces of schemasources specified in object arrays.// load schema//when an array of objects is passed it is illegal to have two schemas that share same namespace.//REVISIT: What should be the acutal behavior if grammar can't be loaded as specified in schema source?//processJAXPSchemaSource// String value is treated as a URI that is passed through the// EntityResolver// REVISIT: can this happen?// Treat value as a URI and pass in as systemId//Convert a SAX InputSource to an equivalent XNI XMLInputSource//setLocation()//getLocationArray()//locationArray// TODO Auto-generated method stub// need to reprocess JAXP schema sources// reinitialize grammar bucket//pass the component manager to the factory..// get registered entity manager to be able to resolve JAXP schema-source property:// Note: in case XMLSchemaValidator has created the loader,// the entity manager property is null// get the error reporter// Determine schema dv factory to use// get schema location properties// get JAXP sources if available// clear grammars, and put the one for schema namespace there// get continue-after-fatal-error feature// set full validation to false// get generate-synthetic-annotations feature// put this grammar into the bucket, along with grammars// imported by it (directly or indirectly)// REVISIT: a conflict between new grammar(s) and grammars// in the bucket. What to do? A warning? An exception?// need to wrap the LSInput with an XMLInputSource/** An LSParser looks at inputs specified in LSInput in ... */// check whether there is a Reader// according to DOM, we need to treat such reader as "UTF-16".// check whether there is an InputStream// if there is a string data, use a StringReader// according to DOM, we need to treat such data as "UTF-16".// otherwise, just use the public/system/base Ids// XMLGrammarLoader/** The XML Schema validator. The validator implements a document ... *//** Feature identifier: expose schema normalized value *//** Feature identifier: send element default value via characters() *//** Feature identifier: augment PSVI *//** Feature identifier: whether to recognize java encoding names *//** Feature identifier: use grammar pool only *//** Feature identifier: whether to continue parsing a schema after a fatal error is encountered *//** Property identifier: JAXP schema language. */// NOTE: The following defaults are nulled out on purpose.//       If they are set, then when the XML Schema validator//       is constructed dynamically, these values may override//       those set by the application. This goes against the//       whole purpose of XMLComponent#getFeatureDefault but//       it can't be helped in this case. -Ac//Boolean.FALSE,// this is the number of valuestores of each kind// we expect an element to have.  It's almost// never > 1; so leave it at that./** current PSVI element info */// since it is the responsibility of each component to an// Augmentations parameter if one is null, to save ourselves from// having to create this object continually, it is created here.// If it is not present in calls that we're passing on, we *must*// clear this before we introduce it into the pipeline./** Map which is used to catch instance documents that try ... */// this is included for the convenience of handleEndElement// Validation features// Namespace growth feature// to indicate whether we are in the scope of entity reference or CData// Did we see only whitespace in element content?/** While parsing a document, keep the location of the document. *//** A wrapper of the standard error reporter. We'll store all schema errors ... */// the error reporter property// store error codes; starting position of the errors for each element;// number of element (depth); and whether to record error// set the external error reporter, clear errors// should be called when starting process an element or an attribute.// store the starting position for the current context// resize array if necessary// should be called on endElement: get all errors of the current element// get starting position of the current element// number of errors of the current element// if no errors, return null// copy errors from the list to an string array// remove errors of the current element// should be called when an attribute is done: get all errors of// this attribute, but leave the errors to the containing element// also called after an element was strictly assessed.// don't resize the vector: leave the errors for this attribute// to the containing element// reportError(String,String,Object[],short)// reportError(XMLLocator,String,String,Object[],short)/** Entity resolver */// schema location property values//JAXP Schema Source property/** Schema Grammar Description passed,  to give a chance to application to supply the Grammar */// Init reportWhitespace for this handler// startElement(QName,XMLAttributes, Augmentations)// in the case where there is a {value constraint}, and the element// doesn't have any text content, change emptyElement call to// start + characters + end// fElementDepth == -2 indicates that the schema validator was removed// from the pipeline. then we don't need to call handleEndElement.// emptyElement(QName,XMLAttributes, Augmentations)// for union types we can't normalize data// thus we only need to send augs information if any;// the normalized data for union will be send// after normalization is performed (at the endElement())// doesn't have any text content, add a characters call.// endElement(QName, Augmentations)// REVISIT: what should we do here if schema normalization is on??// endDocument(Augmentations)// DOMRevalidationHandler methods// REVISIT: this methods basically duplicates implementation of//          handleCharacters(). We should be able to reuse some code// if whitespace == -1 skip normalization, because it is a complexType// or a union type.// normalize data// When it's a complex type with element-only content, we need to// find out whether the content contains any non-whitespace character.// data outside of element content// XMLDocumentHandler and XMLDTDHandler methods// REVISIT: what should happen if normalize_data_ is on??// Schema Normalization// temporary empty string buffer.// temporary character buffer, and empty string buffer.// got first chunk in characters() (SAX)// Previous chunk had a trailing space//whiteSpace: preserve/replace/collapse/** Schema grammar resolver. *//** the DV usd to convert xsi:type to a QName */// REVISIT: in new simple type design, make things in DVs static,//          so that we can QNameDV.getCompiledForm()/** used to build content models */// REVISIT: create decl pool, and pass it to each traversers// Schema grammar loader/** String representation of the validation root. */// REVISIT: what do we store here? QName, XPATH, some ID? use rawname now./** Skip validation: anything below this level should be skipped *//** anything above this level has validation_attempted != full *//** anything above this level has validation_attempted != none *//** Element depth: -2: validator not in pipeline; >= -1 current depth. *//** Seen sub elements. *//** Seen sub elements stack. *//** Current element declaration. *//** Element decl stack. *//** nil value of the current element *//** nil value stack *//** notation value of the current element *//** notation stack *//** Current type. *//** type stack. *//** Current content model. *//** Content model stack. *//** the current state of the current content model *//** stack to hold content model states *//** whether the curret element is strictly assessed *//** strict assess stack *//** Whether need to append characters to fBuffer *//** Did we see any character data? *//** stack to record if we saw character data *//** Did we see non-whitespace character data? *//** Stack to record if we saw character data outside of element content *//** temporary qname *//** temporary validated info */// used to validate default/fixed values against xsi:type// only need to check facets, so we set extraChecking to false (in reset)// used to apply default/fixed values// only need to check id/idref/entity, so we set checkFacets to false// identity constraint information/** Stack of active XPath matchers for identity constraints. All ... *//** Cache of value stores for identity constraint fields. *///reset XSDDescription// cleanup id table// reset schema loader// datatype normalization// should only clear this if the last schema had identity constraints.// get error reporter// Re-parse external schema location properties.// get symbol table. if it's a new one, add symbols to it.// store the external schema locations. they are set when reset is called,// so any other schemaLocation declaration for the same namespace will be// effectively ignored. becuase we choose to take first location hint// available for a particular namespace.// FieldActivator methods/** Start the value scope for the specified identity constraint. This ... */// startValueScopeFor(IdentityConstraint identityConstraint)/** Request to activate the specified field. This method returns the ... */// activateField(Field):XPathMatcher/** Ends the value scope for the specified identity constraint. ... */// endValueScopeFor(IdentityConstraint)/** Sets whether the given field is permitted to match a value. ... */// setMayMatch(Field, Boolean)/** Returns whether the given field is permitted to match a value. ... */// mayMatch(Field):Boolean// a utility method for Identity constraints// handle start document// handleStartDocument(XMLLocator,String)// handleEndDocument()// handle character contents// returns the normalized string if possible, otherwise the original string// Note: data in EntityRef and CDATA is normalized as well// handleCharacters(XMLString)/** Normalize whitespace in an XMLString according to the rules defined ... */// ensure the ch array is big enough// don't include the leading ' ' for now. might include it later.// this is a leading whitespace, record it// if we finished on a space trim it but also record it// if all we had was whitespace we skipped record it as// trailing whitespace as well// previous chunk ended on whitespace// insert whitespace// previous chunk ended on character,// this chunk starts with whitespace// The length includes the leading ' '. Now removing it.// handle ignorable whitespace// REVISIT: the same process needs to be performed as handleCharacters.// only it's simpler here: we know all characters are whitespaces.// handleIgnorableWhitespace(XMLString)/** Handle element. */// root element// schemaType is not specified// if a DTD grammar is found, we do the same thing as Dynamic:// if a schema grammar is found, validation is performed;// otherwise, skip the whole document.// [1] Either schemaType is DTD, and in this case validate/schema is turned off// [2] Validating against XML Schemas only//   [a] dynamic validation is false: report error if SchemaGrammar is not found//   [b] dynamic validation is true: if grammar is not found ignore.// get xsi:schemaLocation and xsi:noNamespaceSchemaLocation attributes,// parse them to get the grammars//store the location hints..  we need to do it so that we can defer the loading of grammar until//there is a reference to a component from that namespace. To provide location hints to the//application for a namespace// if we are in the content of "skip", then just skip this element// REVISIT:  is this the correct behaviour for ID constraints?  -NG//try to find schema grammar by different means..// if we are not skipping this element, and there is a content model,// we try to find the corresponding decl object for this element.// the reason we move this part of code here is to make sure the// error reported here (if any) is stored within the parent element's// context, instead of that of the current element.// it could be an element decl or a wildcard decl//REVISIT: is it the only case we will have particle = null?// if it's not the root element, we push the current states in the stacks// increase the element depth after we've saved// all states for the parent element// and the buffer to hold the value of the element// check what kind of declaration the "decl" from// oneTransition() maps to// if the wildcard is skip, then return// try again to get the element decl:// case 1: find declaration for root element// case 2: find declaration for element from another namespace// then get the type// get type from xsi:type// if no decl/type found for the current element// if this is the validation root, report an error, because// we can't find eith decl or type for this element// REVISIT: should we report error, or warning?// for dynamic validation, skip the whole content,// because no grammar was found.// no schema grammar was found, but it's either dynamic// validation, or another kind of grammar was found (DTD,// for example). The intended behavior here is to skip// the whole document. To improve performance, we try to// remove the validator from the pipeline, since it's not// supposed to do anything.// indicate that the validator was removed.// We don't call reportSchemaError here, because the spec// doesn't think it's invalid not to be able to find a// declaration or type definition for an element. Xerces is// reporting it as an error for historical reasons, but in// PSVI, we shouldn't mark this element as invalid because// of this. - SG// if wildcard = strict, report error.// needs to be called before fXSIErrorReporter.pushContext()// so that the error belongs to the parent element.// report error, because wilcard = strict// no element decl or type found for this element.// Allowed by the spec, we can choose to either laxly assess this// element, or to skip it. Now we choose lax assessment.// any type has mixed content, so we don't need to append buffer// push error reporter context: record the current position// This has to happen after we process skip contents,// otherwise push and pop won't be correctly paired.// get xsi:type// If it fails, use the old type. Use anyType if ther is no old type.// if the element has a fixed value constraint, we need to append// if the type is simple, we need to append// if the type is simple content complex type, we need to append// Element Locally Valid (Element)// 2 Its {abstract} must be false.// make the current element validation root// update normalization flags// reset values// Element Locally Valid (Type)// find out if the content type is simple and if variety is union// to be able to do character normalization// normalization: simple type// if !union type// then try to get the content model// and get the initial content model state// get information about xsi:nil// only deal with xsi:nil when there is an element declaration// now validate everything related with the attributes// first, get the attribute group// activate identity constraints// initialize when identity constrains are defined for the elem// add default attributes// call all active identity constraints// PSVI: add validation context// PSVI: add element declaration// PSVI: add element type// PSVI: add notation attribute/** Handle end element. If there is not text content, and there is a ... */// if we are skipping, return// but if this is the top element that we are skipping,// restore the states.// set the partial validation depth to the depth of parent// PSVI: validation attempted:// use default values in psvi item for// validation attempted, validity, and error codes// check extra schema constraints on root element// now validate the content of the element// 6 The element information item must be valid with respect to each of the {identity-constraint definitions} as per Identity-constraint Satisfied (3.11.4).// call matchers and de-activate context// handle everything *but* keyref's.// now handle keyref's/...// nothing to do if nothing matched!// have we reached the end tag of the validation root?// 7 If the element information item is the validation root, it must be valid per Validation Root Valid (ID/IDREF) (3.3.4).// check extra schema constraints// return the final set of grammars validator ended up with// Set grammars as immutable// decrease element depth and restore states// get the states for the parent element.// We should have a stack for whitespace value, and pop it up here.// But when fWhiteSpace != -1, and we see a sub-element, it must be// an error (at least for Schema 1.0). So for valid documents, the// only value we are going to push/pop in the stack is -1.// Here we just mimic the effect of popping -1. -SG// Same for append buffer. Simple types and elements with fixed// value constraint don't allow sub-elements. -SG// same here.// handleEndElement(QName,boolean)*/// the 4 properties sent on startElement calls// PSVI: validation attempted// nothing below or at the same level has none or partial// (which means this level is strictly assessed, and all chidren// are full), so this one has full// nothing below or at the same level has full or partial// (which means this level is not strictly assessed, and all chidren// are none), so this one has none// otherwise partial, and anything above this level will be partial// get all errors for the current element, its attribute,// and subelements (if they were strictly assessed).// any error would make this element invalid.// and we merge these errors to the parent element.// PSVI: error codes// PSVI: validity// Discard the current context: ignore any error happened within// the sub-elements/attributes of this element, because those// errors won't affect the validity of the parent elements.// store [schema information] in the PSVI//storeLocations//this is the function where logic of retrieving grammar is written , parser first tries to get the grammar from//the local pool, if not in local pool, it gives chance to application to be able to retrieve the grammar, then it//tries to parse the grammar using location hints from the give namespace.//get the grammar from local pool...// give a chance to application to be able to retreive the grammar.// use location hints instead// try to parse the grammar using location hints from that namespace..// if we are dealing with a different schema location, then include the new schema// into the existing grammar//findSchemaGrammar// This method also deals with clause 1.2.1.2 of the constraint// Validation Rule: Schema-Validity Assessment (Element)// 4 If there is an attribute information item among the element information item's [attributes] whose [namespace name] is identical to http://www.w3.org/2001/XMLSchema-instance and whose [local name] is type, then all of the following must be true:// 4.1 The normalized value of that attribute information item must be valid with respect to the built-in QName simple type, as defined by String Valid (3.14.4);// 4.2 The local name and namespace name (as defined in QName Interpretation (3.15.3)), of the actual value of that attribute information item must resolve to a type definition, as defined in QName resolution (Instance) (3.15.4)// if the namespace is schema namespace, first try built-in types// if it's not schema built-in types, then try to get a grammar//try to find schema grammar by different means....// still couldn't find the type, report an error// if there is no current type, set this one as current.// and we don't need to do extra checking// 4.3 The local type definition must be validly derived from the {type definition} given the union of the {disallowed substitutions} and the {type definition}'s {prohibited substitutions}, as defined in Type Derivation OK (Complex) (3.4.6) (if it is a complex type definition), or given {disallowed substitutions} as defined in Type Derivation OK (Simple) (3.14.6) (if it is a simple type definition).//getAndCheckXsiType// 3 The appropriate case among the following must be true:// 3.1 If {nillable} is false, then there must be no attribute information item among the element information item's [attributes] whose [namespace name] is identical to http://www.w3.org/2001/XMLSchema-instance and whose [local name] is nil.// 3.2 If {nillable} is true and there is such an attribute information item and its actual value is true , then all of the following must be true:// 3.2.2 There must be no fixed {value constraint}.// whether we have seen a Wildcard ID.// for each present attribute// Element Locally Valid (Complex Type)// 3 For each attribute information item in the element information item's [attributes] excepting those whose [namespace name] is identical to http://www.w3.org/2001/XMLSchema-instance and whose [local name] is one of type, nil, schemaLocation or noNamespaceSchemaLocation, the appropriate case among the following must be true:// get the corresponding attribute decl// PSVI attribute: validation context// 3.1.1 The element information item's [attributes] must be empty, excepting those// whose [namespace name] is identical to http://www.w3.org/2001/XMLSchema-instance and// whose [local name] is one of type, nil, schemaLocation or noNamespaceSchemaLocation.// for the 4 xsi attributes, get appropriate decl, and validate// for namespace attributes, no_validation/unknow_validity// simple type doesn't allow any other attributes// it's not xmlns, and not xsi, then we need to find a decl for it// 3.2 otherwise all of the following must be true:// 3.2.1 There must be an {attribute wildcard}.// 3.2.2 The attribute information item must be valid with respect to it as defined in Item Valid (Wildcard) (3.10.4).// if failed, get it from wildcard//if (attrWildcard == null)//    reportSchemaError("cvc-complex-type.3.2.1", new Object[]{element.rawname, fTempQName.rawname});// so this attribute is not allowed// which means it matches a wildcard// skip it if processContents is skip//try to find grammar by different means...// if can't find// if strict, report error// then continue to the next attribute// 5 Let [Definition:]  the wild IDs be the set of all attribute information item to which clause 3.2 applied and whose validation resulted in a context-determined declaration of mustFind or no context-determined declaration at all, and whose [local name] and [namespace name] resolve (as defined by QName resolution (Instance) (3.15.4)) to an attribute declaration whose {type definition} is or is derived from ID. Then all of the following must be true:// 5.1 There must be no more than one item in wild IDs.// end of for (all attributes)// 5.2 If wild IDs is non-empty, there must not be any attribute uses among the {attribute uses} whose {attribute declaration}'s {type definition} is or is derived from ID.//processAttributes// Attribute Locally Valid// For an attribute information item to be locally valid with respect to an attribute declaration all of the following must be true:// 1 The declaration must not be absent (see Missing Sub-components (5.3) for how this can fail to be the case).// 2 Its {type definition} must not be absent.// 3 The item's normalized value must be locally valid with respect to that {type definition} as per String Valid (3.14.4).// get simple type// store the normalized value// PSVI: element notation//REVISIT: is it possible for the notation to be in different namespace than the attribute//with which it is associated, CHECK !!  <fof n1:att1 = "n2:notation1" ..>// should we give chance to the application to be able to  retrieve a grammar - nb//REVISIT: what would be the triggering component here.. if it is attribute value that// triggered the loading of grammar ?? -nb// get the value constraint from use or decl// 4 The item's actual value must match the value of the {value constraint}, if it is present and fixed.                 // now check the value against the simpleType// 3.1 If there is among the {attribute uses} an attribute use with an {attribute declaration} whose {name} matches the attribute information item's [local name] and whose {target namespace} is identical to the attribute information item's [namespace name] (where an absent {target namespace} is taken to be identical to a [namespace name] with no value), then the attribute information must be valid with respect to that attribute use as per Attribute Locally Valid (Use) (3.5.4). In this case the {attribute declaration} of that attribute use is the context-determined declaration for the attribute information item with respect to Schema-Validity Assessment (Attribute) (3.2.4) and Assessment Outcome (Attribute) (3.2.5).// PSVI: attribute declaration// PSVI: attribute type// PSVI: attribute memberType// PSVI: attribute normalized value// NOTE: we always store the normalized value, even if it's invlid,// because it might still be useful to the user. But when the it's// not valid, the normalized value is not trustable.// REVISIT: should we check prohibited attributes?// (2) report error for PROHIBITED attrs that are present (V_TAGc)// (3) add default attrs (FIXED and NOT_FIXED)// for each attribute use// get value constraint// whether this attribute is specified// 4 The {attribute declaration} of each attribute use in the {attribute uses} whose// {required} is true matches one of the attribute information items in the element// information item's [attributes] as per clause 3.1 above.// if the attribute is not specified, then apply the value constraint// PSVI: attribute is "schema" specified// for// addDefaultAttributes/** If there is not text content, and there is a ... */// 1 If the item is ?valid? with respect to an element declaration as per Element Locally Valid (Element) (?3.3.4) and the {value constraint} is present, but clause 3.2 of Element Locally Valid (Element) (?3.3.4) above is not satisfied and the item has no element or character information item [children], then schema. Furthermore, the post-schema-validation infoset has the canonical lexical representation of the {value constraint} value as the item's [schema normalized value] property.// fixed values are handled later, after xsi:type determined.// 3.2.1 The element information item must have no character or element information item [children].// 5 The appropriate case among the following must be true:// 5.1 If the declaration has a {value constraint}, the item has neither element nor character [children] and clause 3.2 has not applied, then all of the following must be true:// 5.1.1 If the actual type definition is a local type definition then the canonical lexical representation of the {value constraint} value must be a valid default for the actual type definition as defined in Element Default Valid (Immediate) (3.3.6).//REVISIT:we should pass ValidatedInfo here.// 5.1.2 The element information item with the canonical lexical representation of the {value constraint} value used as its normalized value must be valid with respect to the actual type definition as defined by Element Locally Valid (Type) (3.3.4).// REVISIT: don't use toString, but validateActualValue instead//          use the fState4ApplyDefault// The following method call also deal with clause 1.2.2 of the constraint// 5.2 If the declaration has no {value constraint} or the item has either element or character [children] or clause 3.2 has applied, then all of the following must be true:// 5.2.1 The element information item must be valid with respect to the actual type definition as defined by Element Locally Valid (Type) (3.3.4).// 5.2.2 If there is a fixed {value constraint} and clause 3.2 has not applied, all of the following must be true:// 5.2.2.1 The element information item must have no element information item [children].// 5.2.2.2 The appropriate case among the following must be true:// 5.2.2.2.1 If the {content type} of the actual type definition is mixed, then the initial value of the item must match the canonical lexical representation of the {value constraint} value.// REVISIT: how to get the initial value, does whiteSpace count?// 5.2.2.2.2 If the {content type} of the actual type definition is a simple type definition, then the actual value of the item must match the canonical lexical representation of the {value constraint} value.// REVISIT: the spec didn't mention this case: fixed//          value with simple type// for union types we need to send data because we delayed sending// this data when we received it in the characters() call.// processElementContent// 3.1 If the type definition is a simple type definition, then all of the following must be true:// 3.1.2 The element information item must have no element information item [children].// 3.1.3 If clause 3.2 of Element Locally Valid (Element) (3.3.4) did not apply, then the normalized value must be valid with respect to the type definition as defined by String Valid (3.14.4).// 3.2 If the type definition is a complex type definition, then the element information item must be valid with respect to the type definition as per Element Locally Valid (Complex Type) (3.4.4);// elementLocallyValidType// For an element information item to be locally valid with respect to a complex type definition all of the following must be true:// 1 {abstract} is false.// 2 If clause 3.2 of Element Locally Valid (Element) (3.3.4) did not apply, then the appropriate case among the following must be true:// 2.1 If the {content type} is empty, then the element information item has no character or element information item [children].// 2.2 If the {content type} is a simple type definition, then the element information item has no element information item [children], and the normalized value of the element information item is valid with respect to that simple type definition as defined by String Valid (3.14.4).// REVISIT: eventually, this method should return the same actualValue as elementLocallyValidType...// obviously it'll return null when the content is complex.// 2.3 If the {content type} is element-only, then the element information item has no character information item [children] other than those whose [character code] is defined as a white space in [XML 1.0 (Second Edition)].// 2.4 If the {content type} is element-only or mixed, then the sequence of the element information item's element information item [children], if any, taken in order, is valid with respect to the {content type}'s particle, as defined in Element Sequence Locally Valid (Particle) (3.9.4).// if the current state is a valid state, check whether// it's one of the final states.// Constant space algorithm for a{n,m} for n > 1 and m <= unbounded// After the DFA has completed, check minOccurs and maxOccurs// for all elements and wildcards in this content model where// a{n,m} is subsumed to a* or a+// elementLocallyValidComplexType/** Returns true if the two ValidatedInfo objects can be compared in the same value space. * *//** ******************************* */// xpath matcher information/** Stack of XPath matchers for identity constraints. ... *//** Active matchers. *//** Count of active matchers. *//** Offset stack for contexts. *//** Resets the XPath matcher stack. *//** Returns the size of the stack. */// size():int/** Returns the count of XPath matchers. */// getMatcherCount():int/** Adds a matcher. */// addMatcher(XPathMatcher)/** Returns the XPath matcher at the specified index. */// getMatcherAt(index):XPathMatcher/** Pushes a new context onto the stack. */// pushContext()/** Pops a context off of the stack. */// popContext()/** Ensures the size of the matchers array. */// ensureMatcherCapacity()// class XPathMatcherStack// value store implementations/** Value store implementation base class. There are specific subclasses ... *//** Identity constraint. *//** current data *//** Current data value count. *//** global data *//** buffer for error messages *//** Constructs a value store for the specified identity constraint. */// <init>(IdentityConstraint)// destroys this ValueStore; useful when, for instance, a// locally-scoped ID constraint is involved.// end clear():void// appends the contents of one ValueStore to those of us.// append(ValueStoreBase)/** Start scope for value store. */// startValueScope()/** Ends scope for value store. */// Validation Rule: Identity-constraint Satisfied// 4.2 If the {identity-constraint category} is key, then all of the following must be true:// 4.2.1 The target node set and the qualified node set are equal, that is, every member of the// target node set is also a member of the qualified node set and vice versa.// If the IDC is a key check whether we have all the fields.// endValueScope()// This is needed to allow keyref's to look for matched keys// in the correct scope.  Unique and Key may also need to// override this method for purposes of their own.// This method is called whenever the DocumentFragment// of an ID Constraint goes out of scope.// endDocumentFragment():void/** Signals the end of the document. This is where the specific ... */// ValueStore methods/* reports an error if an element is matched ... */// reportError(String,Object[])/** Adds the specified value to the value store. ... */// do we even know this field?// store values// addValue(String,Field)/** Returns true if this value store contains the locally scoped value stores */// REVISIT: we can improve performance by using hash codes, instead of// traversing global vector that could be quite large.// found it// didn't find it// contains():boolean/** Returns -1 if this value store contains the specified ... *//** Handle n-tuples. * *//** Iterate over each set of fields. * *//** Check whether this set is contained in the value store. * */// contains(Vector):Object// duplicateValue(Map)/** Returns a string of the specified values. */// no values// construct value string// toString(Object[]):String// one value// toString(Vector,int,int):String// class ValueStoreBase/** Unique value store. ... *//** Constructs a unique value store. */// <init>(Unique)// ValueStoreBase protected methods/** Called when a duplicate value is added. */// is this value as a group duplicated?// class UniqueValueStore/** Key value store. ... */// REVISIT: Implement a more efficient storage mechanism. -Ac/** Constructs a key value store. */// <init>(Key)// class KeyValueStore/** Key reference value store. ... *//** Key value store. */// <init>(KeyRef)// ValueStoreBase methods// end the value Scope; here's where we have to tie// up keyRef loose ends.// do all the necessary management...// verify references// get the key store corresponding (if it exists):// report error// endDocumentFragment()/** End document. */// class KeyRefValueStore// value store management/** Value store cache. This class is used to store the values for ... */// values stores/** stores all global Values stores. *//** Values stores associated to specific identity constraints. ... */// sketch of algorithm:// - when a constraint is first encountered, its//   values are stored in the (local) fIdentityConstraint2ValueStoreMap;// - Once it is validated (i.e., when it goes out of scope),//   its values are merged into the fGlobalIDConstraintMap;// - as we encounter keyref's, we look at the global table to//    validate them.// The fGlobalIDMapStack has the following structure:// - validation always occurs against the fGlobalIDConstraintMap// (which comprises all the "eligible" id constraints);// When an endElement is found, this Map is merged with the one// below in the stack.// When a start tag is encountered, we create a new// fGlobalIDConstraintMap.// i.e., the top of the fGlobalIDMapStack always contains// the preceding siblings' eligible id constraints;// the fGlobalIDConstraintMap contains descendants+self.// keyrefs can only match descendants+self./** Resets the identity constraint cache. */// startDocument()// startElement:  pushes the current fGlobalIDConstraintMap// onto fGlobalMapStack and clears fGlobalIDConstraint map.// only clone the hashtable when there are elements// startElement(void)/** endElement():  merges contents of fGlobalIDConstraintMap with the ... */// must be an invalid doc!// return if there is no element// endElement()/** Initializes the value stores for the specified element ... */// initialize value stores for unique fields// initialize value stores for key fields// initialize value stores for keyRef fields// initValueStoresFor(XSElementDecl)/** Returns the value store associated to the specified IdentityConstraint. */// getValueStoreFor(IdentityConstraint, int):ValueStoreBase/** Returns the global value store associated to the specified IdentityConstraint. */// getValueStoreFor(IdentityConstraint):ValueStoreBase// This method takes the contents of the (local) ValueStore// associated with id and moves them into the global// map, if id is a <unique> or a <key>.// If it's a <keyRef>, then we leave it for later.// transplant(id)/** Check identity constraints. */// class ValueStoreCache// the purpose of this class is to enable IdentityConstraint,int// pairs to be used easily as keys in Maps.// init(IdentityConstraint, int)// object method// class LocalIDKey/** A simple vector for <code>short</code>s. *//** Current length. *//** Returns the length of the vector. *//** Adds the value to the vector. *//** Returns the short value at the specified position in the vector. *//** Returns whether the short is contained in the vector. *//** Ensures capacity. */// class SchemaValidator/** This is an implementation of the XSAnnotation schema component. ... */// the content of the annotation node, including all children, along// with any non-schema attributes from its parent// the grammar which owns this annotation; we get parsers// from here when we need them/** Write contents of the annotation to the specified DOM object. If the ... *//** A text representation of annotation. */// XSObject methods/** The <code>type</code> of this object, i.e. ... *//** The name of type <code>NCName</code> of this declaration as defined in ... *//** The [target namespace] of this object, or <code>null</code> if it is ... *//** A namespace schema information item corresponding to the target ... */// nothing must go wrong with this parse...// this should never happen!// REVISIT:  what to do with this?; should really not// eat it...// ditto with above// Release the reference to the user's ContentHandler.// this creates the new Annotation element as the first child// of the Node// adoptNode will return null when the DOM implementations are not compatible./** The XML representation for an attribute declaration ... */// scopes// the name of the attribute// the target namespace of the attribute// the simple type of the attribute// value constraint type: default, fixed or !specified// scope// enclosing complex type, when the scope is local// optional annotations// value constraint value// of the attribute declaration, if it is globally declared; or null otherwise./** Get the type of the object, i.e ELEMENT_DECLARATION. *//** The <code>name</code> of this <code>XSObject</code> depending on the ... *//** The namespace URI of this node, or <code>null</code> if it is ... *//** A simple type definition *//** Optional. Either global or a complex type definition ( ... *//** Locally scoped declarations are available for use only within the ... *//** Value constraint: one of default, fixed. *//** Value constraint: The actual value (with respect to the {type ... */// REVISIT: SCAPI: what's the proper representation// class XSAttributeDecl/** The XML representation for an attribute group declaration ... */// name of the attribute group// target namespace of the attribute group// number of attribute uses included by this attribute group// attribute uses included by this attribute group// attribute wildcard included by this attribute group// whether there is an attribute use whose type is or is derived from ID.// optional annotation// of the attribute group definition, if it is globally declared; or null otherwise.// add an attribute use// if the type is derived from ID, but there is already another attribute// use of type ID, then return the name of the other attribute use;// otherwise, return null// if this attribute use is prohibited, then don't check whether it's// of type ID// if there is already an attribute use of type ID,// return its name (and don't add it to the list, to avoid// interruption to instance validation.// Remove all prohibited attributes.// Do not remove attributes that have the same name as the prohibited// ones, because they are specified at the same level. Prohibited// attributes are only to remove attributes from the base type in a// restriction.//        int newCount = 0;//        if (pCount > 0) {//            OUTER: for (int i = 0; i < fAttrUseNum; i++) {//                if (fAttributeUses[i].fUse == SchemaSymbols.USE_PROHIBITED)//                    continue;//                for (int j = 1; j <= pCount; j++) {//                    if (fAttributeUses[i].fAttrDecl.fName == pUses[fAttrUseNum-pCount].fAttrDecl.fName &&//                        fAttributeUses[i].fAttrDecl.fTargetNamespace == pUses[fAttrUseNum-pCount].fAttrDecl.fTargetNamespace) {//                        continue OUTER;//                    }//                pUses[newCount++] = fAttributeUses[i];//            fAttributeUses = pUses;//            fAttrUseNum = newCount;/** Check that the attributes in this group validly restrict those from a base group. ... */// Look for a match in the base// derivation-ok-restriction.  Constraint 2.1.1// if this attribute is prohibited in the derived type, don't// need to check any of the following constraints.// derivation-ok-restriction.  Constraint 2.1.3// check the values are the same.// No matching attribute in base - there should be a matching wildcard// derivation-ok-restriction.  Constraint 2.2// Check that any REQUIRED attributes in the base have matching attributes// in this group// derivation-ok-restriction.  Constraint 3// Look for a match in this group// Now, check wildcards// derivation-ok-restriction.  Constraint 4// reset the attribute group declaration// reset attribute uses/** {attribute uses} A set of attribute uses. *//** {attribute wildcard} Optional. A wildcard. */// class XSAttributeGroupDecl/** The XML representation for an attribute use ... */// the referred attribute decl// use information: SchemaSymbols.USE_OPTIONAL, REQUIRED, PROHIBITED/** {required} determines whether this use of an attribute declaration ... *//** {attribute declaration} provides the attribute declaration itself, ... *//** Value Constraint: one of default, fixed. *//** Value Constraint: The actual value (with respect to the {type ... */// class XSAttributeUseImpl/** The XML representation for a complexType ... */// name of the complexType// target namespace of the complexType// base type of the complexType// derivation method of the complexType// final set of the complexType// block set (prohibited substitution) of the complexType// flags: whether is abstract; whether contains ID type;//        whether it's an anonymous tpye// the attribute group that holds the attribute uses and attribute wildcard// the content type of the complexType// if the content type is simple, then the corresponding simpleType// if the content type is element or mixed, the particle// if there is a particle, the content model corresponding to that particle// the content model that's sufficient for computing UPA// list of annotations affiliated with this type// of the complex type definition, if it is globally declared; or null otherwise.// do-nothing constructor for now.// flags for the misc flag// methods to get/set misc flag// for complex type with empty or simple content,// there is no content model validator// some utility methods:// return the attribute group for this complex type// reached anyType/** Checks if a type is derived from another given the the name, namespace ... */// list or union/** Checks if a type is derived from another by any combination of ... */// Check if this type is derived from the base by restriction or/** Checks if a type is derived from another by restriction. See: ... */// ancestor is anySimpleType, return false// if the name and namespace of this type is the same as the// ancestor return true// If the base type is a complexType with simpleContent// If the base type is a complex type// Every derivation step till the base type should be// restriction. If not return false/** Checks if a type is derived from another by extension. See: ... */// If ancestor is anySimpleType return false.// returns true if atleast one derivation step was extension// derivationMethod extension will always return false for a// simpleType,// we treat it like a restriction// At least one derivation step upto the ancestor type should be// extension.// reset attribute group// help out the garbage collector/** A boolean that specifies if the type definition is anonymous. ... *//** {base type definition} Either a simple type definition or a complex ... *//** {derivation method} Either extension or restriction. The valid constant ... *//** {final} For complex type definition it is a subset of {extension, ... *//** {final} For complex type definition it is a subset of {extension, restriction}. ... *//** {abstract} A boolean. Complex types for which {abstract} is true must ... *//** {content type} One of empty, a simple type definition (see ... *//** A simple type definition corresponding to simple content model, ... *//** A particle for mixed or element-only content model, otherwise ... *//** {prohibited substitutions} A subset of {extension, restriction}. ... *//** {prohibited substitutions} ... */// class XSComplexTypeDecl/** Constaints shared by traversers and validator ... */// IHR: Visited on 2006-11-17// Added a boolean return value to particleValidRestriction (it was a void function)// to help the checkRecurseLax to know when expansion has happened and no order is required// (IHR@xbrl.org) (Ignacio@Hernandez-Ros.com)//This assumes that the names are never null./** check whether derived is valid derived from base, given a subset ... */// if derived is anyType, then it's valid only if base is anyType too// if derived is anySimpleType, then it's valid only if the base// is ur-type// if derived is simple type// if base is complex type// if base is anyType, change base to anySimpleType,// otherwise, not valid/** check whether simple type derived is valid derived from base, ... *//** check whether complex type derived is valid derived from base, ... *//** Note: this will be a private method, and it assumes that derived is not ... */// 1 They are the same type definition.// 2.1 restriction is not in the subset, or in the {final} of its own {base type definition};// 2.2 One of the following must be true:// 2.2.1 D's base type definition is B.// 2.2.2 D's base type definition is not the simple ur-type definition and is validly derived from B given the subset, as defined by this constraint.// 2.2.3 D's {variety} is list or union and B is the simple ur-type definition.// 2.2.4 B's {variety} is union and D is validly derived from a type definition in B's {member type definitions} given the subset, as defined by this constraint.// 2.1 B and D must be the same type definition.// 1 If B and D are not the same type definition, then the {derivation method} of D must not be in the subset.// 2 One of the following must be true:// 2.2 B must be D's {base type definition}.// 2.3 All of the following must be true:// 2.3.1 D's {base type definition} must not be the ur-type definition.// 2.3.2 The appropriate case among the following must be true:// 2.3.2.1 If D's {base type definition} is complex, then it must be validly derived from B given the subset as defined by this constraint.// 2.3.2.2 If D's {base type definition} is simple, then it must be validly derived from B given the subset as defined in Type Derivation OK (Simple) (3.14.6)./** check whether a value is a valid default for some type ... */// e-props-correct// For a string to be a valid default with respect to a type definition the appropriate case among the following must be true:// 1 If the type definition is a simple type definition, then the string must be valid with respect to that definition as defined by String Valid (3.14.4).// 2 If the type definition is a complex type definition, then all of the following must be true:// 2.1 its {content type} must be a simple type definition or mixed.// 2.2 The appropriate case among the following must be true:// 2.2.1 If the {content type} is a simple type definition, then the string must be valid with respect to that simple type definition as defined by String Valid (3.14.4).// 2.2.2 If the {content type} is mixed, then the {content type}'s particle must be emptiable as defined by Particle Emptiable (3.9.6).// get the simple type declaration, and validate// complex type with mixed. to make sure that we store correct// information in vinfo and return the correct value, we use// "string" type for validation// validate the original lexical rep, and set the actual value// validate the canonical lexical rep/** used to check the 3 constraints against each complex type ... */// get all grammars, and put all substitution group information// in the substitution group handler// before worrying about complexTypes, let's get// groups redefined by restriction out of the way.// can't be a restriction!// for each complex type, check the 3 constraints.// types need to be checked// to hold the errors// REVISIT: do we want to report all errors? or just one?//XMLSchemaError1D errors = new XMLSchemaError1D();// whether need to check this type again;// whether only do UPA checking// if do all checkings, how many need to be checked again.// i: grammar; j: type; k: error// for all grammars// get whether to skip EDC, and types need to be checked// for each type// if we've already full-checked this grammar, then// skip the EDC constraint// 1. Element Decl Consistent// 2. Particle Derivation// 3. UPA// get the content model and check UPA// now report all errors/* for (k = errors.getErrorCodeNum()-1; k >= 0; k--) { ... */// if we are doing all checkings, and this one needs further// checking, store it in the type array.// clear errors for the next type.//errors.clear();// we've done with the types in this grammar. if we are checking// all constraints, need to trim type array to a proper size:// only contain those need further checking.// and mark this grammar that it only needs UPA checking./* Check that a given particle is a valid restriction of a base particle. */// check for elements in the tree with the same name and namespace// Check for subsitution groups.// How can we avoid this concat?  LM.// just add it in// If this is the same check element, we're O.K.// Types are not the same// Check that a given particle is a valid restriction of a base particle.// IHR: 2006/11/17// Returns a boolean indicating if there has been expansion of substitution group// in the bParticle.// With this information the checkRecurseLax function knows when is// to keep the order and when to ignore it.// By default there has been no expansion// Check for empty particles.   If either base or derived particle is empty,// (and the other isn't) it's an error.// Do setup prior to invoking the Particle (Restriction) cases.// This involves://   - removing pointless occurrences for groups, and retrieving a vector of//     non-pointless children//   - turning top-level elements with substitution groups into CHOICE groups.// Handle pointless groups for the derived particle// Find a group, starting with this particle, with more than 1 child.   There// may be none, and the particle of interest trivially becomes an element or// wildcard.// Particle has been replaced.   Retrieve new type info.// Fill in a vector with the children of the particle, removing any// pointless model groups in the process.// For elements which are the heads of substitution groups, treat as CHOICE// Check for subsitution groups.   Treat any element that has a// subsitution group as a choice.   Fill in the children vector with the// members of the substitution group// Now, set the type to be CHOICE.  The "group" will have the same// occurrence information as the original particle.// Fill in the vector of children// Set the handler to null, to indicate that we've finished handling// substitution groups for this particle.// Handle pointless groups for the base particle// Now, set the type to be CHOICE// if we are here expansion of bParticle happened// O.K. - Figure out which particle derivation rule applies and call it// Elt:Elt NameAndTypeOK// Elt:Any NSCompat// Elt:All RecurseAsIfGroup// Treat the element as if it were in a group of the same type// as the base Particle// Any:Any NSSubset// All:Any NSRecurseCheckCardinality// Choice:Any NSRecurseCheckCardinality// Check that the names are the same// Check nillable// Check occurrence range// Check for consistent fixed values// derived one has to have a fixed value// if there is no simple type, then compare based on string// Check identity constraints// Check for disallowed substitutions// Check that the derived element's type is derived from the base's.// checkIDConstraintRestriction// check Occurrence ranges// check wildcard allows namespace of element// check wildcard subset// Check that each member of the group is a valid restriction of the wildcard// REVISIT: should we really just ignore original cause of this error?//          how can we report it?// Now, see if there are some elements in the base we didn't match up// didn't find a match.  Detect an error// IHR: go back one element on b list because the next element may match// this as well.// See if the sequence group is a valid restriction of the choice// Here is an example of a valid restriction://   <choice minOccurs="2">//       <a/>//       <b/>//       <c/>//   </choice>//   <sequence>//        <b/>//        <a/>//   </sequence>// to check whether two element overlap, as defined in constraint UPA// if the two element have the same name and namespace,// or if there is an element decl in element1's substitution group,// who has the same name/namespace with element2// or if there is an element decl in element2's substitution group,// who has the same name/namespace with element1// to check whether an element overlaps with a wildcard,// as defined in constraint UPA// if the wildcard allows the element// or if the wildcard allows any element in the substitution group// if the intersection of the two wildcard is not empty list// call one of the above methods according to the type of decls// class XSContraints/** All information specific to XML Schema grammars. ... */// used to indicate what triggered the call/** Indicate that this description was just initialized. *//** Indicate that the current schema document is <include>d by another ... *//** Indicate that the current schema document is <redefine>d by another ... *//** Indicate that the current schema document is <import>ed by another ... *//** Indicate that the current schema document is being preparsed. *//** Indicate that the parse of the current schema document is triggered ... *//** Indicate that the parse of the current schema document is triggered by ... */// REVISIT: write description of these fields/** the type of the grammar (e.g., DTD or XSD); ... *//** Get the context. The returned value is one of the pre-defined ... *//** If the context is "include" or "redefine", then return the target ... *//** For import and references from the instance document, it's possible to ... *//** If a call is triggered by an element/attribute/xsi:type in the instance, ... *//** If a call is triggered by an attribute or xsi:type, then this mehtod ... */// fNamespace == null//fLocationHints = locationHints ;/** resets all the fields */// XSDDescription/** This class is pool that enables caching of XML Schema declaration objects. ... *//** Initial chunk count (). *//** Element declaration pool *//** Particle declaration pool *//** Attribute declaration pool *//** ComplexType declaration pool *//** SimpleType declaration pool *//** AttributeUse declaration pool */// REVISIT: do we need decl pool for group declarations, attribute group,//          notations?//          it seems like each schema would use a small number of those//          components, so it probably is not worth keeping those components//          in the pool./** The XML representation for an element declaration ... */// name of the element// target namespace of the element// type of the element// misc flag of the element: nillable/abstract/fixed// block set (disallowed substitutions) of the element// final set (substitution group exclusions) of the element// the substitution group affiliation of the element// identity constraints// of the element declaration, if it is globally declared; or null otherwise.// first clear the bits// then set the proper one/** get the string description of this element *//** get the hash code *//** whether two decls are the same *//** Reset current element declaration */// reset identity constraints/** Either a simple type definition or a complex type definition. *//** A value constraint: one of default, fixed. *//** A value constraint: The actual value (with respect to the {type ... *//** If {nillable} is true, then an element may also be valid if it carries ... *//** {identity-constraint definitions} A set of constraint definitions. *//** {substitution group affiliation} Optional. A top-level element ... *//** Convenience method. Check if <code>exclusion</code> is a substitution ... *//** Specifies if this declaration can be nominated as ... *//** Convenience method. Check if <code>disallowed</code> is a disallowed ... *//** The supplied values for {disallowed substitutions} ... *//** {abstract} A boolean. */// class XSElementDecl/** A class used to hold the internal schema grammar set for the current instance ... *//** Map that maps between Namespace and a Grammar *//** Get the schema grammar for the specified namespace ... *//** Put a schema grammar into the registry ... *//** put a schema grammar and any grammars imported by it (directly or ... */// whether there is one with the same tns// if the one we have is different from the one passed, it's an error// not deep import, then just add this one grammar// get all imported grammars, and make a copy of the Vector, so that// we can recursively process the grammars, and add distinct ones// to the same vector// for all (recursively) imported grammars// get the grammar// check whether the bucket has one with the same tns// we need to add grammars imported by sg1 too// for all grammars imported by sg2, but not in the vector// we add them to the vector// we found one with the same target namespace// if the two grammars are not the same object, then it's an error// now we have all imported grammars stored in the vector. add them// if grammar already exist in the bucket, we ignore the request// not adding the imported grammars// we found one with the same target namespace, ignore it/** get all grammars in the registry ... */// get the number of grammars// get grammars with target namespace// add the grammar without target namespace, if any/** Clear the registry. ... */// class XSGrammarBucket/** The XML representation for a group declaration ... */// name of the group// target namespace of the group// model group of the group// of the model group definition, if it is globally declared; or null otherwise./** {model group} A model group. */// class XSGroupDecl/** Implements XSImplementation interface that allows one to retrieve an instance of <code>XSLoader</code>. ... */// class XSImplementationImpl/** <p>An implementation of XSLoader which wraps XMLSchemaLoader.</p> ... *//** Grammar pool. Need this to prevent us from ... *//** Schema loader. * *//** No-args constructor. *//** The configuration of a document. It maintains a table of recognized ... *//** Parses the content of XML Schema documents specified as the list of URI ... *//** Parses the content of XML Schema documents specified as a list of ... *//** Parse an XML Schema document from a location identified by a URI ... *//** Parse an XML Schema document from a resource identified by a ... *//** Grammar pool which merges grammars from the same namespace into one. This eliminates ... *//** Add new top-level element declarations. * *//** Add new top-level attribute declarations. * *//** Add new top-level type definitions. * *//** Add new top-level attribute group definitions. * *//** Add new top-level model group definitions. * *//** Add new top-level notation declarations. * *//** Add all annotations. Since these components are not named it's ... *//** SchemaMessageProvider implements an XMLMessageProvider that ... *//** The domain of messages concerning the XML Schema: Structures specification. *//** Store schema model group declaration. ... */// types of model groups// REVISIT: can't use same constants as those for particles, because// there are place where the constants are used together. For example,// to check whether the content is an element or a sequence.// compositor of the model group// particles// this particle's optional annotations// whether this model group contains nothing/** 3.8.6 Effective Total Range (all and sequence) and ... */// return the sum of all min values of the particles// return the min of all min values of the particles// if one of the max value of the particles is unbounded, return unbounded;// otherwise return the sum of all max values// otherwise return the max of all max values/** get the string description of this particle */// REVISIT: Commented code may help to eliminate redundant parentheses (test first before committing)//if (fMinOccurs != 1 || fMaxOccurs != 1)//if (fCompositor == MODELGROUP_ALL || fMinOccurs != 1 || fMaxOccurs != 1)/** {compositor} One of all, choice or sequence. The valid constants values ... *//** {particles} A list of particles */// class XSModelGroupImpl/* Copyright 2002-2005 The Apache Software Foundation. ... *//** Implements XSModel:  a read-only interface that represents an XML Schema, ... */// number of grammars/namespaces stored here// all target namespaces// all schema grammar objects (for each namespace)// a map from namespace to schema grammar// a map from element declaration to its substitution group// store a certain kind of components from one namespace// a string list of all the target namespaces.// store all annotations// whether there is any IDC in this XSModel/** Construct an XSModelImpl, by storing some grammars and grammars imported ... */// copy namespaces/grammars from the array to our arrays// If a schema for the schema namespace isn't included, include it here.// and recursively get all imported grammars, add them to our arrays// for each imported grammar// check whether this grammar is already in the list// if it's not, add it to the list// ensure the capacity of the arrays// establish the mapping from namespace to grammars// update the idc field// build substitution groups/** Convenience method. Returns a list of all namespaces that belong to ... *//** A set of namespace schema information information items (of type ... *//** Returns a list of top-level components, i.e. element declarations, ... */// get all hashtables from all namespaces for this type of components/** Convenience method. Returns a list of top-level component declarations ... */// try to find the grammar/** [annotations]: a set of annotations if it exists, otherwise an empty ... */// do this in two passes to avoid inaccurate array size/** REVISIT: to expose identity constraints from XSModel. ... *//** Convenience method. Returns a list containing the members of the ... */// XSNamespaceItemList methods/** The number of <code>XSNamespaceItem</code>s in the list. The range of ... *//** Returns the <code>index</code>th item in the collection or ... */// java.util.List methods// class XSModelImpl/** The XML representation for a NOTATION declaration ... */// public id of the notation// system id of the notation// of the notation declaration, if it is globally declared; or null otherwise./** Optional if {public identifier} is present. A URI reference. *//** Optional if {system identifier} is present. A public identifier, ... */// class XSNotationDecl/** Store schema particle declaration. ... */// types of particles// type of the particle// term of the particle// for PARTICLE_ELEMENT : the element decl// for PARTICLE_WILDCARD: the wildcard decl// for PARTICLE_MODELGROUP: the model group// minimum occurrence of this particle// maximum occurrence of this particle// clone this decl/** 3.9.6 Schema Component Constraint: Particle Emptiable ... */// whether this particle contains nothing/** append the string description of this particle to the string buffer ... *//** {min occurs} determines the minimum number of terms that can occur. *//** {max occurs} whether the maxOccurs value is unbounded. *//** {max occurs} determines the maximum number of terms that can occur. *//** {term} One of a model group, a wildcard, or an element declaration. */// class XSParticleDecl/** The XML representation for a wildcard declaration ... */// the type of wildcard: any, other, or list// the type of process contents: strict, lax, or skip// the namespace list:// for NSCONSTRAINT_LIST, it means one of the namespaces in the list// for NSCONSTRAINT_NOT, it means not any of the namespaces in the list// I'm trying to implement the following constraint exactly as what the// spec describes. Sometimes it seems redundant, and sometimes there seems// to be much easier solutions. But it makes it easy to understand,// easy to maintain, and easy to find a bug (either in the code, or in the// spec). -SG// NOTE: Schema spec only requires that ##other not(tNS,absent).//       The way we store ##other is not(NS1,NS2,...,NSN), which covers//       what's required by Schema, and allows future enhanced features.// In the following in-line comments:// - Bullet removed from w3c specification.// + Bullet added as proposed by Sandy Gao, IBM.// / Since we store ##other as not(NS1,NS2,...,NSN), we need to put some//   comments on where we didn't follow the spec exactly.// * When we really support not(NS1,NS2,...,NSN), we need to revisit these items./** Validation Rule: Wildcard allows Namespace Name */// For a value which is either a namespace name or absent to be valid with respect to a wildcard constraint (the value of a {namespace constraint}) one of the following must be true:// 1 The constraint must be any.// 2.1 The constraint is a pair of not and a namespace name or absent ([Definition:]  call this the namespace test).// 2.2 The value must not be identical to the namespace test.// 2.3 The value must not be absent.// / we store ##other as not(list), so our actual rule is// / 2 The constraint is a pair of not and a set, and the value is not in such set.// 3 The constraint is a set, and the value is identical to one of the members of the set.// none of the above conditions applied, so return false./** Schema Component Constraint: Wildcard Subset */// if the super is null (not expressible), return false// For a namespace constraint (call it sub) to be an intensional subset of another// namespace constraint (call it super) one of the following must be true:// 1 super must be any.//   2.1 sub must be a pair of not and a namespace name or absent.//   2.2 super must be a pair of not and the same value.//   * we can't just compare whether the namespace are the same value//     since we store other as not(list)// 3 All of the following must be true://   3.1 sub must be a set whose members are either namespace names or absent.//   3.2 One of the following must be true://       3.2.1 super must be the same set or a superset thereof.//       -3.2.2 super must be a pair of not and a namespace name or absent and//              that value must not be in sub's set.//       +3.2.2 super must be a pair of not and a namespace name or absent and//              either that value or absent must not be in sub's set.//       * since we store ##other as not(list), we acturally need to make sure//         that none of the namespaces in super.list is in sub.list.// isSubsetOf/** Check whether this wildcard has a weaker process contents than the super. *//** Schema Component Constraint: Attribute Wildcard Union */// if the other wildcard is not expressible, the result is still not expressible// For a wildcard's {namespace constraint} value to be the intensional union of two// other such values (call them O1 and O2): the appropriate case among the following// must be true:// 1 If O1 and O2 are the same value, then that value must be the value.// 2 If either O1 or O2 is any, then any must be the value.// 3 If both O1 and O2 are sets of (namespace names or absent), then the union of//   those sets must be the value.// -4 If the two are negations of different namespace names, then the intersection//    is not expressible.// +4 If the two are negations of different namespace names or absent, then//    a pair of not and absent must be the value.// * now we store ##other as not(list), the result should be//   not(intersection of two lists).// 5 If either O1 or O2 is a pair of not and a namespace name and the other is a set of//   (namespace names or absent), then The appropriate case among the following must be true://      -5.1 If the set includes the negated namespace name, then any must be the value.//      -5.2 If the set does not include the negated namespace name, then whichever of O1 or O2//           is a pair of not and a namespace name must be the value.//    +5.1 If the negated value is a namespace name, then The appropriate case//         among the following must be true://        +5.1.1 If the set includes both the namespace name and absent, then any//               must be the value.//        +5.1.2 If the set includes the namespace name but does not include//               absent, then a pair of not and absent must be the value.//        +5.1.3 If the set does not include the namespace name but includes//               absent, then the union is not expressible.//        +5.1.4 If the set does not include either the namespace name or absent,//               then whichever of O1 or O2 is a pair of not and a namespace name must be//               the value.//    +5.2 If the negated value is absent, then The appropriate case among the//         following must be true://        +5.2.1 If the set includes absent, then any must be the value.//        +5.2.2 If the set does not include absent, then whichever of O1 or O2 is//               a pair of not and a namespace name must be the value.// * when we have not(list), the operation is just not(otherlist-list)// !foundNS && !foundAbsent// other[0] == ABSENT// !foundAbsent// performUnionWith/** Schema Component Constraint: Attribute Wildcard Intersection */// For a wildcard's {namespace constraint} value to be the intensional intersection of// two other such values (call them O1 and O2): the appropriate case among the following// 2 If either O1 or O2 is any, then the other must be the value.// both cannot be ANY, if we have reached here.// -3 If either O1 or O2 is a pair of not and a namespace name and the other is a set of//    (namespace names or absent), then that set, minus the negated namespace name if//    it was in the set, must be the value.// +3 If either O1 or O2 is a pair of not and a namespace name and the other//    is a set of (namespace names or absent), then that set, minus the negated//    namespace name if it was in the set, then minus absent if it was in the//    set, must be the value.// * when we have not(list), the operation is just list-otherlist// 4 If both O1 and O2 are sets of (namespace names or absent), then the intersection of those//   sets must be the value.// -5 If the two are negations of different namespace names, then the intersection is not expressible.// +5 If the two are negations of namespace names or absent, then The//    appropriate case among the following must be true://    +5.1 If the two are negations of different namespace names, then the//         intersection is not expressible.//    +5.2 If one of the two is a pair of not and absent, the other must be//         the value.// * when we have not(list), the operation is just not(onelist+otherlist)// performIntersectionWith// ##any, true// ##other, only check the negated value// * when we support not(list), we need to check in the same way//   as for NSCONSTRAINT_LIST.// ## list, must have the same length,// and each item in one list must appear in the other one// (we are assuming that there are no duplicate items in a list)// areSame// simple implemention,/** get the string description of this wildcard *//** Namespace constraint: A constraint type: any, not, list. *//** Namespace constraint. For <code>constraintType</code> ... *//** {process contents} One of skip, lax or strict. Valid constants values ... *//** String valid of {process contents}. One of "skip", "lax" or "strict". */// class XSWildcardDecl/** Schema identity constraint field. ... *//** Field XPath. *//** Constructs a field. */// <init>(Field.XPath,IdentityConstraint)/** Returns the field XPath. */// getXPath():com.sun.org.apache.xerces.internal.impl.v1.schema.identity.XPath/** Returns the identity constraint. */// getIdentityConstraint():IdentityConstraint// factory method/** Creates a field matcher. */// createMatcher(ValueStore):XPathMatcher/** Field XPath. ... *//** Constructs a field XPath expression. */// NOTE: We have to prefix the field XPath with "./" in//       order to handle selectors such as "@attr" that//       select the attribute because the fields could be//       relative to the selector element. -Ac//       Unless xpath starts with a descendant node -Achille Fokoue//      ... or a / or a . - NG// verify that only one attribute is selected per branch// <init>(String,SymbolTable,NamespacesContext)/** Field matcher. ... *//** Field activator. *//** Value store for data values. *//** Constructs a field matcher. */// <init>(Field.XPath,ValueStore)// XPathHandler methods/** This method is called when the XPath handler matches the ... */// once we've stored the value for this field, we set the mayMatch// member to false so that, in the same scope, we don't match any more// values (and throw an error instead).// matched(String)// the content must be simpleType content// handleContent(XSElementDecl, String)// class Matcher// class Field/* Copyright 2001,2002,2004 The Apache Software Foundation. ... *//** Interface for a field activator. The field activator is responsible ... */// interface FieldActivator/** Base class of Schema identity constraint. ... *//** target namespace *//** Identity constraint name. *//** name of owning element *//** Selector. *//** Field count. *//** Fields. */// number of annotations in this identity constraint/** Returns the identity constraint name. */// getIdentityConstraintName():String/** Sets the selector. */// setSelector(Selector)/** Returns the selector. */// getSelector():Selector/** Adds a field. */// addField(Field)/** Returns the field count. */// getFieldCount():int/** Returns the field at the specified index. */// getFieldAt(int):Field// get the name of the owning element// getElementName(): String// equals:  returns true if and only if the String// representations of all members of both objects (except for// the elenemtName field) are equal./** {identity-constraint category} One of key, keyref or unique. *//** {selector} A restricted XPath ([XPath]) expression *//** {fields} A non-empty list of restricted XPath ([XPath]) expressions. *//** {referenced key} Required if {identity-constraint category} is keyref, ... */// class IdentityConstraint/** Schema key reference identity constraint. ... *//** The key (or unique) being referred to. *//** Constructs a keyref with the specified name. */// <init>(String,String,String)/** Returns the key being referred to. */// getKey(): int// class KeyRef/** Schema identity constraint selector. ... *//** XPath. */// the Identity constraint we're the matcher for.  Only// used for selectors!/** Constructs a selector. */// <init>(Selector.XPath,IdentityConstraint)/** Returns the selector XPath. */// getXPath():com.sun.org.apache.xerces.internal.v1.schema.identity.XPath// getIDConstraint():IdentityConstraint/** Creates a selector matcher. ... */// createMatcher(FieldActivator):XPathMatcher/** Schema identity constraint selector XPath expression. ... *//** Constructs a selector XPath expression. */// verify that an attribute is not selected// <init>(String,SymbolTable,NamespacesScope)// NOTE: We have to prefix the selector XPath with "./" in//       order to handle selectors such as "." that select//       the element container because the fields could be//       relative to that element. -Ac//      ... or a '.' or a '/' - NG//  And we also need to prefix exprs to the right of | with ./ - NG// class Selector.XPath/** Selector matcher. ... *//** Initial depth in the document at which this matcher was created. *//** Depth at match. *//** Constructs a selector matcher. */// <init>(Selector.XPath,FieldActivator)// XMLDocumentFragmentHandler methods// startDocumentFragment()/** The start of an element. If the document specifies the start element ... */// activate the fields, if selector is matched//int matched = isMatched();/* (fMatchedDepth == -1 && ((matched & MATCHED) == MATCHED)) || ... */// startElement(QName,XMLAttrList,int)/** get the initial depth at which this selector matched. */// getInitialDepth():  int// class Selector/** Schema unique or key identity constraint. ... *//** Constructs a unique or a key identity constraint. */// class Unique/* Copyright 2001, 2002,2004,2005 The Apache Software Foundation. ... *//** Interface for storing values associated to an identity constraint. ... *//** Since the valueStore will have access to an error reporter, this ... */// interface ValueStore/** XPath matcher. ... *//** Compile to true to debug everything. *//** Compile to true to debug method callbacks. *//** Compile to true to debug important method callbacks. *//** Compile to true to debug the <em>really</em> important methods. *//** Compile to true to debug match. *//** Compile to true to debug step index stack. *//** Don't touch this value unless you add more debug constants. */// constants describing whether a match was made,// and if so how.// matched any way// matched on the attribute axis// matched on the descendant-or-self axixs// matched some previous (ancestor) node on the descendant-or-self-axis, but not this node/** XPath location path. *//** True if XPath has been matched. *//** The matching string. *//** Integer stack of step indexes. *//** Current step. *//** No match depth. The value of this field will be zero while ... *//** Constructs an XPath matcher that implements a document fragment ... */// <init>(XPath)/** Returns value of first member of fMatched that ... */// xpath has been matched if any one of the members of the union have matched.// isMatched():int// a place-holder method; to be overridden by subclasses// that care about matching element content.// matched(String content, XSSimpleType val)// ~XMLDocumentFragmentHandler methods/** The start of the document fragment. */// reset state// push context// try next xpath, if not matching// consume self::node() steps// now if the current step is a descendant step, we let the next// step do its thing; if it fails, we reset ourselves// to look at this step for next time we're called.// so first consume all descendants:// match child::... step, if haven't consumed any self::node()// match attribute::... step// go back a step// don't do anything, if not matching// signal match, if appropriate// only certain kinds of matchers actually// match element content.  This permits// them a way to override this to do nothing// and hopefully save a few operations./** Normalizes text. */// normalize(String):String// NOTE: The main of this class is here for debugging purposes.//       However, javac (JDK 1.1.8) has an internal compiler//       error when compiling. Jikes has no problem, though.//       If you want to use this main, use Jikes to compile but//       *never* check in this code to CVS without commenting it//       out. -Ac/** Main program. */// class XPathMatcher/** This class constructs content models for a given grammar. ... */// REVISIT: should update the decl pool to cache XSCM objects too// It never changes, so a static member is good enough// needed for DFA construction// needed for UPA//Factory to create Bin, Uni, Leaf nodes/** Get content model for the a given type ... */// if the content is element only or mixed, but no particle// is defined, return the empty content model// if the content model contains "all" model group,// we create an "all" content model, otherwise a DFA content model//now we are throught building content model and have passed sucessfully of the nodecount check//if set by the application// if the validator returned is null, it means there is nothing in// the content model, so we return the empty content model.// get the model group, and add all children of it to the content model// create an all content model. the parameter indicates whether// the <all> itself is optional// add the element decl to the all content model// convert particle tree to CM tree// build DFA content model from the CM tree// 1. convert particle tree to CM tree:// 2. expand all occurrence values: a{n, unbounded} -> a, a, ..., a+//                                  a{n, m} -> a, a, ..., a?, a?, ...// 3. convert model groups (a, b, c, ...) or (a | b | c | ...) to//    binary tree: (((a,b),c),...) or (((a|b)|c)|...)// 4. make sure each leaf node (XSCMLeaf) has a distinct position// (task 1) element and wildcard particles should be converted to// leaf nodes// REVISIT: Make a clone of the leaf particle, so that if there// are two references to the same group, we have two different// leaf particles for the same element or wildcard decl.// This is useful for checking UPA.// (task 2) expand occurrence values// (task 1,3) convert model groups to binary trees// when the model group is a choice of more than one particles, but// only one of the particle is not empty, (for example// <choice>//   <sequence/>//   <element name="e"/>// </choice>// ) we can't not return that one particle ("e"). instead, we should// treat such particle as optional ("e?").// the following boolean variable is true when there are at least// 2 non-empty children.// first convert each child to a CM tree// then combine them using binary operation// record the fact that there are at least 2 children// when the group is "choice", there is only one non-empty// child, and the group had more than one children, we need// to create a zero-or-one (optional) node for the non-empty// particle.//zero or one//zero or more//one or more// Only for elements and wildcards, subsume e{n,m} and e{n,unbounded} to e*// or e+ and, once the DFA reaches a final state, check if the actual number// of elements is between minOccurs and maxOccurs. This new algorithm runs// in constant space.// TODO: What is the impact of this optimization on the PSVI?// => a,a,..,a+// create a+ node first, then put minOccurs-1 a's in front of it// for the first time "node" is used, we don't need to make a copy// and for other references to node, we make copies// (task 4) we need to call copyNode here, so that we append// an entire new copy of the node (a subtree). this is to ensure// all leaf nodes have distinct position// we know that minOccurs > 1// {n,m} => a,a,a,...(a),(a),...// first n a's, then m-n a?'s.// copyNode is called, for the same reason as above// for choice or sequence, copy the two subtrees, and combine them// for ?+*, copy the subtree, and put it in a new ?+* node// for element/wildcard (leaf), make a new leaf node,// with a distinct position// A special version of buildSyntaxTree() which builds a compact syntax tree// containing compound leaf nodes which carry occurence information. This method// for building the syntax tree is chosen over buildSyntaxTree() when// useRepeatingLeafNodes() returns true.// the following int variable keeps track of the number of non-empty children// when the group is "choice" and the group has one or more empty children,// we need to create a zero-or-one (optional) node for the non-empty particles.// Convert element and wildcard particles to leaf nodes. Wrap repeating particles in a CMUniOpNode.// zero or one// zero or more// one or more// {n,m}: Instead of expanding this out, create a compound leaf node which carries the// occurence information and wrap it in the appropriate CMUniOpNode.// This method checks if this particle can be transformed into a compact syntax// tree containing compound leaf nodes which carry occurence information. Currently// it returns true if each model group has minOccurs/maxOccurs == 1 or// contains only one element/wildcard particle with minOccurs/maxOccurs == 1./* Copyright (c) 2011, 2017, Oracle and/or its affiliates. All rights reserved. *///count of number of nodes created//No. of nodes allowed.// stores defaults for different security holes (maxOccurLimit in current context) if it has// been set on the configuration./** default constructor *///we are setting the limit of number of nodes to 3times the maxOccur value..//reset()// similarly to entity manager behaviour, take into accont// behaviour if continue-after-fatal-error is set.//nodeCountCheck()//reset the node count//CMNodeFactory()/** XSAllCM implements XSCMValidator and handles &lt;all&gt;. ... */// start the content model: did not see any children// XSCMValidator methods/** This methods to be called on entering a first element whose type ... */// convinient method: when error occurs, to find a matching decl// from the candidate elements./** The method corresponds to one transition in the content model. ... */// error state// seen child// we only try to look for a matching decl if we have not seen// this element yet.// found the decl, mark this element as "seen".// couldn't find the decl, change to error state./** The method indicates the end of list of children ... */// If <all> has minOccurs of zero and there are// no children to validate, it is trivially valid// if one element is required, but not present, then error/** check whether this content violates UPA constraint. ... */// check whether there is conflict between any two leaves/** Check which elements are valid to appear at this point. This method also ... */// class XSAllCM// XSCMBinOp/** This is the leaf: element decl or wildcard decl. *//** Identify the particle: for UPA checking */// class XSCMLeaf/** A compound content model leaf node which carries occurence information. ... */// XSCMUniOp/** Note: State of the content model is stored in the validator ... */// on subsequent errors the validator should not report// an error/** The method corresponds to one transaction in the content model. ... *//** Used by constant space algorithm for a{n,m} for n > 1 and ... */// XSCMValidator/* Copyright (c) 2006, 2017, Oracle and/or its affiliates. All rights reserved. *//** DFAContentModel is the implementation of XSCMValidator that does ... *//** id of the unique input symbol *//** Array containing occurence information for looping states ... *//** Array of counters for all the for elements (or wildcards) ... *//** Array of lower bounds for all the for elements (or wildcards) ... *//** Array of upper bounds for all the for elements (or wildcards) ... */// -1 if no upper bound//  Create some string pool indexes that represent the names of some//  magical nodes in the syntax tree.//  (already done in static initialization.../** check whether the given state is one of the final states ... *//** one transition only ... */// there was an error last time; so just go find correct Object in fElemmMap.// ... after resetting state[0].// Increment counter if constant space algorithm applies// if we still can't find a match, set the state to first_error// and return null// It's likely that we looped too many times on the current state// however it's possible that we actually matched another particle// which allows the same name.// Consider:// <xs:sequence>//  <xs:element name="foo" type="xs:string" minOccurs="3" maxOccurs="3"/>//  <xs:element name="foo" type="xs:string" fixed="bar"/>// </xs:sequence>//  <xs:any namespace="##any" processContents="skip"/>// In the DFA there will be two transitions from the current state which// allow "foo". Note that this is not a UPA violation. The ambiguity of which// transition to take is resolved by the current value of the counter. Since// we've already seen enough instances of the first "foo" perhaps there is// another element declaration or wildcard deeper in the element map which// matches.// not enough loops on the current state.// Exiting a counting state. If we're entering a new// counting state, reset the counter.// Entering a new counting state. Reset the counter.// If we've already seen one instance of the looping// particle set the counter to 1, otherwise set it// to 0.// oneTransition(QName, int[], SubstitutionGroupHandler):  Object// findMatchingDecl(QName, SubstitutionGroupHandler): Object// if we still can't find a match, set the state to FIRST_ERROR and return null// if we found a match, set the next state and reset the// counter if the next state is a counting state.// findMatchingDecl(QName, int[], SubstitutionGroupHandler, int): Object// This method returns the start states of the content model.// Clear all constant space algorithm counters in use// [0] : the current state// [1] : if [0] is an error state then the//       last valid state before the error// [2] : occurence counter for counting states// startContentModel():int[]// this method returns whether the last state was a valid final state// not enough loops on the current state to be considered final.// endContentModel(int[]):  boolean// Killed off whatCanGoHere; we may need it for DOM canInsert(...) etc.,// but we can put it back later.// optimization from Henry Zongaro://fElemMap[outIndex] = new Object ();// Init counters and bounds for a{n,m} algorithm// the last entry in the element map must be the EOC element.// remove it from the map.//  Next lets create some arrays, some that hold transient// Fill in the occurence information for each looping state// if we're using counters.// Unique Particle Attribution// store the conflict results between any two elements in fElemMap// 0: not compared; -1: no conflict; 1: conflict// initialize the conflict table (all 0 initially)// for each state, check whether it has overlap transitions// If "i" is a counting state and exactly one of the transitions// loops back to "i" then the two particles do not overlap if// minOccurs == maxOccurs.// report all errors//errors.newError("cos-nonambig", new Object[]{fElemMap[i].toString(),//                                             fElemMap[j].toString()});// if there is a other or list wildcard, we need to check this CM// again, if this grammar is cached.// Do not include transitions which loop back to the// current state if we've looped the maximum number// of times or greater.// Do not include transitions which advance past the// current state if we have not looped enough times./** XSEmptyCM is a derivative of the abstract content model base class that ... */// restore content model state:// class XSEmptyCM/** This class represents a single attribute. ... *//** Constructs an attribute. ... */// org.w3c.dom.Document methods// DOM Level 3 methods./** public void setInputEncoding(String actualEncoding){ ... *//** An attribute specifying, as part of the XML declaration, the encoding ... *//** An attribute specifying, as part of the XML declaration, whether this ... *//** An attribute specifying, as part of the XML declaration, the version ... *//** An attribute specifying whether errors checking is enforced or not. ... *//** The location of the document or <code>null</code> if undefined. ... *//** DOM Level 3 */// org.w3c.dom.Element methods// getter methods// setter methods// org.w3c.dom.Node methods/* @author Neil Graham, IBM *//** The <code>Text</code> interface inherits from <code>CharacterData</code> ... *//** The character data of the node that implements this interface. The DOM ... *//** The number of 16-bit units that are available through <code>data</code> ... *//** Extracts a range of data from the node. ... *//** Append the string to the end of the character data of the node. Upon ... *//** Insert a string at the specified 16-bit unit offset. ... *//** Remove a range of 16-bit units from the node. Upon success, ... *//** Replace the characters starting at the specified 16-bit unit offset ... */// Text node methods/** Breaks this node into two nodes at the specified <code>offset</code>, ... *//** DOM Level 3 CR *//** The start of a namespace prefix mapping. This method will only be ... *//** The end of a namespace prefix mapping. This method will only be ... *//* public void textDecl(String version, String encoding, ... *//* public void comment(XMLString text, Augmentations augmentations) ... *//* public void processingInstruction(String target, XMLString data, ... */// set the source of this handler// return the source from which this handler derives its events/** Returns the line number. *//** Returns the column number. *//** Returns the character offset. *//** Compares two namespace URIs with an extra case for null entries */// other methods// parent must be an element in this scheme// for annotation support:// now the current node added, becomes the parent// populate node// set the attributes// check if array needs to be resized// store the current parent//if (relations[currLoc][0] == null || relations[currLoc][0] != parent) {// add the current node as child of parent// the parent of current parent node becomes the parent// for the next node.// note that this will only be called within appinfo/documentation// escape characters if necessary// character sequence "]]>" cannot appear in content,// therefore we should escape '>'.// If CR is part of the document's content, it// must not be printed as a literal otherwise// it would be normalized to LF when the document// is reparsed.// apparently, there is no sensible way of resetting these things// note that this is always called after endElement on <annotation>'s// child and before endElement on annotation.// hence, we must make this the child of the current// parent's only child.// apparently, there is no sensible way of resetting// these things//capturing character calls/* for (int i=0; i<relations.length; i++) { ... *///traverse(getDocumentElement(), 0);// debug methods// org.w3c.dom methods// this returns a parent node, known to be an ElementImpl// commence the serialization of an annotation// attributes are a bit of a pain.  To get this right, we have to keep track// of the namespaces we've seen declared, then examine the namespace context// for other namespaces so that we can also include them.// optimized for simplicity and the case that not many// namespaces are declared on this annotation...// if it's xmlns:* or xmlns, must be a namespace decl// now we have to look through currently in-scope namespaces to see what// wasn't declared here// have to declare this one// normally, nothing will happen// Must escape 0x09, 0x0A and 0x0D if they appear in attribute// value so that they may be round-tripped. They would otherwise// be transformed to a 0x20 during attribute value normalization./** Feature identifier: generate synthetic annotations. */// the locator containing line/column information// namespace context, needed for producing// representations of annotations// Reference to the current annotation element.// where an annotation element itself begins// -1 means not in an annotation's scope// Where xs:appinfo or xs:documentation starts;// -1 means not in the scope of either of the two elements.// The current element depth// Use to report the error when characters are not allowed.// fields for generate-synthetic annotations feature// startDocument(XMLLocator,String,NamespaceContext, Augmentations)// To debug the DOM created uncomment the line below// schemaDOM.printDOM();// when it's not within xs:appinfo or xs:documentation// and there is a non-whitespace character// the string we saw: starting from the first non-whitespace character.// don't call super.characters() when it's not within one of the 2// annotation elements: the traversers ignore them anyway. We can// save time/memory creating the text nodes.// when it's within either of the 2 elements, characters are allowed// and we need to store them.// while it is true that non-whitespace character data// may only occur in appInfo or documentation// elements, it's certainly legal for comments and PI's to// occur as children of annotation; we need// to account for these here.// avoid falling through; don't call startElement in this case// the order of events that occurs here is://   schemaDOM.startAnnotation/startAnnotationElement (if applicable)//   schemaDOM.emptyElement  (basically the same as startElement then endElement)//   schemaDOM.endAnnotationElement (if applicable)// the order of events that would occur if this was <element></element>://   schemaDOM.startElement//   schemaDOM.endElementElement// Thus, we can see that the order of events isn't the same.  However, it doesn't// seem to matter.  -- PJM// this is messed up, but a case to consider:// when we reach the endElement of xs:appinfo or xs:documentation,// change fInnerAnnotationDepth to -1// inside a child of annotation// not in an annotation at all// unlikely to be called, but you never know...// only deal with CDATA boundaries within an annotation./** Returns the DOM document object. *//** Delegates to SchemaParsingConfig.setFeature ... *//** Delegates to SchemaParsingConfig.getFeature ... *//** Delegates to SchemaParsingConfig.setProperty. ... *//** Delegates to SchemaParsingConfig.getProperty. ... *//** Delegates to SchemaParsingConfig.setEntityResolver. ... *//** Delegates parsing to SchemaParsingConfig ... *//** Reset SchemaParsingConfig *//** ResetNodePool on SchemaParsingConfig *//** A simple boolean based stack. ... *//** Stack depth. *//** Stack data. *//** Pushes a value onto the stack. *//** Pops a value off of the stack. *//** Clears the stack. *//** Feature identifier: warn on duplicate attribute definition. *//** Feature identifier: warn on duplicate entity definition. *///  protected static final String WARN_ON_DUPLICATE_ENTITYDEF = Constants.XERCES_FEATURE_PREFIX + Constants.WARN_ON_DUPLICATE_ENTITYDEF_FEATURE;/** Feature identifier: warn on undeclared element definition. *//** Feature identifier: notify character refereces. *//** Property identifier: DTD validator. *//** Property identifier: namespace binder. *//** Property identifier: XML Schema validator. *//** Set to true and recompile to print exception stack trace. */// XML 1.0 components/** The XML 1.0 Datatype validator factory. *//** The XML 1.0 Document scanner. *//** The XML 1.0 DTD scanner. */// XML 1.1 components/** The XML 1.1 Datatype validator factory. *//** The XML 1.1 Document scanner. *//** The XML 1.1 DTD scanner. * */// common components (non-configurable)/** Current Datatype validator factory. *//** Current scanner *//** Current DTD scanner. *//** Grammar pool. *//** XML version detector. */// common components (configurable)/** Locator *//** True if a parse is in progress. This state is needed because ... *//** fConfigUpdated is set to true if there has been any change to the configuration settings, ... *//** Flag indiciating whether XML11 components have been initialized. *//** Constructs a parser configuration using the specified symbol table and ... */// <init>(SymbolTable,XMLGrammarPool)/** Constructs a parser configuration using the specified symbol table, ... *///setFeature(WARN_ON_DUPLICATE_ENTITYDEF, false);// make this feature special// getFeature(String):boolean// forward to every XML 1.0 component// forward to every XML 1.1 component// ignore the exception/** Returns the value of a property. ... */// XMLPullParserConfiguration methods// parsing/** Sets the input source for the document to parse. ... */// REVISIT: this method used to reset all the components and//          construct the pipeline. Now reset() is called//          in parse (boolean) just before we parse the document//          Should this method still throw exceptions..?/** Parses the document in a pull parsing fashion. ... */// reset and configure pipeline and set InputSource.// XML 1.0// XML 1.1// Unrecoverable error reported during version detection// mark configuration as fixed// resets and sets the pipeline.// parse(boolean):boolean/** If the application decides to terminate parsing before the xml document ... *//** Parses the specified input source. ... */// REVISIT - need to add new error message// close all streams opened by xerces// parse(InputSource)/** Reset all components before parsing. ... */// initialize the common components/** Configures the XML 1.0 pipeline. */// use XML 1.0 datatype library// setup document pipeline// setup dtd pipeline// configurePipeline()/** Configures the XML 1.1 pipeline. */// use XML 1.1 datatype library// configureXML11Pipeline()/** Check a feature. If feature is know and supported, this method simply ... */// Xerces Features// http://apache.org/xml/features/validation/dynamic//   Allows the parser to validate a document only when it//   contains a grammar. Validation is turned on/off based//   on each document instance, automatically.// http://apache.org/xml/features/validation/default-attribute-values// http://apache.org/xml/features/validation/nonvalidating/load-dtd-grammar// http://apache.org/xml/features/validation/nonvalidating/load-external-dtd// Not recognized// checkFeature(String)/** Check a property. If the property is know and supported, this method ... */// Xerces Properties/** Adds all of the component's recognized features and properties ... */// set default values// Do not overwrite values already set on the configuration.// For newly added components who recognize this feature// but did not offer a default value, we need to make// sure these components will get an opportunity to read// the value before parsing begins.// For newly added components who recognize this property/** Reset all XML 1.0 components before parsing */// Reset XML 1.0 components// resetXML10()/** Reset all XML 1.1 components before parsing */// Reset XML 1.1 components// resetXML11()// REVISIT: to implement: introduce a node pool to reuse DTM nodes.//          reset this pool here.// create datatype factory// setup XML 1.1 DTD pipeline// setup XML 1.1. document pipeline - namespace aware/** <p>SchemaContentHandler converts SAX events into XNI ... *//** Symbol table * *//** SchemaDOMParser, events will be delegated to SchemaDOMParser to pass *//** XML Locator wrapper for SAX. * *//** Indicate if push NamespaceContest is needed *//** Flag used to track whether namespace declarations are reported as attributes. *//** Flag used to track whether XML names and Namespace URIs have been internalized. *//** Fields for start element, end element and characters. *//** <p>Constructs an SchemaContentHandler.</p> *//* @see org.xml.sax.ContentHandler#setDocumentLocator(org.xml.sax.Locator) *//* @see org.xml.sax.ContentHandler#startDocument() *//* @see org.xml.sax.ContentHandler#endDocument() *//* @see org.xml.sax.ContentHandler#startPrefixMapping(java.lang.String, java.lang.String) *//* @see org.xml.sax.ContentHandler#endPrefixMapping(java.lang.String) *//* @see org.xml.sax.ContentHandler#startElement(java.lang.String, java.lang.String, java.lang.String, org.xml.sax.Attributes) */// Fill element QName and XMLAttributes// Add namespace declarations if necessary/* @see org.xml.sax.ContentHandler#endElement(java.lang.String, java.lang.String, java.lang.String) *//* @see org.xml.sax.ContentHandler#characters(char[], int, int) *//* @see org.xml.sax.ContentHandler#ignorableWhitespace(char[], int, int) *//* @see org.xml.sax.ContentHandler#processingInstruction(java.lang.String, java.lang.String) *//* @see org.xml.sax.ContentHandler#skippedEntity(java.lang.String) */// do-nothing/* Other methods */// local part may be an empty string if this is a namespace declaration/* Static methods */// must be a parser exception; mine it for locator info and throw// a SAXParseException// why did we create an XMLParseException?// SchemaContentHandler/** <p>StAXSchemaParser reads StAX events, converts them into XNI events ... *//** Chunk size (1024). *//** Array for holding character data. * *//* There shouldn't be a DTD in the schema *//* Not needed for schemas *//* No point in sending comments *//* We automatically call startDocument before the loop *//* We automatically call endDocument after the loop *//** Send characters to the validator in CHUNK_SIZE character chunks. */// processing instructions must be sent all in one chunk// toCharArray() creates a newly allocated array, so it's okay// to keep a reference to it./** Fills in the list of declared prefixes. *//** Fills in a QName object. */// StAXSchemaParser/** Objects of this class contain the textual representation of ... *//** Textual representation of annotation. * *//** Line number of &lt;annotation&gt; element. * *//** Column number of &lt;annotation&gt; element. * *//** Character offset of &lt;annotation&gt; element. * *//** Next annotation. * */// XSAnnotationInfo/** Class <code>XSAttributeCheck</code> is used to check the validity of attributes ... */// REVISIT: only local element and attribute are different from others.//          it's possible to have either name or ref. all the others//          are only allowed to have one of name or ref, or neither of them.//          we'd better move such checking to the traverser.//public static final int ATTIDX_OTHERVALUES     = ATTIDX_COUNT++;// constants to return// used to store the map from element name to attribute list// for 14 global elements// for 39 local elememnts// used to initialize fEleAttrsMap// step 1: all possible data types// DT_??? >= 0 : validate using a validator, which is initialized staticly// DT_??? <  0 : validate directly, which is done in "validate()"// used to store extra datatype validators// step 5: register all datatype validators for new types// anyURI// ID// QName// token// NCName// xpath = a subset of XPath expression// language// step 2: all possible attributes for all elements// step 3: store all these attributes in an array// step 4: for each element, make a list of possible attributes// for element "attribute" - global// default = string// fixed = string// id = ID// name = NCName// type = QName// for element "attribute" - local name// form = (qualified | unqualified)// use = (optional | prohibited | required) : optional// for element "attribute" - local ref// ref = QName// for element "element" - global// abstract = boolean : false// block = (#all | List of (extension | restriction | substitution))// final = (#all | List of (extension | restriction))// nillable = boolean : false// substitutionGroup = QName// for element "element" - local name// maxOccurs = (nonNegativeInteger | unbounded)  : 1// minOccurs = nonNegativeInteger : 1// for element "element" - local ref// for element "complexType" - global// block = (#all | List of (extension | restriction))// mixed = boolean : false// for element "notation" - global// public = A public identifier, per ISO 8879// system = anyURI// for element "complexType" - local// for element "simpleContent" - local// for element "restriction" - local// base = QName// for element "extension" - local// for element "attributeGroup" - local ref// for element "anyAttribute" - local// namespace = ((##any | ##other) | List of (anyURI | (##targetNamespace | ##local)) )  : ##any// processContents = (lax | skip | strict) : strict// for element "complexContent" - local// mixed = boolean// for element "attributeGroup" - global// for element "group" - global// for element "group" - local ref// for element "all" - local// maxOccurs = 1 : 1// minOccurs = (0 | 1) : 1// for element "choice" - local// for element "sequence" - local// for element "any" - local// for element "unique" - local// for element "key" - local// for element "keyref" - local// refer = QName// for element "selector" - local// for element "field" - local// for element "annotation" - global// for element "annotation" - local// for element "appinfo" - local// source = anyURI// for element "documentation" - local// xml:lang = language// for element "simpleType" - global// final = (#all | List of (list | union | restriction))// for element "simpleType" - local// already registered for complexType// for element "list" - local// itemType = QName// for element "union" - local// memberTypes = List of QName// for element "schema" - global// attributeFormDefault = (qualified | unqualified) : unqualified// blockDefault = (#all | List of (extension | restriction | substitution))  : ''// elementFormDefault = (qualified | unqualified) : unqualified// finalDefault = (#all | List of (extension | restriction | list | union))  : ''// targetNamespace = anyURI// version = token// for element "include" - global// schemaLocation = anyURI// for element "redefine" - global// for element "import" - global// namespace = anyURI// for element "length" - local// value = nonNegativeInteger// fixed = boolean : false// for element "minLength" - local// for element "maxLength" - local// for element "fractionDigits" - local// for element "totalDigits" - local// value = positiveInteger// for element "pattern" - local// value = string// for element "enumeration" - local// value = anySimpleType// for element "whiteSpace" - local// value = preserve | replace | collapse// for element "maxInclusive" - local// for element "maxExclusive" - local// for element "minInclusive" - local// for element "minExclusive" - local// used to resolver namespace prefixes// used to store symbols.// used to store the mapping from processed element to attributes// temprory vector, used to hold the namespace list// whether this attribute appeared in the current element// constructor. Sets fErrorReproter and get datatype validators/** Check whether the specified element conforms to the attributes restriction ... */// get all attributes// update NamespaceSupport// get desired attribute list of this element// should never gets here.// when this method is called, the call already knows that// the element can appear.// clear the "seen" flag.// traverse all attributes// get the attribute name/value//String attrName = DOMUtil.getLocalName(sattr);// we don't want to add namespace declarations to the non-schema attributes// Both <schema> and <documentation> may have an xml:lang attribute.// Set the URI for this attribute to null so that we process it// like any other schema attribute.// for attributes with namespace prefix// attributes with schema namespace are not allowed// and not allowed on "document" and "appInfo"// these are usually small// for attributes from other namespace// store them in a list, and TRY to validate them after// schema traversal (because it's "lax")//otherValues.put(attrName, attrVal);// REVISIT:  actually use this some day...// String attrRName = attrURI + "," + attrName;// Vector values = (Vector)fNonSchemaAttrs.get(attrRName);// if (values == null) {// values = new Vector();// values.addElement(attrName);// values.addElement(elName);// values.addElement(attrVal);// fNonSchemaAttrs.put(attrRName, values);// check whether this attribute is allowed// we've seen this attribute// check the value against the datatype// no checking on string needs to be done here.// no checking on xpath needs to be done here.// xpath values are validated in xpath parser// kludge to handle chameleon includes/redefines...//attrValues.put(attrName, oneAttr.dfltValue);// For "enumeration", and type is possible to be a QName, we need// to return namespace context for later QName resolution.// apply default values// if the attribute didn't apprear, and// if the attribute is optional with default value, apply it//attrValues.put(oneAttr.name, oneAttr.dfltValue);//attrValues[ATTIDX_OTHERVALUES] = otherValues;// Check that minOccurs isn't greater than maxOccurs.// p-props-correct 2.1// maxOccurLimit is only check in secure mode// The maxOccurs restriction no longer applies to elements// and wildcards in a sequence in which they are the only// particle. These are now validated using a constant// space algorithm. The restriction still applies to all// other cases.// Determine if constant-space algorithm can be applied//Revisit :: IMO this is not right place to check// maxOccurNodeLimit.// reset max values in case processing continues on error//new Integer(maxOccurNodeLimit);// To validate these types, we don't actually need to normalize the// strings. We only need to remove the whitespace from both ends.// In some special cases (list types), StringTokenizer can correctly// process the un-normalized whitespace.//choice = SchemaSymbols.EXTENSION|SchemaSymbols.RESTRICTION;// REVISIT: if #all, then make the result the combination of//          everything: substitution/externsion/restriction/list/union.//          would this be a problem?// the reason doing so is that when final/blockFinal on <schema>// is #all, it's not always the same as the conbination of those// values allowed by final/blockFinal.// for example, finalDefault="#all" is not always the same as// finalDefault="extension restriction".// if finalDefault="#all", final on any simple type would be// "extension restriction list union".//choice = SchemaSymbols.RESTRICTION|SchemaSymbols.LIST|//         SchemaSymbols.UNION;// same reason as above DT_BLOCK1/DT_FINAL// finalDefault = (#all | List of (extension | restriction | list | union))// maxOccurs = (nonNegativeInteger | unbounded)// maxOccurs = 1// minOccurs = (0 | 1)// namespace = ((##any | ##other) | List of (anyURI | (##targetNamespace | ##local)) )// ##any// ##other// tokenize// we have found namespace URI here// need to add it to the symbol table//check for duplicate namespaces in the list// convert the vector to an array// processContents = (lax | skip | strict)// use = (optional | prohibited | required)// validate attriubtes from non-schema namespaces// REVISIT: why we store the attributes in this way? why not just a list//          of structure {element node, attr name/qname, attr value)?// REVISIT: pass the proper element node to reportSchemaError// get name, uri, localpart// find associated grammar// and get the datatype validator, if there is one// get all values appeared with this attribute name// for each of the values// and validate it using the XSSimpleType// REVISIT: what would be the proper validation context?//          guess we need to save that in the vectors too.// the following part implements an attribute-value-array pool.// when checkAttribute is called, it calls getAvailableArray to get// an array from the pool; when the caller is done with the array,// it calls returnAttrArray to return that array to the pool.// initial size of the array pool. 10 is big enough// the incremental size of the array pool// the array pool// used to clear the returned array// I think System.arrayCopy is more efficient than setting 35 fields to null// current position of the array pool (# of arrays not returned)// get the next available array// if no array left in the pool, increase the pool size// increase size// initialize each *new* array// get the next available one// clear it from the pool. this is for GC: if a caller forget to// return the array, we want that array to be GCed.// to make sure that one array is not returned twice, we use// the last entry to indicate whether an array is already returned// now set it to false.// return an array back to the pool// pop the namespace context// if 1. the pool is full; 2. the array is null;// 3. the array is of wrong size; 4. the array is already returned// then we can't accept this array to be returned// mark this array as returned// better clear nonschema vector// and put it into the pool// push the namespace context// name of the attribute// index of the datatype validator// whether it's optional, and has default value// the default value of this attribute/** This class contains code that all three IdentityConstraint ... */// General Attribute Checking will have been done on icElem by caller// check for <annotation> and get selector// General Attribute Checking on sElem// first child could be an annotation// if no more children report an error// must be <selector>// make sure <selector>'s content is fine:// traverse annotation if any// put back attr values...// get fields// General Attribute Checking// and make sure <field>'s content is fine:// traverse annotation// traverseIdentityConstraint(IdentityConstraint,Element, XSDocumentInfo)// XSDAbstractIDConstraintTraverser/** Traverse the "All" declaration ... */// Only elements are allowed in <all>/** Traverse the Sequence declaration ... *//** Traverse the Choice declaration ... *//** Common traversal for <choice> and <sequence> ... */// A content type of all can only appear// as the content type of a complex type definition.// don't insert the "all" particle, otherwise we won't be// able to create DFA from this content model// Determines whether a content spec tree represents an "all" content model// If the content is not empty, is the top node ALL?// the inner class: used to store particles for model groups// to avoid creating a new Vector in each model group, or when traversing// each model group, we use this one big array to store all particles// for model groups. when the traversal finishes, this class returns an// XSParticleDecl[] containing all particles for the current model group.// it's possible that we need to traverse another model group while// traversing one (one inside another one; referring to a global group,// etc.), so we have push/pos context methods to save the same of the// current traversal before starting the traversal of another model group.// big array to contain all particles// the ending position of particles in the array for each context// index 0 is reserved, with value 0. index 1 is used for the fist// context. so that the number of particles for context 'i' can be// computed simply by fPos[i] - fPos[i-1].// number of contexts// start a new context (start traversing a new model group)// resize position array if necessary// the initial ending position of the current context is the// ending position of the previsous context. which means there is// no particle for the current context yet.// get the number of particles of this context (model group)// add a particle to the current context// resize the particle array if necessary// end the current context, and return an array of particles// clear the particle array, to release memory// the big particle array to hold all particles in model groups/** Class <code>XSDAbstractTraverser</code> serves as the base class for all ... */// Flags for checkOccurrences to indicate any special// restrictions on minOccurs and maxOccurs relating to "all".//    NOT_ALL_CONTEXT    - not processing an <all>//    PROCESSING_ALL_EL  - processing an <element> in an <all>//    GROUP_REF_WITH_ALL - processing <group> reference that contained <all>//    CHILD_OF_GROUP     - processing a child of a model group definition//    PROCESSING_ALL_GP  - processing an <all> group itself//Shared data// used to validate default/fixed attribute values// traverse the annotation declaration// REVISIT: how to pass the parentAttrs? as DOM attributes?//          as name/value pairs (string)? in parsed form?// @return XSAnnotationImpl object// the only valid children of "annotation" are// "appinfo" and "documentation"// There is no difference between global or local appinfo/documentation,// so we assume it's always global.// if contents was null, must have been some kind of error;// nothing to contribute to PSVI// find the grammar; fSchemaHandler must be known!// fish out local attributes passed from parent// optimize for case where there are no local attributes// Vector should contain rawname value pairs// skip the next value, too// search for pesky "s and <s within attr value:// and now splice it into place; immediately after the annotation token, for simplicity's sake// annotation must occur somewhere or we're in big trouble...// the QName simple type used to resolve qnames// Temp data structures to be re-used in traversing facets// facets that have fixed="true"// The facet can't be used if the value is missing. Ignore// this facet element.// for NOTATION types, need to check whether there is a notation// declared with the same name as the enumeration value.// need to use the namespace context returned from checkAttributes// try to get the notation decl. if failed, getGlobalDecl// reports an error, so we don't need to report one again.// Either the QName value is invalid, or it doens't// resolve to a notation declaration.// Ignore this facet, to avoid instance validation problems// restore to the normal namespace context// ---------------------------------------------//datatypes: 5.2.4 pattern: src-multiple-pattern// a non-facet// check for duplicate facets// Ignore this facet, to avoid corrupting the previous facet// Report an error if the "value" attribute is missing.// If it's not missing, then its value is invalid, and an// error should have already been reported by the// attribute checker.// check for fixed facet// return whether QName/NOTATION is part of the given type// Traverse a set of attribute and attribute group elements// Needed by complexType and attributeGroup traversal// This method will return the first non-attribute/attrgrp found//REVISIT: do we need to save some state at this point??// perform intersection of attribute wildcard// Success/** Element/Attribute traversers call this method to check whether ... */// Checks constraints for minOccurs, maxOccurs// Neither minOccurs nor maxOccurs may be specified// for the child of a model group definition.// If minOccurs=maxOccurs=0, no component is specified// For the elements referenced in an <all>, minOccurs attribute// must be zero or one, and maxOccurs attribute must be one.// For a complex type definition that contains an <all> or a// reference a <group> whose model group is an all model group,// minOccurs and maxOccurs must be one.// this is not terribly performant!/** The attribute group definition schema component traverser. ... */// General Attribute Checking for elmNode declared locally// get attribute// ref should be here.// get global decl// no children are allowed here except annotation, which is optional.// traverseLocal// General Attribute Checking for elmNode declared globally// global declaration must have a name// check the content// Traverse the attribute and attribute group elements and fill in the// attributeGroup structure// An invalid element was found...// if a global group doesn't have a name, then don't add it.// Remove prohibited attributes from the set// check for restricted redefine:// make an entry in global declarations.// also add it to extended map// handle duplicates// traverseGlobal// XSDAttributeGroupTraverser/** The attribute declaration schema component traverser. ... */// get 'attribute declaration'// for error reporting// get 'value constraint'// Get the annotation associated witht the local attr decl//src-attribute// 1 default and fixed must not both be present.// 2 If default and use are both present, use must have the actual value optional.// Recover by honouring the default value// a-props-correct// 2 if there is a {value constraint}, the canonical lexical representation of its value must be valid with respect to the {type definition} as defined in String Valid (3.14.4).// Recover by removing the default value// 3 If the {type definition} is or is derived from ID then there must not be a {value constraint}.// check 3.5.6 constraint// Attribute Use Correct// 2 If the {attribute declaration} has a fixed {value constraint}, then if the attribute use itself has a {value constraint}, it must also be fixed and its value must match that of the {attribute declaration}'s {value constraint}.// Recover by using the decl's {value constraint}/** Traverse a globally declared attribute. ... */// Step 1: get declaration information// get 'name'// get 'target namespace'// for local named attribute, value constraint is absent// get 'annotation'// get 'type definition'// Handle Anonymous type if there is one// Handle type attribute// Step 3: check against schema for schemas// required attributes// Step 4: check 3.2.3 constraints// src-attribute// This is checked in "traverse" method// 3 If the item's parent is not <schema>, then all of the following must be true:// 3.1 One of ref or name must be present, but not both.// This is checked in XSAttributeChecker// 3.2 If ref is present, then all of <simpleType>, form and type must be absent.// Attributes are checked in XSAttributeChecker, elements are checked in "traverse" method// 4 type and <simpleType> must not both be present.// Step 5: check 3.2.6 constraints// check for NOTATION type// no-xmlns// The {name} of an attribute declaration must not match xmlns.// no-xsi// The {target namespace} of an attribute declaration, whether local or top-level, must not match http://www.w3.org/2001/XMLSchema-instance (unless it is one of the four built-in declarations given in the next section).// Attribute without a name. Return null.// Step 2: register attribute decl to the grammar// throws an error if the constraint value is invalid for the given type/** A complex type definition schema component traverser. ... */// size of stack to hold globals:// globals for building XSComplexTypeDecls// our own little stack to retain state when getGlobalDecls is called:/** Traverse local complexType declarations ... */// need to add the type to the grammar for later constraint checking/** Traverse global complexType declarations ... *///discard valid Block/Final 'Default' values that are invalid for Block/Final// ---------------------------------------------------------------// First, handle any ANNOTATION declaration and get next child// Process the content of the complex type definition// EMPTY complexType with complexContent// set the base to the anyType// SIMPLE CONTENT// We must have ....// GROUP, ALL, SEQUENCE or CHOICE, followed by optional attributes// Note that it's possible that only attributes are specified.// -----------------------------------------------------------------------// Set content type// If there are no children, return// The content should be either "restriction" or "extension"// Need a base type.// If the base type is complex, it must have simpleContent// base is a CT with simple content (both restriction and extension are OK)// base is a CT with mixed/emptiable content (only restriction is OK)// base is a ST (only extension is OK)// Check that the base permits the derivation// Skip over any potential annotations// Process a RESTRICTION// There may be a simple type definition in the restriction element// The data type validator will be based on it, if specified//check that this datatype validator is validly derived from the base//according to derivation-ok-restriction 5.1.2.1// this only happens when restricting a mixed/emptiable CT// but there is no <simpleType>, which is required// Traverse any facets// Recreate the type, ignoring the facets// Traverse any attributes// Prohibited uses must be removed after merge for RESTRICTION// Process a EXTENSION// Remove prohibited uses.   Should be done prior to any merge.// and finally, since we've nothing more to traverse, we can// return the attributes (and thereby reset the namespace support)// Determine if this is mixed content// Since the type must have complex content, set the simple type validators// to null// Need a base type.  Check that it's a complex type// Process the content.  Note:  should I try to catch any complexType errors// here in order to return the attr array?// Compose the final content and attribute uses// This is an RESTRICTION// N.B. derivation-ok-restriction.5.3 is checked under schema// full checking.   That's because we need to wait until locals are// traversed so that occurrence information is correct.// Remove prohibited uses.   Must be done after merge for RESTRICTION.// This is an EXTENSION// Create the particle// Check if the contentType of the base is consistent with the new type// cos-ct-extends.1.4.3.2// if the content of either type is an "all" model group, error.// the "sequence" model group to contain both particles// the particle to contain the above sequence// Remove prohibited uses.   Must be done before merge for EXTENSION.// and *finally* we can legitimately return the attributes!// end of traverseComplexContent// This method merges attribute uses from the base, into the derived set.// LM: may want to merge with attributeGroup processing.// Recover by using the attribute use from the base type,// to make the resulting schema "more valid".// For extension, the wildcard must be formed by doing a union of the wildcards// REVISIT: XML Schema 1.0 2nd edition doesn't actually specify this constraint. It's a bug in the spec// which will eventually be fixed. We're just guessing what the error code will be. If it turns out to be// something else we'll need to change it. -- mrglavas// whether there is a particle with empty model group// GROUP, ALL, SEQUENCE or CHOICE, followed by attributes, if specified.// Should be attributes here - will check below...// if the particle is empty because there is no non-annotation chidren,// we need to make the particle itself null (so that the effective// content is empty).// get the first child// if it's annotation, get the next one// if there is no (non-annotation) children, mark particle empty// child != null means we might have seen an element with// minOccurs == maxOccurs == 0// Set the content type// Now, process attributes// Only remove prohibited attribute uses if this isn't a derived type// Derivation-specific code worries about this elsewhere// end processComplexContent/* Generate a name for an anonymous type */// Generate a unique name for the anonymous type by concatenating together the// names of parent nodes// The name is quite good for debugging/error purposes, but we may want to// revisit how this is done for performance reasons (LM).//  Mock up the typeInfo structure so that there won't be problems during//  validation// REVISIT: do we need to remove all attribute uses already added into// the attribute group? maybe it's ok to leave them there. -SG// let's save ourselves a couple of objects...// it isn't very likely that there will be more than one annotation// in a complexType decl.  This saves us fromhaving to push/pop// one more object from the fGlobalStore, and that's bound// to be a savings for most applications/** The element declaration schema component traverser. ... */// this controls what happens when a local element is encountered.// We may not encounter all local elements when first parsing./** Traverse a locally declared element (or an element reference). ... */// The only thing we care about now is whether this element has// minOccurs=0. This affects (if the element appears in a complex// type) whether a type has emptiable content.// If it's an empty particle, return null.// Element Declaration Representation OK// 2 If the item's parent is not <schema>, then all of the following must be true:// 2.1 One of ref or name must be present, but not both.// 2.2 If ref is present, then all of <complexType>, <simpleType>, <key>, <keyref>, <unique>, nillable, default, fixed, form, block and type must be absent, i.e. only minOccurs, maxOccurs, id are allowed in addition to ref, along with <annotation>./** Traverse a globally declared element. ... */// General Attribute Checking'// get 'block', 'final', 'nillable', 'abstract'// use defaults// discard valid Block 'Default' values that are invalid for Block// respect #all// use specified values// check for valid values// discard valid Final 'Default' values that are invalid for Final// get 'substitutionGroup affiliation'// Handler type attribute// Get it from the substitutionGroup declaration// get 'identity constraint'// see if there's something here; it had better be key, keyref or unique.// need to set <key>/<unique> to hidden before traversing it,// because it has global scope// Step 4: check 3.3.3 constraints// src-element// 3 type and either <simpleType> or <complexType> are mutually exclusive.// Step 5: check 3.3.6 constraints// 2 If there is a {value constraint}, the canonical lexical representation of its value must be valid with respect to the {type definition} as defined in Element Default Valid (Immediate) (3.3.6).// 4 If there is an {substitution group affiliation}, the {type definition} of the element declaration must be validly derived from the {type definition} of the {substitution group affiliation}, given the value of the {substitution group exclusions} of the {substitution group affiliation}, as defined in Type Derivation OK (Complex) (3.4.6) (if the {type definition} is complex) or as defined in Type Derivation OK (Simple) (3.14.6) (if the {type definition} is simple).// 5 If the {type definition} or {type definition}'s {content type} is or is derived from ID then there must not be a {value constraint}.// Element without a name. Return null.// Step 5: register the element decl to the grammar// we also add the element to the tolerate duplicates list as well// if we are tolerating duplicates, and we found a duplicate declaration// use the duplicate one instead/** The model group schema component traverser. ... */// index is a particle index.// no children other than "annotation?" are allowed// not empty group, not empty particle// create a particle to contain this model group// must have a name// Create the group defi up-front, so it can be passed// to the traversal methods// must have at least one child// add global group declaration to the grammar// Add group declaration to grammar// name attribute is not there, don't return this group.// store groups redefined by restriction in the grammar so// that we can get at them at full-schema-checking time.// store in grammar/** The purpose of this class is to co-ordinate the construction of a ... *//** feature identifier: XML Schema validation *//** Feature identifier:  allow java encodings *//** Feature identifier:  continue after fatal error *//** Feature identifier: namespace prefixes. *//** Feature identifier: string interning. *//** Property identifier: security manager. */// different sorts of declarations; should make lookup and// traverser calling more efficient/less bulky.// this string gets appended to redefined names; it's purpose is to be// as unlikely as possible to cause collisions.//protected data that can be accessible by any traverser// the Security manager in effect.// These tables correspond to the symbol spaces defined in the// spec.// They are keyed with a QName (that is, String("URI,localpart) and// their values are nodes corresponding to the given name's decl.// By asking the node for its ownerDocument and looking in// XSDocumentInfoRegistry we can easily get the corresponding// XSDocumentInfo object.// Compensation for the above maps to locate XSDocumentInfo,// Since we may take Schema Element directly, so can not get the// corresponding XSDocumentInfo object just using above maps.// Stores XSDocumentInfo (keyed by component name), to check for duplicate// components declared within the same xsd document// ATTRIBUTE_TYPE// ATTRIBUTEGROUP_TYPE// ELEMENT_TYPE// GROUP_TYPE// IDENTITYCONSTRAINT_TYPE// NOTATION_TYPE// TYPEDECL_TYPE// this map is keyed on by XSDocumentInfo objects.  Its values// are Vectors containing the XSDocumentInfo objects <include>d,// <import>ed or <redefine>d by the key XSDocumentInfo.// this map is keyed on by a target namespace.  Its values// are Vectors containing namespaces imported by schema documents// with the key target namespace.// if an imported schema has absent namespace, the value "null" is stored.// all namespaces that imports other namespaces// if the importing schema has absent namespace, empty string is stored.// (because the key of a map can't be null.)// stores instance document mappings between namespaces and schema hints// Records which nodes are hidden when the input is a DOMInputSource.// convenience methods// use Schema Element to lookup the SystemId./** REVISIT: Casting until DOM Level 3 interfaces are available. -- mrglavas */// This vector stores strings which are combinations of the// publicId and systemId of the inputSource corresponding to a// schema document.  This combination is used so that the user's// EntityResolver can provide a consistent way of identifying a// schema document that is included in multiple other schemas.// this map contains a mapping from Schema Element to its systemId// this is useful to resolve a uri relative to the referring document// the primary XSDocumentInfo we were called to parse// This map's job is to act as a link between the Schema Element and its// map between <redefine> elements and the XSDocumentInfo// objects that correspond to the documents being redefined.// map between <redefine> elements and the namespace support// these objects store a mapping between the names of redefining// groups/attributeGroups and the groups/AttributeGroups which// they redefine by restriction (implicitly).  It is up to the// Group and AttributeGroup traversers to check these restrictions for// validity.// a variable storing whether the last schema document// processed (by getSchema) was a duplicate.// validate annotations feature//handle multiple import feature//handle namespace growth feature// handle tolerate duplicates feature// the XMLErrorReporter// the XMLErrorHandler// the Locale// the XMLEntityManager// the XSAttributeChecker// the symbol table// the GrammarResolver// the Grammar description// the Grammar Pool// the security property manager//************ Traversers **********// these data members are needed for the deferred traversal// of local elements.// the initial size of the array to store deferred local elements// the incremental size of the array to store deferred local elements// current position of the array (# of deferred local elements)//JACK// of keyrefs.// the initial size of the array to store deferred keyrefs// the incremental size of the array to store deferred keyrefs// current position of the array (# of deferred keyrefs)// it should be possible to use the same XSDHandler to parse// multiple schema documents; this will allow one to be// constructed.// Note: don't use SchemaConfiguration internally//       we will get stack overflaw because//       XMLSchemaValidator will be instantiating XSDHandler.../** This method initiates the parse of a schema.  It will likely be ... */// if loading using JAXP schemaSource property, or using grammar caching loadGrammar// the desc.targetNamespace is always null.// Therefore we should not attempt to find out if// the schema is already in the bucket, since in the case we have// no namespace schema in the bucket, findGrammar will always return the// no namespace schema.// first try to find it in the bucket/pool, return if one is found//REVISIT: return the grammar?// handle empty string URI as null// before parsing a schema, need to clear registries associated with// parsing schemas// first phase:  construct trees.// DOMInputSource// SAXInputSource// StAXInputSource// XSInputSource//is instanceof XMLInputSource// something went wrong right off the hop// Since now we've discovered a namespace, we need to update xsd key// and store this schema in traversed schemas bucket// When namespace growth is enabled and a null location is provided we cannot tell// whether we've loaded this schema document before so we must assume that we haven't.// before constructing trees and traversing a schema, need to reset// all traversers and clear all registries// second phase:  fill global registries.// third phase:  call traversers// fourth phase: handle local element decls// fifth phase:  handle Keyrefs// sixth phase:  validate attribute of non-schema namespaces// REVISIT: skip this for now. we really don't want to do it.//fAttributeChecker.checkNonSchemaAttributes(fGrammarBucket);// seventh phase:  store imported grammars// for all grammars with <import>s// get its target namespace// get all namespaces it imports// for imported namespace// get imported grammar// reuse the same vector// set the imported grammars/** validate annotations * */// and return.// end parseSchema/** set security manager and XML Security Property Manager * *//** Set error handler. * *//** Set locale. * *//** Pull the grammar out of the bucket simply using ... *//** First try to find a grammar in the bucket, if failed, consult the ... */// may wish to have setter methods for ErrorHandler,// EntityResolver...// This method does several things:// It constructs an instance of an XSDocumentInfo object using the// schemaRoot node.  Then, for each <include>,// <redefine>, and <import> children, it attempts to resolve the// requested schema document, initiates a DOM parse, and calls// itself recursively on that document's root.  It also records in// the DependencyMap object what XSDocumentInfo objects its XSDocumentInfo// depends on.// It also makes sure the targetNamespace of the schema it was// called to parse is correct.// note that attributes are freed at end of traverseSchemas()// targetNamespace="" is not valid, issue a warning, and ignore it// the second index to the NS_ERROR_CODES array// if the caller/expected NS is not absent, we use the first column// for include and redefine// if the referred document has no targetNamespace,// it's a chameleon schema// if the referred document has a target namespace differing// from the caller, it's an error// for instance and import, the two NS's must be the same// now there is no caller/expected NS, it's an error for the referred// document to have a target namespace, unless we are preparsing a schema// set the target namespace of the description// if the caller/expected NS is absent, we use the second column// the other cases (callerTNS == currSchemaInfo.fTargetNamespce == null)// are valid// a schema document can always access it's own target namespace// we have a namespace collision// update all the grammars in the bucket to point to the new grammar.// update import list of the new grammar// store the document and its location// REVISIT: don't expose the DOM tree// have to handle some validation here too!// call XSAttributeChecker to fill in attrs// check contents and process optional annotations// promoting annotations to parent component// a document can't import another document with the same namespace// if this namespace has not been imported by this document,//  then import if multiple imports support is enabled.// also record the fact that one namespace imports another one// convert null to ""// get all namespaces imported by this one// if no namespace was imported, create new Vector// record that this one imports other(s)// if a grammar with the same namespace and location exists (or being// built), ignore this one (don't traverse it).//if ((!fHonourAllSchemaLocations && findGrammar(fSchemaGrammarDescription) != null) || isExistingGrammar(fSchemaGrammarDescription))//    continue;// If "findGrammar" returns a grammar, then this is not the// the first time we see a location for a given namespace.// Don't consult the location pair map in this case,// otherwise the location will be ignored because it'll get// resolved to the same location as the first hint.// validation for redefine/include will be the same here; just// make sure TNS is right (don't care about redef contents// yet).// store the namespace decls of the redefine element// check annotations.  Must do this here to avoid having to// re-parse attributes later// catch all other content errors later// schemaLocation is required on <include> and <redefine>// pass the systemId of the current document as the base systemId// no more possibility of schema references in well-formed// schema...// If the schema is duplicate, we needn't call constructTrees() again.// To handle mutual <include>s// must record which schema we're redefining so that we can// rename the right things later!// end constructTrees/** Namespace growth ... */// This method builds registries for all globally-referenceable// names.  A registry will be built for each symbol space defined// by the spec.  It is also this method's job to rename redefined// components, and to record which components redefine others (so// that implicit redefinitions of groups and attributeGroups can be handled).// Starting with fRoot, we examine each child of the schema// element.  Skipping all imports and includes, we record the names// of all other global components (and children of <redefine>).  We// also put <redefine> names in a registry that we look through in// case something needs renaming.  Once we're done with a schema we// set its Document node to hidden so that we don't try to traverse// it again; then we look to its Dependency map entry.  We keep a// stack of schemas that we haven't yet finished processing; this// is a depth-first traversal.// must have processed this already!// process this schema's global decls// this loop makes sure the <schema> element ordering is// also valid.//skip it; traverse it later// an error we'll catch later// the check will have changed our name;// and all we need to do is error-check+rename our kkids:// must be simpleType// and all we need to do is error-check+rename our kids:// end march through <redefine> children// and now set as traversed//DOMUtil.setHidden(globalComp);// end for// now we're done with this one!// now add the schemas this guy depends on// end buildGlobalNameRegistries// Beginning at the first schema processing was requested for// (fRoot), this method// examines each child (global schema information item) of each// schema document (and of each <redefine> element)// corresponding to an XSDocumentInfo object.  If the// readOnly field on that node has not been set, it calls an// appropriate traverser to traverse it.  Once all global decls in// an XSDocumentInfo object have been traversed, it marks that object// as traversed (or hidden) in order to avoid infinite loops.  It completes// when it has visited all XSDocumentInfo objects in the// DependencyMap and marked them as traversed.// the process here is very similar to that in// buildGlobalRegistries, except we can't set our schemas as// hidden for a second time; so make them all visible again// first!// traverse this schema's global decls// includes and imports will not show up here!// use the namespace decls for the redefine, instead of for the parent <schema>// annotations will have been processed already; this is now// unnecessary//else if (redefinedComponentType.equals(SchemaSymbols.ELT_ANNOTATION)) {//    fElementTraverser.traverseAnnotationDecl(redefinedComp, null, true, currSchemaDoc);/** Collect annotation information for validation. * *//** Only add annotations to the list if there were any in this document. * */// end traverseSchemas// store whether we have reported an error about that no grammar// is found for the given namespace uri// check whether we need to report an error against the given uri.// if we have reported an error, then we don't need to report again;// otherwise we reported the error, and remember this fact.// index 0//or ct-props-correct.3// add a global attribute decl from a current schema load (only if no existing decl is found)// add a global attribute group decl from a current schema load (only if no existing decl is found)// add a global element decl from a current schema load (only if no existing decl is found)// add a global group decl from a current schema load (only if no existing decl is found)// add a global notation decl from a current schema load (only if no existing decl is found)// add a global type decl from a current schema load (only if no existing decl is found)// add a identity constraint decl from a current schema load (only if no existing decl is found)// since it is forbidden for traversers to talk to each other// directly (except wen a traverser encounters a local declaration),// this provides a generic means for a traverser to call// for the traversal of some declaration.  An XSDocumentInfo is// required because the XSDocumentInfo that the traverser is traversing// may bear no relation to the one the handler is operating on.// This method will:// 1.  See if a global definition matching declToTraverse exists;// 2. if so, determine if there is a path from currSchema to the// schema document where declToTraverse lives (i.e., do a lookup// in DependencyMap);// 3. depending on declType (which will be relevant to step 1 as// well), call the appropriate traverser with the appropriate// This method returns whatever the traverser it called returned;// this will be an Object of some kind// that lives in the Grammar.// from the schema spec, all built-in types are present in all schemas,// so if the requested component is a type, and could be found in the// default schema grammar, we should return that type.// otherwise (since we would support user-defined schema grammar) we'll// use the normal way to get the decl// now check whether this document can access the requsted namespace// cannot get to this schema from the one containing the requesting decl// Recover and continue to look for the component.// return null;// check whether there is grammar for the requested namespace// if there is such grammar, check whether the requested component is in the grammar// if the component is parsed, return it// the component is not parsed, try to find a DOM element for it// no DOM element found, so the component can't be located// get the schema doc containing the component to be parsed// it should always return non-null value, but since null-checking// comes for free, let's be safe and check again// a component is hidden, meaning either it's traversed, or being traversed.// but we didn't find it in the grammar, so it's the latter case, and// a circular reference. error!// decl must not be null if we're here...// getGlobalDecl(XSDocumentInfo, int, QName):  Object// If we are tolerating duplicate declarations and allowing namespace growth// use the declaration from the current schema load (if it exists)// if the parent is <redefine> use the namespace delcs for it.// back up the current SchemaNamespaceSupport, because we need to provide// a fresh one to the traverseGlobal methods.// traverse the referenced global component// identity constraints should have been parsed already...// we should never get here// restore the previous SchemaNamespaceSupport, so that the caller can get// proper namespace binding.// This method determines whether there is a group// (attributeGroup) which the given one has redefined by// restriction.  If so, it returns it; else it returns null.// @param type:  whether what's been redefined is an// attributeGroup or a group;// @param name:  the QName of the component doing the redefining.// @param currSchema:  schema doc in which the redefining component lives.// @return:  Object representing decl redefined if present, null// otherwise.// getGrpOrAttrGrpRedefinedByRestriction(int, QName, XSDocumentInfo):  Object// Since ID constraints can occur in local elements, unless we// wish to completely traverse all our DOM trees looking for ID// constraints while we're building our global name registries,// which seems terribly inefficient, we need to resolve keyrefs// after all parsing is complete.  This we can simply do by running through// fIdentityConstraintRegistry and calling traverseKeyRef on all// of the KeyRef nodes.  This unfortunately removes this knowledge// from the elementTraverser class (which must ignore keyrefs),// but there seems to be no efficient way around this...// need to set <keyref> to hidden before traversing it,// end resolveKeyRefs// an accessor method.  Just makes sure callers// who want the Identity constraint registry vaguely know what they're about.// an accessor method.// This method squirrels away <keyref> declarations--along with the element// decls and namespace bindings they might find handy.// now set up all the registries we'll need...// check array sizes// storeKeyref (Element, XSDocumentInfo, XSElementDecl): void/** resolveSchema method is responsible for resolving location of the schema (using XMLEntityResolver), ... */// getSchema(String, String, String, boolean, short):  Document/** getSchemaDocument method uses XMLInputSource to parse a schema document. ... */// contents of this method will depend on the system we adopt for entity resolution--i.e., XMLEntityHandler, EntityHandler, etc.// when the system id and byte stream and character stream// of the input source are all null, it's// impossible to find the schema document. so we skip in// this case. otherwise we'll receive some NPE or// file not found errors. but schemaHint=="" is perfectly// legal for import.// When the system id of the input source is used, first try to// expand it, and check whether the same document has been// parsed before. If so, return the document corresponding to// that system id.// getSchemaDocument(String, XMLInputSource, boolean, short, Element): Element/** getSchemaDocument method uses SAXInputSource to parse a schema document. ... */// check whether the same document has been parsed before.// If so, return the document corresponding to that system id.// If this is a Xerces SAX parser set the security manager if there is one// If XML names and Namespace URIs are already internalized we// can avoid running them through the SymbolTable.// The feature isn't recognized or getting it is not supported.// In either case, assume that strings are not internalized.// Disconnect the schema loader and other objects from the XMLReader// Ignore any exceptions thrown by the XMLReader. Old versions of SAX// required an XMLReader to throw a NullPointerException if an attempt// to set a handler to null was made.// getSchemaDocument(String, SAXInputSource, boolean, short, Element): Element/** getSchemaDocument method uses DOMInputSource to parse a schema document. ... */// getSchemaDocument(String, DOMInputSource, boolean, short, Element): Element/** getSchemaDocument method uses StAXInputSource to parse a schema document. ... */// getSchemaDocument(String, StAXInputSource, boolean, short, Element): Element/** Code shared between the various getSchemaDocument() methods which ... */// now we need to store the mapping information from system id// to the document. also from the document to the system id.// getSchemaDocument0(XSDKey, String, Element): Element/** Error handling code shared between the various getSchemaDocument() methods. */// either an error occured (exception), or empty input source was// returned, we need to report an error or a warning// getSchemaDocument1(boolean, boolean, XMLInputSource, Element): Element// check for existing grammars in our bucket// and if there exist any, and namespace growth is// not enabled - we do nothing// getSchemaDocument(String, XSInputSource, boolean, short, Element): Element// add any new locations// add any new imported grammars// add any new global components// add global components// TODO: if not tolerating duplicate, generate an error message// add any extended (duplicate) global components// REVISIT - do we report an error?// REVIST - do we report an error?//expandRelatedAttributeUseComponents((XSAttributeUse)component, componentList, dependencies);/* final XSComplexTypeDefinition enclosingType = decl.getEnclosingCTDefinition(); ... *//* final XSTypeDefinition enclosingType = decl.getEnclosingCTDefinition(); ... *///REVISIT - do we use == instead// store the declaration in the extended map, using an empty location// shouldn't be null//REVIST: report an error message// NOTE: always assuming that fNamespaceGrowth is enabled//       otherwise the grammar should have existed// initialize all the traversers.// this should only need to be called once during the construction// of this object; it creates the traversers that will be used to// construct schemaGrammars.// createTraversers()// before traversing a schema's parse tree, need to reset all traversers and// clear all registries// clear local element stack// and do same for keyrefs.// create traversers if necessary// reset traversers// set symbol table// set security manager//set entity manager//set entity resolver// set error reporter// Setting a parser property can be much more expensive// than checking its value.  Don't set the ERROR_HANDLER// or LOCALE properties unless they've actually changed.// security features//Passing on the setting to the parser/** Traverse all the deferred local elements. This method should be called ... *///XSDocumentInfo currSchema = (XSDocumentInfo)fDoc2XSDocumentMap.get(DOMUtil.getDocument(currElem));//XSDocumentInfo currSchema = (XSDocumentInfo)fDoc2XSDocumentMap.get(DOMUtil.getRoot(DOMUtil.getDocument(currElem)));// If it's an empty particle, remove it from the containing component.// the purpose of this method is to keep up-to-date structures// we'll need for the feferred traversal of local elements.// if the stack is full, increase the size// end fillInLocalElemInfo(...)/** This method makes sure that ... */// REVISIT:  when we add derivation checking, we'll have to make// sure that ID constraint collisions don't necessarily result in error messages.// need to check whether we have a global declaration in the corresponding// grammar// just add it in!// case where we've collided with a redefining element// (the parent of the colliding element is a redefine)// case where we're a redefining element.//redefinition involved somehow// If both components belong to the same document then// report an error and return.// object comp. okay here// now have to do some renaming...// and take care of nested redefines by calling recursively:// we may be redefining the wrong schema// error that redefined element in wrong schema// we've just got a flat-out collision (we tolerate duplicate// declarations, only if they are defined in different schema// documents)// store the lastest current document info// checkForDuplicateNames(String, Map, Element, XSDocumentInfo):void// the purpose of this method is to take the component of the// specified type and rename references to itself so that they// refer to the object being redefined.  It takes special care of// <group>s and <attributeGroup>s to ensure that information// relating to implicit restrictions is preserved for those// traversers.// now we have to do the renaming...//                            return true;// have to go one more level down; let another pass worry whether complexType is valid.//                                    return true;//                return true;// if we get here then we must have reported an error and failed somewhere...//        return false;// renameRedefiningComponents(XSDocumentInfo, Element, String, String, String):void// this method takes a name of the form a:b, determines the URI mapped// to by a in the current SchemaNamespaceSupport object, and returns this// information in the form (nsURI,b) suitable for lookups in the global// decl maps.// REVISIT: should have it return QName, instead of String. this would//          save lots of string concatenation time. we can use//          QName#equals() to compare two QNames, and use QName directly//          as a key to the SymbolHash.//          And when the DV's are ready to return compiled values from//          validate() method, we should just call QNameDV.validate()//          in this method.// findQName(String, XSDocumentInfo):  String// This function looks among the children of curr for an element of type elementSought.// If it finds one, it evaluates whether its ref attribute contains a reference// to originalQName.  If it does, it returns 1 + the value returned by// calls to itself on all other children.  In all other cases it returns 0 plus// the sum of the values returned by calls to itself on curr's children.// It also resets the value of ref so that it will refer to the renamed type from the schema// being redefined.// if ref was null some other stage of processing will flag the error// changeRedefineGroup// this method returns the XSDocumentInfo object that contains the// component corresponding to decl.  If components from this// document cannot be referred to from those of currSchema, this// method returns null; it's up to the caller to throw an error.// @param:  currSchema:  the XSDocumentInfo object containing the// decl ref'ing us.// @param:  decl:  the declaration being ref'd.// this method is superficial now. ---Jack// something went badly wrong; we don't know this doc?/** ******* ... */// findXSDocumentForDecl(XSDocumentInfo, Element):  XSDocumentInfo// returns whether more than <annotation>s occur in children of elem// nonAnnotationContent(Element):  boolean// make it visible// if it's visible already than so must be its children// setSchemasVisible(XSDocumentInfo): void/** Extract location information from an Element node, and create a ... *//** Extract location information from an Element node, store such ... */// get system id from document object// line/column numbers are stored in the element node/** Grammar pool used for validating annotations. This will return all of the ... *//** If the grammar bucket already contains the schema for schemas ... *//** used to identify a reference to a schema document ... */// for inclue/redefine, this is the enclosing namespace// for import/preparse/instance, this is the target namespace// according to the description at the beginning of this class,// we use the hashcode of the namespace as the hashcoe of this key.// condition 1: both are redefine/** if (referType == XSDDescription.CONTEXT_REDEFINE || ... */// condition 2: same namespace// condition 3: same non-null location// XSDHandler/** This class contains code that is used to traverse <keyref>s. ... */// create identity constraint//return this array back to pool// if ret == null, we've already reported an error in getGlobalDecl// we report an error only when ret != null, and the return type keyref// If errors occurred in traversing the identity constraint, then don't// add it to the schema, to avoid errors when processing the instance.//Schema Component Constraint: Identity-constraint Definition Properties Correct//2 If the {identity-constraint category} is keyref, the cardinality of the {fields} must equal that of the {fields} of the {referenced key}.// add key reference to element decl// and stuff this in the grammar// and put back attributes// traverse(Element,int,XSDocumentInfo, SchemaGrammar)// XSDKeyrefTraverser/** The notation declaration schema component traverser. ... */// General Attribute Checking for elmNode//get attributes//check content/** The simple type definition schema component traverser. ... */// whether the type being parsed is a S4S built-in type.//return qualified name of simpleType or empty string if error occured// if it's a global type without a name, return null// don't add global components without name to the grammar// get name and final values// annotation?,(list|restriction|union)// (list|restriction|union)// derivation type: restriction/list/union// nothing should follow this element// General Attribute Checking: get base/item/member types//content = {annotation?,simpleType?...}//check content (annotation?, ...)// get base type from "base" attribute// if its the built-in type, return null from here// get types from "memberTypes" attribute// for each qname in the list// get the type decl// if it's a union, expand it// check if there is a child "simpleType"// it's an error for both "base" and "simpleType" to appear// traverse this child to get the base type// get the next element// traverse this child to get the member type// it's an error if neither "base/itemType" nor "simpleType" appears// it's an error if "memberTypes" is empty and no "simpleType" appears// error finding "base" or error traversing "simpleType".// don't need to report an error, since some error has been reported.// error finding "memberTypes" or error traversing "simpleType".// item type of list types can't have list content// create the simple type based on the "base" type// now traverse facets, if it's derived by restriction// no element should appear after this point// return the new type//@param: elm - top element//@param: baseTypeStr - type (base/itemType/memberTypes)//@param: baseRefContext:  whether the caller is using this type as a base for restriction, union or list//return XSSimpleType available for the baseTypeStr, null if not found or disallowed.// also throws an error if the base type won't allow itself to be used in this context.// REVISIT: can this code be re-used?// if it's a complex type, or if its restriction of anySimpleType// if the base type is anySimpleType and the current type is// a S4S built-in type, return null. (not an error).// check whethe the type denoted by the name and namespace is a S4S// built-in type. update fIsBuiltIn at the same time.// find if a datatype validator is a list or has list datatype member.//isListDatatype(XSSimpleTypeDecl):boolean//class XSDSimpleTypeTraverser/** This class contains code that is used to traverse both <key>s and ... */// it's XSDElementTraverser's job to ensure that there's no// duplication (or if there is that restriction is involved// and there's identity).// and fix up attributeChecker// traverse(Element,XSDElementDecl,XSDocumentInfo, SchemaGrammar)// XSDUniqueOrKeyTraverser/** The wildcard schema component traverser. ... *//** constructor ... *//** Traverse &lt;any&gt; ... */// for <any>, need to create a new particle to reflect the min/max values/** Traverse &lt;anyAttribute&gt; ... *///get all attributes// namespace type// namespace list// process contents// traverseWildcardDecl// XSDWildcardTraverser/** Objects of this class hold all information pecular to a ... */// schema's attributeFormDefault// elementFormDefault// [block | final]Default// targetNamespace// represents whether this is a chameleon schema (i.e., whether its TNS is natural or comes from without)// the root of the schema Document tree itself// all namespaces that this document can refer to// attribute checker to which we'll return the attributes// once we've been told that we're done with them// array of objects on the schema's root element.  This is null// once returnSchemaAttrs has been called.// list of annotations contained in the schema document. This is null// once removeAnnotations has been called.// note that the caller must ensure to call returnSchemaAttrs()// to avoid memory leaks!// schemaAttrs == null means it's not an <xsd:schema> element// throw an exception, but we don't know the document systemId,// so we leave that to the caller.//set namespace support// pass null as the schema document, so that the namespace// context is not popped.// don't return the attribute array yet!//attrChecker.returnAttrArray(schemaAttrs, null);/** Initialize namespace support by collecting all of the namespace ... */// Check if attribute is an ns decl -- requires ns support// Declare prefix if not set -- moving upwards// backup the current ns support, and use the one passed-in.// if no ns support is passed-in, use the one for <schema> element// some Object methods// store whether we have reported an error about that this document// can't access components from the given namespace// return the attributes on the schema element itself:// deallocate the storage set aside for the schema element's// adds an annotation to the list of annotations// returns the list of annotations conatined in the// schema document or null if the document contained no annotations.// removes reference to annotation list// XSDocumentInfo/** Contains a list of LSInputs. ... *//** An immutable empty list. */// The array to hold all data// Number of elements in this list/** Construct an LSInputList implementation ... *//** The number of <code>LSInput</code>s in the list. The range of valid ... */// LSInputListImpl/** Contains a list of Objects. ... *//** Containts a list of Object's. ... *//** Construct an XSObjectList implementation ... *//** The number of <code>Objects</code> in the list. The range of valid ... *//** Checks if the <code>unsigned short</code> <code>item</code> is a ... */// class ShortListImpl/** An XMLLocator implementation used for schema error reporting. ... */// REVISIT: this is temp solution. In general we need to use this class//          instead of the Vector./** Checks if the <code>GenericString</code> <code>item</code> is a member ... */// class StringListImpl/** Add a method that return an <code>XSModel</code> that represents components in ... *//** Return an <code>XSModel</code> that represents components in ... */// class XSGrammarPool/** Containts the map between qnames and XSObject's. ... */// the type of component stored here: complex or simple type/** Construct an XSNamedMap implementation for one namespace ... *//** Construct an XSNamedMap implementation for a list of namespaces ... *//** The number of <code>XSObjects</code> in the <code>XSObjectList</code>. The ... */// first get the number of components for all types// then copy all types to an temporary array// then copy either simple or complex types to fArray,// depending on which kind is required/** Retrieves an <code>XSObject</code> specified by local name and namespace ... */// only return it if it matches the required type/** Returns the <code>index</code>th item in the map. The index starts at ... */// class XSNamedMapImpl/** An immutable empty map. */// components of these namespaces are stored in this map// number of namespaces// each entry contains components in one namespace// store all components from all namespace.// used when this map is accessed as a list.// store the number of components.// Set of Map.Entry<QName,XSObject> for the java.util.Map methods/** Construct an XSNamedMap implementation one namespace from an array ... */// because all components are from the same target namesapce,// get the namespace from the first one.// copy elements to the Vector/** The number of <code>XSObjects</code> in the <code>XSObjectList</code>. ... *//** Retrieves an <code>XSObject</code> specified by local name and ... */// when this map is created from SymbolHash's// get the component from SymbolHash// Otherwise (it's created from an array)// go through the array to find a matching name// calculate the total number of elements// get components from all SymbolHashes/* java.util.Map methods */// Defer creation of the entry set until it is actually needed.// Create a view of this immutable map./** An entry in the XSNamedMap. * *//** Containts a list of XSObject's. ... *//** The number of <code>XSObjects</code> in the list. The range of valid ... */// clear this object// class XSObjectListImpl// XXX Fix message i18n// Ignore all errors after reaching the limit// Print a warning before the first error/** These are DocumentBuilderFactory attributes not DOM attributes *//** State of the secure processing feature, initially <code>false</code> *//** Creates a new instance of a {@link javax.xml.parsers.DocumentBuilder} ... *//** Check that if a Schema has been specified that neither of the schema properties have been set. */// Handles both SAXNotSupportedException, SAXNotRecognizedException/** Allows the user to set specific attributes on the underlying ... */// This handles removal of attributes// Unrecognized attributes do not cause an exception// This is ugly.  We have to collect the attributes and then// later create a DocumentBuilderImpl to verify the attributes.// Create the Map if none existed before// Test the attribute name by possibly throwing an exception/** Allows the user to retrieve specific attributes on the underlying ... */// See if it's in the attributes Map// We create a dummy DocumentBuilderImpl in case the attribute// name is not one that is in the attributes map.// assert(name is not recognized or not supported), try feature// Must have been a feature// Not a property or a feature// See if it's in the features map// If this is the secure processing feature, save it then return.// Test the feature by possibly throwing SAX exceptions/** Feature identifier: include ignorable white space. *//** Feature identifier: create entiry ref nodes feature. *//** Feature identifier: include comments feature. *//** Feature identifier: create cdata nodes feature. *//** Feature identifier: XInclude processing *//** Feature identifier: validation *//** property identifier: access external dtd. *//** Initial ErrorHandler *//** Initial EntityResolver */// If validating, provide a default ErrorHandler that prints// validation errors with a warning telling the user to set an// ErrorHandler// "namespaceAware" == SAX Namespaces feature// Set various parameters obtained from DocumentBuilderFactory// Avoid setting the XInclude processing feature if the value is false.// This will keep the configuration from throwing an exception if it// does not support XInclude./** If secure processing is explicitly set on the factory, the ... *//** For Xerces grammars, use built-in schema validator. * *//** For third party grammars, use the JAXP validator component. * */// Must set before calling setDocumentHandler()//setAttribute override those that may be set by other means// Initial EntityResolver/** Set any DocumentBuilderFactory attributes of our underlying DOMParser ... */// Assume feature// Assume property// JAXP 1.2 support//None of the properties will take effect till the setValidating(true) has been called// this should allow us not to emit DTD errors, as expected by the// spec when schema validation is enabled/** Non-preferred: use the getDOMImplementation() method instead of this ... *//** Gets the XInclude processing mode for this parser ... *//** Restore the initial error handler. * *//** Restore the initial entity resolver. * */// package private// This should never be thrown from the schema validator./** This interface holds JAXP constant property/attribute names and values. ... *//** Runs events through a {@link javax.xml.validation.ValidatorHandler} ... */// pipeline parts// never be null/** Used to store the {@link Augmentations} associated with the ... *//** {@link XMLAttributes} version of {@link #fCurrentAug}. */// components obtained from a manager / property// configure wiring between internal components.// configure validator with proper EntityResolver/ErrorHandler.// erors thrown by the callback is not supposed to be// reported to users.// mostly to make it easy to find any bug.// since a validator may change the contents,// let this one go through a validator// obtain references from the manager/** Uses {@link DefaultHandler} as a default implementation of ... *//** {@link Augmentations} to send along with events. ... *//** {@link QName} to send along events. ... *//** aug.putItem(Constants.TYPEINFO,typeInfoProvider.getElementTypeInfo()); * *//** Gets the {@link Augmentations} that should be associated with ... */// we "consumed" this augmentation./** Get the handler to which we should send events. *//** Converts the {@link XNIException} received from a downstream ... *//** Creates a proper {@link QName} object from 3 parts. ... */// notify handlers/** Converts {@link XNI} events to {@link ContentHandler} events. ... *//** Namespace context *//** For efficiency, we reuse one instance. */// start namespace prefix mappings// send endPrefixMapping events/** Returns the one and only instance of this error handler. *//** Warning: Ignore. *//** Error: Throws back SAXParseException. *//** Fatal Error: Throws back SAXParseException. */// DraconianErrorHandler/** Compares the given {@link Attributes} with {@link #fCurrentAttributes} ... */// newly added attribute. add to the current attribute list.// the attribute is present.// but the value was changed./** Augmentations augs = fCurrentAttributes.getAugmentations(j); ... *//** {@link TypeInfoProvider} that returns no info. */// XMLComponent implementation.// no property/feature supported/** This is the implementation specific class for the ... *//** Creates a new instance of <code>SAXParser</code> using the currently ... */// Translate to ParserConfigurationException/** Common code for translating exceptions *//** Sets the particular feature in the underlying implementation of ... */// XXX This is ugly.  We have to collect the features and then// later create an XMLReader to verify the features./** returns the particular property requested for in the underlying ... */// Check for valid name by creating a dummy XMLReader to get// feature value/* Copyright (c) 2010, 2017, Oracle and/or its affiliates. All rights reserved. *//** Feature identifier: XML Schema validation */// null means DTD/** Create a SAX parser with the associated features ... */// Instantiate a SAXParser directly and not through SAX so that we use the right ClassLoader// JAXP "namespaceAware" == SAX Namespaces feature// Note: there is a compatibility problem here with default values:// JAXP default is false while SAX 2 default is true!// SAX "namespaces" and "namespace-prefixes" features should not// both be false.  We make them opposite for backward compatibility// since JAXP 1.0 apps may want to receive xmlns* attributes./** By default, secure processing is set, no external access is allowed. ... */// Set application's features, followed by validation features.// ErrorHandler.// Get the Schema object from the factory/** Set any features of our XMLReader based on any features set on the ... */// Xerces2 AbstractSAXParser implements SAX1 Parser// assert(xmlReader instanceof Parser);/** Returns the XMLReader that is encapsulated by the implementation of ... *//** Sets the particular property in the underlying implementation of ... *//** Restore initial values of features and properties. * */// This should never happen. We only store recognized// features and properties in the hash maps. For now// just ignore it./** Restore various handlers. * *//* PSVIProvider methods *//** Extension of SAXParser. This class tracks changes to ... *//** This class may be used directly. So initialize the security manager if ... *//** Override SAXParser's setFeature method to track the initial state ... */// TODO: Add localized error message.// If the property is not supported// re-throw the exception if the value is true./** Forward feature to the schema validator if there is one. * *//** Override SAXParser's setProperty method to track the initial state ... */// The spec says if a schema is given via SAXParserFactory// the JAXP 1.2 properties shouldn't be allowed.// this will allow the parser not to emit DTD-related// errors, as the spec demands// REVISIT: It would be nice if we could format this message// using a user specified locale as we do in the underlying// XMLReader -- mrglavas/** Forward property to the schema validator if there is one. * *//** <p>Parser configuration for Xerces' XMLSchemaValidator.</p> ... *//** Feature identifier: schema validation. *//** Feature identifier: use grammar pool only. *//** Feature identifier: parser settings. *//** Property identifier: validation manager. *//** Parent component manager. * *//** The Schema's grammar pool. * *//** Tracks whether the validator should use components from ... *//** Validation manager. */// add schema message formatter to error reporter// Ignore exception./** <p>XMLDocumentHandler which forks the pipeline to two other components.</p> ... *//** The next component in the pipeline who receives the event. ... *//** The component who intercepts events. *//** The source of the event. *///  XMLDocumentHandler implementation/** <p>This filter records which unparsed entities have been ... *//** DTD source and handler. * *//** Map for tracking unparsed entities. *//* XMLDTDHandler methods *//* XMLDTDSource methods *//* EntityState methods */// should only clear this if the last document contained unparsed entities/** <p>Factory that creates new <code>javax.xml.datatype</code> <code>Object</code>s that map XML to/from Java <code>Object</code>s.</p> ... *//** <p>Public constructor is empty..</p> ... *//** <p>Obtain a new instance of a <code>Duration</code> ... *//** <p>Create a <code>Duration</code> of type <code>xdt:yearMonthDuration</code> using the specified ... *//** <p>Create a <code>Duration</code> of type <code>xdt:yearMonthDuration</code> by parsing its <code>String</code> representation, ... *//** <p>Create a <code>Duration</code> of type <code>xdt:yearMonthDuration</code> using the specified milliseconds as defined in ... *//** <p>Create a <code>Duration</code> of type <code>xdt:dayTimeDuration</code> by parsing its <code>String</code> representation, ... */// lexicalRepresentation must be non-null/** <p>Create a <code>Duration</code> of type <code>xdt:dayTimeDuration</code> using the specified milliseconds as defined in ... *//** <p>Create a <code>Duration</code> of type <code>xdt:dayTimeDuration</code> using the specified ... *//** <p>Create a new instance of an <code>XMLGregorianCalendar</code>.</p> ... *//** <p>Create a new XMLGregorianCalendar by parsing the String as a lexical representation.</p> ... *//** <p>Create an <code>XMLGregorianCalendar</code> from a {@link GregorianCalendar}.</p> ... *//** <p>Constructor allowing for complete value spaces allowed by ... *//* ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms. *//* Copyright (c) 2009 by Oracle Corporation. All Rights Reserved. *//** <p>Represent a subtype <code>xdt:dayTimeDuration</code> of a <code>Duration</code> ... *//** <p>Construct a <code>Duration</code> of type <code>xdt:dayTimeDuration</code> by parsing its <code>String</code> representation, ... */// only day, hour, minute, and second should have values/** The value space of xs:dayTimeDuration is the set of fractional second values. ... *//** <p>Immutable representation of a time span as defined in ... *//** <p>Number of Fields.</p> *//** <p>Internal array of value Fields.</p> *//** <p>Internal array of value Field ids.</p> *//** TimeZone for GMT. *//** <p>BigDecimal value of 0.</p> *//** <p>Indicates the sign. -1, 0 or 1 if the duration is negative, ... *//** <p>Years of this <code>Duration</code>.</p> *//** These were final since Duration is immutable. But new subclasses need ... *//** <p>Months of this <code>Duration</code>.</p> *//** <p>Days of this <code>Duration</code>.</p> *//** <p>Hours of this <code>Duration</code>.</p> *//** <p>Minutes of this <code>Duration</code>.</p> *//** <p>Seconds of this <code>Duration</code>.</p> *//** Returns the sign of this duration in -1,0, or 1. ... *//** TODO: Javadoc ... *//** <p>Constructs a new Duration object by specifying each field individually.</p> ... */// sanity check//"all the fields are null"/** <p>Makes sure that the given number is non-negative. If it is not, ... *//** <p>Constructs a new Duration object by specifying each field ... */// field may not be set// int -> BigInteger/** <p>Constructs a new Duration object by specifying the duration ... */// negating 0x8000000000000000L causes an overflow// let GregorianCalendar do the heavy lifting// duration is the offset from the Epoch// now find out how much each field has changed// years// months// days// hours// minutes// seconds & milliseconds/** Constructs a new Duration object by ... */// only if I could use the JDK1.4 regular expression ....//,idx[0]-1);// phase 1: chop the string into chunks// (where a chunk is '<number><a symbol>'//--------------------------------------// ,idx[0]-1);// ,idx[0]);// phase 2: check the ordering of chunks// parse into numbers/** TODO: Javadoc. ... */// ,partsIndex[i]+parts[i].length()-1);//        try {//        } catch( NumberFormatException e ) {//            throw new ParseException( whole, index );// NumberFormatException is IllegalArgumentException/** <p>Four constants defined for the comparison of durations.</p> *//** <p>Partial order relation comparison with this <code>Duration</code> instance.</p> ... */// check for fields that are too large in this Duration//this.getClass().getName() + "#compare(Duration duration)"//+ " years too large to be supported by this implementation "//+ years.toString()//+ " months too large to be supported by this implementation "//+ months.toString()//+ " days too large to be supported by this implementation "//+ days.toString()//+ " hours too large to be supported by this implementation "//+ hours.toString()//+ " minutes too large to be supported by this implementation "//+ minutes.toString()//+ " seconds too large to be supported by this implementation "//+ seconds.toString()// check for fields that are too large in rhs Duration//+ rhsYears.toString()//+ rhsMonths.toString()//+ rhsDays.toString()//+ rhsHours.toString()//+ rhsMinutes.toString()//+ rhsSeconds.toString()// turn this Duration into a GregorianCalendar// turn compare Duration into a GregorianCalendar/** Returns a hash code consistent with the definition of the equals method. ... */// component wise hash is not correct because 1day = 24hours/** Returns a string representation of this duration object. ... *//** <p>Turns {@link BigDecimal} to a string representation.</p> ... *//* Insert decimal point *//* Point goes right before intVal *//* Point goes inside intVal *//* We must insert zeros between point and intVal *//** Checks if a field is set. ... *///"cannot be called with field == null"/** Gets the value of a field. ... *//** throw new IllegalArgumentException( ... *//** Obtains the value of the YEARS field as an integer value, ... *//** Obtains the value of the MONTHS field as an integer value, ... *//** Obtains the value of the DAYS field as an integer value, ... *//** Obtains the value of the HOURS field as an integer value, ... *//** Obtains the value of the MINUTES field as an integer value, ... *//** Obtains the value of the SECONDS field as an integer value, ... *//** <p>Return the requested field value as an int.</p> ... *//** <p>Returns the length of the duration in milli-seconds.</p> ... *///    /**//     * Returns an equivalent but "normalized" duration value.//     *//     * Intuitively, the normalization moves YEARS into//     * MONTHS (by x12) and moves DAYS, HOURS, and MINUTES fields//     * into SECONDS (by x86400, x3600, and x60 respectively.)//     * Formally, this method satisfies the following conditions://     * <ul>//     *  <li>x.normalize().equals(x)//     *  <li>!x.normalize().isSet(Duration.YEARS)//     *  <li>!x.normalize().isSet(Duration.DAYS)//     *  <li>!x.normalize().isSet(Duration.HOURS)//     *  <li>!x.normalize().isSet(Duration.MINUTES)//     * </ul>//     * @return//     *      always return a non-null valid value.//     *///    public Duration normalize() {//        return null;/** <p>Converts the years and months fields into the days field ... */// using int may cause overflow, but// Calendar internally treats value as int anyways.// obtain the difference in terms of days/** <p>Computes a new duration whose value is <code>factor</code> times ... *//** Computes a new duration whose value is <code>factor</code> times ... */// illegal carry-down/** <p>Gets the value of the field as a {@link BigDecimal}.</p> ... *//** <p>BigInteger value of BigDecimal value.</p> ... *//** 1 unit of FIELDS[i] is equivalent to <code>FACTORS[i]</code> unit of ... *//* undefined *//** <p>Computes a new duration whose value is <code>this+rhs</code>.</p> ... */// align sign// Y,M// D,h,m,s// make sure that the sign bit is consistent across all 6 fields.// repeat until all the sign bits become consistent// sign of the left fields// this field has different sign than its left field.// compute the number of unit that needs to be borrowed.// update values/** Compute <code>value*signum</code> where value==null is treated as ... *//** <p>Compute <code>value*signum</code> where <code>value==null</code> is treated as <code>value==0</code></p>. ... *//** <p>Computes a new duration whose value is <code>this-rhs</code>.</p> ... *//** Returns a new {@link Duration} object whose ... *//** Adds this duration to a {@link Calendar} object. ... *//** Adds this duration to a {@link Date} object. ... */// this will throw NPE if date==null/** <p>Stream Unique Identifier.</p> ... *//** Writes {@link Duration} as a lexical representation ... *//** Representation of {@link Duration} in the object stream. ... *///            } catch( ParseException e ) {//                throw new StreamCorruptedException("unable to parse "+lexical+" as duration");/** Calls the {@link Calendar#getTimeInMillis} method. ... *//** <p>Represent a subtype <code>xdt:yearMonthDuration</code> of a <code>Duration</code> ... *//** <p>Construct a <code>Duration</code> of type <code>xdt:yearMonthDuration</code> using the specified ... *//** <p>Construct a <code>Duration</code> of type <code>xdt:yearMonthDuration</code> using the specified milliseconds as defined in ... *///Any remaining milliseconds after determining the year and month are discarded./** <p>Construct a <code>Duration</code> of type <code>xdt:yearMonthDuration</code> by parsing its <code>String</code> representation, ... *//** The value space of xs:yearMonthDuration is the set of xs:integer month values. ... *//* Copyright (c) 2004, 2018, Oracle and/or its affiliates. All rights reserved. ... *//** <p>Representation for W3C XML Schema 1.0 date/time datatypes. ... *//** <p>Eon of this <code>XMLGregorianCalendar</code>.</p> *//** <p>Year of this <code>XMLGregorianCalendar</code>.</p> *//** <p>Month of this <code>XMLGregorianCalendar</code>.</p> *//** <p>Day of this <code>XMLGregorianCalendar</code>.</p> *//** <p>Timezone of this <code>XMLGregorianCalendar</code> in minutes.</p> *//** <p>Hour of this <code>XMLGregorianCalendar</code>.</p> *//** <p>Minute of this <code>XMLGregorianCalendar</code>.</p> *//** <p>Second of this <code>XMLGregorianCalendar</code>.</p> *//** <p>Fractional second of this <code>XMLGregorianCalendar</code>.</p> *//** <p>Constant to represent a billion.</p> *//** <p>Obtain a pure Gregorian Calendar by calling ... *//** Year index for MIN_ and MAX_FIELD_VALUES. *//** Month index for MIN_ and MAX_FIELD_VALUES. *//** Day index for MIN_ and MAX_FIELD_VALUES. *//** Hour index for MIN_ and MAX_FIELD_VALUES. *//** Minute index for MIN_ and MAX_FIELD_VALUES. *//** Second index for MIN_ and MAX_FIELD_VALUES. *//** Timezone index for MIN_ and MAX_FIELD_VALUES *//** field names indexed by YEAR..TIMEZONE. *//** <p>Use as a template for default field values when ... *///year//month// day// hour// minute// second// milliseconds// timezone/** Constructs a new XMLGregorianCalendar object. ... */// compute format string for this lexical representation.// current parser needs a format string,// use following heuristics to figure out what xml schema date/time// datatype this lexical string could represent.// Fix 4971612: invalid SCCS macro substitution in data string,//   no %{alpha}% to avoid SCCS maco substitution// found Date Time separater, must be xsd:DateTime// found ":", must be xsd:Time// check for gDay || gMonth || gMonthDay// gDay, ---DD(z?)// --MM// --MMZ// --MMSHH:MM// gMonth, --MM(z?),// per XML Schema Errata, used to be --MM--(z?)// gMonthDay, --MM-DD(z?), (or invalid lexicalRepresentation)// length should be://  7: --MM-DD//  8: --MM-DDZ// 13: --MM-DDSHH:MM// check for Date || GYear | GYearMonth// start at index 1 to skip potential negative sign for year.// found timezone, strip it off for distinguishing// between Date, GYear and GYearMonth so possible// negative sign in timezone is not mistaken as// a separator.// GYear// GYearMonth// Date or invalid lexicalRepresentation// Fix 4971612: invalid SCCS macro substitution in data string// check for validity//"\"" + lexicalRepresentation + "\" is not a valid representation of an XML Gregorian Calendar value."/** <p>Create an instance with all date/time datatype fields set to ... */// field initializers already do the correct initialization./** <p>Private constructor allowing for complete value spaces allowed by ... *//** <p>Private constructor of value spaces that a ... *//** <p>Convert a <code>java.util.GregorianCalendar</code> to XML Schema 1.0 ... */// Calendar.MONTH is zero based, XSD Date datatype's month field starts// with JANUARY as 1.// Calendar ZONE_OFFSET and DST_OFFSET fields are in milliseconds.// Factories/** <p>Create a Java representation of XML Schema builtin datatype <code>dateTime</code>. ... *//** <p>Create a Java instance of XML Schema builtin datatype dateTime.</p> ... *///millisecond//timezone/** <p>Create a Java representation of XML Schema builtin datatype <code>date</code> or <code>g*</code>.</p> ... */// millisecond/** Create a Java instance of XML Schema builtin datatype <code>time</code>. ... */// Year// Month// Day//Millisecond/** <p>Create a Java instance of XML Schema builtin datatype time.</p> ... */// month// year/** <p>Return high order component for XML Schema 1.0 dateTime datatype field for ... *//** <p>Return low order component for XML Schema 1.0 dateTime datatype field for ... *//** <p>Return XML Schema 1.0 dateTime datatype field for ... */// both are defined// only year is defined// neither are defined// or only eon is defined which is not valid without a year/** <p>Return number of month or {@link DatatypeConstants#FIELD_UNDEFINED}.</p> ... *//** Return day in month or {@link DatatypeConstants#FIELD_UNDEFINED}.</p> ... *//** Return timezone offset in minutes or ... *//** Return hours or {@link DatatypeConstants#FIELD_UNDEFINED}. ... *//** Return minutes or {@link DatatypeConstants#FIELD_UNDEFINED}.<\p> ... *//** <p>Return seconds or {@link DatatypeConstants#FIELD_UNDEFINED}.<\p> ... *//** <p>Return millisecond precision of {@link #getFractionalSecond()}.<\p> ... */// TODO: Non-optimal solution for now.// Efficient implementation would only store as BigDecimal// when needed and millisecond otherwise./** <p>Return fractional seconds.</p> ... */// setters/** <p>Set low and high order component of XSD <code>dateTime</code> year field.</p> ... *//** <p>Set year of XSD <code>dateTime</code> year field.</p> ... *//** <p>Set high order part of XSD <code>dateTime</code> year field.</p> ... */// Treat ZERO as field being undefined./** <p>Set month.</p> ... *//** <p>Set days in month.</p> ... *//** <p>Set the number of minutes in the timezone offset.</p> ... *//** <p>Set time as one unit.</p> ... */// http://www.w3.org/2001/05/xmlschema-errata#e2-45// while 0-24 is acceptable in the lexical space, 24 is not valid in value space// W3C XML Schema Part 2, Section 3.2.7.1// leap second allows for 60/** <p>Set time as one unit, including the optional infinite precison ... */// must test hour after setting seconds/** <p>Set time as one unit, including optional milliseconds.</p> ... */// comparisons/** <p>Compare two instances of W3C XML Schema 1.0 date/time datatypes ... */// both instances are in same timezone or// both are FIELD_UNDEFINED.// Avoid costly normalization of timezone to 'Z' time.// Both instances have different timezones.// Normalize to UTC time and compare.// C. step 1// C. step 2// C. step 3// Q.getTimezone() != DatatypeConstants.FIELD_UNDEFINED// P has no timezone and Q does.// D. step 1// D. step 2// D. step 3/** <p>Normalize this instance to UTC.</p> ... */// if timezone was undefined, leave it undefined// if milliseconds was undefined, leave it undefined// normalizing to UTC time negates the timezone offset before// addition.// isPositive//years//months//days//hours// absolute//seconds// set to zulu UTC time./** <p>Implements Step B from http://www.w3.org/TR/xmlschema-2/#dateTime-order </p> ... */// compare Year.// Eon field is only equal when null.// optimized case for comparing year not requiring eon field./** <p>Implement Step B from ... *///fields are either equal in value or both undefined.// Step B. 1.1 AND optimized result of performing 1.1-1.4.// Step B. 1.2// Step B. 1.3-4.// optimization. especially when both arguments are null./** <p>Indicates whether parameter <code>obj</code> is "equal to" this one.</p> ... *//** <p>Returns a hash code consistent with the definition of the equals method.</p> ... */// Following two dates compare to EQUALS since in different timezones.// 2000-01-15T12:00:00-05:00 == 2000-01-15T13:00:00-04:00// Must ensure both instances generate same hashcode by normalizing// this to UTC timezone./** <p>Constructs a new XMLGregorianCalendar object by ... *//** <p>Return the lexical representation of <code>this</code> instance. ... *///   no %{alpha}% to avoid SCCS macro substitution/** <p>Return the name of the XML Schema date/time type that this instance ... *//** Validate instance by <code>getXMLSchemaType()</code> constraints. ... */// since setters do not allow for invalid values,// (except for exceptional case of year field of zero),// no need to check for anything except for constraints// between fields.//check if days in month is valid. Can be dependent on leap year.// years could not be set// XML Schema 1.0 specification defines year value of zero as// invalid. Allow this class to set year field to zero// since XML Schema 1.0 errata states that lexical zero will// be allowed in next version and treated as 1 B.C.E.// optimize check./** <p>Add <code>duration</code> to this instance.<\p> ... *//* Extracted from ... *//* Years (may be modified additionally below) ... *//* Zone ... *//* Seconds ... */// seconds + fractionalSeconds// Duration seconds is SECONDS + FRACTIONALSECONDS./* Minutes ... *//* Hours ... *//* Days ... */// calculate days in previous month, watch for month roll over// roll over to December of previous year// set fields that where undefined before this addition, back to undefined.// XML Schema months start at 1.// is a leap year./** <p>Convert <code>this</code> to <code>java.util.GregorianCalendar</code>.</p> ... *//** Use the following instead for JDK7 only: ... */// if year( and eon) are undefined, leave default Calendar values// only set month if it is set// Calendar.MONTH is zero based while XMLGregorianCalendar month field is not.// only set day if it is set// only set hour if it is set// only set minute if it is set// only set second if it is set// only set millisend if it is set/** <p>Convert <code>this</code> along with provided parameters ... */// use default if set/** <p>Returns a <code>java.util.TimeZone</code> for this class.</p> ... */// zoneoffset is in minutes. Convert to custom timezone id format.// Javadoc for java.util.TimeZone documents max length// for customTimezoneId is 8 when optional ':' is not used.// Format is// "GMT" ('-'|''+') (digit digit?) (digit digit)?//                   hour          minutes/** <p>Creates and returns a copy of this object.</p> ... */// Both this.eon and this.fractionalSecond are instances// of immutable classes, so they do not need to be cloned./** <p>Unset all fields to undefined.</p> ... */// in minutes/** <p>Parse a formated <code>String</code> into an <code>XMLGregorianCalendar</code>.</p> ... */// not a meta character// seen meta character. we don't do error check against the format// parse seconds.// time zone. missing, 'Z', or [+-]nn:nn// illegal meta character. impossible.// some tokens are left in the input//,vidx);//,vidx-1);// we are expecting more digits// skip leading negative, if it exists// definitely int only. I don't know the exact # of digits that can be in int,// but as long as we can catch (0-9999) range, that should be enough./** Prints this object according to the format specification. ... */// not a meta char// optimized path// reallocate the buffer now so that it has enough space// Note: toPlainString() isn't available before Java 1.5// do it the hard way//skip leading zero./** Prints an int as two digits into the buffer. ... *//** Prints an int as four digits into the buffer. ... *//** <p><code>reset()</code> is designed to allow the reuse of existing ... *///PENDING : Implementation of reset method/** <p>Abstract implementation of Schema for W3C XML Schemas.</p> ... *//** Map containing the initial values of features for ... *//** Map containing the initial values of properties for ... *//* Schema methods *//* @see javax.xml.validation.Schema#newValidator() *//* @see javax.xml.validation.Schema#newValidatorHandler() *//* XSGrammarPoolContainer methods *//** Returns the initial value of a feature for validators created ... *//* Set a feature on the schema *//** Returns the initial value of a property for validators created ... *//* Set a property on the schema */// AbstractXMLSchema/** <p>An extension to XMLDocumentHandler for building DOM structures.</p> ... *//** <p>Sets the <code>DOMResult</code> object which ... *//** A document type declaration. ... *//** <p>DOM result augmentor.</p> ... */// If it's a Xerces DOM store type information for attributes, set idness, etc..// write type information to this attribute// Add default/fixed attributes// Write type information to this element/** Returns whether the given attribute is an ID type. * */// DOMResultAugmentor/** <p>DOM result builder.</p> ... *//* DOMDocumentHandler methods *//** Create new DocumentType node for the target. *//** Copy internal subset. *//** Copy entities. *//** Copy notations. *//** Create new Text node for the target. *//** Create new CDATASection node for the target. *//** Create new Comment node for the target. *//** Create new ProcessingInstruction node for the target. *//* XMLDocumentHandler methods */// write type information to this element// adjust current node reference/** Check if this node can be attached to the target. */// DOMResultBuilder/** <p>A validator helper for <code>DOMSource</code>s.</p> ... *//** Property identifier: namespace context. *//** The namespace context of this document: stores namespaces in scope. * *//** The namespace context of the DOMSource, includes context from ancestor nodes. * *//** Schema validator. * *//** Validation manager. * *//** Component manager. * *//** Simple Locator. * *//** DOM document handler. * *//** DOM result augmentor. * *//** DOM result builder. * *//** Map for tracking unparsed entities. * *//** Root node. * *//** Current element. * *//** Fields for start element, end element and characters. * *//* ValidatorHelper methods */// regardless of what type of node this is, fire start and end document events// Release references to application objects//fCurrentElement = null; -- keep the reference to support current-element-node property/** Traverse the DOM and fire events to the schema validator. */// Performs a non-recursive traversal of the DOM. This// will avoid a stack overflow for DOMs with high depth./** Do processing for the start of a node. */// start element/** The validator does nothing with processing instructions so bypass it. ... *//** The validator does nothing with comments so bypass it. ... *//** Send the DocumentType node directly to the result builder. */// Ignore other node types./** Do processing for the end of a node. */// end element/** Extracts NamedNodeMap of entities. We need this to validate ... *//** Sets up handler for <code>DOMResult</code>. */// If there's no DOMResult, unset the validator handler// If the source node and result node are the same use the DOMResultAugmentor.// Otherwise use the DOMResultBuilder.// Is this a DOM level1 document?// REVISIT: Assuming all attributes are of type CDATA. The actual type may not matter. -- mrglavas// REVISIT: Should we be looking at non-namespace attributes// for additional mappings? Should we detect illegal namespace// declarations and exclude them from the context? -- mrglavas// process namespace attribute/** NamespaceContext for the DOMSource, includes context for ancestor nodes. *//** Namespace binding information. This array is composed of a ... *//** The size of the namespace information array. *//** Flag indicating whether the namespace context ... */// resize array, if needed// bind prefix to uri in current context// find prefix in the DOM context// prefix not found// DOMValidatorHelper/** {@link ErrorHandler} that throws all errors and fatal errors. ... *//** <p>Implementation of Schema for W3C XML Schemas ... *//** Zero length grammar array. *//* XMLGrammarPool methods */// EmptyXMLSchema/** Receives errors through Xerces {@link XMLErrorHandler} ... *//** set to true if there was any error. *//** returns if there was an error since the last invocation of ... *//** resets the error flag. *//** Implemented by the derived class to return the actual ... *//** <p>Used to format JAXP Validation API error messages using a specified locale.</p> ... *//** <p>Filter {@link XMLGrammarPool} that exposes a ... */// noop. don't let caching to happen// noop. cache is read-only.// noop. this pool is always read-only// noop. this pool is always read-only.// ReadOnlyGrammarPool/** <p>Implementation of Schema for W3C XML Schemas which ... */// SimpleXMLSchema/** <p>This grammar pool is a memory sensitive cache. The grammars ... *//** Default size. *//** Grammars. *//** Flag indicating whether this pool is locked *//** The number of grammars in the pool *//** Reference queue for cleared grammar references *//** Constructs a grammar pool with a default number of buckets. *//** Constructs a grammar pool with a specified number of buckets. */// XMLGrammarPool methods/* <p> Retrieve the initial known set of grammars. This method is ... */// Return no grammars. This allows the garbage collector to sift// out grammars which are not in use when memory demand is high.// It also allows the pool to return the "right" schema grammar// based on schema locations.// retrieveInitialGrammarSet (String): Grammar[]/* <p> Return the final set of grammars that the validator ended up ... */// cacheGrammars(String, Grammar[]);/* <p> This method requests that the application retrieve a grammar ... */// retrieveGrammar(XMLGrammarDescription):  Grammar/** Puts the specified grammar into the grammar pool and associates it to ... */// create a new entry// putGrammar(Grammar)/** Returns the grammar associated to the specified grammar description. ... *//** If the soft reference has been cleared, remove this entry from the pool. */// getGrammar(XMLGrammarDescription):Grammar/** Removes the grammar associated to the specified grammar description from the ... */// removeGrammar(XMLGrammarDescription):Grammar/** Returns true if the grammar pool contains a grammar associated ... */// containsGrammar(XMLGrammarDescription):boolean/* <p> Sets this grammar pool to a "locked" state--i.e., ... */// lockPool()/* <p> Sets this grammar pool to an "unlocked" state--i.e., ... */// unlockPool()/* <p>This method clears the pool-i.e., removes references ... *//** This method checks whether two grammars are the same. Currently, we compare ... */// The JAXP 1.3 spec says that the implementation can assume that// if two schema location hints are the same they always resolve// to the same document. In the default grammar pool implementation// we only look at the target namespaces. Here we also compare// location hints./** Returns the hash code value for the given grammar description. ... *//** Removes the given entry from the pool ... *//** Removes stale entries from the pool. *//** This class is a grammar pool entry. Each entry acts as a node ... */// clear this entry; useful to promote garbage collection// since reduces reference count of objects to be destroyed// class Entry/** This class stores a soft reference to a grammar object. It keeps a reference ... */// class SoftGrammarReference// class SoftReferenceGrammarPool/** <p>A validator helper for <code>StAXSource</code>s.</p> ... *//** Creates a new instance of StaxValidatorHelper */// this is impossible, but again better safe than sorry/** <p>A validator helper for <code>StreamSource</code>s.</p> ... *//** Property id: security manager. *//** SoftReference to parser configuration. * */// Gets the parser configuration. We'll create and initialize a new one, if we// haven't created one before or if the previous one was garbage collected.// If settings have changed on the component manager, refresh the error handler and entity resolver.// prepare for parse// StreamValidatorHelper/** <p>Static utility methods for the Validation API implementation.</p> ... *//** Creates a proper {@link XMLInputSource} from a {@link StreamSource}. ... *//** Reconstructs {@link SAXException} from XNIException. */// Util/** <p>Implementation of ValidatorHandler for W3C XML Schemas and ... *//** Flag used to track whether the namespace context needs to be pushed. */// User Objects/* Constructors *//* ValidatorHandler methods *///for now, the identifier can only be (XMLConstants.FEATURE_SECURE_PROCESSING)/** Split empty element event. * */// if the type is union it is possible that we receive// a character call with empty data/* ContentHandler methods */// cleans up TypeInfoProvider// Fill element QName// Fill XMLAttributes/** Processing instructions do not participate in schema validation, ... */// there seems to be no corresponding method on XMLDocumentFilter.// just pass it down to the output, if any./* DTDHandler methods */// create one now// If this is a Xerces SAX parser, set the security manager if there is one// Ignore the exception if the security manager cannot be set.// this is impossible, but better safe than sorry// release the reference to user's handler ASAP/** Fills in the XMLAttributes object. *//** Adds an attribute to the XMLAttributes object. *//** {@link TypeInfoProvider} implementation. ... *//** Element augmentations: contains ElementPSVI. * *//** Attributes: augmentations for each attribute contain AttributePSVI. * *//** In start element. * *//** In end element. * *//** Initializes the TypeInfoProvider with type information for the current element. * *//** Cleanup at the end of start element. * *//** Cleanup at the end of end element. * *//** Throws a {@link IllegalStateException} if we are not in ... */// TODO: make sure if this is correct.// TODO: since the number of types in a schema is quite limited,// TypeInfoImpl should be pooled. Even better, it should be a part// of the element decl.// TODO: can t be null?// PSVIProvider support/** SAX adapter for an LSResourceResolver. *//** XML 1.0 type constant according to DOM L3 LS REC spec "http://www.w3.org/TR/2004/REC-DOM-Level-3-LS-20040407/" *//** The DOM entity resolver. *//** Wraps the specified DOM entity resolver. *//** Sets the DOM entity resolver. */// setEntityResolver(LSResourceResolver)/** Returns the DOM entity resolver. */// getEntityResolver():LSResourceResolver/** Always returns <code>null</code>. An LSResourceResolver has no corresponding method. *//** Resolves the given resource and adapts the <code>LSInput</code> ... *//** Delegates to EntityResolver2.resolveEntity(String, String, String, String). *//** Resolves a system identifier against a base URI. */// In the event that resolution failed against the// base URI, just return the system id as is. There's not// much else we can do./** <p>Instances of ValidatorHelper are able to validate ... *//** <p>Implementation of Validator for W3C XML Schemas.</p> ... *//** SAX validator helper. * *//** DOM validator helper. * *//** Stream validator helper. * *//** StAX validator helper. * *//** Flag for tracking whether features/properties changed since last reset. *//** Flag for tracking whether the error handler changed since last reset. *//** Flag for tracking whether the resource resolver changed since last reset. *//** Support current-element-node property */// Hand off to SAX validator helper.// Hand off to DOM validator helper.// Hand off to stream validator helper.// Hand off to stax validator helper.// Source parameter cannot be null.// Source parameter must be a SAXSource, DOMSource or StreamSource//Support current-element-node; return current node if DOMSource is used.// avoid resetting features and properties if the state the validator// is currently in, is the same as it will be after reset.// ValidatorImpl/** <p>An implementation of Schema for W3C XML Schemas ... *//** Weak reference to grammar pool. */// If there's no grammar pool then either we haven't created one// yet or the garbage collector has already cleaned out the previous one.// WeakReferenceXMLSchema/** Wraps {@link SAXException} and make it an unchecked exception. ... *//** <p>Implementation of Schema for W3C XML Schemas.</p> ... *//** The grammar pool is immutable *//** <p>Returns the grammar pool contained inside the container.</p> ... *//** <p>Returns whether the schema components contained in this object ... */// XMLSchema/** {@link SchemaFactory} for XML Schema. ... *//** Feature identifier: schema full checking. *//** Property identifier: XMLSecurityManager. *//** The XMLSchemaLoader *//** User-specified ErrorHandler; can be null. *//** The LSResrouceResolver *//** The DOMEntityResolverWrapper *//** The ErrorHandlerWrapper *//** The SecurityManager. *//** The Security property manager. *//** The container for the real grammar pool. */// Enable secure processing feature by default/** <p>Is specified schema supported by this <code>SchemaFactory</code>?</p> ... */// only W3C XML Schema 1.0 is supported// this will let the loader store parsed Grammars into the pool.// this should have been reported to users already.// this hasn't been reported, so do so now.// and we must throw it.// Clear reference to grammar pool.// Select Schema implementation based on grammar count.// Use a Schema that uses the system id as the equality source./** Check to see if the property is managed by the JdkXmlFeatues * *///in secure mode, let useServicesMechanism be determined by the constructor/** Extension of XMLGrammarPoolImpl which exposes the number of ... *//** Returns the number of grammars contained in this pool. */// XMLSchemaFactory.XMLGrammarPoolImplExtension/** A grammar pool which wraps another. */// XMLSchemaFactory.XMLGrammarPoolWrapper// XMLSchemaFactory/** <p>An implementation of XMLComponentManager for a schema validator.</p> ... *//** Property identifier: security property manager. *//** Lookup map for components required for validation. * */// Components/** XML Schema validator. */// Configuration/** Stores initial feature values for validator reset. *//** Stores initial property values for validator reset. *//** Stores the initial security manager. *//** Stores the initial security property manager. *//** Application's ErrorHandler. * *//** Application's LSResourceResolver. *//** Locale chosen by the application. *//** Constructs a component manager suitable for Xerces' schema validator. */// setup components// setup other properties// setup grammar pool// add all recognized features and properties and apply their defaults//pass on properties set on SchemaFactory//pre-condition: VALIDATION and SCHEMA_VALIDATION are always true/** Calls reset on each of the components owned by this component manager. * */// Mark configuration as fixed./** Cleans out configuration, restoring it to its initial state. */// Remove error resolver and error handler// Set the Locale back to null.// Restore initial security manager// Reset feature and property values to their initial values/** Sets feature defaults for the given component on this configuration. *//** Sets property defaults for the given component on this configuration. */// XMLSchemaValidatorComponentManager/** <p>A container for grammar pools which only contain schema grammars.</p> ... *//** This is the base class of all DOM parsers. It implements the XNI ... */// feature ids/** Feature id: namespace. *//** Feature id: create entity ref nodes. *//** Feature id: include comments. *//** Feature id: create cdata nodes. *//** Feature id: include ignorable whitespace. *//** Feature id: defer node expansion. */// property ids/** Property id: document class name. */// protected static final String GRAMMAR_POOL =// Constants.XERCES_PROPERTY_PREFIX + Constants.XMLGRAMMAR_POOL_PROPERTY;/** Default document class name. *//** If the user stops the process, this exception will be thrown. *//** True if inside DTD. *//** Create entity reference nodes. *//** Include ignorable whitespace. *//** Include Comments. *//** Create cdata nodes. */// dom information/** The document. *//** The default Xerces document implementation, if used. *//** Whether to store PSVI information in DOM tree. *//** The document class name to use. *//** The document type node. *//** Current node. *//** Character buffer */// internal subset/** Internal subset buffer. */// deferred expansion data/** True if inside DTD external subset. *//** Root element node. *//** True if inside CDATA section. *//** True if saw the first chunk of characters *//** LSParserFilter: specifies that element with given QNAME and all its children ... *//** Base uri stack *//** LSParserFilter: tracks the element depth within a rejected subtree. *//** LSParserFilter: store depth of skipped elements *//** LSParserFilter: true if inside entity reference */// add recognized features// add recognized properties// <init>(XMLParserConfiguration)/** This method retrieves the name of current document class. *//** This method allows the programmer to decide which document ... */// normalize class name// verify that this class exists and is of the right type//if (!_class.isAssignableFrom(Document.class)) {// set document class name// setDocumentClassName(String)// getDocument():Document/** Drops all references to the last DOM which was built by this parser. */// dropDocumentReferences()// XMLDocumentParser methods/** Resets the parser state. ... */// get feature state// get property// reset dom information// reset string buffer// reset state information// Always create entity reference nodes to be able to recreate// entity as a part of doctype// REVISIT: baseURI/actualEncoding//         remove dependency on our implementation when DOM L3 is REC// set base uri// set actual encoding// we don't need synchronization now, because entity ref will be// expanded anyway. Synch only needed when user creates entityRef node// find corresponding Entity decl// startGeneralEntity(String,XMLResourceIdentifier, Augmentations)// REVISIT: the constant FILTER_REJECT should be changed when new// DOM LS specs gets published// fall through to SKIP since comment has no children.// REVISIT: the constant FILTER_SKIP should be changed when new// make sure we don't loose chars if next event is characters()// accept node// fall through to SKIP since PI has no children.// fFirstChunk must be set to true so that data// won't be lost in the case where the child before PI is// a text node and the next event is characters.// REVISIT: when DOM Level 3 is REC rely on Document.support//          instead of specific class// set DOM error checking off// set documentURI// use specified document class// if subclass of our own class that's cool too// REVISIT: when DOM Level 3 is REC rely on//          Document.support instead of specific class// won't happen we already checked that earlier// REVISIT: strict error checking is not implemented in deferred dom.// startDocument(String,String)// NOTE: The specified value MUST be set after you set//       value from the attribute list. -Ac// REVISIT: currently it is possible that someone turns off// namespaces and turns on xml schema validation// To avoid classcast exception in AttrImpl check for namespaces// however the correct solution should probably disallow setting// namespaces to false when schema processing is turned on.// XML Schema// DTD// For DOM Level 3 TypeInfo, the type name must// be null if this attribute has not been declared// in the DTD.// REVISIT: Handle entities in attribute value.// filter nodes// fill value of the root element// make sure that if any char data is available// the fFirstChunk is true, so that if the next event// is characters(), and the last node is text, we will copy// the value already in the text node to fStringBuffer// (not to lose it).// Need to loop in reverse order so that the attributes// are processed in document order when the DOM is expanded.// set type information// if type is union (XML Schema) it is possible that we receive// character call with empty data// collect all the data into the string buffer.// The Text and CDATASection normalization is taken care of within// the DOM in the deferred case.// The Text normalization is taken care of within the DOM in the// deferred case.// REVISIT: Should this happen after we call the filter?// Updating TypeInfo. If the declared type is a union the// [member type definition] will only be available at the// end of an element.// replace children// end-if DOMFilter// Setting TypeInfo. If the declared type is a union the// fall through to SKIP since CDATA section has no children.// set the actual encoding and set DOM error checking back on// set the actual encoding// get current entity declaration//entities.setNamedItem(fCurrentEntityDecl);// Make entity ref node read only// move entity reference children to the list of// siblings of its parent and remove entity reference// get previous sibling of the entity reference// normalize text nodes// length > 0// entity definition exists and it does not have any children//!fCreateEntityRefNodes// move children of entity ref before the entity ref.// remove entity ref.// holds a child of entity ref// endGeneralEntity(String, Augmentations)/** Record baseURI information for the Element (by adding xml:base attribute) ... */// REVISIT: remove dependency on our implementation when//          DOM L3 becomes REC// if an element already has xml:base attribute// retrive the baseURI from the entity reference// retrieve baseURI from the entity reference// try baseURI of the entity declaration// internal subset string// NOTE: We only know how to create these nodes for the Xerces//       DOM implementation because DOM Level 2 does not specify//       that functionality. -Ac// create full node// don't add parameter entities!// create deferred node// unparsedEntityDecl(String,XMLResourceIdentifier, String, Augmentations)// ignoredCharacters(XMLString, Augmentations)// REVISIT: This code applies to the support of domx/grammar-access// feature in Xerces 1// deferred expansion// get the default value// get element definition// create element definition if not already there// add default attribute// DOM Level 2 wants all namespace declaration attributes// to be bound to "http://www.w3.org/2000/xmlns/"// So as long as the XML parser doesn't do it, it needs to// done here.// REVISIT: set ID type correctly// if deferred// full expansion// get element definition node// REVISIT: Check for uniqueness of element name? -Ac// create attribute and set properties// add default attribute to element definition// if NOT defer-node-expansion// method to create an element node.// subclasses can override this method to create element nodes in other ways.// if we are using xerces DOM implementation, call our// own constructor to reuse the strings we have here.// method to create an attribute node.// subclasses can override this method to create attribute nodes in other ways./* When the first characters() call is received, the data is stored in ... */// handle character data// if we have data in the buffer we must have created// a text node already.// REVISIT: should this check be performed?// fall through to SKIP since Comment has no children.// accept node -- do nothing// end-if fDOMFilter !=null// end-if child !=null// class AbstractDOMParser/** This is the base class of all SAX parsers. It implements both the ... */// PSVI// SAX1, SAX2/** Feature id: string interning. *//** Feature identifier: allow notation and unparsed entity events to be sent out of order. */// this is not meant to be a recognized feature, but we need it here to use// if it is already a recognized feature for the pipeline/** Property id: lexical handler. *//** Property id: declaration handler. *//** Property id: DOM node. *//** Namespace prefixes. *//** Lexical handler parameter entities. *//** Standalone document declaration. *//** Resolve DTD URIs. *//** Use EntityResolver2. *//** XMLNS URIs: Namespace declarations in the ... */// parser handlers/** Content handler. *//** Decl handler. *//** Lexical handler. */// track the version of the document being parsed// temporary buffer for sending normalized values// REVISIT: what should be the size of the buffer?// allows us to keep track of whether an attribute has// been declared twice, so that we can avoid exposing the// second declaration to any registered DeclHandler// it wasn't a recognized feature, so we don't worry about it// SAX1// SAX2// startDocument(locator,encoding,augs)// the version need only be set once; if// document's XML 1.0|1.1, that's how it'll stay// SAX2 extension// is there a DeclHandler?// Only report startEntity if this entity was actually read.// report skipped entity to content handler// startGeneralEntity(String,String,String,String,String)// Only report endEntity if this entity was actually read.// REVISIT: should we support schema-normalized-value for SAX1 events// send prefix mapping events// REVISIT: It should not be necessary to iterate over the attribute// list when the set of [namespace attributes] is empty for this// element. This should be computable from the NamespaceContext, but// since we currently don't report the mappings for the xml prefix// we cannot use the declared prefix count for the current context// to skip this section. -- mrglavas// remove namespace declaration attributes// localpart should be empty string as per SAX documentation:// http://www.saxproject.org/?selected=namespaces// REVISIT - I keep running into SAX apps that expect//   null data to be an empty string, which is contrary//   to the comment for this method in the SAX API./** This method notifies of the start of parameter entity. The DTD has the ... */// startParameterEntity(String,identifier,String,Augmentation)// elementDecl(String,String, Augmentations)// used as a key to detect duplicate attribute definitions.// we aren't permitted to return duplicate attribute definitions// SAX2 extensions// externalEntityDecl(String,,XMLResourceIdentifier, Augmentations)// SAX1 and SAX2// help out the GC// Parser and XMLReader methods/** Parses the input source specified by the given system identifier. ... */// parse document// wrap XNI exceptions as SAX exceptions// since XMLParseExceptions know nothing about encoding,// we cannot return anything meaningful in this context.// We *could* consult the LocatorProxy, but the// application can do this itself if it wishes to possibly// be mislead.// parse(String)/** parse ... */// setEntityResolver(EntityResolver)// getEntityResolver():EntityResolver// setErrorHandler(ErrorHandler)// getErrorHandler():ErrorHandler//REVISIT:this methods is not part of SAX2 interfaces, we should throw exception//if any application uses SAX2 and sets locale also. -nb/** Allow an application to register a DTD event handler. ... */// setDTDHandler(DTDHandler)// Parser methods/** Allow an application to register a document event handler. ... */// setDocumentHandler(DocumentHandler)// XMLReader methods/** Allow an application to register a content event handler. ... */// setContentHandler(ContentHandler)/** Return the current content handler. ... */// getContentHandler():ContentHandler/** Return the current DTD handler. ... */// getDTDHandler():DTDHandler/** Set the state of any feature in a SAX2 parser.  The parser ... */// SAX2 Features// http://xml.org/sax/features/namespaces// http://xml.org/sax/features/namespace-prefixes//   controls the reporting of raw prefixed names and Namespace//   declarations (xmlns* attributes): when this feature is false//   (the default), raw prefixed names may optionally be reported,//   and xmlns* attributes must not be reported.// http://xml.org/sax/features/string-interning//   controls the use of java.lang.String#intern() for strings//   passed to SAX handlers.// http://xml.org/sax/features/lexical-handler/parameter-entities//   controls whether the beginning and end of parameter entities//   will be reported to the LexicalHandler.// http://xml.org/sax/features/resolve-dtd-uris//   controls whether system identifiers will be absolutized relative to//   their base URIs before reporting.// http://xml.org/sax/features/unicode-normalization-checking//   controls whether Unicode normalization checking is performed//   as per Appendix B of the XML 1.1 specification// REVISIT: Allow this feature to be set once Unicode normalization// checking is supported -- mrglavas.// http://xml.org/sax/features/xmlns-uris//   controls whether the parser reports that namespace declaration//   attributes as being in the namespace: http://www.w3.org/2000/xmlns/// http://xml.org/sax/features/use-entity-resolver2//   controls whether the methods of an object implementing//   org.xml.sax.ext.EntityResolver2 will be used by the parser.// Refresh EntityResolver wrapper.// Read only features.// http://xml.org/sax/features/is-standalone//   reports whether the document specified a standalone document declaration.// http://xml.org/sax/features/use-attributes2//   reports whether Attributes objects passed to startElement also implement//   the org.xml.sax.ext.Attributes2 interface.// http://xml.org/sax/features/use-locator2//   reports whether Locator objects passed to setDocumentLocator also implement//   the org.xml.sax.ext.Locator2 interface.// http://xml.org/sax/features/xml-1.1//   reports whether the parser supports both XML 1.1 and XML 1.0.// Default handling/** Query the state of a feature. ... *//* else if (featureId.startsWith(XERCES_FEATURES_PREFIX)) { ... *//** Set the value of any property in a SAX2 parser.  The parser ... */// SAX2 core properties// http://xml.org/sax/properties/lexical-handler// Value type: org.xml.sax.ext.LexicalHandler// Access: read/write, pre-parse only//   Set the lexical event handler.// http://xml.org/sax/properties/declaration-handler// Value type: org.xml.sax.ext.DeclHandler//   Set the DTD declaration event handler.// http://xml.org/sax/properties/dom-node// Value type: DOM Node//   Get the DOM node currently being visited, if the SAX parser is//   iterating over a DOM tree.  If the parser recognises and//   supports this property but is not currently visiting a DOM//   node, it should return null (this is a good way to check for//   availability before the parse begins).// http://xml.org/sax/properties/document-xml-version// Value type: java.lang.String//   The literal string describing the actual XML version of the document./* else if (propertyId.startsWith(XERCES_PROPERTIES_PREFIX)) { ... */// Perform default processing/** Query the value of a property. ... */// we are not iterating a DOM tree// getProperty(String):Object/** Set the DTD declaration event handler. ... */// setDeclHandler(DeclHandler)/** Returns the DTD declaration event handler. ... */// getDeclHandler():DeclHandler/** Set the lexical event handler. ... */// setLexicalHandler(LexicalHandler)/** Returns the lexical handler. ... */// getLexicalHandler():LexicalHandler/** Send startPrefixMapping events *//** Send endPrefixMapping events *//** XML locator. *//** Constructs an XML locator proxy. *//** Line number. *//** Column number. */// Locator2 methods// class LocatorProxy/** XML attributes. *//** Sets the XML attributes. */// setAttributes(XMLAttributes)// REVISIT: this hides the fact that internally we use//          null instead of empty string//          SAX requires URI to be a string or an empty string// Attributes2 methods// REVISIT: Localize exception messages. -- mrglavas// class AttributesProxy// PSVIProvider methods// class AbstractSAXParser/** This is the base class for all XML document parsers. XMLDocumentParser ... *//** Document source *//** DTD source *//** DTD content model source *//** Constructs a document parser using the default symbol table ... */// set handlers/** This method notifies the start of an entity. ... */// startGeneralEntity(String,XMLResourceIdentifier,String,Augmentations)// textDecl(String, String, Augmentations)/** This method notifies the end of an entity. ... */// endGeneralEntity(String,Augmentations)// comment (XMLString, Augmentations)// processingInstruction(String, XMLString, Augmentations)// startContentModel(String, Augmentations)// any(Augmentations)// empty(Augmentations)// stargGroup(Augmentations)// pcdata(Augmentations)// element(String, Augmentations)// separator(short, Augmentations)// occurence(short, Augmentations)// endGroup(Augmentations)// endContentModel(Augmentations)// class AbstractXMLDocumentParser/** A very basic parser configuration. This configuration class can ... */// components (non-configurable)/** The document handler. *//** The DTD handler. *//** The DTD content model handler. *//** Last component in the document pipeline */// create a vector to hold all the components in use/** Adds a component to the parser configuration. This method will ... */// REVISIT: Should this be a property?// forward to every component/** reset all components before parsing and namespace context */// reset every component// special performance feature: no one by component manager is allowed to set it// class BasicParserConfiguration/** A parser pool that enables caching of grammars. The caching parser ... *//** Default shadow symbol table (false). *//** Default shadow grammar pool (false). *//** Symbol table. The symbol table that the caching parser pool is ... *//** Grammar pool. The grammar pool that the caching parser pool is ... *//** Shadow the symbol table for new parser instances. If true, ... *//** Shadow the grammar pool for new parser instances. If true, ... *//** Constructs a caching parser pool with the specified symbol table ... *//** Returns the grammar pool. */// getXMLGrammarPool():XMLGrammarPool// setters and getters/** Sets whether new parser instance receive shadow copies of the ... */// setShadowSymbolTable(boolean)/** Creates a new DOM parser. */// createDOMParser():DOMParser/** Creates a new SAX parser. */// createSAXParser():SAXParser/** Synchronized grammar pool. ... *//** Main grammar pool. *//** Constructs a synchronized grammar pool. */// <init>(XMLGrammarPool)// GrammarPool methods// retrieve the initial set of grammars for the validator// to work with.// REVISIT:  does this need to be synchronized since it's just reading?// @param grammarType type of the grammars to be retrieved.// @return the initial grammar set the validator may place in its "bucket"// retrieveInitialGrammarSet(String):  Grammar[]// retrieve a particular grammar.// @param gDesc description of the grammar to be retrieved// @return Grammar corresponding to gDesc, or null if none exists.// retrieveGrammar(XMLGrammarDesc):  Grammar// give the grammarPool the option of caching these grammars.// This certainly must be synchronized.// @param grammarType The type of the grammars to be cached.// @param grammars the Grammars that may be cached (unordered, Grammars previously//  given to the validator may be included)./** lock the grammar pool *//** clear the grammar pool *//** unlock the grammar pool *//** Puts the specified grammar into the grammar pool. ... *//** **** ... *//** Returns the grammar associated to the specified key. ... *//** ******** ... *//** Removes the grammar associated to the specified key from the ... */// class SynchronizedGrammarPool/** Shadowed grammar pool. ... *//** Constructs a shadowed grammar pool. */// <init>(GrammarPool)/** Retrieve the initial set of grammars for the validator to work with. ... *//** Retrieve a particular grammar. ... *//** Give the grammarPool the option of caching these grammars. ... */// better give both grammars a shot...// cacheGrammars(grammarType, Grammar[]);/** Returns the grammar associated to the specified description. ... */// class ShadowedGrammarPool// class CachingParserPool/** This is the main Xerces DOM parser class. It uses the abstract DOM ... *//** Feature identifier: EntityResolver2. *//** Property identifier: XML grammar pool. *//** Constructs a DOM parser using the specified parser configuration. *//** Constructs a DOM parser using the dtd/xml schema parser configuration. *//** Constructs a DOM parser using the specified symbol table. *//** Constructs a DOM parser using the specified symbol table and ... *//** this is a direct call to this parser, not a subclass since ... *///fall back to the default configuration to handle the property/** Returns this parser's XMLParserConfiguration. */// getXMLParserConfiguration():XMLParserConfiguration// class DOMParser/* Copyright 2000-2005 The Apache Software Foundation. ... *//** This is Xerces DOM Builder class. It uses the abstract DOM ... */// SAX & Xerces feature ids/** Feature id: validation. *//** XML Schema validation *//** XML Schema full checking *//** Dynamic validation *//** Feature identifier: disallow docType Decls. */// internal properties/** Include namespace declaration attributes in the document. * */// REVISIT: this value should be null by default and should be set during creation of//          LSParser/** Constructs a DOM Builder using the standard parser configuration. *///Schema validation is false by default and hence there is no//need to set it to false here.  Also, schema validation is//not a recognized feature for DTDConfiguration's and so//setting this feature here would result in a Configuration//Exception.// XML Schem validation/** Constructs a DOM Builder using the specified parser configuration. */// turn off deferred DOM// Set values so that the value of the// infoset parameter is true (its default value).// true: namespace-declarations, well-formed,// element-content-whitespace, comments, namespaces// false: validate-if-schema, entities,// datatype-normalization, cdata-sections// set other default values// REVISIT: by default Xerces assumes that input is certified.//          default is different from the one specified in the DOM spec// Xerces datatype-normalization feature is on by default// This is a recognized feature only for XML Schemas. If the// configuration doesn't support this feature, ignore it./** Constructs a DOM Builder using the specified symbol table. *//** Constructs a DOM Builder using the specified symbol table and ... */// get state of namespace-declarations parameter.// DOM Filter// DOMParser methods/** When the application provides a filter, the parser will call out to ... *//** Set parameters and properties */// set features// setting those features to false is no-op// Setting false has no effect.// true: namespaces, namespace-declarations,// comments, element-content-whitespace// setting these features to true is no-op// REVISIT: implement "namespace-declaration" feature// Note: validation and dynamic validation are mutually exclusive//XSModel - turn on PSVI augmentation// Constants.DOM_CHARSET_OVERRIDES_XML_ENCODING feature,// Constants.DOM_SPLIT_CDATA feature,// or any Xerces feature// tokenize location string// turn off schema features// map to JAXP schemaLanguage// turn on schema features// Try to set the property.// If this is a boolean parameter a type mismatch should be thrown.// Parameter is not recognized/** Look up the value of a feature or a property. */// REVISIT: This is somewhat expensive to compute// but it's possible that the user has a reference// to the configuration and is changing the values// of these features directly on it.// This could be a recognized feature or property.// This isn't a feature; perhaps it's a property// Recognize Xerces features.// check properties// REVISIT: add Xerces recognized properties/features/** Parse an XML document from a location identified by an URI reference. ... *///If DOMParser insstance is already busy parsing another document when this// method is called, then raise INVALID_STATE_ERR according to DOM L3 LS spec//reset interrupt state// Consume this exception if the user// issued an interrupt or an abort./** Parse an XML document from a resource identified by an ... *//** Parse an XML document or fragment from a resource identified by an ... */// REVISIT: need to implement./** NON-DOM: convert LSInput to XNIInputSource ... */// all inputs are null// If parse operation is in progress then reset it// If not busy then this is noop// namespace declarations parameter has no effect if namespaces is false.// class DOMParserImpl/** This is the DTD-only parser configuration.  It extends the basic ... *//** Property identifier: DTD loader. */// components (configurable)/** DTD Processor . *//** DTD Validator. *//** Namespace binder. *///WARN_ON_DUPLICATE_ATTDEF,     // from XMLDTDScannerImpl//WARN_ON_UNDECLARED_ELEMDEF,   // from XMLDTDScannerImpl//ALLOW_JAVA_ENCODINGS,         // from XMLEntityManager// from XMLDTDScannerImpl//NOTIFY_BUILTIN_REFS,  // from XMLDocumentFragmentScannerImpl//NOTIFY_CHAR_REFS,         // from XMLDocumentFragmentScannerImpl//WARN_ON_DUPLICATE_ENTITYDEF,  // from XMLEntityManager//setFeature(WARN_ON_DUPLICATE_ATTDEF, false);  // from XMLDTDScannerImpl//setFeature(WARN_ON_UNDECLARED_ELEMDEF, false);  // from XMLDTDScannerImpl//setFeature(ALLOW_JAVA_ENCODINGS, false);      // from XMLEntityManager//setFeature(NOTIFY_BUILTIN_REFS, false);   // from XMLDocumentFragmentScannerImpl//setFeature(NOTIFY_CHAR_REFS, false);      // from XMLDocumentFragmentScannerImpl//setFeature(WARN_ON_DUPLICATE_ENTITYDEF, false);   // from XMLEntityManager// configure the pipeline and initialize the components/** Configures the pipeline. */// REVISIT: This should be better designed. In other words, we//          need to figure out what is the best way for people to//          re-use *most* of the standard configuration but do//          things common things such as remove a component (e.g.//          the validator), insert a new component (e.g. XInclude),//          etc... -Ac// filters/** Creates an entity manager. */// createEntityManager():XMLEntityManager/** Creates an error reporter. */// createErrorReporter():XMLErrorReporter/** Create a document scanner. */// createDocumentScanner():XMLDocumentScanner/** Create a DTD scanner. */// createDTDScanner():XMLDTDScanner/** Create a DTD loader . */// createDTDProcessor():XMLDTDProcessor/** Create a DTD validator. */// createDTDValidator():XMLDTDValidator/** Create a namespace binder. */// createNamespaceBinder():XMLNamespaceBinder/** Create a datatype validator factory. */// createDatatypeValidatorFactory():DatatypeValidatorFactory// class DTDConfiguration/** fDTDScanner *//** getDTDGrammar ... */// getDTDGrammar// comment// processingInstruction/** The start of the external subset. ... */// startExternalSubset/** The end of the external subset. ... */// endExternalSubset// elementDecl// startAttlist// attributeDecl// endAttlist// externalEntityDecl// unparsedEntityDecl// notationDecl// startConditional// endConditional// endDTD// startContentModel/** A referenced element in a mixed content model. If the mixed content ... */// mixedElement/** The start of a children group. ... */// childrenStartGroup/** A referenced element in a children content model. ... */// childrenElement/** The separator between choices or sequences of a children content ... */// childrenSeparator/** The occurrence count for a child in a children content model. ... */// childrenOccurrence/** The end of a children group. ... */// childrenEndGroup// endContentModel// class DTDParser/** This is configuration uses a scanner that integrates both scanning of the document ... */// REVISIT: should this configuration depend on the others//          like DTD/Standard one?/** Document scanner that does namespace binding. *//** Default Xerces implementation of scanner *//** DTD Validator that does not bind namespaces */// create components// add components// setup DTD pipeline// If schema validator was not in the pipeline insert it.// add schema component// add schema message formatter/** Create a document scanner: this scanner performs namespace binding *//** Create a DTD validator: this validator performs namespace binding. */// class IntegratedParserConfiguration/** This is the non validating parser configuration. It extends the basic ... *///LOAD_EXTERNAL_DTD,    // from XMLDTDScannerImpl//WARN_ON_DUPLICATE_ENTITYDEF   // from XMLEntityManager//setFeature(WARN_ON_UNDECLARED_ELEMDEF, false);    // from XMLDTDScannerImpl//setFeature(LOAD_EXTERNAL_DTD, true);      // from XMLDTDScannerImpl// this configuration delays creation of the scanner// till it is known if namespace processing should be performed// create appropriate scanner// and register it as one of the components.// class NonValidatingConfiguration/** This is the main Xerces SAX parser class. It uses the abstract SAX ... *//** Constructs a SAX parser using the specified parser configuration. *//** Constructs a SAX parser using the dtd/xml schema parser configuration. *//** Constructs a SAX parser using the specified symbol table. *//** Constructs a SAX parser using the specified symbol table and ... */// class SAXParser/** This configuration allows Xerces to behave in a security-conscious manner; that is, ... */// create the SecurityManager property:// class SecurityConfiguration/** This is the "standard" parser configuration. It extends the DTD ... *//** feature identifier: XML Schema validation -- full checking *//** Feature identifier: validate annotations *//** XML Schema Validator. */// NOTE: These shouldn't really be here but since the XML Schema//       validator is constructed dynamically, its recognized//       features might not have been set and it would cause a//       not-recognized exception to be thrown. -Ac//       properties might not have been set and it would cause a// http://apache.org/xml/features/validation/schema//   Lets the user turn Schema validation support on/off.// activate full schema checking// Feature identifier: expose schema normalized value//  http://apache.org/xml/features/validation/schema/normalized-value// Feature identifier: send element default value via characters()// http://apache.org/xml/features/validation/schema/element-default// class StandardParserConfiguration/** This class is the configuration used to parse XML 1.0 and XML 1.1 documents ... *//** Feature identifier: fixup base URIs. *//** Feature identifier: fixup language. *//** XInclude handler. *//** Non-XInclude NamespaceContext. *//** XInclude NamespaceContext. *//** Current NamespaceContext. *//** Flag indicating whether XInclude processsing is enabled. */// If the XInclude handler was not in the pipeline insert it.// add XInclude component// Setup NamespaceContext//configure DTD pipeline// configure XML document pipeline: insert after DTDValidator and// before XML Schema validator// we don't have to worry about fSchemaValidator being null, since// super.configurePipeline() instantiated it if the feature was set// Otherwise, insert after the last component in the pipeline// configure XML 1.1. DTD pipeline/** This parser configuration includes an <code>XIncludeHandler</code> in the pipeline ... */// <init>(SymbolTable,XMLGrammarPool)}/** <p>An <code>XMLParserConfiguration</code> implements this interface ... *//** This class is the configuration used to parse XML 1.0 and XML 1.1 documents. ... *//** XML 1.0 Components. *//** XML 1.1. Components. *//** Common components: XMLEntityManager, XMLErrorReporter, XMLSchemaValidator *//** The XML 1.0 Document scanner that does namespace binding. *//** The XML 1.0 Non-namespace implementation of scanner *//** The XML 1.0 DTD Validator: binds namespaces *//** The XML 1.0 DTD Validator that does not bind namespaces *//** The XML 1.0 DTD Processor . *//** The XML 1.1 datatype factory. * *//** The XML 1.1 document scanner that does namespace binding. * *//** The XML 1.1 document scanner that does not do namespace binding. * *//** The XML 1.1 DTD validator that does namespace binding. * *//** The XML 1.1 DTD validator that does not do namespace binding. * *//** The XML 1.1 DTD processor. * */// Common components// XML 1.0 specialized components// XML 1.1 specialized components// Common components for XML 1.1. and XML 1.0// forward it to common components// forward it to every common Component// forward it to every XML 1.1 component// ignore it/** reset all XML 1.0 components before parsing and namespace context *//** reset all common components before parsing */// reset common components// resetCommon()/** Configures the XML 1.1 pipeline. ... */// setup XML 1.1 document pipeline// non namespace document pipeline// add XML Schema validator if needed// special performance feature: only component manager is allowed to set it./** Adds common component to the parser configuration. This method will ... */// addCommonComponent(XMLComponent)/** Adds an XML 1.1 component to the parser configuration. This method will ... */// addXML11Component(XMLComponent)/** Returns the state of a feature. This method calls getFeature() ... */// class XML11Configuration/** This class is the DTD-only parser configuration ... *//** Common components: XMLEntityManager, XMLErrorReporter */// class XML11DTDConfiguration/** This class is the non vlaidating parser configuration ... */// class XML11NonValidatingConfiguration/** This is a concrete vanilla XML parser class. It uses the abstract parser ... *//** Constructs a document parser using the default basic parser ... *//** Constructs a document parser using the specified parser configuration. */// <init>(ParserConfiguration)/** Constructs a document parser using the specified symbol table. *//** Constructs a document parser using the specified symbol table and ... */// class XMLDocumentParser/** <p> This configuration provides a generic way of using ... */// a larg(ish) prime to use for a symbol table to be shared// among// potentially man parsers.  Start one as close to 2K (20// times larger than normal) and see what happens...// the static symbol table to be shared amongst parsers// the Grammar Pool to be shared similarly// schema full checking constant// variables needed for caching schema grammars.// the DTD grammar loader// REVISIT:  may need to add some features/properties// specific to this configuration at some point...// create and register missing components// and set up the DTD loader too:// <init>(SymbolTable,XMLGrammarPool, XMLComponentManager)/* lock the XMLGrammarPoolImpl object so that it does not ... */// lockGrammarPool()/* clear the XMLGrammarPoolImpl object so that it does not ... */// clearGrammarPool()/* unlock the XMLGrammarPoolImpl object so that it ... */// unlockGrammarPool()/** Parse a grammar from a location identified by an URI. ... *//** Parse a grammar from a location identified by an ... */// by default, make all XMLGrammarPoolImpl's schema grammars available to fSchemaHandler// don't know this grammar...// parseGrammar(String, XMLInputSource):  Grammar// package-protected methods/* This method parses an XML Schema document. ... */// Should check whether the grammar with this namespace is already in// the grammar resolver. But since we don't know the target namespace// of the document here, we leave such check to XSDHandler// by default, hand it off to the grammar pool// parseXMLSchema(XMLInputSource) :  SchemaGrammar/* This method parses an external DTD entity. */// of the document here, we leave such check to the application...// parseXMLDTD(XMLInputSource) :  DTDGrammar// class XMLGrammarCachingConfiguration/** fDatatypeValidatorFactory *//** Construct an XMLGrammarParser with the specified symbol table ... */// class XMLGrammarParser/** <p> This class provides an easy way for a user to preparse grammars ... */// feature:  continue-after-fatal-error/** Property identifier: grammar pool . */// the "built-in" grammar loaders// Map holding our loaders/** Constructs a preparser using the specified symbol table. ... */// those are all the basic properties.../* Register a type of grammar to make it preparsable.   If ... */// none specified!// got one; just instantiate it...// were given one// registerPreparser(String, XMLGrammarLoader):  boolean// make sure gl's been set up with all the "basic" properties:// potentially, not all will support this one...// too bad...// preparseGrammar(String, XMLInputSource):  Grammar/** Sets the grammar pool. ... */// setGrammarPool(XMLGrammarPool)/** Returns the registered grammar pool. */// getGrammarPool():  XMLGrammarPool// it's possible the application may want access to a certain loader to do// some custom work.// getLoader(String):  XMLGrammarLoader// set a feature.  This method tries to set it on all// registered loaders; it eats any resulting exceptions.  If// an app needs to know if a particular feature is supported// by a grammar loader of a particular type, it will have// to retrieve that loader and use the loader's setFeature method.// eat it up...// since our error reporter is a property we set later,// make sure features it understands are also set.//setFeature(String, boolean)// set a property.  This method tries to set it on all// an app needs to know if a particular property is supported// to retrieve that loader and use the loader's setProperty method.// <p> <strong>An application should use the explicit method// in this class to set "standard" properties like error handler etc.</strong>//setProperty(String, Object)// get status of feature in a particular loader.  This// catches no exceptions--including NPE's--so the application had// better make sure the loader exists and knows about this feature.// @param type type of grammar to look for the feature in.// @param featureId the feature string to query.// @return the value of the feature.// getFeature (String, String):  boolean// get status of property in a particular loader.  This// better make sure the loader exists and knows about this property.// <strong>For standard properties--that will be supported// by all loaders--the specific methods should be queried!</strong>// @param type type of grammar to look for the property in.// @param propertyId the property string to query.// @return the value of the property.// getProperty(String, String):  Object// class XMLGrammarPreparser/** Base class of all XML-related parsers. ... *//** The parser configuration. *//** The XML Security Manager. *//** The XML Security Property Manager. *//** Query the state of a feature. */// save configuration// null indicates that the parser is called directly, initialize them// parse(XMLInputSource)/** This parser configuration includes an <code>XPointerHandler</code> in the pipeline ... *///if (propertyId.equals(XINCLUDE_HANDLER)) {/** Wraps {@link XMLAttributes} and makes it look like ... *//** Sets the XML attributes to be wrapped. *//* Attributes methods */// This hides the fact that internally we use null instead of empty string// SAX requires the URI to be a string or an empty string/* Attributes2 methods *//* AttributeList methods *//** This class provides an implementation for Augmentations interface. ... *//** Add additional information identified by a key to the Augmentations structure. ... *//** Get information identified by a key from the Augmentations structure ... *//** Remove additional info from the Augmentations structure ... *//** Returns an enumeration of the keys in the Augmentations structure *//** Remove all objects from the Augmentations structure. *//** This class wraps DOM entity resolver to XNI entity resolver. ... *//** XML 1.0 type constant according to DOM L3 LS CR spec "http://www.w3.org/TR/2003/CR-DOM-Level-3-LS-20031107" *//** XML Schema constant according to DOM L3 LS CR spec "http://www.w3.org/TR/2003/CR-DOM-Level-3-LS-20031107" */// LSResourceResolver// XMLEntityResolver methods/** Resolves an external parsed entity. If the entity cannot be ... */// resolve entity using DOM entity resolver// For entity resolution the type of the resource would be  XML TYPE// DOM L3 LS spec mention only the XML 1.0 recommendation right now// unable to resolve entity// resolveEntity(String,String,String):XMLInputSource/** Determines the type of resource being resolved * */// getType(XMLResourceIdentifier):String// DOMEntityResolverWrapper/** This class handles DOM errors . ... */// REVISIT: current implementations wraps error several times://          XMLErrorReport.reportError creates XMLParserException (by wrapping all info)//          and goes via switch to send errors.//          DOMErrorHandlerWrapper catches calls, copies info from XMLParserException and//          sends one call back to the application//          I think we can avoid this indirection if we modify XMLErrorReporter. --el// It keeps the reference of DOMErrorHandler of application// Error Status// Print writer// some components may set error node// @see DOMNormalizer./** Error code for comparisons. * */// Default constructor /// DOMErrorHandlerWrapper(DOMErrorHandler domErrorHandler)/** Sets the DOM error handler. *///getErrorHandler()// XMLErrorHandler methods/** Reports a warning. Warnings are non-fatal and can be safely ignored ... */// REVISIT: May need to lookup from DOMErrorTypeMap in the future.// warning(String,String,XMLParseException)/** Reports an error. Errors are non-fatal and usually signify that the ... */// error(String,String,XMLParseException)/** Report a fatal error. Fatal errors usually occur when the document ... */// fatalError(String,String,XMLParseException)/** Prints the error message. *///REVISIT: Abort processing if fatal error, do we need to??// printError(DOMError)/** A convenience class for converting between internal ... *//** Map for converting internal error codes to DOM error types. * */// initialize error type table: internal error codes (represented by domain and key) need to be mapped to a DOM error type.// REVISIT: do well-formedness issues involving XML declaration <?xml ... ?> need to be added to hash table (no XML declaration node in DOM, but Document includes xmlEncoding, xmlStandalone, xmlVersion, etc.// e.g. in Processing Instruction// InvalidCharInXMLDecl omitted because XML declaration is not a DOM Node// considered error in name of node (which follows !DOCTYPE)// considered error in name of node (which follows !ENTITY)// considered error in name of node (which follows !ENTITY %)// considered error in name of node// considered error in name of node, which follows !NOTATION// REVISIT: do EntityNotDeclared, RecursiveReference, RecursiveGeneralReference, RecursivePEReference belong here?// class DOMErrorHandlerWrapper/** <p>An <code>XMLInputSource</code> analogue to <code>javax.xml.transform.dom.DOMSource</code>.</p> */// If the DOM implementation is DOM Level 2// then a NoSuchMethodError will be thrown.// Just ignore it.// There was a failure for some other reason// Ignore it as well./** Some useful utility methods. ... *//** Copies the source tree into the specified place in a destination ... */// get node factory// placement variables// traverse source tree// copy this node// iterate over children// advance// copyInto(Node,Node)/** Finds and returns the first child element node. */// search for node// getFirstChildElement(Node):Element/** Finds and returns the first visible child element node. *//** Finds and returns the last child element node. ... */// getLastChildElement(Node):Element/** Finds and returns the last visible child element node. *//** Finds and returns the last visible child element node. ... *//** Finds and returns the next sibling element node. */// getNextSiblingElement(Node):Element// get next visible (un-hidden) node.// getNextSiblingdElement(Node):Element// get next visible (un-hidden) node, overload previous method for non Xerces node impl// set this Node as being hidden// setHidden(node):void// set this Node as being hidden, overloaded method// set this Node as being visible// setVisible(node):void// set this Node as being visible, overloaded method// is this node hidden?// isHidden(Node):boolean// is this node hidden? overloaded method/** Finds and returns the first child node with the given name. */// getFirstChildElement(Node,String):Element/** Finds and returns the last child node with the given name. */// getLastChildElement(Node,String):Element/** Finds and returns the next sibling node with the given name. */// getNextSiblingdElement(Node,String):Element/** Finds and returns the first child node with the given qualified name. */// getFirstChildElementNS(Node,String,String):Element/** Finds and returns the last child node with the given qualified name. */// getLastChildElementNS(Node,String,String):Element/** Finds and returns the next sibling node with the given qualified name. */// getNextSiblingdElementNS(Node,String,String):Element// getFirstChildElement(Node,String[]):Element// getLastChildElement(Node,String[]):Element// getNextSiblingdElement(Node,String[]):Element// getFirstChildElementNS(Node,String[][]):Element// getLastChildElementNS(Node,String[][]):Element// getNextSiblingdElementNS(Node,String[][]):Element/** Finds and returns the first child node with the given name and ... */// getFirstChildElement(Node,String,String,String):Element/** Finds and returns the last child node with the given name and ... */// getLastChildElement(Node,String,String,String):Element/** Finds and returns the next sibling node with the given name and ... */// getNextSiblingElement(Node,String,String,String):Element/** Returns the concatenated child text of the specified node. ... */// concatenate children text// return text value// getChildText(Node):String// return the name of this element// getLocalName(Element):  String/** returns local name of this element if not null, otherwise ... */// getParent(Element):Element// get the Document of which this Node is a part// getDocument(Node):Document// return this Document's root node// getRoot(Document(:  Element// some methods for handling attributes:// return the right attribute node// getAttr(Element, String):Attr// getAttrNS(Element, String):Attr// get all the attributes for an Element// getAttrs(Element):  Attr[]// get attribute's value// getValue(Attr):String// It is noteworthy that, because of the way the DOM specs// work, the next two methods return the empty string (not// null!) when the attribute with the specified name does not// exist on an element.  Beware!// return the value of the attribute of the given element// with the given name// getAttrValueNS(Element, String):Attr// return the prefix// return the namespace URI// return annotation// return synthetic annotation/** Creates a DOMException. On J2SE 1.4 and above the cause for the exception will be set. */// Something went wrong. There's not much we can do about it./** Creates an LSException. On J2SE 1.4 and above the cause for the exception will be set. *//** Holder of methods from java.lang.Throwable. */// Method: java.lang.Throwable.initCause(java.lang.Throwable)// Flag indicating whether or not Throwable methods available.// Attempt to get methods for java.lang.Throwable on class initialization.// ClassNotFoundException, NoSuchMethodException or SecurityException// Whatever the case, we cannot use java.lang.Throwable.initCause(java.lang.Throwable).// class DOMUtil/** <p>Used to format JAXP 1.3 Datatype API error messages using a specified locale.</p> ... *//** Default error handler. ... *//** Print writer. *//** Constructs an error handler that prints error messages to ... *//** Constructs an error handler that prints error messages to the ... */// <init>(PrintWriter)// ErrorHandler methods/** Warning. */// warning(XMLParseException)/** Error. */// error(XMLParseException)/** Fatal error. */// fatalError(XMLParseException)// printError(String,SAXParseException)// class DefaultErrorHandler/** Use this singleton instance. *//** EncodingMap is a convenience class which handles conversions between ... *//** fIANA2JavaMap *//** fJava2IANAMap */// add IANA to Java encoding mappings.// is this an error???// Add support for Cp1252 and its friends// added since this encoding only differs w.r.t. presentation// support for 1047, as proposed to be added to the// IANA registry in// http://lists.w3.org/Archives/Public/ietf-charset/2002JulSep/0049.html// Adding new aliases as proposed in// http://lists.w3.org/Archives/Public/ietf-charset/2002JulSep/0058.html//   j:CNS11643 -> EUC-TW?//   ISO-2022-CN? ISO-2022-CN-EXT?// add Java to IANA encoding mappings//aJava2IANAMap.put("8859_1",    "US-ASCII"); // ?// proposed addition (see above for details):// <clinit>()/** Returns the Java encoding name for the specified IANA encoding name. ... */// getIANA2JavaMapping(String):String/** Returns the IANA encoding name for the specified Java encoding name. ... */// getJava2IANAMapping(String):String// class EncodingMap/** <p>This class wraps a SAX entity resolver (EntityResolver2) in an XNI entity resolver.</p> ... *//** An instance of SAX2 Extensions 1.1's EntityResolver2. *//** <p>Creates a new instance wrapping the given SAX entity resolver.</p> ... */// <init>(EntityResolver2)/** <p>Sets the SAX entity resolver wrapped by this object.</p> ... */// setEntityResolver(EntityResolver2)/** <p>Returns the SAX entity resolver wrapped by this object.</p> ... */// getEntityResolver():EntityResolver2// Resolve using EntityResolver2// error resolving external subset// unable to resolve external subset// getExternalSubset(XMLDTDDescription):XMLInputSource// When both pubId and sysId are null, the user's entity resolver// can do nothing about it. We'd better not bother calling it.// This happens when the resourceIdentifier is a GrammarDescription,// which describes a schema grammar of some namespace, but without// any schema location hint. -Sg// error resolving entity/** Creates an XMLInputSource from a SAX InputSource. */// createXMLInputSource(InputSource,String):XMLInputSource// class EntityResolver2Wrapper/** This class wraps a SAX entity resolver in an XNI entity resolver. ... *//** The SAX entity resolver. *//** Wraps the specified SAX entity resolver. */// <init>(EntityResolver)/** Sets the SAX entity resolver. *//** Returns the SAX entity resolver. */// resolve entity using SAX entity resolver/** Wraps {@link XMLErrorHandler} and make it look like a SAX {@link ErrorHandler}. ... */// if an XNIException is thrown, just let it go.// REVISIT: is this OK? or should we try to wrap it into SAXException?/** This class wraps a SAX error handler in an XNI error handler. ... *//** The SAX error handler. *//** Wraps the specified SAX error handler. */// <init>(ErrorHandler)/** Sets the SAX error handler. *//** Returns the SAX error handler. *//** Creates a SAXParseException from an XMLParseException. */// createSAXParseException(XMLParseException):SAXParseException/** Creates an XMLParseException from a SAXParseException. */// createXMLParseException(SAXParseException):XMLParseException/** Creates an XNIException from a SAXException. ... */// createXNIException(SAXException):XMLParseException// class ErrorHandlerWrapper/* $Id: FeatureState.java 3024 2011-03-01 03:46:13Z joehw $ *//** This class represents an input source for an XML resource ... *//** Preference for whether HTTP redirects should be followed. * *//** HTTP request properties. * *//** Constructs an input source from a XMLResourceIdentifier ... */// <init>(XMLResourceIdentifier)// <init>(String,String,String,InputStream,String)// <init>(String,String,String,Reader,String)/** Returns the preference whether HTTP redirects should ... */// getFollowHTTPRedirects():boolean/** Sets the preference whether HTTP redirects should ... */// setFollowHTTPRedirects(boolean)/** Returns the value of the request property ... */// getHTTPRequestProperty(String):String/** Returns an iterator for the request properties this ... */// getHTTPRequestProperties():Iterator/** Sets the value of the request property ... */// setHTTPRequestProperty(String,String)// class HTTPInputSource/** A simple integer based stack. ... *//** Peeks at the top of the stack. *//** Returns the element at the specified depth in the stack. *//** Prints the stack. */// class IntStack/** <p>A read-only XNI wrapper around a JAXP NamespaceContext.</p> ... *//* NamespaceContext methods */// There may be duplicate prefixes in the list so we// first transfer them to a set to ensure uniqueness.// extend the array, if necessary// JAXPNamespaceContextWrapper/** Wraps {@link XMLLocator} and make it look like a SAX {@link Locator}. ... *//** Wraps SAX {@link Locator} into Xerces {@link XMLLocator}. ... *//** <p>Returns the character offset, ... *//** <p>Returns the XML version of the current entity.</p> ... *//** This interface provides a generic message formatting mechanism and ... */// interface MessageFormatter/** Writing a wrapper to re-use most of the namespace functionality ... *//** TODO: Namespace doesn't give information giving multiple prefixes for ... *//** This method supports all functions in the NamespaceContext utility class *//** Namespace support for XML document handlers. This class doesn't ... *//** The top of the namespace information array. */// NOTE: The constructor depends on the initial context size//       being at least 1. -Ac/** Context indexes. This array contains indexes into the namespace ... *//** The current context. *//** Constructs a namespace context object and initializes it with ... */// copy declaration in the context// <init>(NamespaceContext)// reset namespace and context info// bind "xml" prefix to the XML uri// bind "xmlns" prefix to the XMLNS uri//++fCurrentContext;// reset(SymbolTable)//System.out.println("calling push context, current context = " + fCurrentContext);//System.out.println("Calling popContext, fCurrentContext = " + fCurrentContext);// ignore "xml" and "xmlns" prefixes// see if prefix already exists in current context// REVISIT: [Q] Should the new binding override the//          previously declared binding or should it//          it be ignored? -Ac// NOTE:    The SAX2 "NamespaceSupport" helper allows//          re-bindings with the new binding overwriting//          the previous binding. -Ac// declarePrefix(String,String):boolean// find prefix in current context// getURI(String):String// find uri in current context// uri not found// getPrefix(String):String// getDeclaredPrefixCount():int// getDeclaredPrefixAt(int):String// resize prefix array//getPrefixes/* non-NamespaceContext methods *//** Checks whether a binding or unbinding for ... */// find prefix in context/** Constructor for Prefixes. *//** This class implements the basic operations for managing parser ... *//** Properties. *//** Features. *//** Parent parser configuration settings. *//** Constructs a parser configuration settings object with a ... */// create storage for recognized features and properties// save parent// <init>(XMLComponentManager)/** Allows a parser to add parser specific features to be recognized ... */// addRecognizedFeatures(String[])// check and store/** Allows a parser to add parser specific properties to be recognized ... */// addRecognizedProperties(String[])// XMLComponentManager methods/** Check a feature. If feature is known and supported, this method simply ... */// check feature// TODO: reasonable default?// class ParserConfigurationSettings/** Fills an array with a random sequence of prime numbers. *//* $Id: PropertyState.java 3024 2011-03-01 03:46:13Z joehw $ *//** Receves SAX {@link ContentHandler} events ... */// ContentHandler implementation// some SAX source doesn't provide a locator,// in which case we assume no line information is available// and use a dummy locator. With this, downstream components// can always assume that they will get a non-null Locator./** Creates a QName object. */// if naemspace processing is turned off, local could be "".// in that case, treat everything to be in the no namespace.// XNI uses null whereas SAX uses the empty string/** Symbolizes the specified string. */// with my patch// return new XMLString(str);// for now/** only one instance of XMLAttributes is used. *//** Creates an XMLAttributes object. *//** <p>An <code>XMLInputSource</code> analogue to <code>javax.xml.transform.sax.SAXSource</code>.</p> *//** Sets the public identifier. ... *//** Sets the system identifier. ... *//** Sets the byte stream. If the byte stream is not already opened ... */// setByteStream(InputStream)/** Sets the character stream. If the character stream is not already ... */// setCharacterStream(Reader)/** Sets the encoding of the stream. ... *//** <p>A light wrapper around a SAX locator. This is useful ... *//* XMLLocator methods */// SAXLocatorWrapper/** Used to format SAX error messages using a specified locale. ... *//** This class is a container for parser settings that relate to ... */// default value for entity expansion limit/** Default value of number of nodes created. * *//** Entity expansion limit. * *//** W3C XML Schema maxOccurs limit. * */// default constructor.  Establishes default values for// all known security holes./** Default constructor.  Establishes default values ... *///We are reading system properties only once ,//at the time of creation of this object ,/** <p>Sets the number of entity expansions that the ... *//** <p>Returns the number of entity expansions ... *//** <p>Sets the limit of the number of content model nodes ... *//** <p>Returns the limit of the number of content model nodes ... */// class SecurityManager/** Shadowed symbol table. ... *//** Main symbol table. *//** Constructs a shadow of the specified symbol table. */// SymbolTable methods/** Adds the specified symbol to the symbol table and returns a ... */// addSymbol(String)// addSymbol(char[],int,int):String/** Returns a hashcode value for the specified symbol. The value ... */// hash(String):int/** Returns a hashcode value for the specified symbol information. ... */// hash(char[],int,int):int// class ShadowedSymbolTable/** <p>An <code>XMLInputSource</code> analogue to <code>javax.xml.transform.stax.StAXSource</code>.</p> ... *//** <p>A light wrapper around a StAX location. This is useful ... */// StAXLocationWrapper/* $Id: Status.java 3024 2011-03-01 03:46:13Z joehw $ *//** This class is an unsynchronized hash table primary used for String ... *//** Default table size. *//** Maximum hash collisions per bucket. *//** Actual table size * *//** Buckets. *//** Number of elements. *//** Array of randomly selected hash function multipliers or <code>null</code> ... *//** Constructs a key table with the default size. *//** Constructs a key table with a given size. ... *//** Adds the key/value mapping to the key table. If the key already exists, ... */// search for identical key// replace old value// Rehash the table if the number of entries// would exceed the number of buckets.// Select a new hash function and rehash the table if// MAX_HASH_COLLISIONS is exceeded.// create new entry/** Get the value associated with the given key. ... *//** Get the number of key/value pairs stored in this table. ... *//** Add all values to the given array. The array must have enough entry. ... *//** Return key/value pairs of all entries in the map *//** Make a clone of this object. *//** Remove all key/value association. This tries to save a bit of GC'ing ... */// clear():  void/** Returns a hashcode value for the specified key. ... */// hash(Object):int// hash0(String):int/** Increases the capacity of and internally reorganizes this ... *//** Randomly selects a new hash function and reorganizes this SymbolHash ... *//** This class is a key table entry. Each entry acts as a node ... */// key/value/** The next entry. */// entry// class SymbolHash/** This class is a symbol table implementation that guarantees that ... *//** Maximum hash collisions per bucket for a table with load factor == 1. *//** actual table size *//** The table is rehashed when its size exceeds this threshold.  (The ... *//** The load factor for the SymbolTable. *//** A new hash function is selected and the table is rehashed when ... *//** Constructs a new, empty SymbolTable with the specified initial ... *//** Constructs a new, empty SymbolTable with the specified initial capacity ... *//** Constructs a new, empty SymbolTable with a default initial capacity (101) ... */// search for identical symbol// addSymbol(String):String// the collision threshold is exceeded.// addSymbol0(String,int,int):String// add new entry// addSymbol0(char[],int,int,int,int):String// hash0(char[],int,int):int/** Randomly selects a new hash function and reorganizes this SymbolTable ... *//** Returns true if the symbol table already contains the specified ... */// containsSymbol(String):boolean// containsSymbol(char[],int,int):boolean/** This class is a symbol table entry. Each entry acts as a node ... *//** Symbol characters. This information is duplicated here for ... *//** Constructs a new entry from the specified symbol and next entry ... *//** Constructs a new entry from the specified symbol information and ... */// class SymbolTable/** Synchronized symbol table. ... *//** Constructs a synchronized symbol table. */// construct synchronized symbol table of default size// construct synchronized symbol table of given size// init(int)// class SynchronizedSymbolTable// XMLDocumentHandler implementation/** ***************************************************************** ... *//** **************************************************************** ... *//** *************************************************************** ... *//** Character Classes *//** reserved characters ;/?:@&=+$,[] *///RFC 2732 added '[' and ']' as reserved characters/** URI punctuation mark characters: -_.!~*'() - these, combined with ... *//** scheme can be composed of alphanumerics and these characters: +-. *//** userinfo can be composed of unreserved, escaped and these ... *//** ASCII letter characters *//** ASCII digit characters *//** ASCII hex characters *//** Path characters *//** Mask for alpha-numeric characters *//** Mask for unreserved characters *//** Mask for URI allowable characters except for % *//** Mask for scheme characters *//** Mask for userinfo characters *//** Mask for path characters */// Add ASCII Digits and ASCII Hex Numbers// Add ASCII Letters and ASCII Hex Numbers// Add ASCII Letters// Add Reserved Characters// Add Mark Characters// Add Scheme Characters// Add Userinfo Characters// Add Path Characters/** Stores the scheme (usually the protocol) for this URI. *//** If specified, stores the userinfo for this URI; otherwise null *//** If specified, stores the host for this URI; otherwise null *//** If specified, stores the port for this URI; otherwise -1 *//** If specified, stores the registry based authority for this URI; otherwise -1 *//** If specified, stores the path for this URI; otherwise null *//** If specified, stores the query string for this URI; otherwise ... *//** If specified, stores the fragment for this URI; otherwise null *//** Construct a new and uninitialized URI. *//** Construct a new URI from another URI. All fields for this URI are ... *//** Construct a new URI from a URI specification string. If the ... *//** Construct a new URI from a base URI and a URI specification string. ... *//** Construct a new URI that does not follow the generic URI syntax. ... *//** Construct a new URI that follows the generic URI syntax from its ... *//** Initialize all fields of this URI from another URI. ... *//** Initializes this URI from a base URI and a URI specification string. ... */// just make a copy of the base if spec is empty// Check for scheme, which must be before '/', '?' or '#'.// search backwards starting from character before ':'.// A standalone base is a valid URI according to spec// Neither 'scheme:' or 'scheme:#fragment' are valid URIs.// Two slashes means we may have authority, but definitely means we're either// matching net_path or abs_path. These two productions are ambiguous in that// every net_path (except those containing an IPv6Reference) is an abs_path.// RFC 2396 resolves this ambiguity by applying a greedy left most matching rule.// Try matching net_path first, and if that fails we don't have authority so// then attempt to match abs_path.// net_path = "//" authority [ abs_path ]// abs_path = "/"  path_segments// Authority will be everything up to path, query or fragment// Attempt to parse authority. If the section is an empty string// this is a valid server based authority, so set the host to this// If we didn't find authority we need to back up. Attempt to// match against abs_path next.// Resolve relative URI to base URI - see RFC 2396 Section 5.2// In some cases, it might make more sense to throw an exception// (when scheme is specified is the string spec and the base URI// is also specified, for example), but we're just following the// RFC specifications//Same as java.net.URI:// DEVIATION: Allow empty authority prior to non-empty// path, query component or fragment identifier/** Absolutize URI with given base URI. ... */// check to see if this is the current doc - RFC 2396 5.2 #2// note that this is slightly different from the RFC spec in that// we don't include the check for query string being null// - this handles cases where the urispec is just a query// string or a fragment (e.g. "?y" or "#s") -// see <http://www.ics.uci.edu/~fielding/url/test1.html> which// identified this as a bug in the RFC// check for scheme - RFC 2396 5.2 #3// if we found a scheme, it means absolute URI, so we're done// check for authority - RFC 2396 5.2 #4// if we found a host, then we've got a network path, so we're done// check for absolute path - RFC 2396 5.2 #5// if we get to this point, we need to resolve relative path// RFC 2396 5.2 #6// 6a - get all but the last segment of the base URI path// 6b - append the relative URI path// 6c - remove all "./" where "." is a complete path segment// 6d - remove "." if path ends with "." as a complete path segment// 6e - remove all "<segment>/../" where "<segment>" is a complete// path segment not equal to ".."// 6f - remove ending "<segment>/.." where "<segment>" is a// complete path segment/** Initialize the scheme for this URI from a URI string spec. ... *//** Initialize the authority (either server or registry based) ... */// userinfo is everything up to @// host is everything up to last ':', or up to// and including ']' if followed by ':'.// port// REVISIT: Remove this code./** for (int i = 0; i < portStr.length(); i++) { ... */// Store port value as string instead of integer.// Note: Registry based authority is being removed from a// new spec for URI which would obsolete RFC 2396. If the// spec is added to XML errata, processing of reg_name// needs to be removed. - mrglavas./** Determines whether the components host, port, and user info ... */// Check if the host is well formed.// Check that port is well formed if it exists.// REVISIT: There's no restriction on port value ranges, but// perform the same check as in setPort to be consistent. Pass// in a string to this method instead of an integer.// Check that userinfo is well formed if it exists.// Userinfo can contain alphanumerics, mark characters, escaped// and ';',':','&','=','+','$',','/** Determines whether the given string is a registry based authority. ... */// check for valid escape sequence// can check against path characters because the set// is the same except for '/' which we've already excluded./** Initialize the path for this URI from a URI string spec. ... */// path - everything up to query string or fragment// RFC 2732 only allows '[' and ']' to appear in the opaque part.// Scan path.// rel_path = rel_segment [ abs_path ]// Path segments cannot contain '[' or ']' since pchar// production was not changed by RFC 2732.// Scan opaque part.// opaque_part = uric_no_slash *uric// If the scheme specific part is opaque, it can contain '['// and ']'. uric_no_slash wasn't modified by RFC 2732, which// I've interpreted as an error in the spec, since the// production should be equivalent to (uric - '/'), and uric// contains '[' and ']'. - mrglavas// query - starts with ? and up to fragment or end// fragment - starts with #/** Get the scheme for this URI. ... *//** Get the scheme-specific part for this URI (everything following the ... */// Server based authority.// Registry based authority./** Get the userinfo for this URI. ... *//** Get the host for this URI. ... *//** Get the port for this URI. ... *//** Get the registry based authority for this URI. ... *//** Get the authority for this URI. ... *//** Get the path for this URI (optionally with the query string and ... *//** Get the path for this URI. Note that the value returned is the path ... *//** Get the query string for this URI. ... *//** Get the fragment for this URI. ... *//** Set the scheme for this URI. The scheme is converted to lowercase ... *//** Set the userinfo for this URI. If a non-null value is passed in and ... */// userinfo can contain alphanumerics, mark characters, escaped/** <p>Set the host for this URI. If null is passed in, the userinfo ... *//** Set the port for this URI. -1 is used to indicate that the port is ... *//** <p>Sets the registry based authority for this URI.</p> ... */// reg_name = 1*( unreserved | escaped | "$" | "," |//            ";" | ":" | "@" | "&" | "=" | "+" )/** Set the path for this URI. If the supplied path is null, then the ... *//** Append to the end of the path of this URI. If the current path does ... *//** Set the query string for this URI. A non-null value is valid only ... *//** Set the fragment for this URI. A non-null value is valid only ... *//** Determines if the passed-in Object is equivalent to this URI. ... *//** Get the URI as a string specification. See RFC 2396 Section 5.2. ... *//** Get the indicator as to whether this URI uses the "generic URI" ... */// presence of the host (whether valid or empty) means// double-slashes which means generic uri/** Returns whether this URI represents an absolute URI. ... */// presence of the scheme means absolute uri/** Determine whether a scheme conforms to the rules for a scheme name. ... *//** Determine whether a string is syntactically capable of representing ... */// Check if the host is a valid IPv6reference.// Cannot start with a '.', '-', or end with a '-'.// rightmost domain label starting with digit indicates IP address// since top level domain label can only start with an alpha// see RFC 2396 Section 3.2.2// hostname      = *( domainlabel "." ) toplabel [ "." ]// domainlabel   = alphanum | alphanum *( alphanum | "-" ) alphanum// toplabel      = alpha | alpha *( alphanum | "-" ) alphanum// RFC 2396 states that hostnames take the form described in// RFC 1034 (Section 3) and RFC 1123 (Section 2.1). According// to RFC 1034, hostnames are limited to 255 characters.// domain labels can contain alphanumerics and '-"// but must start and end with an alphanumeric// RFC 1034: Labels must be 63 characters or less./** <p>Determines whether a string is an IPv4 address as defined by ... */// make sure that 1) we see only digits and dot separators, 2) that// any dot separator is preceded and followed by a digit and// 3) that we find 3 dots// RFC 2732 amended RFC 2396 by replacing the definition// of IPv4address with the one defined by RFC 2373. - mrglavas// IPv4address = 1*3DIGIT "." 1*3DIGIT "." 1*3DIGIT "." 1*3DIGIT// One to three digits must be in each segment.// Check that that there are no more than three digits// in this segment.// Check that this segment is not greater than 255./** <p>Determines whether a string is an IPv6 reference as defined ... */// Check if string is a potential match for IPv6reference.// Counter for the number of 16-bit sections read in the address.// Scan hex sequence before possible '::' or IPv4 address.// Address must contain 128-bits of information.// '::' represents at least one 16-bit group of zeros.// Trailing zeros will fill out the rest of the address.// If the second character wasn't ':', in order to be valid,// the remainder of the string must match IPv4Address,// and we must have read exactly 6 16-bit groups.// 3. Scan hex sequence after '::'.// We've either reached the end of the string, the address ends in// an IPv4 address, or it is invalid. scanHexSequence has already// made sure that we have the right number of bits./** Helper method for isWellFormedIPv6Reference which scans the ... */// Trying to match the following productions:// hexseq = hex4 *( ":" hex4)// hex4   = 1*4HEXDIG// IPv6 addresses are 128-bit, so there can be at most eight sections.// This could be '::'.// This might be invalid or an IPv4address. If it's potentially an IPv4address,// backup to just after the last valid character that matches hexseq.// There can be at most 4 hex digits per group./** Determine whether a char is a digit. ... *//** Determine whether a character is a hexadecimal character. ... *//** Determine whether a char is an alphabetic character: a-z or A-Z ... *//** Determine whether a char is an alphanumeric: 0-9, a-z or A-Z ... *//** Determine whether a character is a reserved character: ... *//** Determine whether a char is an unreserved character. ... *//** Determine whether a char is a URI character (reserved or ... *//** Determine whether a char is a scheme character. ... *//** Determine whether a char is a userinfo character. ... *//** Determine whether a char is a path character. ... *//** Determine whether a given string contains only URI characters (also ... *//** This class defines the basic properties of characters in XML 1.1. The data ... *//** Character flags for XML 1.1. *//** XML 1.1 Valid character mask. *//** XML 1.1 Space character mask. *//** XML 1.1 Name start character mask. *//** XML 1.1 Name character mask. *//** XML 1.1 control character mask *//** XML 1.1 content for external entities (valid - "special" chars - control chars) *//** XML namespaces 1.1 NCNameStart *//** XML namespaces 1.1 NCName *//** XML 1.1 content for internal entities (valid - "special" chars) */// Initializing the Character Flag Array// Code generated by: XML11CharGenerator.// Fill 8 of value (byte) 17// Fill 2 of value (byte) 17// Fill 18 of value (byte) 17// Fill 5 of value (byte) 33// Fill 6 of value (byte) 33// Fill 2 of value (byte) -87// Fill 10 of value (byte) -87// Fill 4 of value (byte) 33// Fill 26 of value (byte) -19// Fill 2 of value (byte) 33// Fill 6 of value (byte) 17// Fill 26 of value (byte) 17// Fill 23 of value (byte) 33// Fill 8 of value (byte) 33// Fill 23 of value (byte) -19// Fill 31 of value (byte) -19// Fill 520 of value (byte) -19// Fill 112 of value (byte) -87// Fill 14 of value (byte) -19// Fill 7297 of value (byte) -19// Fill 12 of value (byte) 33// Fill 2 of value (byte) -19// Fill 26 of value (byte) 33// Fill 22 of value (byte) 33// Fill 47 of value (byte) 33// Fill 288 of value (byte) -19// Fill 2672 of value (byte) 33// Fill 1008 of value (byte) -19// Fill 17 of value (byte) 33// Fill 43007 of value (byte) -19// Fill 6400 of value (byte) 33// Fill 1232 of value (byte) -19// Fill 32 of value (byte) 33// Fill 526 of value (byte) -19/** Returns true if the specified character is a space character ... */// isXML11Space(int):boolean/** Returns true if the specified character is valid. This method ... */// isXML11Valid(int):boolean/** Returns true if the specified character is invalid. ... */// isXML11Invalid(int):boolean/** Returns true if the specified character is valid and permitted outside ... */// isXML11ValidLiteral(int):boolean/** Returns true if the specified character can be considered ... */// isXML11Content(int):boolean// isXML11InternalEntityContent(int):boolean/** Returns true if the specified character is a valid name start ... */// isXML11NameStart(int):boolean/** Returns true if the specified character is a valid name ... */// isXML11Name(int):boolean/** Returns true if the specified character is a valid NCName start ... */// isXML11NCNameStart(int):boolean/** Returns true if the specified character is a valid NCName ... */// isXML11NCName(int):boolean/** Returns whether the given character is a valid ... *//* [5] Name ::= NameStartChar NameChar* *//** Check to see if a string is a valid Name according to [5] ... */// isXML11ValidName(String):boolean/* from the namespace 1.1 rec ... *//** Check to see if a string is a valid NCName according to [4] ... */// isXML11ValidNCName(String):boolean/* [7] Nmtoken ::= (NameChar)+ *//** Check to see if a string is a valid Nmtoken according to [7] ... */// class XML11Char/** The XMLAttributesImpl class is an implementation of the XMLAttributes ... *//** Threshold at which an instance is treated ... *//** Usage count for the attribute table view. ... *//** Attribute count. *//** Attribute information. *//** Provides an alternate view of the attribute specification. *//** Tracks whether each chain in the hash table is stale ... *//** Actual number of buckets in the table view. *//** Indicates whether the table view contains consistent data. *//** Sets whether namespace processing is being performed. This state ... */// setNamespaces(boolean)// XMLAttributes methods/** Adds an attribute. The attribute's non-normalized value of the ... *//** If attributes were removed from the list after the table ... */// The chain is stale.// This must be a unique attribute.// Update table view.// This chain is active.// We need to check if any of the attributes has the same rawname.// Search the table.// This attribute is unique.// Select a new hash function and rehash the table view// if the collision threshold is exceeded.// The current attribute will be processed in the rehash.// Need to set its name first.// Update table view// Duplicate. We still need to find the index.// set values// clear augmentations// addAttribute(QName,String,XMLString)/** Removes all of the attributes. This method will also remove all ... */// removeAllAttributes()/** Removes the attribute at the specified index. ... */// Make the discarded Attribute object available for re-use// by tucking it after the Attributes that are still in use// removeAttributeAt(int)/** Sets the name of the attribute at the specified index. ... */// setName(int,QName)/** Sets the fields in the given QName structure with the values ... */// getName(int,QName)/** Sets the type of the attribute at the specified index. ... */// setType(int,String)/** Sets the value of the attribute at the specified index. This ... */// setValue(int,String)/** Sets the non-normalized value of the attribute at the specified ... */// setNonNormalizedValue(int,String)/** Returns the non-normalized value of the attribute at the specified ... */// getNonNormalizedValue(int):String/** Sets whether an attribute is specified in the instance document ... */// setSpecified(int,boolean)/** Returns true if the attribute is specified in the instance document. ... */// isSpecified(int):boolean// AttributeList and Attributes methods/** Return the number of attributes in the list. ... *//** Look up an attribute's type by index. ... */// getType(int):String/** Look up an attribute's type by XML 1.0 qualified name. ... */// getType(String):String/** Look up an attribute's value by index. ... */// getValue(int):String/** Look up an attribute's value by XML 1.0 qualified name. ... */// getValue(String):String// AttributeList methods/** Return the name of an attribute in this list (by position). ... */// getName(int):String// Attributes methods/** Look up the index of an attribute by XML 1.0 qualified name. ... */// getIndex(String):int/** Look up the index of an attribute by Namespace name. ... */// getIndex(String,String):int/** Look up the index of an attribute by local name only, ... *//** Look up an attribute's local name by index. ... */// getLocalName(int):String/** Look up an attribute's XML 1.0 qualified name by index. ... */// getQName(int):String/** Look up an attribute's type by Namespace name. ... */// getType(String,String):String// getIndexFast(String):int/** Checks for duplicate expanded names (local part and namespace name ... */// If the list is small check for duplicates using pairwise comparison.// If the list is large check duplicates using a hash table.// We don't want this table view to be read if someone calls// addAttribute so we invalidate it up front.// We need to check if any of the attributes has the same name.// getIndexFast(String,String):int/** Returns the value passed in or NMTOKEN if it's an enumerated type. ... *//** Returns the position in the table view ... */// hash(String,String):int/** Purges all elements from the table view. */// Overflow. We actually need to visit the chain state array./** Increases the capacity of the table view. *//** Prepares the table view of the attributes list for use. *//** Prepares the table view of the attributes list for use, ... */// Need to populate the hash table with the attributes we've processed so far./** Returns the prefix of the attribute at the specified index. ... */// REVISIT: The empty string is not entered in the symbol table!// getPrefix(int):String/** Look up an attribute's Namespace URI by index. ... */// getURI(int):String/** Look up an attribute's value by Namespace name and ... */// getValue(String,String):String/** Look up an augmentations by Namespace name. ... *//** Look up an augmentation by XML 1.0 qualified name. ... *//** Look up an augmentations by attributes index. ... *//** Sets the uri of the attribute at the specified index. ... */// getURI(int,QName)// Implementation methods//XMLBufferListener methods/** This method will be invoked by XMLEntityReader before ScannedEntities buffer ... *//** Randomly selects a new hash function and reorganizes the table view ... *//** Attribute information. ... */// basic info/** Name. *//** Type. *//** This will point to the ScannedEntities buffer. *//** Non-normalized value. *//** Specified. *//** Schema ID type. *//** Augmentations information for this attribute. ... */// Additional data for attribute table view/** Pointer to the next attribute in the chain. * */// class Attribute// class XMLAttributesImpl//java imports//xerces imports/** Its better to extend the functionality of existing XMLAttributesImpl and also make it of type Iterator. ... *///pointer to current position./** Creates a new instance of XMLAttributesIteratorImpl *///hasNext()// should this be of type javax.xml.stream.Attribute ?//make sure that only last returned item can be removed.//remove the attribute at current index and lower the current position by 1.//either the next method has been called yet, or the remove method has already been called//after the last call to the next method.//remove/** xxx: should we be doing this way ? Attribute event defines so many functions which doesn't make any sense ... *//* class AttributeImpl extends com.sun.org.apache.xerces.internal.util.XMLAttributesImpl.Attribute implements javax.xml.stream.events.Attribute{ ... *///XMLAttributesIteratorImpl/** <p>The catalog resolver handles the resolution of external ... *//** Internal catalog manager for Apache catalogs. * *//** Internal catalog structure. * *//** An array of catalog URIs. * *//** Indicates whether the list of catalogs has ... *//** Application specified prefer public setting. * *//** Indicates whether the application desires that ... *//** <p>Constructs a catalog resolver with a default configuration.</p> *//** <p>Constructs a catalog resolver with the given ... *//** <p>Returns the initial list of catalog entry files.</p> ... *//** <p>Sets the initial list of catalog entry files. ... *//** <p>Forces the cache of catalog mappings to be cleared.</p> *//** <p>Returns the preference for whether system or public ... *//** <p>Sets the preference for whether system or public ... *//** <p>Returns the preference for whether the literal system ... *//** <p>Sets the preference for whether the literal system ... *//** <p>Resolves an external entity. If the entity cannot be ... */// Attempt to resolve the system identifier against the base URI.// Ignore the exception. Fallback to the literal system identifier./** <p>Resolves a resource using the catalog. This method interprets that ... */// The namespace is useful for resolving namespace aware// grammars such as XML schema. Let it take precedence over// the external identifier if one exists.// Resolve against an external identifier if one exists. This// is useful for resolving DTD external subsets and other// external entities. For XML schemas if there was no namespace// mapping we might be able to resolve a system identifier// specified as a location hint.// Ignore IOException. It cannot be thrown from this method./** <p>Resolves an identifier using the catalog. This method interprets that ... *//** <p>Returns the URI mapping in the catalog for the given ... *//** <p>Returns the URI mapping in the catalog for the given URI ... *//** Initialization. Create a CatalogManager and set all ... *//** Instruct the <code>Catalog</code> to parse each of the ... *//** Attaches the reader to the catalog. *//** This class defines the basic XML character properties. The data ... *//** Character flags. *//** Valid character mask. *//** Space character mask. *//** Name start character mask. *//** Name character mask. *//** Pubid character mask. *//** Content character mask. Special characters are those that can ... *//** NCName start character mask. *//** NCName character mask. */// Code generated by: XMLCharGenerator.// Fill 3 of value (byte) 49// Fill 6 of value (byte) 49// Fill 2 of value (byte) -71// Fill 10 of value (byte) -71// Fill 2 of value (byte) 49// Fill 26 of value (byte) -3// Fill 60 of value (byte) 33// Fill 58 of value (byte) -19// Fill 11 of value (byte) -19// Fill 8 of value (byte) -19// Fill 53 of value (byte) -19// Fill 68 of value (byte) -19// Fill 9 of value (byte) 33// Fill 36 of value (byte) -19// Fill 3 of value (byte) 33// Fill 30 of value (byte) -19// Fill 56 of value (byte) 33// Fill 89 of value (byte) -19// Fill 18 of value (byte) 33// Fill 7 of value (byte) -19// Fill 14 of value (byte) 33// Fill 46 of value (byte) 33// Fill 70 of value (byte) -87// Fill 36 of value (byte) 33// Fill 3 of value (byte) -19// Fill 20 of value (byte) -19// Fill 44 of value (byte) -19// Fill 18 of value (byte) -19// Fill 13 of value (byte) 33// Fill 12 of value (byte) -19// Fill 66 of value (byte) -19// Fill 4 of value (byte) -87// Fill 28 of value (byte) -19// Fill 55 of value (byte) 33// Fill 38 of value (byte) -19// Fill 7 of value (byte) 33// Fill 10 of value (byte) 33// Fill 17 of value (byte) -87// Fill 23 of value (byte) -87// Fill 3 of value (byte) -87// Fill 11 of value (byte) 33// Fill 27 of value (byte) -19// Fill 10 of value (byte) -19// Fill 8 of value (byte) -87// Fill 71 of value (byte) -19// Fill 5 of value (byte) -19// Fill 15 of value (byte) -19// Fill 4 of value (byte) -19// Fill 15 of value (byte) -87// Fill 519 of value (byte) 33// Fill 16 of value (byte) -87// Fill 22 of value (byte) -19// Fill 7 of value (byte) -87// Fill 16 of value (byte) 33// Fill 6 of value (byte) -19// Fill 5 of value (byte) -87// Fill 12 of value (byte) -87// Fill 6 of value (byte) -87// Fill 15 of value (byte) 33// Fill 9 of value (byte) -87// Fill 16 of value (byte) -19// Fill 145 of value (byte) 33// Fill 46 of value (byte) -19// Fill 39 of value (byte) 33// Fill 62 of value (byte) 33// Fill 33 of value (byte) -19// Fill 20 of value (byte) -87// Fill 21 of value (byte) -87// Fill 230 of value (byte) 33// Fill 39 of value (byte) -19// Fill 41 of value (byte) 33// Fill 40 of value (byte) 33// Fill 3078 of value (byte) 33// Fill 156 of value (byte) -19// Fill 90 of value (byte) -19// Fill 13 of value (byte) -19// Fill 211 of value (byte) 33// Fill 13 of value (byte) -87// Fill 68 of value (byte) 33// Fill 81 of value (byte) 33// Fill 3714 of value (byte) 33// Fill 25 of value (byte) 33// Fill 9 of value (byte) -19// Fill 84 of value (byte) -19// Fill 40 of value (byte) -19// Fill 7379 of value (byte) 33// Fill 20902 of value (byte) -19// Fill 3162 of value (byte) 33// Fill 11172 of value (byte) -19// Fill 92 of value (byte) 33// Fill 8190 of value (byte) 33/** Returns true if the specified character is a supplemental character. ... *//** Returns true the supplemental character corresponding to the given ... *//** Returns the high surrogate of a supplemental character ... *//** Returns the low surrogate of a supplemental character ... *//** Returns whether the given character is a high surrogate ... *//** Returns whether the given character is a low surrogate ... */// isValid(int):boolean// isInvalid(int):boolean/** Returns true if the specified character can be considered content. ... */// isContent(int):boolean/** Returns true if the specified character can be considered markup. ... */// isMarkup(int):boolean// isSpace(int):boolean// isNameStart(int):boolean// isName(int):boolean// isNCNameStart(int):boolean// isNCName(int):boolean/** Returns true if the specified character is a valid Pubid ... */// isPubid(int):boolean/* [5] Name ::= (Letter | '_' | ':') (NameChar)* */// isValidName(String):boolean/* from the namespace rec ... */// isValidNCName(String):boolean// encodings/** Returns true if the encoding name is a valid IANA encoding. ... */// isValidIANAEncoding(String):boolean/** Returns true if the encoding name is a valid Java encoding. ... *//** Trims space characters as defined by production [3] in ... */// trim(String):String// class XMLChar/** Default implementation of {@link XMLDocumentFilter} ... *//** <p>This class is an implementation of the XMLEntityDescription ... *//** Constructs an empty entity description. *//** Constructs an entity description. ... */// <init>(String,String,String,String,String)/** Constructs a resource identifier. ... */// <init>(String,String,String,String,String,String)/** The name of the entity. */// setEntityName(String)// getEntityName():String/** <p>Sets the values of this entity description.</p> ... */// setDescription(String,String,String,String,String)// setDescription(String,String,String,String,String,String)/** <p>Clears the values.</p> *//** Returns a hash code for this object. */// hashCode():int// XMLEntityDescriptionImpl/** <p>A structure that represents an error code, characterized by ... *//** message key * *//** <p>Constructs an XMLErrorCode with the given domain and key.</p> ... *//** <p>Convenience method to set the values of an XMLErrorCode.</p> ... *//** <p>Indicates whether some other object is equal to this XMLErrorCode.</p> ... *//** <p>Returns a hash code value for this XMLErrorCode.</p> ... *//** Stores grammars in a pool associated to a specific key. This grammar pool ... */// whether this pool is locked// the number of grammars in the pool//print(temp.getGrammarDescription());//print(desc);/* For DTD build we can't import here XSDDescription. Thus, this method is commented out.. *//* public void print(XMLGrammarDescription description){ ... */// class XMLGrammarPoolImpl/** {@link Source} that represents an {@link XMLInputSource}. ... *//** the actual source information. *//** The XMLResourceIdentifierImpl class is an implementation of the ... *//** The public identifier. *//** The literal system identifier. *//** The base system identifier. *//** The expanded system identifier. *//** The namespace of the resource. *//** Constructs an empty resource identifier. *//** Sets the values of the resource identifier. */// setValues(String,String,String,String)// setValues(String,String,String,String,String)/** Sets the public identifier. *//** Sets the literal system identifier. */// setLiteralSystemId(String)/** Sets the base system identifier. */// setBaseSystemId(String)/** Sets the expanded system identifier. */// setExpandedSystemId(String)/** Sets the namespace of the resource. */// setNamespace(String)// XMLResourceIdentifier methods/** Returns the base URI against which the literal SystemId is to be resolved. *//** Returns the namespace of the resource. */// getNamespace():String// class XMLResourceIdentifierImpl/** XMLString is a structure used to pass character arrays. However, ... *//** Default buffer size (32). *//** Constructs a string buffer from a char. */// <init>(char)/** Constructs a string buffer from a String. *//** Constructs a string buffer from the specified character array. */// <init>(char[],int,int)/** Constructs a string buffer from the specified XMLString. */// <init>(XMLString)/** Clears the string buffer. *//** append ... */// append(char)// append(String)//making the code more robust as it would handle null or 0 length data,//add the data only when it contains some thing// append(char[],int,int)// append(XMLString)// class XMLStringBuffer/** All internalized xml symbols. They can be compared using "==". ... */// public constructor.//==========================// Commonly used strings/** The empty string. */// Namespace prefixes/uris/** The internalized "xml" prefix. *//** The internalized "xmlns" prefix. */// DTD symbols/** Symbol: "ANY". *//** Symbol: "CDATA". *//** Symbol: "ID". *//** Symbol: "IDREF". *//** Symbol: "IDREFS". *//** Symbol: "ENTITY". *//** Symbol: "ENTITIES". *//** Symbol: "NMTOKEN". *//** Symbol: "NMTOKENS". *//** Symbol: "NOTATION". *//** Symbol: "ENUMERATION". *//** Symbol: "#IMPLIED. *//** Symbol: "#REQUIRED". *//** Symbol: "#FIXED". *//** Returns true if debug has been enabled. */// Allow simply setting the prop to turn on debug// isDebugEnabled()// ClassLoader (always look in system ClassLoader if Xerces/** Create an instance of a class using the same classloader for the ObjectFactory by default ... *//** Find a Class using the same classloader for the ObjectFactory by default ... *///throw security exception if the calling thread is not allowed to access the package//restrict the access to package as speicified in java.security policy//use the bootstrap ClassLoader./* Copyright 2002,2004 The Apache Software Foundation. ... *//** This class is duplicated for each subpackage so keep it in sync. ... *//** Return resource using the same classloader for the ObjectFactory by default ... *//* DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER. ... *//** A helper for analyzing entity expansion limits ... *//** Max value accumulated for each property *//** Names of the entities corresponding to their max values *//** Total value of accumulated entities *//** Maintain values of the top 10 elements in the process of parsing *//** Add the value to the current max count for the specified property ... *//** Add the value to the current count by the index of the property ... *//** Return the value of the current max count for the specified property ... *//** Return the total value accumulated so far ... *//** Return the current max value (count or length) by the index of a property ... *//** Stop tracking the entity ... *//** Resets the current value of the specified limit. ... *//** This class manages standard and implementation-specific limitations. *//** Flag indicating if secure processing is set *//** Return the state of secure processing ... *//** Check if there's no limit defined by the Security Manager ... *//** Check if the size (length or count) of the specified limit property is ... *//** Check if the value (length or count) of the specified limit property is ... *//** Check against cumulated value ... *//** Convert a value set through setProperty to XMLSecurityManager. ... *//** This implementation of NamespaceContext has the ability to maintain multiple ... */// this saves us from having a copy of each of these in fNamespace for each scope/** Only resets the current scope -- all namespaces defined in lower scopes ... *//** Begins a new scope.  None of the previous namespace bindings will be used, ... *//** Pops the current scope.  The namespace bindings from the new current scope ... *//** This class is used for reading resources requested in &lt;include&gt; elements in ... *//** Construct the XIncludeReader using the XMLInputSource and XIncludeHandler. ... *//** Returns true if the specified character is a valid XML character ... *//* Copyright 2003-2005 The Apache Software Foundation. ... */// Top Level Information Items have [included] property in infoset/** The identifier for the Augmentation that contains the current base URI */// used for adding [base URI] attributes// used for adding [language] attributes// Processing States// we go into this state after a successful include (thus we ignore the children// of the include) or after a fallback// we go into this state after a failed include.  If we don't encounter a fallback// before we reach the end include tag, it's a fatal error/** property identifier: XML security property manager. */// instance variables// for XMLDocumentFilter// for XMLDTDFilter// for XIncludeHandler// for buffer size in XIncludeTextReader// It "feels wrong" to store this value here.  However,// calculating it can be time consuming, so we cache it.// It's never going to change in the lifetime of this XIncludeHandler// we cache the child parser configuration, so we don't have to re-create// the objects when the parser is re-used// The cached child parser configuration, may contain a// XInclude or XPointer Handler.  Cache both these// The XPointerProcessor// these are needed for text include processing// these are needed for XML Base processing// these are needed for Language Fixup// used for passing features on to child XIncludeHandler objects// The current element depth.  We start at depth 0 (before we've reached any elements).// The first element is at depth 1.// The current element depth of the result infoset.// this value must be at least 1// Used to ensure that fallbacks are always children of include elements,// and that include elements are never children of other include elements.// An index contains true if the ancestor of the current element which resides// at that depth was an include element.// Ensures that only one fallback element can be at a single depth.// An index contains true if we have seen any fallback elements at that depth,// and it is only reset to false when the end tag of the parent is encountered.// The state of the processor at each given depth.// buffering the necessary DTD events// flags which control whether base URI or language fixup is performed.// for SAX compatibility.// Has the value of the ALLOW_UE_AND_NOTATION_EVENTS feature// track whether a DTD is being parsed// track whether the root element of the result infoset has been processed// track whether the child config needs its features refreshed// REVISIT: Find a better method for maintaining// the state of the XInclude processor. These arrays// can potentially grow quite large. Cleaning them// out on reset may be very time consuming. -- mrglavas// clear the previous settings from the arrays// if parser settings have not changed return.// parser settings changed. Need to refresh features on child co                